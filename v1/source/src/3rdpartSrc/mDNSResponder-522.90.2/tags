!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 A,B,C,D;$/;"	m	struct:MD5state_st
AFX_ABOUTDIALOG_H__4B8A04B2_9735_4F4A_AFCA_15F85FB3D763__INCLUDED_	mDNSWindows/DNSServiceBrowser/Windows/Sources/AboutDialog.h	19;"	d
AFX_ADMIN_H__8663733F_6A15_439F_B568_F5A0125CD572__INCLUDED_	mDNSWindows/DNSServiceBrowser/Windows/Sources/Application.h	19;"	d
AFX_APPLICATION_H__E2E51302_D643_458E_A7A5_5157233D1E5C__INCLUDED_	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/Application.h	19;"	d
AFX_BROWSERDIALOG_H__DECC5C82_C1C6_4630_B8D5_E1DDE570A061__INCLUDED_	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.h	19;"	d
AFX_CHOOSERDIALOG_H__AC258704_B307_4901_9F98_A0AC022FD8AC__INCLUDED_	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	19;"	d
AFX_STDAFX_H__424305D2_0A97_4AA0_B9B1_A7D90D18EBA0__INCLUDED_	mDNSWindows/DNSServiceBrowser/Windows/Sources/StdAfx.h	19;"	d
AFX_STDAFX_H__7F91E52B_CF39_429D_837D_599CE0B2B3D6__INCLUDED_	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/StdAfx.h	19;"	d
AF_DNSSD	mDNSShared/dnssd_ipc.h	78;"	d
AF_DNSSD	mDNSShared/dnssd_ipc.h	84;"	d
AF_LOCAL	mDNSShared/dnsextd.c	60;"	d	file:
AF_LOCAL	mDNSShared/dnssd_ipc.h	96;"	d
AF_MDNS	mDNSShared/dnssd_clientstub.c	54;"	d	file:
AF_MDNS	mDNSShared/dnssd_clientstub.c	90;"	d	file:
AIRDROP_ANCHOR_PATH	mDNSMacOSX/P2PPacketFilter.c	28;"	d	file:
ALIASES_INITIAL_SIZE	mDNSWindows/mdnsNSP/mdnsNSP.c	80;"	d	file:
ALL_INTERFACES	mDNSShared/Java/DNSSD.java	/^    public static final int     ALL_INTERFACES = 0;$/;"	f	class:DNSSD
ALREADY_REGISTERED	mDNSShared/Java/DNSSDException.java	/^    public static final int		ALREADY_REGISTERED        = -65547;$/;"	f	class:DNSSDException
ANON_NSEC3_ITERATIONS	mDNSCore/anonymous.c	28;"	d	file:
ANSWER_REMOTE_HOSTNAME_QUERIES	mDNSCore/mDNSDebug.h	49;"	d
APPOBJ	mDNSPosix/Makefile	/^APPOBJ     = $(COMMONOBJ) $(OBJDIR)\/ExampleClientApp.c.o$/;"	m
ARD_AsNumber	mDNSCore/mDNS.c	13877;"	d	file:
ARDisplayString	mDNSCore/mDNSEmbeddedAPI.h	2889;"	d
ARListElem	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct ARListElem$/;"	s
ARListElem	mDNSCore/mDNSEmbeddedAPI.h	/^} ARListElem;$/;"	t	typeref:struct:ARListElem
ARType	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecType ARType;                 \/\/ LocalOnly, P2P or Normal ?$/;"	m	struct:AuthRecord_struct
ASSIGNLINK	mDNSShared/GenLinkedList.c	32;"	d	file:
AUTH_GROUP_NAME_SIZE	mDNSCore/mDNSEmbeddedAPI.h	1446;"	d
AUTH_HASH_SLOTS	mDNSCore/mDNSEmbeddedAPI.h	102;"	d
AUTH_HASH_SLOTS	mDNSCore/mDNSEmbeddedAPI.h	1459;"	d
AUTO_CALLBACKS	mDNSShared/Java/JNISupport.c	29;"	d	file:
AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED	mDNSMacOSX/DNSServiceDiscovery.c	21;"	d	file:
AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED	mDNSMacOSX/DNSServiceDiscovery.c	22;"	d	file:
AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3	mDNSMacOSX/DNSServiceDiscovery.c	23;"	d	file:
AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3	mDNSMacOSX/DNSServiceDiscovery.c	24;"	d	file:
AWDLInterfaceID	mDNSMacOSX/mDNSMacOSX.c	/^static mDNSInterfaceID AWDLInterfaceID;$/;"	v	file:
AbortBlockedClient	mDNSMacOSX/daemon.c	484;"	d	file:
AbortClient	mDNSMacOSX/daemon.c	/^mDNSlocal void AbortClient(mach_port_t ClientMachPort, void *m)$/;"	f
AbortClientWithLogMessage	mDNSMacOSX/daemon.c	/^mDNSlocal void AbortClientWithLogMessage(mach_port_t c, char *reason, char *msg, void *m)$/;"	f
AbortUnlinkAndFree	mDNSShared/uds_daemon.c	/^mDNSlocal void AbortUnlinkAndFree(request_state *req)$/;"	f
AboutDialog	mDNSWindows/DNSServiceBrowser/Windows/Sources/AboutDialog.cpp	/^AboutDialog::AboutDialog(CWnd* pParent \/*=NULL*\/)$/;"	f	class:AboutDialog
AboutDialog	mDNSWindows/DNSServiceBrowser/Windows/Sources/AboutDialog.h	/^class	AboutDialog : public CDialog$/;"	c
AbsoluteMaxDNSMessageData	mDNSCore/mDNSEmbeddedAPI.h	500;"	d
AbsoluteMaxDNSMessageData	mDNSCore/mDNSEmbeddedAPI.h	98;"	d
AccelerateThisQuery	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool AccelerateThisQuery(mDNS *const m, DNSQuestion *q)$/;"	f
AcceptTCPConnection	mDNSShared/dnsextd.c	/^AcceptTCPConnection$/;"	f
AckConfigd	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void AckConfigd(mDNS *const m, dns_config_t *config)$/;"	f
AcknowledgeRecord	mDNSCore/mDNS.c	/^mDNSlocal void AcknowledgeRecord(mDNS *const m, AuthRecord *const rr)$/;"	f
Acknowledged	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 Acknowledged;                \/\/ Set if we've given the success callback to the client$/;"	m	struct:AuthRecord_struct
ActivateDNSProxy	mDNSMacOSX/Private/xpc_services.c	/^mDNSlocal void ActivateDNSProxy(mDNSu32 IpIfArr[MaxIp], mDNSu32 OpIf, mDNSBool proxy_off)$/;"	f
ActivateLocalProxy	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mStatus ActivateLocalProxy(mDNS *const m, NetworkInterfaceInfo *const intf)  \/\/ Called with the lock held$/;"	f
ActivateUnicastQuery	mDNSCore/mDNS.c	/^mDNSlocal void ActivateUnicastQuery(mDNS *const m, DNSQuestion *const question, mDNSBool ScheduleImmediately)$/;"	f
ActivateUnicastRegistration	mDNSCore/mDNS.c	/^mDNSexport void ActivateUnicastRegistration(mDNS *const m, AuthRecord *const rr)$/;"	f
ActiveDirectoryPrimaryDomain	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport domainname ActiveDirectoryPrimaryDomain;$/;"	v
ActiveDirectoryPrimaryDomainLabelCount	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int ActiveDirectoryPrimaryDomainLabelCount;$/;"	v
ActiveDirectoryPrimaryDomainServer	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSAddr ActiveDirectoryPrimaryDomainServer;$/;"	v
ActiveQuestion	mDNSCore/mDNSEmbeddedAPI.h	1851;"	d
ActiveStatTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 ActiveStatTime;             \/\/ Total time awake\/gathering statistics for this log period.$/;"	m	struct:mDNS_struct
ActivityStat	mDNSPosix/NetMonitor.c	/^typedef struct ActivityStat_struct ActivityStat;$/;"	t	typeref:struct:ActivityStat_struct	file:
ActivityStat_struct	mDNSPosix/NetMonitor.c	/^struct ActivityStat_struct$/;"	s	file:
Add	mDNSCore/CryptoAlg.h	/^    mStatus (*Add)(AlgContext *ctx, const void *data, mDNSu32 len);$/;"	m	struct:__anon103
AddAdditionalsToResponseList	mDNSCore/mDNS.c	/^mDNSlocal void AddAdditionalsToResponseList(mDNS *const m, AuthRecord *ResponseRecords, AuthRecord ***nrpp, const mDNSInterfaceID InterfaceID)$/;"	f
AddApplet	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApp::AddApplet( CCPApplet * applet )$/;"	f	class:CCPApp
AddAutoBrowseDomain	mDNSShared/uds_daemon.c	/^mDNSlocal void AddAutoBrowseDomain(const mDNSu32 uid, const domainname *const name)$/;"	f
AddDomainToBrowser	mDNSMacOSX/daemon.c	/^mDNSlocal mStatus AddDomainToBrowser(DNSServiceBrowser *browser, const domainname *d)$/;"	f
AddEDNS0Option	mDNSCore/dnsproxy.c	/^mDNSlocal mDNSu8 *AddEDNS0Option(mDNS *const m, mDNSu8 *ptr, mDNSu8 *limit)$/;"	f
AddEventDictionary	mDNSMacOSX/BonjourEvents.c	/^void AddEventDictionary(CFDictionaryRef eventDict, CFMutableDictionaryRef allEventsDictionary, NetBrowserInfo* key)$/;"	f
AddEventToPlugin	mDNSMacOSX/BonjourEvents.c	/^void AddEventToPlugin(BonjourUserEventsPlugin* plugin, CFNumberRef launchdToken, CFDictionaryRef eventParameters)$/;"	f
AddHost	mDNSPosix/NetMonitor.c	/^mDNSlocal HostEntry *AddHost(const mDNSAddr *addr, HostList *list)$/;"	f
AddInterfaceToList	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal NetworkInterfaceInfoOSX *AddInterfaceToList(mDNS *const m, struct ifaddrs *ifa, mDNSs32 utc)$/;"	f
AddInterfaceToList	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal NetworkInterfaceInfoVxWorks * AddInterfaceToList( mDNS *const inMDNS, struct ifaddrs *inIFA, mDNSs32 inUTC )$/;"	f
AddNSECSForCacheRecord	mDNSCore/nsec.c	/^mDNSexport mDNSBool AddNSECSForCacheRecord(mDNS *const m, CacheRecord *crlist, CacheRecord *negcr, mDNSu8 rcode)$/;"	f
AddNSECSForCacheRecord	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSBool AddNSECSForCacheRecord(mDNS *const m, CacheRecord *crlist, CacheRecord *negcr, mDNSu8 rcode)$/;"	f
AddNSECSForCacheRecord	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSBool AddNSECSForCacheRecord(mDNS *const m, CacheRecord *crlist, CacheRecord *negcr, mDNSu8 rcode)$/;"	f
AddNewClientTunnel	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void AddNewClientTunnel(mDNS *const m, DNSQuestion *const q)$/;"	f
AddOneItem	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal int AddOneItem(char *buf, int bufsz, char *data, int *currlen)$/;"	f
AddRRSetToVerifier	mDNSCore/dnssec.c	/^mDNSexport mStatus AddRRSetToVerifier(DNSSECVerifier *dv, const ResourceRecord *const rr, RRVerifier *rv, RRVerifierSet set)$/;"	f
AddRecord	mDNSShared/Java/DNSSD.java	/^	protected native int	AddRecord( int flags, int rrType, byte[] rData, int ttl, AppleDNSRecord destObj);$/;"	m	class:AppleRegistration
AddRecord	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSService::AddRecord$/;"	f	class:DNSService
AddRecord	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::AddRecord(DNSSDFlags flags, DNSSDRRType rrtype, VARIANT rdata, ULONG ttl, IDNSSDRecord ** record)$/;"	f	class:CDNSSDService
AddRecordToResponseList	mDNSCore/mDNS.c	/^mDNSlocal void AddRecordToResponseList(AuthRecord ***nrpp, AuthRecord *rr, AuthRecord *add)$/;"	f
AddRef	Clients/ExplorerPlugin/ClassFactory.cpp	/^STDMETHODIMP_( DWORD )	ClassFactory::AddRef( void )$/;"	f	class:ClassFactory
AddRef	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP_( DWORD )	ExplorerBar::AddRef( void )$/;"	f	class:ExplorerBar
AddRef	mDNSMacOSX/BonjourEvents.c	/^static ULONG AddRef(void* instance)$/;"	f	file:
AddResourceRecords	mDNSCore/dnsproxy.c	/^mDNSlocal mDNSu8 *AddResourceRecords(mDNS *const m, DNSProxyClient *pc, mDNSu8 **prevptr, mStatus *error)$/;"	f
AddSOAPArguments	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal unsigned int AddSOAPArguments(char *const buf, const unsigned int maxlen, const int numArgs, const Property *const a)$/;"	f
AddServiceInstance	mDNSMacOSX/daemon.c	/^mDNSlocal mStatus AddServiceInstance(DNSServiceRegistration *x, const domainname *domain)$/;"	f
AddSourceToEventLoop	mDNSShared/dnsextd.c	/^mDNSlocal mStatus AddSourceToEventLoop( DaemonInfo * self, TCPSocket *sock, EventCallback callback, void *context )$/;"	f
AddToHead	mDNSShared/GenLinkedList.c	/^void        AddToHead( GenLinkedList *pList, void *elem)$/;"	f
AddToTail	mDNSShared/GenLinkedList.c	/^void        AddToTail( GenLinkedList *pList, void *elem)$/;"	f
AddTrustAnchor	mDNSMacOSX/DNSSECSupport.c	/^mDNSlocal void AddTrustAnchor(mDNS *const m, const domainname *zone, mDNSu16 keytag, mDNSu8 alg, mDNSu8 digestType, int diglen,$/;"	f
Additional1	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord     *Additional1;        \/\/ Recommended additional record to include in response (e.g. SRV for PTR record)$/;"	m	struct:AuthRecord_struct
Additional2	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord     *Additional2;        \/\/ Another additional (e.g. TXT for PTR record)$/;"	m	struct:AuthRecord_struct
Addr	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr Addr;                      \/\/ Discovered result: Address of Target host from SRV record$/;"	m	struct:ZoneData_struct
Addr	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr Addr;$/;"	m	struct:tcpInfo_t
AddrRequiresPPPConnection	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool AddrRequiresPPPConnection(const struct sockaddr *addr)$/;"	f
Address	Clients/SimpleChat.NET/SimpleChat.cs	/^        public IPAddress Address;$/;"	f	class:SimpleChat.NET.PeerData
Address	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr Address;                   \/\/ router address$/;"	m	struct:tcpLNTInfo_struct
AddressMatchesFilterList	mDNSPosix/NetMonitor.c	/^mDNSlocal mDNSBool AddressMatchesFilterList(const mDNSAddr *srcaddr)$/;"	f
AddressProxy	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr AddressProxy;              \/\/ For reverse-mapping Sleep Proxy PTR records, address in question$/;"	m	struct:AuthRecord_struct
AddressToIndexAndMask	mDNSWindows/mDNSWin32.c	/^AddressToIndexAndMask( struct sockaddr * addr, uint32_t * ifIndex, struct sockaddr * mask  )$/;"	f
AdvanceIconPosition	mDNSMacOS9/ShowInitIcon.c	/^static void AdvanceIconPosition (Rect* iconRect)$/;"	f	file:
Advertise	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 Advertise;                   \/\/ False if you are only searching on this interface$/;"	m	struct:NetworkInterfaceInfo_struct
AdvertiseAllInterfaceRecords	mDNSCore/mDNS.c	/^mDNSlocal void AdvertiseAllInterfaceRecords(mDNS *const m)$/;"	f
AdvertiseHostname	mDNSCore/uDNS.c	/^mDNSlocal void AdvertiseHostname(mDNS *m, HostnameInfo *h)$/;"	f
AdvertiseInterface	mDNSCore/mDNS.c	/^mDNSlocal void AdvertiseInterface(mDNS *const m, NetworkInterfaceInfo *set)$/;"	f
AdvertiseLocalAddresses	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool AdvertiseLocalAddresses;$/;"	m	struct:mDNS_struct
AdvertisedServicesChangedNotification	mDNSWindows/SystemService/Service.c	/^AdvertisedServicesChangedNotification( HANDLE event, void *context )$/;"	f
AdvertisedV4	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr AdvertisedV4;                  \/\/ IPv4 address pointed to by hostname$/;"	m	struct:mDNS_struct
AdvertisedV6	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr AdvertisedV6;                  \/\/ IPv6 address pointed to by hostname$/;"	m	struct:mDNS_struct
AlgAdd	mDNSCore/CryptoAlg.c	/^mDNSexport mStatus AlgAdd(AlgContext *ctx, const void *data, mDNSu32 len)$/;"	f
AlgContext	mDNSCore/CryptoAlg.h	/^} AlgContext;$/;"	t	typeref:struct:__anon102
AlgCreate	mDNSCore/CryptoAlg.c	/^mDNSexport AlgContext *AlgCreate(AlgType type, mDNSu8 alg)$/;"	f
AlgDestroy	mDNSCore/CryptoAlg.c	/^mDNSexport mStatus AlgDestroy(AlgContext *ctx)$/;"	f
AlgEncode	mDNSCore/CryptoAlg.c	/^mDNSexport mDNSu8* AlgEncode(AlgContext *ctx)$/;"	f
AlgFinal	mDNSCore/CryptoAlg.c	/^mDNSexport mStatus AlgFinal(AlgContext *ctx, void *data, mDNSu32 len)$/;"	f
AlgFuncs	mDNSCore/CryptoAlg.h	/^} AlgFuncs;$/;"	t	typeref:struct:__anon103
AlgLength	mDNSCore/CryptoAlg.c	/^mDNSexport mDNSu32 AlgLength(AlgContext *ctx)$/;"	f
AlgType	mDNSCore/CryptoAlg.h	/^} AlgType;$/;"	t	typeref:enum:__anon101
AlgVerify	mDNSCore/CryptoAlg.c	/^mDNSexport mStatus AlgVerify(AlgContext *ctx, mDNSu8 *key, mDNSu32 keylen, mDNSu8 *signature, mDNSu32 siglen)$/;"	f
AlgorithmSupported	mDNSCore/dnssec.c	/^mDNSlocal mDNSBool AlgorithmSupported(rdataDS *ds)$/;"	f
AlignDown	mDNSShared/CommonServices.h	638;"	d
AlignUp	mDNSShared/CommonServices.h	646;"	d
AllDNSAdminGroup	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSv4Addr AllDNSAdminGroup   = { { 239, 255, 255, 251 } };$/;"	v
AllDNSLinkGroup_v4	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSAddr AllDNSLinkGroup_v4 = { mDNSAddrType_IPv4, { { { 224,   0,   0, 251 } } } };$/;"	v
AllDNSLinkGroup_v6	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSAddr AllDNSLinkGroup_v6 = { mDNSAddrType_IPv6, { { { 0xFF,0x02,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFB } } } };$/;"	v
AllHosts_v4	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSv4Addr AllHosts_v4        = { { 224,   0,   0,   1 } };  \/\/ For NAT-PMP & PCP Annoucements$/;"	v
AllHosts_v6	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSv6Addr AllHosts_v6        = { { 0xFF,0x02,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x01 } };$/;"	v
AllHosts_v6_Eth	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSEthAddr AllHosts_v6_Eth    = { { 0x33, 0x33, 0x00, 0x00, 0x00, 0x01 } };$/;"	v
Alloc	mDNSMacOSX/BonjourEvents.c	/^static BonjourUserEventsPlugin* Alloc(CFUUIDRef factoryID)$/;"	f	file:
AllocAndCopy	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal void AllocAndCopy(mDNSu8 **const dst, const mDNSu8 *const src)$/;"	f
AllocateAnonInfo	mDNSCore/anonymous.c	/^mDNSexport  AnonymousInfo *AllocateAnonInfo(const domainname *service, const mDNSu8 *data, int len, const ResourceRecord *rr)$/;"	f
AllocateAnonInfo	mDNSCore/anonymous.c	/^mDNSexport AnonymousInfo * AllocateAnonInfo(const domainname *service, const mDNSu8 *AnonData, int len, const ResourceRecord *rr)$/;"	f
AllocateDNSSECVerifier	mDNSCore/dnssec.c	/^mDNSexport DNSSECVerifier *AllocateDNSSECVerifier(mDNS *const m, const domainname *name, mDNSu16 rrtype, mDNSInterfaceID InterfaceID,$/;"	f
AllocateRRVerifier	mDNSCore/dnssec.c	/^mDNSexport RRVerifier* AllocateRRVerifier(const ResourceRecord *const rr, mStatus *status)$/;"	f
AllocateSubTypes	mDNSShared/uds_daemon.c	/^mDNSexport AuthRecord *AllocateSubTypes(mDNSs32 NumSubTypes, char *p, char **AnonData)$/;"	f
AllowRemoteQuery	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 AllowRemoteQuery;            \/\/ Set if we allow hosts not on the local link to query this record$/;"	m	struct:AuthRecord_struct
AllowSleepNow	mDNSMacOSX/daemon.c	/^mDNSlocal mDNSBool AllowSleepNow(mDNS *const m, mDNSs32 now)$/;"	f
AllowedRRSpace	mDNSCore/DNSCommon.h	197;"	d
AlwaysAppendSearchDomains	mDNSShared/uds_daemon.c	/^mDNSBool AlwaysAppendSearchDomains = mDNSfalse;$/;"	v
AnalyseHost	mDNSPosix/NetMonitor.c	/^mDNSlocal void AnalyseHost(mDNS *const m, HostEntry *entry, const mDNSInterfaceID InterfaceID)$/;"	f
AnnounceCount	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 AnnounceCount;               \/\/ Number of announcements remaining (kDNSRecordTypeShared)$/;"	m	struct:AuthRecord_struct
AnnounceOwner	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 AnnounceOwner;              \/\/ After waking from sleep, include OWNER option in packets until this time$/;"	m	struct:mDNS_struct
AnonData	mDNSCore/mDNSEmbeddedAPI.h	/^    const mDNSu8        *AnonData;$/;"	m	struct:ServiceRecordSet_struct
AnonData	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 *AnonData;$/;"	m	struct:__anon72
AnonData	mDNSShared/uds_daemon.c	/^            const mDNSu8 *AnonData;$/;"	m	struct:request_state::__anon124::__anon125	file:
AnonData	mDNSShared/uds_daemon.c	/^            mDNSBool AnonData;$/;"	m	struct:request_state::__anon124::__anon126	file:
AnonDataLen	mDNSCore/mDNSEmbeddedAPI.h	/^    int AnonDataLen;$/;"	m	struct:__anon72
AnonDataToString	mDNSShared/uds_daemon.c	/^mDNSlocal char *AnonDataToString(const mDNSu8 *ad, int adlen, char *adstr, int adstrlen)$/;"	f
AnonInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    AnonymousInfo        *AnonInfo;         \/\/ Anonymous Information$/;"	m	struct:DNSQuestion_struct
AnonInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    AnonymousInfo   *AnonInfo;          \/\/ Anonymous Information$/;"	m	struct:ResourceRecord_struct
AnonInfoAnswersQuestion	mDNSCore/anonymous.c	/^mDNSexport int AnonInfoAnswersQuestion(const ResourceRecord *const rr, const DNSQuestion *const q)$/;"	f
AnonInfoAnswersQuestion	mDNSShared/dnsextd.c	/^int AnonInfoAnswersQuestion(const ResourceRecord *const rr, const DNSQuestion *const q) { ( void ) rr; ( void ) q; return 1;}$/;"	f
AnonInfoSpace	mDNSCore/mDNS.c	/^mDNSlocal int AnonInfoSpace(AnonymousInfo *info)$/;"	f
AnonInfoToString	mDNSShared/uds_daemon.c	/^mDNSlocal char *AnonInfoToString(AnonymousInfo *ai, char *anonstr, int anstrlen)$/;"	f
AnonymousInfo	mDNSCore/mDNSEmbeddedAPI.h	/^} AnonymousInfo;$/;"	t	typeref:struct:__anon72
AnonymousRacoonConfig	mDNSMacOSX/mDNSMacOSX.c	/^static DomainAuthInfo* AnonymousRacoonConfig = mDNSNULL;$/;"	v	file:
AnswerAllLocalQuestionsWithLocalAuthRecord	mDNSCore/mDNS.c	/^mDNSlocal void AnswerAllLocalQuestionsWithLocalAuthRecord(mDNS *const m, AuthRecord *rr, QC_result AddRecord)$/;"	f
AnswerCurrentQuestionWithResourceRecord	mDNSCore/mDNS.c	/^mDNSexport void AnswerCurrentQuestionWithResourceRecord(mDNS *const m, CacheRecord *const rr, const QC_result AddRecord)$/;"	f
AnswerInterfaceAnyQuestionsWithLocalAuthRecord	mDNSCore/mDNS.c	/^mDNSlocal void AnswerInterfaceAnyQuestionsWithLocalAuthRecord(mDNS *const m, AuthRecord *rr, QC_result AddRecord)$/;"	f
AnswerList	mDNSShared/dnsextd.h	/^    AnswerListElem *AnswerList;$/;"	m	struct:LLQEntry
AnswerListElem	mDNSShared/dnsextd.h	/^typedef struct AnswerListElem$/;"	s
AnswerListElem	mDNSShared/dnsextd.h	/^} AnswerListElem;$/;"	t	typeref:struct:AnswerListElem
AnswerLocalQuestionWithLocalAuthRecord	mDNSCore/mDNS.c	/^mDNSlocal void AnswerLocalQuestionWithLocalAuthRecord(mDNS *const m, AuthRecord *rr, QC_result AddRecord)$/;"	f
AnswerNewLocalOnlyQuestion	mDNSCore/mDNS.c	/^mDNSlocal void AnswerNewLocalOnlyQuestion(mDNS *const m)$/;"	f
AnswerNewQuestion	mDNSCore/mDNS.c	/^mDNSlocal void AnswerNewQuestion(mDNS *const m)$/;"	f
AnswerQuestion	mDNSShared/dnsextd.c	/^mDNSlocal CacheRecord *AnswerQuestion(DaemonInfo *d, AnswerListElem *e)$/;"	f
AnswerQuestionByFollowingCNAME	mDNSCore/mDNS.c	/^mDNSexport void AnswerQuestionByFollowingCNAME(mDNS *const m, DNSQuestion *q, ResourceRecord *rr)$/;"	f
AnswerQuestionWithLORecord	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool AnswerQuestionWithLORecord(mDNS *const m, DNSQuestion *q, mDNSBool checkOnly)$/;"	f
AnswerSuppressedQuestion	mDNSCore/mDNS.c	/^mDNSlocal void AnswerSuppressedQuestion(mDNS *const m, DNSQuestion *q)$/;"	f
AnswerTable	mDNSShared/dnsextd.h	/^    AnswerListElem *AnswerTable[LLQ_TABLESIZE];$/;"	m	struct:__anon116
AnswerTableCount	mDNSShared/dnsextd.h	/^    int AnswerTableCount;$/;"	m	struct:__anon116
AnsweredLocalQ	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 AnsweredLocalQ;              \/\/ Set if this AuthRecord has been delivered to any local question (LocalOnly or mDNSInterface_Any)$/;"	m	struct:AuthRecord_struct
Answers	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Answers;$/;"	m	struct:ServiceInfoQuery_struct
AnyLocalRecordReady	mDNSCore/DNSCommon.c	/^mDNSlocal AuthRecord *AnyLocalRecordReady(const mDNS *const m)$/;"	f
AnyTypeRecordAnswersQuestion	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool AnyTypeRecordAnswersQuestion(const ResourceRecord *const rr, const DNSQuestion *const q)$/;"	f
AppCallBack	mDNSMacOSX/Private/dns_services.c	/^    void              *AppCallBack;  \/\/ Callback function ptr for Client$/;"	m	struct:_DNSXConnRef_t	file:
AppCallback	mDNSShared/dnssd_clientstub.c	/^    DNSServiceRegisterRecordReply AppCallback;$/;"	m	struct:_DNSRecordRef_t	file:
AppCallback	mDNSShared/dnssd_clientstub.c	/^    void             *AppCallback;      \/\/ Client callback function and context$/;"	m	struct:_DNSServiceRef_t	file:
AppCallback	mDNSShared/dnssd_clientstub.c	/^    void             *AppCallback;      \/\/ Client callback function and context$/;"	m	struct:__anon139	file:
AppContext	mDNSShared/dnssd_clientstub.c	/^    void             *AppContext;$/;"	m	struct:_DNSServiceRef_t	file:
AppContext	mDNSShared/dnssd_clientstub.c	/^    void             *AppContext;$/;"	m	struct:__anon139	file:
AppContext	mDNSShared/dnssd_clientstub.c	/^    void *AppContext;$/;"	m	struct:_DNSRecordRef_t	file:
AppearanceTime	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSs32 AppearanceTime;                     \/\/ Time this interface appeared most recently in getifaddrs list$/;"	m	struct:NetworkInterfaceInfoOSX_struct
AppendDNSNameString	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *AppendDNSNameString(domainname *const name, const char *cstring)$/;"	f
AppendDNameListElem	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void AppendDNameListElem(DNameListElem ***List, mDNSu32 uid, domainname *name)$/;"	f
AppendDomainLabel	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *AppendDomainLabel(domainname *const name, const domainlabel *const label)$/;"	f
AppendDomainName	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *AppendDomainName(domainname *const name, const domainname *const append)$/;"	f
AppendLabelSuffix	mDNSCore/DNSCommon.c	/^mDNSexport void AppendLabelSuffix(domainlabel *const name, mDNSu32 val, const mDNSBool RichText)$/;"	f
AppendLiteralLabelString	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *AppendLiteralLabelString(domainname *const name, const char *cstr)$/;"	f
AppendLocalSearchDomains	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs8 AppendLocalSearchDomains;        \/\/ Search domains ending in .local can be appended for this query$/;"	m	struct:DNSQuestion_struct
AppendNewSearchDomain	mDNSShared/uds_daemon.c	/^mDNSlocal int AppendNewSearchDomain(mDNS *const m, DNSQuestion *question)$/;"	f
AppendSearchDomains	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs8 AppendSearchDomains;             \/\/ Search domains can be appended for this query$/;"	m	struct:DNSQuestion_struct
Apple	mDNSWindows/DLL.NET/PString.h	/^namespace Apple$/;"	n
Apple	mDNSWindows/DLL.NET/dnssd_NET.h	/^namespace Apple$/;"	n
AppleBrowser	mDNSShared/Java/DNSSD.java	/^	public			AppleBrowser( int flags, int ifIndex, String regType, String domain, BrowseListener client)$/;"	m	class:AppleBrowser
AppleBrowser	mDNSShared/Java/DNSSD.java	/^class	AppleBrowser extends AppleService$/;"	c
AppleDNSRecord	mDNSShared/Java/DNSSD.java	/^	public			AppleDNSRecord( AppleService owner)$/;"	m	class:AppleDNSRecord
AppleDNSRecord	mDNSShared/Java/DNSSD.java	/^class	AppleDNSRecord implements DNSRecord$/;"	c
AppleDNSSD	mDNSShared/Java/DNSSD.java	/^class	AppleDNSSD extends DNSSD$/;"	c
AppleDNSSDException	mDNSShared/Java/DNSSD.java	/^	public						AppleDNSSDException( int errorCode) { fErrorCode = errorCode; }$/;"	m	class:AppleDNSSDException
AppleDNSSDException	mDNSShared/Java/DNSSD.java	/^class	AppleDNSSDException extends DNSSDException$/;"	c
AppleDomainEnum	mDNSShared/Java/DNSSD.java	/^	public			AppleDomainEnum( int flags, int ifIndex, DomainListener client)$/;"	m	class:AppleDomainEnum
AppleDomainEnum	mDNSShared/Java/DNSSD.java	/^class	AppleDomainEnum extends AppleService$/;"	c
AppleQuery	mDNSShared/Java/DNSSD.java	/^	public			AppleQuery( int flags, int ifIndex, String serviceName, int rrtype,$/;"	m	class:AppleQuery
AppleQuery	mDNSShared/Java/DNSSD.java	/^class	AppleQuery extends AppleService$/;"	c
AppleRecordRegistrar	mDNSShared/Java/DNSSD.java	/^	public			AppleRecordRegistrar( RegisterRecordListener listener)$/;"	m	class:AppleRecordRegistrar
AppleRecordRegistrar	mDNSShared/Java/DNSSD.java	/^class	AppleRecordRegistrar extends AppleService implements DNSSDRecordRegistrar$/;"	c
AppleRegistration	mDNSShared/Java/DNSSD.java	/^	public			AppleRegistration( int flags, int ifIndex, String serviceName, String regType, String domain,$/;"	m	class:AppleRegistration
AppleRegistration	mDNSShared/Java/DNSSD.java	/^class	AppleRegistration extends AppleService implements DNSSDRegistration$/;"	c
AppleResolver	mDNSShared/Java/DNSSD.java	/^	public			AppleResolver( int flags, int ifIndex, String serviceName, String regType,$/;"	m	class:AppleResolver
AppleResolver	mDNSShared/Java/DNSSD.java	/^class	AppleResolver extends AppleService$/;"	c
AppleService	mDNSShared/Java/DNSSD.java	/^	public					AppleService(BaseListener listener)	{ fNativeContext = 0; fListener = listener; }$/;"	m	class:AppleService
AppleService	mDNSShared/Java/DNSSD.java	/^class	AppleService implements DNSSDService, Runnable$/;"	c
Application	mDNSWindows/DNSServiceBrowser/Windows/Sources/Application.cpp	/^Application::Application( void )$/;"	f	class:Application
Application	mDNSWindows/DNSServiceBrowser/Windows/Sources/Application.h	/^class	Application : public CWinApp$/;"	c
Application	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/Application.cpp	/^Application::Application()$/;"	f	class:Application
Application	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/Application.h	/^class	Application : public CWinApp$/;"	c
ApplySearchDomainsFirst	mDNSCore/mDNSEmbeddedAPI.h	1622;"	d
AreRecordsMergeable	mDNSCore/uDNS.c	/^mDNSlocal mDNSBool AreRecordsMergeable(mDNS *const m, AuthRecord *currentRR, AuthRecord *rr, mDNSs32 time)$/;"	f
AssignDomainName	mDNSCore/mDNSEmbeddedAPI.h	2800;"	d
AssignOffsetLink	mDNSShared/GenLinkedList.c	/^static void AssignOffsetLink( void *elem, void *link, size_t linkOffset)$/;"	f	file:
AsyncDispatchFunc	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void AsyncDispatchFunc(mDNS *const m, void *context);$/;"	t
AttemptAcquireAuthority	mDNSMacOSX/PreferencePane/ConfigurationAuthority.c	/^OSStatus    AttemptAcquireAuthority( Boolean allowUI)$/;"	f
AuthChain	mDNSCore/dnssec.h	/^typedef struct AuthChain_struct AuthChain;$/;"	t	typeref:struct:AuthChain_struct
AuthChainAdd	mDNSCore/dnssec.c	/^mDNSlocal mDNSBool AuthChainAdd(DNSSECVerifier *dv, RRVerifier *resultKey, RRVerifier *resultRRSig)$/;"	f
AuthChainCopy	mDNSCore/dnssec.c	/^mDNSlocal AuthChain *AuthChainCopy(AuthChain *ae)$/;"	f
AuthChainLink	mDNSCore/dnssec.c	/^mDNSexport void AuthChainLink(DNSSECVerifier *dv, AuthChain *ae)$/;"	f
AuthChain_struct	mDNSCore/dnssec.h	/^struct AuthChain_struct$/;"	s
AuthEntity	mDNSCore/mDNSEmbeddedAPI.h	/^typedef union AuthEntity_union AuthEntity;$/;"	t	typeref:union:AuthEntity_union
AuthEntity_union	mDNSCore/mDNSEmbeddedAPI.h	/^union AuthEntity_union { AuthEntity *next; AuthGroup ag; };$/;"	u
AuthFlags	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 AuthFlags;$/;"	m	struct:AuthRecord_struct
AuthFlagsWakeOnly	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthFlagsWakeOnly = 0x1     \/\/ WakeOnly service$/;"	e	enum:__anon78
AuthGroup	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct AuthGroup_struct AuthGroup;$/;"	t	typeref:struct:AuthGroup_struct
AuthGroupForName	mDNSCore/mDNS.c	/^mDNSexport AuthGroup *AuthGroupForName(AuthHash *r, const mDNSu32 slot, const mDNSu32 namehash, const domainname *const name)$/;"	f
AuthGroupForRecord	mDNSCore/mDNS.c	/^mDNSexport AuthGroup *AuthGroupForRecord(AuthHash *r, const mDNSu32 slot, const ResourceRecord *const rr)$/;"	f
AuthGroup_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct AuthGroup_struct             \/\/ Header object for a list of AuthRecords with the same name$/;"	s
AuthHash	mDNSCore/mDNSEmbeddedAPI.h	/^}AuthHash;$/;"	t	typeref:struct:__anon76
AuthHashSlot	mDNSCore/DNSCommon.h	240;"	d
AuthInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    DomainAuthInfo       *AuthInfo;         \/\/ Non-NULL if query is currently being done using Private DNS$/;"	m	struct:DNSQuestion_struct
AuthInfoList	mDNSCore/mDNSEmbeddedAPI.h	/^    DomainAuthInfo   *AuthInfoList;         \/\/ list of domains requiring authentication for updates$/;"	m	struct:mDNS_struct
AuthRecType	mDNSCore/mDNSEmbeddedAPI.h	/^} AuthRecType;$/;"	t	typeref:enum:__anon77
AuthRecord	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct AuthRecord_struct AuthRecord;$/;"	t	typeref:struct:AuthRecord_struct
AuthRecordAny	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecordAny,              \/\/ registered for *Any, NOT including P2P interfaces$/;"	e	enum:__anon77
AuthRecordAnyIncludeAWDL	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecordAnyIncludeAWDL,   \/\/ registered for *Any, including AWDL interface$/;"	e	enum:__anon77
AuthRecordAnyIncludeAWDLandP2P	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecordAnyIncludeAWDLandP2P, \/\/ registered for *Any, including AWDL and P2P interfaces$/;"	e	enum:__anon77
AuthRecordAnyIncludeP2P	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecordAnyIncludeP2P,    \/\/ registered for *Any, including P2P interfaces$/;"	e	enum:__anon77
AuthRecordFlags	mDNSCore/mDNSEmbeddedAPI.h	/^} AuthRecordFlags;$/;"	t	typeref:enum:__anon78
AuthRecordLocalOnly	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecordLocalOnly,$/;"	e	enum:__anon77
AuthRecordP2P	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecordP2P               \/\/ discovered over D2D\/P2P framework$/;"	e	enum:__anon77
AuthRecord_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct AuthRecord_struct$/;"	s
AuthRecord_uDNS	mDNSCore/mDNSEmbeddedAPI.h	1604;"	d
AuthRecs	mDNSCore/mDNSEmbeddedAPI.h	/^    ARListElem *AuthRecs;$/;"	m	struct:SearchListElem
AutoBrowseDomains	mDNSShared/uds_daemon.c	/^mDNSexport DNameListElem *AutoBrowseDomains;        \/\/ List created from those local-only PTR records plus records we get from the network$/;"	v
AutoRegistrationDomains	mDNSShared/uds_daemon.c	/^mDNSexport DNameListElem *AutoRegistrationDomains;  \/\/ Domains where we automatically register for empty-string registrations$/;"	v
AutoScroll	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::AutoScroll( CListCtrl & list, int nIndex )$/;"	f	class:CThirdPage
AutoTarget	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 AutoTarget;                  \/\/ Set if the target of this record (PTR, CNAME, SRV, etc.) is our host name$/;"	m	struct:AuthRecord_struct
AutoTargetServices	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32         AutoTargetServices;         \/\/ # of services that have AutoTarget set$/;"	m	struct:mDNS_struct
AutoTunnel	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool   AutoTunnel;                  \/\/ Whether this is AutoTunnel$/;"	m	struct:DomainAuthInfo
AutoTunnel6Record	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord AutoTunnel6Record;           \/\/ AutoTunnel AAAA Record obtained from awacsd$/;"	m	struct:DomainAuthInfo
AutoTunnelCallback	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void AutoTunnelCallback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
AutoTunnelDeviceInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord AutoTunnelDeviceInfo;        \/\/ Device info of tunnel endpoint$/;"	m	struct:DomainAuthInfo
AutoTunnelHostNameChanged	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void AutoTunnelHostNameChanged(mDNS *m, DomainAuthInfo *info)$/;"	f
AutoTunnelHostRecord	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord AutoTunnelHostRecord;        \/\/ User-visible hostname; used as SRV target for AutoTunnel services$/;"	m	struct:DomainAuthInfo
AutoTunnelInnerAddress	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv6Addr AutoTunnelInnerAddress;$/;"	m	struct:DomainAuthInfo
AutoTunnelNAT	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTraversalInfo AutoTunnelNAT;         \/\/ Shared between all AutoTunnel DomainAuthInfo structs$/;"	m	struct:mDNS_struct
AutoTunnelNATCallback	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void AutoTunnelNATCallback(mDNS *m, NATTraversalInfo *n)$/;"	f
AutoTunnelRecordCallback	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void AutoTunnelRecordCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
AutoTunnelRelayAddr	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv6Addr AutoTunnelRelayAddr;$/;"	m	struct:mDNS_struct
AutoTunnelService	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord AutoTunnelService;           \/\/ Service record (possibly NAT-Mapped) of IKE daemon implementing tunnel endpoint$/;"	m	struct:DomainAuthInfo
AutoTunnelServiceStarted	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool AutoTunnelServiceStarted;         \/\/ Whether a service has been registered in this domain$/;"	m	struct:DomainAuthInfo
AutoTunnelSetKeys	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus AutoTunnelSetKeys(ClientTunnel *tun, mDNSBool AddNew)$/;"	f
AutoTunnelTarget	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord AutoTunnelTarget;            \/\/ Opaque hostname of tunnel endpoint; used as SRV target for AutoTunnelService record$/;"	m	struct:DomainAuthInfo
AutoTunnelUnregistered	mDNSCore/mDNSEmbeddedAPI.h	1810;"	d
AutomaticBrowseDomainChange	mDNSShared/uds_daemon.c	/^mDNSlocal void AutomaticBrowseDomainChange(mDNS *const m, DNSQuestion *q, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
AutomaticBrowseDomainQ	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion AutomaticBrowseDomainQ;$/;"	m	struct:mDNS_struct
AutomaticBrowseQ	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion AutomaticBrowseQ;$/;"	m	struct:SearchListElem
AvailCallback	mDNSMacOS9/SubTypeTester.c	/^mDNSlocal void AvailCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
B	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 A,B,C,D;$/;"	m	struct:MD5state_st
BADKEY	mDNSShared/Java/DNSSDException.java	/^    public static final int		BADKEY                    = -65561;$/;"	f	class:DNSSDException
BADSIG	mDNSShared/Java/DNSSDException.java	/^    public static final int		BADSIG                    = -65560;$/;"	f	class:DNSSDException
BADTIME	mDNSShared/Java/DNSSDException.java	/^    public static final int		BADTIME                   = -65559;$/;"	f	class:DNSSDException
BAD_FLAGS	mDNSShared/Java/DNSSDException.java	/^    public static final int		BAD_FLAGS                 = -65543;$/;"	f	class:DNSSDException
BAD_INTERFACE_INDEX	mDNSShared/Java/DNSSDException.java	/^    public static final int		BAD_INTERFACE_INDEX       = -65552;$/;"	f	class:DNSSDException
BAD_PARAM	mDNSShared/Java/DNSSDException.java	/^    public static final int		BAD_PARAM                 = -65540;$/;"	f	class:DNSSDException
BAD_REFERENCE	mDNSShared/Java/DNSSDException.java	/^    public static final int		BAD_REFERENCE             = -65541;$/;"	f	class:DNSSDException
BAD_STATE	mDNSShared/Java/DNSSDException.java	/^    public static final int		BAD_STATE                 = -65542;$/;"	f	class:DNSSDException
BE_FETCH32	mDNSCore/DNSDigest.c	453;"	d	file:
BIND_8_COMPAT	mDNSPosix/nss_mdns.c	87;"	d	file:
BISON	mDNSPosix/Makefile	/^BISON = @bison$/;"	m
BONJOUR_EVENT	Clients/BonjourExample/BonjourExample.cpp	27;"	d	file:
BONJOUR_PORT	mDNSMacOSX/P2PPacketFilter.c	33;"	d	file:
BPF_SetOffset	mDNSMacOSX/mDNSMacOSX.c	3348;"	d	file:
BPF_cfs	mDNSMacOSX/mDNSMacOSX.h	/^    CFSocketRef BPF_cfs;$/;"	m	struct:NetworkInterfaceInfoOSX_struct
BPF_fd	mDNSMacOSX/mDNSMacOSX.h	/^    int BPF_fd;                                 \/\/ -1 uninitialized; -2 requested BPF; -3 failed$/;"	m	struct:NetworkInterfaceInfoOSX_struct
BPF_len	mDNSMacOSX/mDNSMacOSX.h	/^    u_int BPF_len;$/;"	m	struct:NetworkInterfaceInfoOSX_struct
BPF_mcfd	mDNSMacOSX/mDNSMacOSX.h	/^    int BPF_mcfd;                               \/\/ Socket for our IPv6 ND group membership$/;"	m	struct:NetworkInterfaceInfoOSX_struct
BPF_rls	mDNSMacOSX/mDNSMacOSX.h	/^    CFRunLoopSourceRef BPF_rls;$/;"	m	struct:NetworkInterfaceInfoOSX_struct
BPF_source	mDNSMacOSX/mDNSMacOSX.h	/^    dispatch_source_t BPF_source;$/;"	m	struct:NetworkInterfaceInfoOSX_struct
BROWSE_DOMAINS	mDNSShared/Java/DNSSD.java	/^	public static final int		BROWSE_DOMAINS = ( 1 << 6 );$/;"	f	class:DNSSD
BSSID	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSEthAddr BSSID;                          \/\/ BSSID of 802.11 base station, if applicable$/;"	m	struct:NetworkInterfaceInfoOSX_struct
BSTRToUTF8	mDNSWindows/DLLX/StringServices.cpp	/^BSTRToUTF8$/;"	f
BUFFER_INITIAL_SIZE	mDNSWindows/mdnsNSP/mdnsNSP.c	79;"	d	file:
BUFFER_SIZE	Clients/SimpleChat.NET/SimpleChat.cs	/^        private const int                       BUFFER_SIZE = 1024;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
BUILDDIR	mDNSPosix/Makefile	/^BUILDDIR = build\/debug$/;"	m
BUILDDIR	mDNSPosix/Makefile	/^BUILDDIR ?= build\/prod$/;"	m
BUILDDIR	mDNSWindows/Java/makefile	/^BUILDDIR = build\\debug$/;"	m
BUILDDIR	mDNSWindows/Java/makefile	/^BUILDDIR = build\\prod$/;"	m
BackLinkOffset	mDNSShared/GenLinkedList.h	/^           BackLinkOffset;$/;"	m	struct:GenDoubleLinkedList
Base64	mDNSCore/DNSDigest.c	/^static const char Base64[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	v	file:
BaseListener	mDNSShared/Java/BaseListener.java	/^public interface BaseListener$/;"	i
BeginEnum	mDNSShared/Java/DNSSD.java	/^	protected native int	BeginEnum( int flags, int ifIndex);$/;"	m	class:AppleDomainEnum
BeginRegister	mDNSShared/Java/DNSSD.java	/^	protected native int	BeginRegister( int ifIndex, int flags, String serviceName, String regType,$/;"	m	class:AppleRegistration
BeginSleepProcessing	mDNSCore/mDNS.c	/^mDNSlocal void BeginSleepProcessing(mDNS *const m)$/;"	f
BetterMatchForName	mDNSCore/mDNS.c	/^mDNSlocal int BetterMatchForName(const domainname *name, int namecount, const domainname *newname, int newcount,$/;"	f
BigMutex	mDNSMacOSX/mDNSMacOSX.h	/^    pthread_mutex_t BigMutex;$/;"	m	struct:mDNS_PlatformSupport_struct
BigMutexStartTime	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSs32 BigMutexStartTime;$/;"	m	struct:mDNS_PlatformSupport_struct
BindDPSocket	mDNSMacOSX/DNSProxySupport.c	/^mDNSlocal void BindDPSocket(int fd, int sa_family)$/;"	f
BitmapTypeCheck	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool BitmapTypeCheck(mDNSu8 *bmap, int bitmaplen, mDNSu16 type)$/;"	f
BlockForData	mDNSShared/Java/DNSSD.java	/^	protected native int	BlockForData();$/;"	m	class:AppleService
BogusStatus	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 BogusStatus;$/;"	m	struct:__anon91
BonjourUserEventsPlugin	mDNSMacOSX/BonjourEvents.c	/^} BonjourUserEventsPlugin;$/;"	t	typeref:struct:__anon149	file:
Browse	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::Browse(PRInt32 interfaceIndex, const nsAString & regtype, const nsAString & domain, IDNSSDBrowseListener *listener, IDNSSDService **_retval NS_OUTPARAM)$/;"	f	class:CDNSSDService
Browse	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSService::Browse$/;"	f	class:DNSService
Browse	mDNSWindows/DLLX/DNSSD.cpp	/^STDMETHODIMP CDNSSD::Browse(DNSSDFlags flags, ULONG ifIndex, BSTR regtype, BSTR domain, IBrowseListener* listener, IDNSSDService** browser )$/;"	f	class:CDNSSD
Browse	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::Browse(DNSSDFlags flags, ULONG ifIndex, BSTR regtype, BSTR domain, IDNSSDEventManager* eventManager, IDNSSDService** service )$/;"	f	class:CDNSSDService
BrowseCallBack	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^	ExplorerBarWindow::BrowseCallBack($/;"	f	class:ExplorerBarWindow
BrowseCallback	mDNSPosix/Client.c	/^static void BrowseCallback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f	file:
BrowseCallback	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRefImpl::BrowseCallback$/;"	f	class:ServiceRef::ServiceRefImpl
BrowseData	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		public class BrowseData$/;"	c	class:DNSServiceBrowser_NET.Form1
BrowseDispatch	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::BrowseDispatch$/;"	f	class:ServiceRef
BrowseDomainsReply	mDNSWindows/ControlPanel/ConfigPropertySheet.cpp	/^CConfigPropertySheet::BrowseDomainsReply$/;"	f	class:CConfigPropertySheet
BrowseListener	mDNSShared/Java/BrowseListener.java	/^public interface BrowseListener extends BaseListener$/;"	i
BrowseQ	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion BrowseQ;$/;"	m	struct:SearchListElem
BrowseReply	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::BrowseReply$/;"	f	class:CDNSSDService
BrowseReply	mDNSWindows/DLLX/DNSSD.cpp	/^CDNSSD::BrowseReply$/;"	f	class:CDNSSD
BrowseReply	mDNSWindows/DLLX/DNSSDService.cpp	/^CDNSSDService::BrowseReply$/;"	f	class:CDNSSDService
BrowseTest	Clients/Java/DNSSDUnitTest.java	/^	public		BrowseTest()$/;"	m	class:BrowseTest
BrowseTest	Clients/Java/DNSSDUnitTest.java	/^class	BrowseTest extends TermReporter implements BrowseListener$/;"	c
BrowseThreshold	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 BrowseThreshold;                \/\/ If we have received at least this number of answers,$/;"	m	struct:DNSQuestion_struct
BrowserApp	Clients/Java/BrowserApp.java	/^	public		BrowserApp()$/;"	m	class:BrowserApp
BrowserApp	Clients/Java/BrowserApp.java	/^class	BrowserApp implements ListSelectionListener, ResolveListener, Runnable$/;"	c
BrowserCallBack	Clients/BonjourExample/BonjourExample.cpp	/^	BrowserCallBack( $/;"	f	file:
BrowserCallBack	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	BrowserCallBack( $/;"	f	file:
BrowserDialog	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	/^BrowserDialog::BrowserDialog( CWnd *inParent )$/;"	f	class:BrowserDialog
BrowserDialog	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.h	/^class	BrowserDialog : public CDialog$/;"	c
BrowserEntry	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.h	/^		struct	BrowserEntry$/;"	s	class:BrowserDialog
BrowserForSDRef	mDNSMacOSX/BonjourEvents.c	/^NetBrowserInfo* BrowserForSDRef(BonjourUserEventsPlugin* plugin, DNSServiceRef sdRef)$/;"	f
BrowserListElem	Clients/Java/BrowserApp.java	/^		public	BrowserListElem( String serviceName, String domain, String type, int ifIndex)$/;"	m	class:BrowserListModel.BrowserListElem
BrowserListElem	Clients/Java/BrowserApp.java	/^	class	BrowserListElem$/;"	c	class:BrowserListModel
BrowserListModel	Clients/Java/BrowserApp.java	/^	public		BrowserListModel()$/;"	m	class:BrowserListModel
BrowserListModel	Clients/Java/BrowserApp.java	/^class	BrowserListModel extends DefaultListModel implements BrowseListener, Runnable$/;"	c
BuildQuestion	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool BuildQuestion(mDNS *const m, DNSMessage *query, mDNSu8 **queryptr, DNSQuestion *q,$/;"	f
BuildUpdateMessage	mDNSCore/uDNS.c	/^mDNSlocal mDNSu8* BuildUpdateMessage(mDNS *const m, mDNSu8 *ptr, AuthRecord *rr, mDNSu8 *limit)$/;"	f
BumpDNSSECStats	mDNSCore/dnssec.c	/^mDNSexport void BumpDNSSECStats(mDNS *const m, DNSSECStatsAction action, DNSSECStatsType type, mDNSu32 value)$/;"	f
BumpDNSSECStats	mDNSPosix/mDNSPosix.c	/^mDNSexport void BumpDNSSECStats(mDNS *const m, DNSSECStatsAction action, DNSSECStatsType type, mDNSu32 value)$/;"	f
BumpDNSSECStats	mDNSWindows/mDNSWin32.c	/^mDNSexport void BumpDNSSECStats(mDNS *const m, DNSSECStatsAction action, DNSSECStatsType type, mDNSu32 value)$/;"	f
ByteArray	mDNSWindows/DLLX/TXTRecord.h	/^	typedef std::vector< BYTE > ByteArray;$/;"	t	class:CTXTRecord
ByteArrayToVariant	mDNSWindows/DLLX/StringServices.cpp	/^ByteArrayToVariant$/;"	f
C	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 A,B,C,D;$/;"	m	struct:MD5state_st
CACHE_HASH_SLOTS	mDNSCore/mDNSEmbeddedAPI.h	103;"	d
CACHE_HASH_SLOTS	mDNSCore/mDNSEmbeddedAPI.h	2179;"	d
CALLBACK_COMPAT	mDNSShared/CommonServices.h	558;"	d
CALLBACK_COMPAT	mDNSShared/CommonServices.h	560;"	d
CALLOC	mDNSMacOSX/pfkey.c	74;"	d	file:
CAbout	Clients/ExplorerPlugin/About.cpp	/^CAbout::CAbout(CWnd* pParent \/*=NULL*\/)$/;"	f	class:CAbout
CAbout	Clients/ExplorerPlugin/About.h	/^class CAbout : public CDialog$/;"	c
CAbout	Clients/PrinterSetupWizard/About.cpp	/^CAbout::CAbout(CWnd* pParent \/*=NULL*\/)$/;"	f	class:CAbout
CAbout	Clients/PrinterSetupWizard/About.h	/^class CAbout : public CDialog$/;"	c
CAddBrowseDomain	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CAddBrowseDomain::CAddBrowseDomain(CWnd* pParent \/*=NULL*\/)$/;"	f	class:CAddBrowseDomain
CAddBrowseDomain	mDNSWindows/ControlPanel/BrowsingPage.h	/^class CAddBrowseDomain : public CDialog$/;"	c
CBrowsingPage	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CBrowsingPage::CBrowsingPage()$/;"	f	class:CBrowsingPage
CBrowsingPage	mDNSWindows/ControlPanel/BrowsingPage.h	/^class CBrowsingPage : public CPropertyPage$/;"	c
CC	mDNSPosix/Makefile	/^CC = @cc$/;"	m
CC	mDNSPosix/Makefile	/^CC = gcc$/;"	m
CC	mDNSWindows/Java/makefile	/^CC = cl$/;"	m
CCPApp	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApp::CCPApp()$/;"	f	class:CCPApp
CCPApp	mDNSWindows/ControlPanel/ControlPanel.h	/^class CCPApp : public CWinApp$/;"	c
CCPApp	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^CCPApp::CCPApp()$/;"	f	class:CCPApp
CCPApp	mDNSWindows/ControlPanel/ControlPanelExe.h	/^class CCPApp : public CWinApp$/;"	c
CCPApplet	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApplet::CCPApplet(UINT resourceId, UINT descId, CRuntimeClass * uiClass)$/;"	f	class:CCPApplet
CCPApplet	mDNSWindows/ControlPanel/ControlPanel.h	/^class CCPApplet : public CCmdTarget$/;"	c
CConfigDialog	mDNSWindows/ControlPanel/ConfigDialog.cpp	/^CConfigDialog::CConfigDialog()$/;"	f	class:CConfigDialog
CConfigDialog	mDNSWindows/ControlPanel/ConfigDialog.h	/^class CConfigDialog : public CDialog$/;"	c
CConfigPropertySheet	mDNSWindows/ControlPanel/ConfigPropertySheet.cpp	/^CConfigPropertySheet::CConfigPropertySheet()$/;"	f	class:CConfigPropertySheet
CConfigPropertySheet	mDNSWindows/ControlPanel/ConfigPropertySheet.h	/^class CConfigPropertySheet : public CPropertySheet$/;"	c
CDLLComponentModule	mDNSWindows/DLLX/DLLX.cpp	/^class CDLLComponentModule : public CAtlDllModuleT< CDLLComponentModule >$/;"	c	file:
CDNSSDEventManager	mDNSWindows/DLLX/DNSSDEventManager.h	/^	CDNSSDEventManager()$/;"	f	class:CDNSSDEventManager
CDNSSDEventManager	mDNSWindows/DLLX/DNSSDEventManager.h	/^class ATL_NO_VTABLE CDNSSDEventManager :$/;"	c
CDNSSDRecord	mDNSWindows/DLLX/DNSSDRecord.h	/^	CDNSSDRecord()$/;"	f	class:CDNSSDRecord
CDNSSDRecord	mDNSWindows/DLLX/DNSSDRecord.h	/^class ATL_NO_VTABLE CDNSSDRecord :$/;"	c
CDNSSDSERVICE_CID	Clients/FirefoxExtension/CDNSSDService.h	35;"	d
CDNSSDSERVICE_CLASSNAME	Clients/FirefoxExtension/CDNSSDService.h	34;"	d
CDNSSDSERVICE_CONTRACTID	Clients/FirefoxExtension/CDNSSDService.h	33;"	d
CDNSSDService	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::CDNSSDService( DNSServiceRef ref, nsISupports * listener )$/;"	f	class:CDNSSDService
CDNSSDService	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::CDNSSDService()$/;"	f	class:CDNSSDService
CDNSSDService	Clients/FirefoxExtension/CDNSSDService.h	/^class CDNSSDService : public IDNSSDService, nsIRunnable$/;"	c
CDNSSDService	mDNSWindows/DLLX/DNSSDService.h	/^	CDNSSDService()$/;"	f	class:CDNSSDService
CDNSSDService	mDNSWindows/DLLX/DNSSDService.h	/^class ATL_NO_VTABLE CDNSSDService :$/;"	c
CExplorerPluginApp	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^CExplorerPluginApp::CExplorerPluginApp()$/;"	f	class:CExplorerPluginApp
CExplorerPluginApp	Clients/ExplorerPlugin/ExplorerPlugin.h	/^class CExplorerPluginApp : public CWinApp$/;"	c
CFLAGS	mDNSPosix/Makefile	/^CFLAGS = $(CFLAGS_COMMON) $(CFLAGS_OS) $(CFLAGS_DEBUG)$/;"	m
CFLAGS	mDNSWindows/Java/makefile	/^CFLAGS = $(CFLAGS_COMMON) $(CFLAGS_DEBUG)$/;"	m
CFLAGS_COMMON	mDNSPosix/Makefile	/^CFLAGS_COMMON = -I$(COREDIR) -I$(SHAREDDIR) -I$(OBJDIR) -fwrapv -W -Wall -DPID_FILE=\\"\/var\/run\/mdnsd.pid\\" -DMDNS_UDS_SERVERPATH=\\"\/var\/run\/mdnsd\\"$/;"	m
CFLAGS_COMMON	mDNSWindows/Java/makefile	/^CFLAGS_COMMON = -LD -DAUTO_CALLBACKS=0 -I. -I..\\.. \\$/;"	m
CFLAGS_DEBUG	mDNSPosix/Makefile	/^CFLAGS_DEBUG = -O0 -DMDNS_DEBUGMSGS=0$/;"	m
CFLAGS_DEBUG	mDNSPosix/Makefile	/^CFLAGS_DEBUG = -Os -DMDNS_DEBUGMSGS=0 $/;"	m
CFLAGS_DEBUG	mDNSPosix/Makefile	/^CFLAGS_DEBUG = -g -DMDNS_DEBUGMSGS=2 $/;"	m
CFLAGS_DEBUG	mDNSWindows/Java/makefile	/^CFLAGS_DEBUG = -Os -DMDNS_DEBUGMSGS=0 $/;"	m
CFLAGS_DEBUG	mDNSWindows/Java/makefile	/^CFLAGS_DEBUG = -Zi -DMDNS_DEBUGMSGS=2 $/;"	m
CFLAGS_OS	mDNSPosix/Makefile	/^CFLAGS_OS = -DHAVE_BROKEN_RECVDSTADDR$/;"	m
CFLAGS_OS	mDNSPosix/Makefile	/^CFLAGS_OS = -DHAVE_IPV6 -no-cpp-precomp -Werror -Wdeclaration-after-statement \\$/;"	m
CFLAGS_OS	mDNSPosix/Makefile	/^CFLAGS_OS = -DHAVE_IPV6$/;"	m
CFLAGS_OS	mDNSPosix/Makefile	/^CFLAGS_OS = -DNOT_HAVE_DAEMON -DNOT_HAVE_SA_LEN -DNOT_HAVE_SOCKLEN_T -DNOT_HAVE_IF_NAMETOINDEX \\$/;"	m
CFLAGS_OS	mDNSPosix/Makefile	/^CFLAGS_OS = -D_GNU_SOURCE -DHAVE_IPV6 -DNOT_HAVE_SA_LEN -DUSES_NETLINK -DHAVE_LINUX -DTARGET_OS_LINUX -fno-strict-aliasing$/;"	m
CFLAGS_OS	mDNSPosix/Makefile	/^CFLAGS_OS =$/;"	m
CFLAGS_PTHREAD	mDNSPosix/Makefile	/^CFLAGS_PTHREAD   = -pthread -D_THREAD_SAFE$/;"	m
CFLAGS_PTHREAD	mDNSPosix/Makefile	/^CFLAGS_PTHREAD =$/;"	m
CFRunLoop	mDNSMacOSX/mDNSMacOSX.h	/^    CFRunLoopRef CFRunLoop;$/;"	m	struct:mDNS_PlatformSupport_struct
CFS_CQ	mDNSMacOSX/helper.c	/^static CFStringRef CFS_CQ = NULL;$/;"	v	file:
CFS_ComputerName	mDNSMacOSX/helper.c	/^static CFStringRef CFS_ComputerName = NULL;$/;"	v	file:
CFS_ComputerNameMsg	mDNSMacOSX/helper.c	/^static CFStringRef CFS_ComputerNameMsg = NULL;$/;"	v	file:
CFS_Format	mDNSMacOSX/helper.c	/^static CFStringRef CFS_Format = NULL;$/;"	v	file:
CFS_LocalHostName	mDNSMacOSX/helper.c	/^static CFStringRef CFS_LocalHostName = NULL;$/;"	v	file:
CFS_LocalHostNameMsg	mDNSMacOSX/helper.c	/^static CFStringRef CFS_LocalHostNameMsg = NULL;$/;"	v	file:
CFS_OQ	mDNSMacOSX/helper.c	/^static CFStringRef CFS_OQ = NULL;$/;"	v	file:
CFS_Problem	mDNSMacOSX/helper.c	/^static CFStringRef CFS_Problem = NULL;$/;"	v	file:
CFirstPage	Clients/PrinterSetupWizard/FirstPage.cpp	/^CFirstPage::CFirstPage()$/;"	f	class:CFirstPage
CFirstPage	Clients/PrinterSetupWizard/FirstPage.h	/^class CFirstPage : public CPropertyPage$/;"	c
CFourthPage	Clients/PrinterSetupWizard/FourthPage.cpp	/^CFourthPage::CFourthPage()$/;"	f	class:CFourthPage
CFourthPage	Clients/PrinterSetupWizard/FourthPage.h	/^class CFourthPage : public CPropertyPage$/;"	c
CFourthPage	mDNSWindows/ControlPanel/FourthPage.cpp	/^CFourthPage::CFourthPage()$/;"	f	class:CFourthPage
CFourthPage	mDNSWindows/ControlPanel/FourthPage.h	/^class CFourthPage : public CPropertyPage$/;"	c
CHECK_WCF_FUNCTION	mDNSCore/mDNS.c	58;"	d	file:
CHECK_WCF_FUNCTION	mDNSShared/uds_daemon.c	70;"	d	file:
CLIENTLIBOBJS	mDNSPosix/Makefile	/^CLIENTLIBOBJS = $(OBJDIR)\/dnssd_clientlib.c.so.o $(OBJDIR)\/dnssd_clientstub.c.so.o $(OBJDIR)\/dnssd_ipc.c.so.o$/;"	m
CMP_DNS_SUFFIX_BAD_DOMAIN	mDNSPosix/nss_mdns.c	/^    CMP_DNS_SUFFIX_BAD_DOMAIN = -2$/;"	e	enum:__anon23	file:
CMP_DNS_SUFFIX_BAD_NAME	mDNSPosix/nss_mdns.c	/^    CMP_DNS_SUFFIX_BAD_NAME = 1,$/;"	e	enum:__anon23	file:
CMP_DNS_SUFFIX_FAILURE	mDNSPosix/nss_mdns.c	/^    CMP_DNS_SUFFIX_FAILURE = 0,$/;"	e	enum:__anon23	file:
CMP_DNS_SUFFIX_SUCCESS	mDNSPosix/nss_mdns.c	/^    CMP_DNS_SUFFIX_SUCCESS = 1,$/;"	e	enum:__anon23	file:
CNAMEReferrals	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 CNAMEReferrals;                 \/\/ Count of how many CNAME redirections we've done$/;"	m	struct:DNSQuestion_struct
COMMONOBJ	mDNSPosix/Makefile	/^COMMONOBJ  = $(SPECIALOBJ) $(OBJDIR)\/mDNS.c.o$/;"	m
COMMON_SERVICES_NEEDS_BOOL	mDNSShared/CommonServices.h	857;"	d
COMMON_SERVICES_NEEDS_BOOL	mDNSShared/CommonServices.h	859;"	d
COMMON_SERVICES_NEEDS_BOOL	mDNSShared/CommonServices.h	876;"	d
COMPILER_HAS_EXCEPTIONS	mDNSShared/DebugServices.c	2749;"	d	file:
CONFIG_FILE	mDNSPosix/Bonjour.c	52;"	d	file:
CONFIG_FILE	mDNSPosix/PosixDaemon.c	52;"	d	file:
CONFIG_FILE	mDNSShared/dnsextd.c	76;"	d	file:
CONFIG_INFO_DATA_1	Clients/PrinterSetupWizard/tcpxcv.h	/^}   CONFIG_INFO_DATA_1, *PCONFIG_INFO_DATA_1;$/;"	t	typeref:struct:_CONFIG_INFO_DATA_1
CONF_LINE_SIZE	mDNSPosix/nss_mdns.c	1688;"	d	file:
COREDIR	mDNSPosix/Makefile	/^COREDIR = ..\/mDNSCore$/;"	m
COREDIR	mDNSWindows/Java/makefile	/^COREDIR = ..\\..\\mDNSCore$/;"	m
CP	mDNSPosix/Makefile	/^CP = cp$/;"	m
CP	mDNSWindows/Java/makefile	/^CP = copy$/;"	m
CPlApplet	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CPlApplet(HWND hWndCPl, UINT uMsg, LONG lParam1, LONG lParam2)$/;"	f
CPowerManagementWarning	mDNSWindows/ControlPanel/ServicesPage.cpp	/^CPowerManagementWarning::CPowerManagementWarning(CWnd* pParent \/*=NULL*\/)$/;"	f	class:CPowerManagementWarning
CPowerManagementWarning	mDNSWindows/ControlPanel/ServicesPage.h	/^class CPowerManagementWarning : public CDialog$/;"	c
CPrinterSetupWizardApp	Clients/PrinterSetupWizard/PrinterSetupWizardApp.cpp	/^CPrinterSetupWizardApp::CPrinterSetupWizardApp()$/;"	f	class:CPrinterSetupWizardApp
CPrinterSetupWizardApp	Clients/PrinterSetupWizard/PrinterSetupWizardApp.h	/^class CPrinterSetupWizardApp : public CWinApp$/;"	c
CPrinterSetupWizardSheet	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::CPrinterSetupWizardSheet(UINT nIDCaption, CWnd* pParentWnd, UINT iSelectPage)$/;"	f	class:CPrinterSetupWizardSheet
CPrinterSetupWizardSheet	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^class CPrinterSetupWizardSheet : public CPropertySheet$/;"	c
CProxy_IDNSSDEvents	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^class CProxy_IDNSSDEvents :$/;"	c
CR	mDNSShared/CommonServices.h	414;"	d
CRActiveQuestion	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion    *CRActiveQuestion;   \/\/ Points to an active question referencing this answer. Can never point to a NewQuestion.$/;"	m	struct:CacheRecord_struct
CRCR	mDNSShared/CommonServices.h	421;"	d
CRDNSSECQuestion	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8  CRDNSSECQuestion;           \/\/ Set to 1 if this was created in response to a DNSSEC question$/;"	m	struct:CacheRecord_struct
CRDisplayString	mDNSCore/mDNSEmbeddedAPI.h	2890;"	d
CRLF	mDNSShared/CommonServices.h	420;"	d
CRSTR	mDNSShared/CommonServices.h	418;"	d
CRYPTO_ALG	mDNSCore/CryptoAlg.h	/^    CRYPTO_ALG,$/;"	e	enum:__anon101
CRYPTO_ALG_MAX	mDNSCore/mDNSEmbeddedAPI.h	780;"	d
CRYPTO_DSA_NSEC3_SHA1	mDNSCore/mDNSEmbeddedAPI.h	775;"	d
CRYPTO_RSA_NSEC3_SHA1	mDNSCore/mDNSEmbeddedAPI.h	776;"	d
CRYPTO_RSA_SHA1	mDNSCore/mDNSEmbeddedAPI.h	774;"	d
CRYPTO_RSA_SHA256	mDNSCore/mDNSEmbeddedAPI.h	777;"	d
CRYPTO_RSA_SHA512	mDNSCore/mDNSEmbeddedAPI.h	778;"	d
CRYPT_MACHINE_KEYSET	mDNSWindows/mDNSWin32.c	226;"	d	file:
CRYPT_NEWKEYSET	mDNSWindows/mDNSWin32.c	230;"	d	file:
CRegistrationPage	mDNSWindows/ControlPanel/RegistrationPage.cpp	/^CRegistrationPage::CRegistrationPage()$/;"	f	class:CRegistrationPage
CRegistrationPage	mDNSWindows/ControlPanel/RegistrationPage.h	/^class CRegistrationPage : public CPropertyPage$/;"	c
CSecondPage	Clients/PrinterSetupWizard/SecondPage.cpp	/^CSecondPage::CSecondPage()$/;"	f	class:CSecondPage
CSecondPage	Clients/PrinterSetupWizard/SecondPage.h	/^class CSecondPage : public CPropertyPage$/;"	c
CSecondPage	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::CSecondPage()$/;"	f	class:CSecondPage
CSecondPage	mDNSWindows/ControlPanel/SecondPage.h	/^class CSecondPage : public CPropertyPage$/;"	c
CServicesPage	mDNSWindows/ControlPanel/ServicesPage.cpp	/^CServicesPage::CServicesPage()$/;"	f	class:CServicesPage
CServicesPage	mDNSWindows/ControlPanel/ServicesPage.h	/^class CServicesPage : public CPropertyPage$/;"	c
CSharedSecret	mDNSWindows/ControlPanel/SharedSecret.cpp	/^CSharedSecret::CSharedSecret(CWnd* pParent \/*=NULL*\/)$/;"	f	class:CSharedSecret
CSharedSecret	mDNSWindows/ControlPanel/SharedSecret.h	/^class CSharedSecret : public CDialog$/;"	c
CStr255	mDNSShared/CommonServices.h	/^typedef char CStr255[ 256 ];$/;"	t
CStringFromCFString	mDNSMacOSX/BonjourEvents.c	/^const char* CStringFromCFString(CFStringRef string)$/;"	f
CTL_PATH_PREFIX	mDNSShared/dnssd_clientstub.c	108;"	d	file:
CTXTRecord	mDNSWindows/DLLX/TXTRecord.h	/^	CTXTRecord()$/;"	f	class:CTXTRecord
CTXTRecord	mDNSWindows/DLLX/TXTRecord.h	/^class ATL_NO_VTABLE CTXTRecord :$/;"	c
CThirdPage	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::CThirdPage()$/;"	f	class:CThirdPage
CThirdPage	Clients/PrinterSetupWizard/ThirdPage.h	/^class CThirdPage : public CPropertyPage$/;"	c
CUPInit	mDNSMacOSX/CUPolicy.c	/^mDNSexport void CUPInit(mDNS *const m)$/;"	f
CUPSLibrary	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^CUPSLibrary()$/;"	f	class:CPrinterSetupWizardSheet::CUPSLibrary
CUPSLibrary	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^class CUPSLibrary$/;"	c	class:CPrinterSetupWizardSheet
CacheCheckGracePeriod	mDNSCore/mDNS.c	2861;"	d	file:
CacheEntity	mDNSCore/mDNSEmbeddedAPI.h	/^typedef union CacheEntity_union CacheEntity;$/;"	t	typeref:union:CacheEntity_union
CacheEntity_union	mDNSCore/mDNSEmbeddedAPI.h	/^union CacheEntity_union { CacheEntity *next; CacheGroup cg; CacheRecord cr; };$/;"	u
CacheGroup	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct CacheGroup_struct CacheGroup;$/;"	t	typeref:struct:CacheGroup_struct
CacheGroupForName	mDNSCore/mDNS.c	/^mDNSexport CacheGroup *CacheGroupForName(const mDNS *const m, const mDNSu32 slot, const mDNSu32 namehash, const domainname *const name)$/;"	f
CacheGroupForRecord	mDNSCore/mDNS.c	/^mDNSlocal CacheGroup *CacheGroupForRecord(const mDNS *const m, const mDNSu32 slot, const ResourceRecord *const rr)$/;"	f
CacheGroup_base	mDNSCore/mDNSEmbeddedAPI.h	/^struct CacheGroup_base$/;"	s
CacheGroup_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct CacheGroup_struct                \/\/ Header object for a list of CacheRecords with the same name$/;"	s
CacheHasAddressTypeForName	mDNSCore/mDNS.c	/^mDNSlocal const CacheRecord *CacheHasAddressTypeForName(mDNS *const m, const domainname *const name, const mDNSu32 namehash)$/;"	f
CacheRecord	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct CacheRecord_struct CacheRecord;$/;"	t	typeref:struct:CacheRecord_struct
CacheRecordAdd	mDNSCore/mDNS.c	/^mDNSlocal void CacheRecordAdd(mDNS *const m, CacheRecord *rr)$/;"	f
CacheRecordDeferredAdd	mDNSCore/mDNS.c	/^mDNSlocal void CacheRecordDeferredAdd(mDNS *const m, CacheRecord *rr)$/;"	f
CacheRecordRmv	mDNSCore/mDNS.c	/^mDNSlocal void CacheRecordRmv(mDNS *const m, CacheRecord *rr)$/;"	f
CacheRecordRmvEventsForCurrentQuestion	mDNSCore/mDNS.c	/^mDNSlocal void CacheRecordRmvEventsForCurrentQuestion(mDNS *const m, DNSQuestion *q)$/;"	f
CacheRecordRmvEventsForQuestion	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool CacheRecordRmvEventsForQuestion(mDNS *const m, DNSQuestion *q)$/;"	f
CacheRecord_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct CacheRecord_struct$/;"	s
CacheRefreshQueries	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 CacheRefreshQueries;            \/\/ Number of queries that we sent for refreshing cache$/;"	m	struct:__anon92
CacheRefreshed	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 CacheRefreshed;                 \/\/ Number of times the cache was refreshed due to a response$/;"	m	struct:__anon92
CachedAnswerNeedsUpdate	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool CachedAnswerNeedsUpdate;       \/\/ See SendQueries().  Set if we're sending this question $/;"	m	struct:DNSQuestion_struct
Callback	mDNSMacOS9/Mac OS Test Responder.c	/^mDNSlocal void Callback(mDNS *const m, ServiceRecordSet *const sr, mStatus result)$/;"	f
Callback	mDNSMacOS9/SubTypeTester.c	/^mDNSlocal void Callback(mDNS *const m, ServiceRecordSet *const sr, mStatus result)$/;"	f
Callback	mDNSPosix/mDNSPosix.c	/^    mDNSPosixEventCallback Callback;$/;"	m	struct:PosixEventSource	file:
Callback	mDNSShared/Java/JNISupport.c	/^    jmethodID Callback;$/;"	m	struct:OpContext	file:
Callback2	mDNSShared/Java/JNISupport.c	/^    jmethodID Callback2;$/;"	m	struct:OpContext	file:
CallbackBeforeStartQuery	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void (*CallbackBeforeStartQuery)(mDNS *const m, void *context);$/;"	t
CallbackHeader	mDNSShared/dnssd_clientstub.c	/^} CallbackHeader;$/;"	t	typeref:struct:__anon138	file:
CallbackWithError	mDNSShared/dnssd_clientstub.c	/^static void CallbackWithError(DNSServiceRef sdRef, DNSServiceErrorType error)$/;"	f	file:
CallmDNSNotifier	mDNSMacOS9/mDNSMacOS9.c	/^mDNSlocal pascal void CallmDNSNotifier(void *contextPtr, OTEventCode code, OTResult result, void *cookie)$/;"	f
CallmDNSNotifierUPP	mDNSMacOS9/mDNSMacOS9.c	/^static OTNotifyUPP CallmDNSNotifierUPP;$/;"	v	file:
CanReceiveUnicast	mDNSWindows/mDNSWin32.c	/^mDNSlocal mDNSBool	CanReceiveUnicast( void )$/;"	f
CanReceiveUnicastOn5353	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool CanReceiveUnicastOn5353;$/;"	m	struct:mDNS_struct
CancelGetZoneData	mDNSCore/mDNS.c	/^mDNSexport void CancelGetZoneData(mDNS *const m, ZoneData *nta)$/;"	f
CaseErrorString	mDNSShared/DebugServices.c	1625;"	d	file:
CaseErrorStringify	mDNSShared/DebugServices.c	1626;"	d	file:
CaseErrorStringifyHardCode	mDNSShared/DebugServices.c	1627;"	d	file:
ChallengeSent	mDNSShared/dnsextd.h	/^    ChallengeSent   = 1,$/;"	e	enum:__anon115
ChangedKeysHaveIPv4LL	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool ChangedKeysHaveIPv4LL(CFArrayRef inkeys)$/;"	f
CharToWCharString	mDNSWindows/NSPTool/NSPTool.c	/^DEBUG_LOCAL WCHAR *	CharToWCharString( const char *inCharString, WCHAR *outWCharString )$/;"	f
CheckAndSwapSPS	mDNSCore/mDNS.c	/^mDNSlocal void CheckAndSwapSPS(const CacheRecord *sps1, const CacheRecord *sps2)$/;"	f
CheckAuthIdenticalRecord	mDNSCore/mDNS.c	/^mDNSlocal AuthRecord *CheckAuthIdenticalRecord(AuthHash *r, AuthRecord *rr)$/;"	f
CheckAuthRecordConflict	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool CheckAuthRecordConflict(AuthHash *r, AuthRecord *rr)$/;"	f
CheckAuthSameRecord	mDNSCore/mDNS.c	/^mDNSlocal AuthRecord *CheckAuthSameRecord(AuthHash *r, AuthRecord *rr)$/;"	f
CheckCacheExpiration	mDNSCore/mDNS.c	/^mDNSlocal void CheckCacheExpiration(mDNS *const m, const mDNSu32 slot, CacheGroup *const cg)$/;"	f
CheckDNSProxyIpIntf	mDNSCore/dnsproxy.c	/^mDNSlocal mDNSBool CheckDNSProxyIpIntf(const mDNS *const m, mDNSInterfaceID InterfaceID)$/;"	f
CheckDSForKey	mDNSCore/dnssec.c	/^mDNSlocal mStatus CheckDSForKey(mDNS *const m, DNSSECVerifier *dv, CacheRecord **negcr)$/;"	f
CheckFileShares	mDNSWindows/mDNSWin32.c	/^CheckFileShares( mDNS * const m )$/;"	f
CheckFileSharesProc	mDNSWindows/mDNSWin32.c	/^CheckFileSharesProc( LPVOID arg, DWORD dwTimerLowValue, DWORD dwTimerHighValue )$/;"	f
CheckFirewall	mDNSWindows/SystemService/Service.c	/^static OSStatus CheckFirewall()$/;"	f	file:
CheckForDNSSECRecords	mDNSCore/mDNS.c	/^mDNSlocal void CheckForDNSSECRecords(mDNS *const m, DNSQuestion *q)$/;"	f
CheckForExistingClient	mDNSMacOSX/daemon.c	/^mDNSlocal mDNSBool CheckForExistingClient(mach_port_t c)$/;"	f
CheckForMixedRegistrations	mDNSShared/uds_daemon.c	/^mDNSlocal mDNSBool CheckForMixedRegistrations(domainname *regtype, domainname *domain, mDNSBool AnonData)$/;"	f
CheckForSoonToExpireRecords	mDNSCore/mDNS.c	/^mDNSlocal mDNSs32 CheckForSoonToExpireRecords(mDNS *const m, const domainname *const name, const mDNSu32 namehash, const mDNSu32 slot, mDNSBool *purge)$/;"	f
CheckGroupRecordUpdates	mDNSCore/uDNS.c	/^mDNSlocal void CheckGroupRecordUpdates(mDNS *const m)$/;"	f
CheckInterfaceSupport	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool  CheckInterfaceSupport(NetworkInterfaceInfo *const intf, const char *key)$/;"	f
CheckKeyForRRSIG	mDNSCore/dnssec.c	/^mDNSlocal mStatus CheckKeyForRRSIG(mDNS *const m, DNSSECVerifier *dv, CacheRecord **negcr)$/;"	f
CheckNATMappings	mDNSCore/uDNS.c	/^mDNSexport void CheckNATMappings(mDNS *m)$/;"	f
CheckOneDSForKey	mDNSCore/dnssec.c	/^mDNSlocal void CheckOneDSForKey(DNSSECVerifier *dv, const ResourceRecord *const rr)$/;"	f
CheckOneKeyForRRSIG	mDNSCore/dnssec.c	/^mDNSlocal void CheckOneKeyForRRSIG(DNSSECVerifier *dv, const ResourceRecord *const rr)$/;"	f
CheckOneRRSIGForKey	mDNSCore/dnssec.c	/^mDNSlocal void CheckOneRRSIGForKey(DNSSECVerifier *dv, const ResourceRecord *const rr)$/;"	f
CheckProxyRecords	mDNSCore/mDNS.c	/^mDNSlocal void CheckProxyRecords(mDNS *const m, AuthRecord *list)$/;"	f
CheckQuestionForStatus	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus CheckQuestionForStatus(const DNSQuestion *const q)$/;"	f
CheckRRSIGForKey	mDNSCore/dnssec.c	/^mDNSlocal mStatus CheckRRSIGForKey(mDNS *const m, DNSSECVerifier *dv, CacheRecord **negcr)$/;"	f
CheckRRSIGForRRSet	mDNSCore/dnssec.c	/^mDNSlocal mStatus CheckRRSIGForRRSet(mDNS *const m, DNSSECVerifier *dv, CacheRecord **negcr)$/;"	f
CheckRecordUpdates	mDNSCore/uDNS.c	/^mDNSlocal mDNSs32 CheckRecordUpdates(mDNS *m)$/;"	f
CheckRmvEventsForLocalRecords	mDNSCore/mDNS.c	/^mDNSlocal void CheckRmvEventsForLocalRecords(mDNS *const m)$/;"	f
CheckSum	mDNSCore/mDNS.c	/^mDNSlocal mDNSu16 CheckSum(const void *const data, mDNSs32 length, mDNSu32 sum)$/;"	f
CheckSum	mDNSMacOS9/ShowInitIcon.c	/^static unsigned short CheckSum (short x)$/;"	f	file:
CheckSuppressUnusableQuestions	mDNSCore/mDNS.c	/^mDNSexport void CheckSuppressUnusableQuestions(mDNS *const m)$/;"	f
CheckThatPortNumberIsUsable	mDNSPosix/Responder.c	/^static mDNSBool CheckThatPortNumberIsUsable(long portNumber, mDNSBool printExplanation)$/;"	f	file:
CheckThatRichTextNameIsUsable	mDNSPosix/Responder.c	/^static mDNSBool CheckThatRichTextNameIsUsable(const char *richTextName, mDNSBool printExplanation)$/;"	f	file:
CheckThatServiceTypeIsUsable	mDNSPosix/Client.c	/^static mDNSBool CheckThatServiceTypeIsUsable(const char *serviceType, mDNSBool printExplanation)$/;"	f	file:
CheckThatServiceTypeIsUsable	mDNSPosix/Responder.c	/^static mDNSBool CheckThatServiceTypeIsUsable(const char *serviceType, mDNSBool printExplanation)$/;"	f	file:
ChildName	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname ChildName;               \/\/ Name for which we're trying to find the responsible server$/;"	m	struct:ZoneData_struct
ChooserDialog	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^ChooserDialog::ChooserDialog( CWnd *inParent )$/;"	f	class:ChooserDialog
ChooserDialog	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^class	ChooserDialog : public CDialog$/;"	c
ChopSubTypes	mDNSShared/uds_daemon.c	/^mDNSexport mDNSs32 ChopSubTypes(char *regtype, char **AnonData)$/;"	f
ClassFactory	Clients/ExplorerPlugin/ClassFactory.cpp	/^ClassFactory::ClassFactory( CLSID inCLSID )$/;"	f	class:ClassFactory
ClassFactory	Clients/ExplorerPlugin/ClassFactory.h	/^class ClassFactory : public IClassFactory$/;"	c
Cleanup	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::Cleanup()$/;"	f	class:CDNSSDService
ClearIdenticalProxyRecords	mDNSCore/mDNS.c	/^mDNSlocal void ClearIdenticalProxyRecords(mDNS *const m, const OwnerOptData *const owner, AuthRecord *const thelist)$/;"	f
ClearInactiveInterfaces	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal int ClearInactiveInterfaces(mDNS *const m, mDNSs32 utc)$/;"	f
ClearInactiveInterfaces	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal int   ClearInactiveInterfaces( mDNS *const inMDNS, mDNSs32 inUTC, mDNSBool inClosing )$/;"	f
ClearInterfaceList	mDNSPosix/mDNSPosix.c	/^mDNSlocal void ClearInterfaceList(mDNS *const m)$/;"	f
ClearKeepaliveProxyRecords	mDNSCore/mDNS.c	/^mDNSlocal void ClearKeepaliveProxyRecords(mDNS *const m, const OwnerOptData *const owner, AuthRecord *const thelist, const mDNSInterfaceID InterfaceID)$/;"	f
ClearProxyRecords	mDNSCore/mDNS.c	/^mDNSlocal void ClearProxyRecords(mDNS *const m, const OwnerOptData *const owner, AuthRecord *const thelist)$/;"	f
ClearUpdateSRV	mDNSShared/dnsextd.c	1009;"	d	file:
ClientDeathCallback	mDNSMacOSX/daemon.c	/^mDNSlocal void ClientDeathCallback(CFMachPortRef unusedport, void *voidmsg, CFIndex size, void *info)$/;"	f
ClientID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 ClientID;  \/\/ Opaque ID field to be used by client to map an AddRecord call to a set of Extra records$/;"	m	struct:ExtraResourceRecord_struct
ClientMachPort	mDNSMacOSX/daemon.c	/^    mach_port_t ClientMachPort;$/;"	m	struct:DNSServiceBrowser_struct	file:
ClientMachPort	mDNSMacOSX/daemon.c	/^    mach_port_t ClientMachPort;$/;"	m	struct:DNSServiceDomainEnumeration_struct	file:
ClientMachPort	mDNSMacOSX/daemon.c	/^    mach_port_t ClientMachPort;$/;"	m	struct:DNSServiceRegistration	file:
ClientMachPort	mDNSMacOSX/daemon.c	/^    mach_port_t ClientMachPort;$/;"	m	struct:DNSServiceResolver_struct	file:
ClientMachPort	mDNSMacOSX/daemon.c	/^    mach_port_t ClientMachPort;$/;"	m	struct:ServiceInstance	file:
ClientNotifier	mDNSMacOS9/mDNSMacOS9.c	/^mDNSlocal pascal void ClientNotifier(void *contextPtr, OTEventCode code, OTResult result, void *cookie)$/;"	f
ClientNotifierContext	mDNSMacOS9/mDNSMacOS9.c	/^static mDNS *ClientNotifierContext;$/;"	v	file:
ClientObj	mDNSShared/Java/JNISupport.c	/^    jobject ClientObj;$/;"	m	struct:OpContext	file:
ClientRef	Clients/dnsctl.c	/^static DNSXConnRef ClientRef     =  NULL;$/;"	v	file:
ClientTunnel	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct ClientTunnel$/;"	s
ClientTunnel	mDNSCore/mDNSEmbeddedAPI.h	/^} ClientTunnel;$/;"	t	typeref:struct:ClientTunnel
CloseBPF	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void CloseBPF(NetworkInterfaceInfoOSX *const i)$/;"	f
CloseDW	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::CloseDW( DWORD inReserved )$/;"	f	class:ExplorerBar
CloseSocketSet	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void CloseSocketSet(KQSocketSet *ss)$/;"	f
Commit	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CBrowsingPage::Commit()$/;"	f	class:CBrowsingPage
Commit	mDNSWindows/ControlPanel/FourthPage.cpp	/^CFourthPage::Commit()$/;"	f	class:CFourthPage
Commit	mDNSWindows/ControlPanel/RegistrationPage.cpp	/^CRegistrationPage::Commit()$/;"	f	class:CRegistrationPage
Commit	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::Commit( CComboBox & box, HKEY key, DWORD enabled )$/;"	f	class:CSecondPage
Commit	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::Commit()$/;"	f	class:CSecondPage
Commit	mDNSWindows/ControlPanel/ServicesPage.cpp	/^CServicesPage::Commit()$/;"	f	class:CServicesPage
Commit	mDNSWindows/ControlPanel/SharedSecret.cpp	/^CSharedSecret::Commit( CString zone )$/;"	f	class:CSharedSecret
CompareHosts	mDNSPosix/NetMonitor.c	/^mDNSlocal int CompareHosts(const void *p1, const void *p2)$/;"	f
CompareRData	mDNSCore/mDNS.c	/^mDNSlocal int CompareRData(const AuthRecord *const our, const CacheRecord *const pkt)$/;"	f
CompareSPSEntries	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal CFComparisonResult CompareSPSEntries(const void *val1, const void *val2, void *context)$/;"	f
CompileTimeAssertionCheck_dnssd_clientlib	mDNSShared/dnssd_clientlib.c	/^struct CompileTimeAssertionCheck_dnssd_clientlib$/;"	s	file:
CompileTimeAssertionChecks_DNS_SD	mDNSShared/dns_sd.h	/^struct CompileTimeAssertionChecks_DNS_SD$/;"	s
CompileTimeAssertionChecks_dnssd_ipc	mDNSShared/dnssd_ipc.h	/^struct CompileTimeAssertionChecks_dnssd_ipc$/;"	s
CompileTimeAssertionChecks_mDNS	mDNSCore/mDNSEmbeddedAPI.h	/^struct CompileTimeAssertionChecks_mDNS$/;"	s
CompileTimeAssertionChecks_mDNSMacOSX	mDNSMacOSX/mDNSMacOSX.h	/^struct CompileTimeAssertionChecks_mDNSMacOSX$/;"	s
CompileTimeAssertionChecks_uDNS	mDNSCore/uDNS.c	/^struct CompileTimeAssertionChecks_uDNS$/;"	s	file:
CompileTimeAssertionChecks_uds_daemon	mDNSShared/uds_daemon.c	/^struct CompileTimeAssertionChecks_uds_daemon$/;"	s	file:
CompleteDeregistration	mDNSCore/mDNS.c	/^mDNSexport void CompleteDeregistration(mDNS *const m, AuthRecord *rr)$/;"	f
CompleteRDataUpdate	mDNSCore/mDNS.c	/^mDNSlocal void CompleteRDataUpdate(mDNS *const m, AuthRecord *const rr)$/;"	f
CompleteRecordNatMap	mDNSCore/uDNS.c	/^mDNSlocal void CompleteRecordNatMap(mDNS *m, NATTraversalInfo *n)$/;"	f
CompressedDomainNameLength	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu16 CompressedDomainNameLength(const domainname *const name, const domainname *parent)$/;"	f
ComputeIconRect	mDNSMacOS9/ShowInitIcon.c	/^static void ComputeIconRect (Rect* iconRect, Rect* screenBounds)$/;"	f	file:
ComputerDescriptionDidChange	mDNSWindows/mDNSWin32.c	/^void ComputerDescriptionDidChange( mDNS * const inMDNS )$/;"	f
ComputerDescriptionNotification	mDNSWindows/SystemService/Service.c	/^ComputerDescriptionNotification( HANDLE event, void *context )$/;"	f
ConfigDNSServers	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void ConfigDNSServers(mDNS *const m, dns_resolver_t *r, mDNSInterfaceID interface, mDNSu32 scope, mDNSu16 resGroupID)$/;"	f
ConfigNonUnicastResolver	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void ConfigNonUnicastResolver(mDNS *const m, dns_resolver_t *r)$/;"	f
ConfigParseInterfaceID	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSInterfaceID ConfigParseInterfaceID(mDNS *const m, mDNSu32 ifindex)$/;"	f
ConfigResolvers	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void ConfigResolvers(mDNS *const m, dns_config_t *config, mDNSu32 scope, mDNSBool setsearch, mDNSBool setservers, MD5_CTX *sdc, mDNSu16 resGroupID)$/;"	f
ConfigSearchDomains	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void ConfigSearchDomains(mDNS *const m, dns_resolver_t *resolver, mDNSInterfaceID interface, mDNSu32 scope, MD5_CTX *sdc)$/;"	f
Conflict	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool Conflict;              \/\/ Set if this record set was forcibly deregistered because of a conflict$/;"	m	struct:ServiceRecordSet_struct
ConnectToServer	mDNSShared/dnsextd.c	/^mDNSlocal TCPSocket *ConnectToServer(DaemonInfo *d)$/;"	f
ConnectToServer	mDNSShared/dnssd_clientstub.c	/^static DNSServiceErrorType ConnectToServer(DNSServiceRef *ref, DNSServiceFlags flags, uint32_t op, ProcessReplyFn ProcessReply, void *AppCallback, void *AppContext)$/;"	f	file:
ConnectionResponse	mDNSShared/dnssd_clientstub.c	/^static void ConnectionResponse(DNSServiceOp *const sdr, const CallbackHeader *const cbh, const char *const data, const char *const end)$/;"	f	file:
ConsoleControlHandler	mDNSPosix/NetMonitor.c	/^static BOOL WINAPI ConsoleControlHandler( DWORD inControlEvent ) { SetEvent( gStopEvent ); return TRUE; }$/;"	f	file:
ConsoleControlHandler	mDNSWindows/SystemService/Service.c	/^static BOOL WINAPI	ConsoleControlHandler( DWORD inControlEvent )$/;"	f	file:
ConstructNSEC3Record	mDNSCore/anonymous.c	/^mDNSlocal ResourceRecord *ConstructNSEC3Record(const domainname *service, const mDNSu8 *AnonData, int len, mDNSu32 salt)$/;"	f
ConstructName	mDNSShared/Java/DNSSD.java	/^	protected native int	ConstructName( String serviceName, String regType, String domain, String[] pOut);$/;"	m	class:AppleDNSSD
ConstructServiceName	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *ConstructServiceName(domainname *const fqdn,$/;"	f
ConstructSleepProxyServerName	mDNSCore/mDNS.c	/^mDNSlocal void ConstructSleepProxyServerName(mDNS *const m, domainlabel *name)$/;"	f
ContainsKey	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^TextRecord::ContainsKey$/;"	f	class:TextRecord
ContainsKey	mDNSWindows/DLLX/TXTRecord.cpp	/^STDMETHODIMP CTXTRecord::ContainsKey(BSTR key, VARIANT_BOOL* retval)$/;"	f	class:CTXTRecord
Context	mDNSPosix/mDNSPosix.c	/^    void                        *Context;$/;"	m	struct:PosixEventSource	file:
Context	mDNSShared/Java/JNISupport.c	/^    OpContext       *Context;$/;"	m	struct:RecordRegistrationRef	file:
ContextSensitiveHelp	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::ContextSensitiveHelp( BOOL inEnterMode )$/;"	f	class:ExplorerBar
ConvertDigest	mDNSMacOSX/DNSSECSupport.c	/^mDNSlocal mDNSu8 *ConvertDigest(char *digest, int digestType, int *diglen)$/;"	f
ConvertDomainLabelToCString	mDNSCore/mDNSEmbeddedAPI.h	2851;"	d
ConvertDomainLabelToCString_unescaped	mDNSCore/mDNSEmbeddedAPI.h	2850;"	d
ConvertDomainLabelToCString_withescape	mDNSCore/DNSCommon.c	/^mDNSexport char *ConvertDomainLabelToCString_withescape(const domainlabel *const label, char *ptr, char esc)$/;"	f
ConvertDomainNameToCString	mDNSCore/mDNSEmbeddedAPI.h	2854;"	d
ConvertDomainNameToCString_unescaped	mDNSCore/mDNSEmbeddedAPI.h	2853;"	d
ConvertDomainNameToCString_withescape	mDNSCore/DNSCommon.c	/^mDNSexport char *ConvertDomainNameToCString_withescape(const domainname *const name, char *ptr, char esc)$/;"	f
ConvertHeaderBytes	mDNSShared/dnssd_ipc.c	/^void ConvertHeaderBytes(ipc_msg_hdr *hdr)$/;"	f
ConvertRDATAToCanonical	mDNSCore/dnssec.c	/^mDNSlocal void ConvertRDATAToCanonical(mDNSu16 rrtype, mDNSu16 rdlength, mDNSu8 *rdata)$/;"	f
ConvertStringHandleToUTF8	mDNSMacOS9/mDNSMacOS9.c	/^mDNSlocal OSStatus ConvertStringHandleToUTF8(const StringHandle machineName, UInt8 *const utf8, ByteCount maxlen)$/;"	f
ConvertToManufacturerName	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::ConvertToManufacturerName( const CString & name )$/;"	f	class:CThirdPage
ConvertToModelName	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::ConvertToModelName( const CString & name )$/;"	f	class:CThirdPage
ConvertToString	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ConvertToString(const char * utf8String)$/;"	f	file:
ConvertUTF8PstringToRFC1034HostLabel	mDNSCore/DNSCommon.c	/^mDNSexport void ConvertUTF8PstringToRFC1034HostLabel(const mDNSu8 UTF8Name[], domainlabel *const hostlabel)$/;"	f
CopyAnonInfoForCR	mDNSCore/anonymous.c	/^mDNSexport void CopyAnonInfoForCR(mDNS *const m, CacheRecord *crto, CacheRecord *crfrom)$/;"	f
CopyCacheRecord	mDNSShared/dnsextd.c	/^mDNSlocal CacheRecord *CopyCacheRecord(const CacheRecord *orig, domainname *name)$/;"	f
CopyConnectivityBackToMyMacDict	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal CFDictionaryRef CopyConnectivityBackToMyMacDict()$/;"	f
CopyLabels	Clients/dns-sd.c	/^static int CopyLabels(char *dst, const char *lim, const char **srcp, int labels)$/;"	f	file:
CopyNSEC3ResourceRecord	mDNSCore/anonymous.c	/^mDNSlocal ResourceRecord *CopyNSEC3ResourceRecord(AnonymousInfo *si, const ResourceRecord *rr)$/;"	f
CopyNameFromKey	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal CFStringRef CopyNameFromKey(CFStringRef key)$/;"	f
CopyPrinterSettings	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::CopyPrinterSettings( Printer * printer, Service * service, Manufacturer * manufacturer, Model * model )$/;"	f	class:CThirdPage
CopyRRVerifier	mDNSCore/dnssec.c	/^mDNSlocal RRVerifier* CopyRRVerifier(RRVerifier *from)$/;"	f
CoreCallback	mDNSWindows/SystemService/Service.c	/^CoreCallback(mDNS * const inMDNS, mStatus status)$/;"	f	file:
CountExistingRegistrations	mDNSShared/uds_daemon.c	/^mDNSexport int CountExistingRegistrations(domainname *srv, mDNSIPPort port)$/;"	f
CountLabels	mDNSCore/DNSCommon.c	/^mDNSexport int CountLabels(const domainname *d)$/;"	f
CountLabelsMatch	mDNSCore/nsec.c	/^mDNSexport int CountLabelsMatch(const domainname *const d1, const domainname *const d2)$/;"	f
CountMaskBits	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal int CountMaskBits(mDNSAddr *mask)$/;"	f
CountPeerRegistrations	mDNSShared/uds_daemon.c	/^mDNSexport int CountPeerRegistrations(mDNS *const m, ServiceRecordSet *const srs)$/;"	f
CountProxyRecords	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSu32 CountProxyRecords(mDNS *const m, uint32_t *const numbytes, NetworkInterfaceInfo *const intf, mDNSBool TCPKAOnly, mDNSBool supportsTCPKA)$/;"	f
CountProxyTargets	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal int CountProxyTargets(mDNS *const m, NetworkInterfaceInfoOSX *x, int *p4, int *p6)$/;"	f
Create	mDNSCore/CryptoAlg.h	/^    mStatus (*Create)(AlgContext *ctx);$/;"	m	struct:__anon103
CreateBrowser	mDNSMacOSX/BonjourEvents.c	/^NetBrowserInfo* CreateBrowser(BonjourUserEventsPlugin* plugin, CFStringRef type, CFStringRef domain)$/;"	f
CreateBrowser	mDNSShared/Java/DNSSD.java	/^	protected native int	CreateBrowser( int flags, int ifIndex, String regType, String domain);$/;"	m	class:AppleBrowser
CreateConnection	mDNSShared/Java/DNSSD.java	/^	protected native int	CreateConnection();$/;"	m	class:AppleRecordRegistrar
CreateConnection	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSService::CreateConnection$/;"	f	class:DNSService
CreateConnection	mDNSWindows/DLLX/DNSSD.cpp	/^STDMETHODIMP CDNSSD::CreateConnection(IDNSSDService **service)$/;"	f	class:CDNSSD
CreateInstance	Clients/ExplorerPlugin/ClassFactory.cpp	/^STDMETHODIMP	ClassFactory::CreateInstance( LPUNKNOWN inUnknown, REFIID inID, LPVOID *outObject )$/;"	f	class:ClassFactory
CreateKey	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::CreateKey( CString & name, DWORD enabled )$/;"	f	class:CSecondPage
CreateNewCacheEntry	mDNSCore/mDNS.c	/^mDNSexport CacheRecord *CreateNewCacheEntry(mDNS *const m, const mDNSu32 slot, CacheGroup *cg, mDNSs32 delay, mDNSBool Add, const mDNSAddr *sourceAddress)$/;"	f
CreatePTRRecord	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void CreatePTRRecord(mDNS *const m, const domainname *domain)$/;"	f
CreateProxyRegistrationForRealService	mDNSMacOS9/Mac OS Test Responder.c	/^mDNSlocal OSStatus CreateProxyRegistrationForRealService(mDNS *m, UInt16 PortAsNumber, const char txtinfo[],$/;"	f
CreateProxyRegistrationForRealService	mDNSMacOS9/Responder.c	/^static DNSServiceErrorType CreateProxyRegistrationForRealService(RegisteredService *rs,$/;"	f	file:
CreateQuery	mDNSShared/Java/DNSSD.java	/^	protected native int	CreateQuery( int flags, int ifIndex, String serviceName, int rrtype, int rrclass);$/;"	m	class:AppleQuery
CreateResolver	mDNSShared/Java/DNSSD.java	/^	protected native int	CreateResolver( int flags, int ifIndex, String serviceName, String regType,$/;"	m	class:AppleResolver
CreateRightsDict	mDNSMacOSX/PreferencePane/ConfigurationAuthority.c	/^static CFDictionaryRef  CreateRightsDict( CFStringRef prompt)$/;"	f	file:
CryptoAlgFuncs	mDNSCore/CryptoAlg.c	/^AlgFuncs *CryptoAlgFuncs[CRYPTO_ALG_MAX];$/;"	v
CryptoAlgInit	mDNSCore/CryptoAlg.c	/^mDNSexport mStatus CryptoAlgInit(mDNSu8 alg, AlgFuncs *func)$/;"	f
CurrentAnswers	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 CurrentAnswers;                 \/\/ Number of records currently in the cache that answer this question$/;"	m	struct:DNSQuestion_struct
CurrentNATTraversal	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTraversalInfo *CurrentNATTraversal;$/;"	m	struct:mDNS_struct
CurrentQuestion	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion *CurrentQuestion;       \/\/ Next question about to be examined in AnswerLocalQuestions()$/;"	m	struct:mDNS_struct
CurrentRecord	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord *CurrentRecord;          \/\/ Next AuthRecord about to be examined$/;"	m	struct:mDNS_struct
CurrentSOA	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname       *CurrentSOA;       \/\/ Points to somewhere within ChildName$/;"	m	struct:ZoneData_struct
CurrentlyAuthorized	mDNSMacOSX/PreferencePane/ConfigurationAuthority.c	/^Boolean CurrentlyAuthorized(void)$/;"	f
D	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 A,B,C,D;$/;"	m	struct:MD5state_st
D2DBrowseList	mDNSMacOSX/mDNSMacOSX.c	/^D2DBrowseListElem* D2DBrowseList = NULL;$/;"	v
D2DBrowseListElem	mDNSMacOSX/mDNSMacOSX.c	/^typedef struct D2DBrowseListElem$/;"	s	file:
D2DBrowseListElem	mDNSMacOSX/mDNSMacOSX.c	/^} D2DBrowseListElem;$/;"	t	typeref:struct:D2DBrowseListElem	file:
D2DBrowseListRefCount	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal unsigned int D2DBrowseListRefCount(const domainname *const name, mDNSu16 type)$/;"	f
D2DBrowseListRelease	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void D2DBrowseListRelease(const domainname *const name, mDNSu16 type)$/;"	f
D2DBrowseListRetain	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void D2DBrowseListRetain(const domainname *const name, mDNSu16 type)$/;"	f
D2DFindInBrowseList	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal D2DBrowseListElem ** D2DFindInBrowseList(const domainname *const name, mDNSu16 type)$/;"	f
D2DInterface	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSu8 D2DInterface;                        \/\/ IFEF_LOCALNET_PRIVATE flag indicates we should call$/;"	m	struct:NetworkInterfaceInfoOSX_struct
D2DRecordListElem	mDNSMacOSX/mDNSMacOSX.c	/^typedef struct D2DRecordListElem$/;"	s	file:
D2DRecordListElem	mDNSMacOSX/mDNSMacOSX.c	/^} D2DRecordListElem;$/;"	t	typeref:struct:D2DRecordListElem	file:
D2DRecords	mDNSMacOSX/mDNSMacOSX.c	/^static D2DRecordListElem *D2DRecords = NULL; \/\/ List of records returned with D2DServiceFound events$/;"	v	file:
D2D_start_advertising_interface	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void D2D_start_advertising_interface(NetworkInterfaceInfo *interface)$/;"	f
D2D_stop_advertising_interface	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void D2D_stop_advertising_interface(NetworkInterfaceInfo *interface)$/;"	f
DAEMONOBJS	mDNSPosix/Makefile	/^DAEMONOBJS = $(OBJDIR)\/PosixDaemon.c.o $(OBJDIR)\/mDNSPosix.c.o $(OBJDIR)\/mDNSUNP.c.o $(OBJDIR)\/mDNS.c.o \\$/;"	m
DAIFreeCallback	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSSECAuthInfoFreeCallback *DAIFreeCallback;$/;"	m	struct:DNSQuestion_struct
DATABASE	mDNSPosix/nss_mdns.c	380;"	d	file:
DATA_ORDER_IS_LITTLE_ENDIAN	mDNSCore/DNSDigest.c	238;"	d	file:
DDNSChangedNotification	mDNSWindows/SystemService/Service.c	/^DDNSChangedNotification( HANDLE event, void *context )$/;"	f
DDNSWRITECONFIG	Makefile	/^DDNSWRITECONFIG = "$(DSTROOT)\/Library\/Application Support\/Bonjour\/ddnswriteconfig"$/;"	m
DEBUG	mDNSPosix/Makefile	/^DEBUG=0$/;"	m
DEBUG	mDNSShared/DebugServices.h	46;"	d
DEBUG	mDNSWindows/Java/makefile	/^DEBUG=0$/;"	m
DEBUG	mDNSWindows/NSPTool/Prefix.h	22;"	d
DEBUG	mDNSWindows/NSPTool/Prefix.h	25;"	d
DEBUG	mDNSWindows/SystemService/Prefix.h	22;"	d
DEBUG	mDNSWindows/SystemService/Prefix.h	25;"	d
DEBUG_C99_VA_ARGS	mDNSShared/DebugServices.h	75;"	d
DEBUG_C99_VA_ARGS	mDNSShared/DebugServices.h	78;"	d
DEBUG_C99_VA_ARGS	mDNSShared/DebugServices.h	82;"	d
DEBUG_C99_VA_ARGS	mDNSShared/DebugServices.h	85;"	d
DEBUG_CORE_SERVICE_ASSERTS_ENABLED	mDNSShared/DebugServices.h	155;"	d
DEBUG_CORE_SERVICE_ASSERTS_ENABLED	mDNSShared/DebugServices.h	157;"	d
DEBUG_EXPORT	mDNSShared/DebugServices.h	436;"	d
DEBUG_EXPORT	mDNSShared/DebugServices.h	438;"	d
DEBUG_FPRINTF_ENABLED	mDNSShared/DebugServices.h	101;"	d
DEBUG_FPRINTF_ENABLED	mDNSShared/DebugServices.h	103;"	d
DEBUG_GNU_VA_ARGS	mDNSShared/DebugServices.h	76;"	d
DEBUG_GNU_VA_ARGS	mDNSShared/DebugServices.h	79;"	d
DEBUG_GNU_VA_ARGS	mDNSShared/DebugServices.h	83;"	d
DEBUG_GNU_VA_ARGS	mDNSShared/DebugServices.h	86;"	d
DEBUG_IDEBUG_ENABLED	mDNSShared/DebugServices.h	144;"	d
DEBUG_KPRINTF_ENABLED	mDNSShared/DebugServices.h	128;"	d
DEBUG_LOCAL	mDNSShared/DebugServices.h	401;"	d
DEBUG_LOCAL	mDNSShared/DebugServices.h	403;"	d
DEBUG_MAC_OS_X_IOLOG_ENABLED	mDNSShared/DebugServices.h	118;"	d
DEBUG_NAME	mDNSVxWorks/mDNSVxWorks.c	26;"	d	file:
DEBUG_NAME	mDNSVxWorks/mDNSVxWorksIPv4Only.c	95;"	d	file:
DEBUG_NAME	mDNSWindows/DLL.NET/dnssd_NET.cpp	37;"	d	file:
DEBUG_NAME	mDNSWindows/Poll.c	114;"	d	file:
DEBUG_NAME	mDNSWindows/SystemService/Service.c	67;"	d	file:
DEBUG_NAME	mDNSWindows/mDNSWin32.c	66;"	d	file:
DEBUG_OVERRIDE_APPLE_MACROS	mDNSShared/DebugServices.h	56;"	d
DEBUG_STATIC	mDNSShared/DebugServices.h	418;"	d
DEBUG_STATIC	mDNSShared/DebugServices.h	420;"	d
DEBUG_UNUSED	mDNSShared/DebugServices.h	369;"	d
DEBUG_UNUSED	mDNSVxWorks/mDNSVxWorksIPv4Only.c	179;"	d	file:
DEBUG_USE_DEFAULT_CATEGORY	mDNSVxWorks/mDNSVxWorks.c	32;"	d	file:
DEBUG_USE_DEFAULT_CATEGORY	mDNSVxWorks/mDNSVxWorksIPv4Only.c	33;"	d	file:
DEBUG_USE_ONLY	mDNSShared/DebugServices.h	384;"	d
DEBUG_USE_ONLY	mDNSShared/DebugServices.h	386;"	d
DEFAULT	mDNSShared/Java/DNSSD.java	/^	public static final int		DEFAULT = ( 1 << 2 );$/;"	f	class:DNSSD
DEFAULT_LANG_CODE	mDNSWindows/loclibrary.c	47;"	d	file:
DEFAULT_MCAST_TIMEOUT	mDNSCore/mDNS.c	10542;"	d	file:
DEFAULT_UDNSSEC_TIMEOUT	mDNSCore/uDNS.h	72;"	d
DEFAULT_UDNS_TIMEOUT	mDNSCore/uDNS.h	68;"	d
DEFAULT_UPDATE_LEASE	mDNSCore/uDNS.h	43;"	d
DELETE_PORT_DATA_1	Clients/PrinterSetupWizard/tcpxcv.h	/^}   DELETE_PORT_DATA_1, *PDELETE_PORT_DATA_1;$/;"	t	typeref:struct:_DELETE_PORT_DATA_1
DEVICE_INFO_RECORD_LABELS	mDNSCore/mDNS.c	8682;"	d	file:
DEVICE_PREFIX	mDNSWindows/mDNSWin32.c	86;"	d	file:
DEVINFO_MODEL	mDNSMacOSX/mDNSMacOSX.c	10365;"	d	file:
DEVINFO_MODEL_LEN	mDNSMacOSX/mDNSMacOSX.c	10366;"	d	file:
DHCPWakeTime	mDNSMacOSX/daemon.c	/^mDNSlocal mDNSu32 DHCPWakeTime(void)$/;"	f
DIGEST_ALG	mDNSCore/CryptoAlg.h	/^    DIGEST_ALG,$/;"	e	enum:__anon101
DIGEST_TYPE_MAX	mDNSCore/mDNSEmbeddedAPI.h	790;"	d
DLLAddToHead	mDNSShared/GenLinkedList.c	/^void            DLLAddToHead( GenDoubleLinkedList *pList, void *elem)$/;"	f
DLLRemoveFromList	mDNSShared/GenLinkedList.c	/^void            DLLRemoveFromList( GenDoubleLinkedList *pList, void *elem)$/;"	f
DLLStub	mDNSWindows/DLLStub/DLLStub.cpp	/^DLLStub::DLLStub()$/;"	f	class:DLLStub
DLLStub	mDNSWindows/DLLStub/DLLStub.h	/^class DLLStub$/;"	c
DNSCString	mDNSMacOSX/DNSServiceDiscoveryDefines.h	/^typedef char DNSCString[1024];$/;"	t
DNSDigest_Base64ToBin	mDNSCore/DNSDigest.c	/^mDNSlocal mDNSs32 DNSDigest_Base64ToBin(const char *src, mDNSu8 *target, mDNSu32 targsize)$/;"	f
DNSDigest_ConstructHMACKey	mDNSCore/DNSDigest.c	/^mDNSlocal void DNSDigest_ConstructHMACKey(DomainAuthInfo *info, const mDNSu8 *key, mDNSu32 len)$/;"	f
DNSDigest_ConstructHMACKeyfromBase64	mDNSCore/DNSDigest.c	/^mDNSexport mDNSs32 DNSDigest_ConstructHMACKeyfromBase64(DomainAuthInfo *info, const char *b64key)$/;"	f
DNSDigest_SignMessage	mDNSCore/DNSDigest.c	/^mDNSexport void DNSDigest_SignMessage(DNSMessage *msg, mDNSu8 **end, DomainAuthInfo *info, mDNSu16 tcode)$/;"	f
DNSDigest_SignMessageHostByteOrder	mDNSCore/mDNSEmbeddedAPI.h	3025;"	d
DNSDigest_VerifyMessage	mDNSCore/DNSDigest.c	/^mDNSexport mDNSBool DNSDigest_VerifyMessage(DNSMessage *msg, mDNSu8 *end, LargeCacheRecord * lcr, DomainAuthInfo *info, mDNSu16 * rcode, mDNSu16 * tcode)$/;"	f
DNSEXTDOBJ	mDNSPosix/Makefile	/^DNSEXTDOBJ = $(OBJDIR)\/mDNSPosix.c.o $(OBJDIR)\/mDNSUNP.c.o $(OBJDIR)\/mDNSDebug.c.o $(OBJDIR)\/GenLinkedList.c.o $(OBJDIR)\/DNSDigest.c.o \\$/;"	m
DNSEXTPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort DNSEXTPort             = { { DNSEXTPortAsNumber             >> 8, DNSEXTPortAsNumber             & 0xFF } };$/;"	v
DNSEXTPortAsNumber	mDNSCore/DNSCommon.c	62;"	d	file:
DNSKEY_FIXED_SIZE	Clients/dns-sd.c	208;"	d	file:
DNSKEY_FIXED_SIZE	mDNSCore/mDNSEmbeddedAPI.h	846;"	d
DNSKEY_SECURE_ENTRY_POINT	mDNSCore/mDNSEmbeddedAPI.h	838;"	d
DNSKEY_VALID_PROTO_VALUE	mDNSCore/mDNSEmbeddedAPI.h	841;"	d
DNSKEY_ZONE_SIGN_KEY	mDNSCore/mDNSEmbeddedAPI.h	837;"	d
DNSKeyFormat	mDNSMacOSX/helper.c	/^enum DNSKeyFormat$/;"	g	file:
DNSMemCmp	mDNSCore/dnssec.c	/^mDNSexport int DNSMemCmp(const mDNSu8 *const m1, const mDNSu8 *const m2, int len)$/;"	f
DNSNameCompressionBuildLHS	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSu8 * DNSNameCompressionBuildLHS(const domainname* typeDomain, DNS_TypeValues qtype)$/;"	f
DNSNameCompressionBuildRHS	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSu8 * DNSNameCompressionBuildRHS(mDNSu8 *start, const ResourceRecord *const resourceRecord)$/;"	f
DNSNameCompressionParseBytes	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus DNSNameCompressionParseBytes(mDNS *const m, const mDNSu8 *const lhs, const mDNSu16 lhs_len, const mDNSu8 *const rhs, const mDNSu16 rhs_len, AuthRecord *rr)$/;"	f
DNSNameToLowerCase	mDNSCore/DNSCommon.c	/^mDNSexport mStatus DNSNameToLowerCase(domainname *d, domainname *result)$/;"	f
DNSNetworkAddressToString	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^static char *	DNSNetworkAddressToString( const DNSNetworkAddress *inAddr, char *outString )$/;"	f	file:
DNSOpt_Data_Space	mDNSCore/mDNSEmbeddedAPI.h	973;"	d
DNSOpt_Header_Space	mDNSCore/mDNSEmbeddedAPI.h	957;"	d
DNSOpt_LLQData_Space	mDNSCore/mDNSEmbeddedAPI.h	958;"	d
DNSOpt_LeaseData_Space	mDNSCore/mDNSEmbeddedAPI.h	959;"	d
DNSOpt_OwnerData_ID_Space	mDNSCore/mDNSEmbeddedAPI.h	960;"	d
DNSOpt_OwnerData_ID_Wake_PW4_Space	mDNSCore/mDNSEmbeddedAPI.h	962;"	d
DNSOpt_OwnerData_ID_Wake_PW6_Space	mDNSCore/mDNSEmbeddedAPI.h	963;"	d
DNSOpt_OwnerData_ID_Wake_Space	mDNSCore/mDNSEmbeddedAPI.h	961;"	d
DNSOpt_Owner_Space	mDNSCore/mDNSEmbeddedAPI.h	971;"	d
DNSOpt_TraceData_Space	mDNSCore/mDNSEmbeddedAPI.h	964;"	d
DNSProxyClient	mDNSCore/dnsproxy.c	/^typedef struct DNSProxyClient_struct DNSProxyClient;$/;"	t	typeref:struct:DNSProxyClient_struct	file:
DNSProxyClient_struct	mDNSCore/dnsproxy.c	/^struct DNSProxyClient_struct {$/;"	s	file:
DNSProxyClients	mDNSCore/dnsproxy.c	/^DNSProxyClient *DNSProxyClients;$/;"	v
DNSProxyInit	mDNSCore/dnsproxy.c	/^mDNSexport void DNSProxyInit(mDNS *const m, mDNSu32 IpIfArr[MaxIp], mDNSu32 OpIf)$/;"	f
DNSProxyInit	mDNSPosix/mDNSPosix.c	/^mDNSexport void DNSProxyInit(mDNS *const m, mDNSu32 IpIfArr[], mDNSu32 OpIf)$/;"	f
DNSProxyInit	mDNSWindows/mDNSWin32.c	/^mDNSexport void DNSProxyInit(mDNS *const m, mDNSu32 IpIfArr[], mDNSu32 OpIf)$/;"	f
DNSProxyParameters	mDNSMacOSX/Private/dns_services.h	/^} DNSProxyParameters;$/;"	t	typeref:enum:__anon161
DNSProxySetAttributes	mDNSCore/dnsproxy.c	/^mDNSexport mDNSu8 *DNSProxySetAttributes(DNSQuestion *q, DNSMessageHeader *h, DNSMessage *msg, mDNSu8 *ptr, mDNSu8 *limit)$/;"	f
DNSProxySetAttributes	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSu8 *DNSProxySetAttributes(DNSQuestion *q, DNSMessageHeader *h, DNSMessage *msg, mDNSu8 *ptr, mDNSu8 *limit)$/;"	f
DNSProxySetAttributes	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSu8 *DNSProxySetAttributes(DNSQuestion *q, DNSMessageHeader *h, DNSMessage *msg, mDNSu8 *ptr, mDNSu8 *limit)$/;"	f
DNSProxyTerminate	mDNSCore/dnsproxy.c	/^extern void DNSProxyTerminate(mDNS *const m)$/;"	f
DNSProxyTerminate	mDNSCore/dnsproxy.c	/^mDNSexport void DNSProxyTerminate(mDNS *const m)$/;"	f
DNSProxyTerminate	mDNSPosix/mDNSPosix.c	/^mDNSexport void DNSProxyTerminate(mDNS *const m)$/;"	f
DNSProxyTerminate	mDNSWindows/mDNSWin32.c	/^mDNSexport void DNSProxyTerminate(mDNS *const m)$/;"	f
DNSQuestion	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct DNSQuestion_struct DNSQuestion;$/;"	t	typeref:struct:DNSQuestion_struct
DNSQuestion_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct DNSQuestion_struct$/;"	s
DNSRecord	mDNSShared/Java/DNSRecord.java	/^public interface	DNSRecord$/;"	i
DNSRecord	mDNSShared/dnssd_clientstub.c	/^typedef struct _DNSRecordRef_t DNSRecord;$/;"	t	typeref:struct:_DNSRecordRef_t	file:
DNSRecordRef	mDNSShared/dns_sd.h	/^typedef struct _DNSRecordRef_t *DNSRecordRef;$/;"	t	typeref:struct:_DNSRecordRef_t
DNSRecordReference	mDNSMacOSX/DNSServiceDiscovery.h	/^typedef uint32_t DNSRecordReference;$/;"	t
DNSRelayTestQuestion	mDNSCore/uDNS.c	/^mDNSlocal const domainname *DNSRelayTestQuestion = (const domainname*)$/;"	v
DNSSD	mDNSShared/Java/DNSSD.java	/^	protected						DNSSD() {}	\/\/ prevent direct instantiation$/;"	m	class:DNSSD
DNSSD	mDNSShared/Java/DNSSD.java	/^abstract public class	DNSSD$/;"	c
DNSSD	mDNSWindows/DLL.NET/dnssd_NET.h	/^	namespace DNSSD$/;"	n	namespace:Apple
DNSSDException	mDNSShared/Java/DNSSDException.java	/^abstract public class	DNSSDException extends Exception$/;"	c
DNSSDRecordRegistrar	mDNSShared/Java/DNSSDRecordRegistrar.java	/^public interface	DNSSDRecordRegistrar extends DNSSDService$/;"	i
DNSSDRegistration	mDNSShared/Java/DNSSDRegistration.java	/^public interface	DNSSDRegistration extends DNSSDService$/;"	i
DNSSDService	mDNSShared/Java/DNSSDService.java	/^public interface	DNSSDService$/;"	i
DNSSDUnitTest	Clients/Java/DNSSDUnitTest.java	/^	public		DNSSDUnitTest() throws Exception$/;"	m	class:DNSSDUnitTest
DNSSDUnitTest	Clients/Java/DNSSDUnitTest.java	/^class	DNSSDUnitTest$/;"	c
DNSSD_API	mDNSShared/dns_sd.h	97;"	d
DNSSD_API	mDNSShared/dns_sd.h	99;"	d
DNSSD_CLIENT_MAXTRIES	mDNSShared/dnssd_clientstub.c	96;"	d	file:
DNSSD_CLIENT_TIMEOUT	mDNSShared/dnssd_clientstub.c	105;"	d	file:
DNSSD_IPC_H	mDNSShared/dnssd_ipc.h	30;"	d
DNSSECAlgName	mDNSCore/DNSCommon.c	/^mDNSlocal char *DNSSECAlgName(mDNSu8 alg)$/;"	f
DNSSECAuthInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    void *DNSSECAuthInfo;$/;"	m	struct:DNSQuestion_struct
DNSSECAuthInfoFreeCallback	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void DNSSECAuthInfoFreeCallback(mDNS *const m, void *context);$/;"	t
DNSSECAware	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool DNSSECAware;       \/\/ set if we are able to receive a response to a request$/;"	m	struct:DNSServer
DNSSECCanonicalOrder	mDNSCore/dnssec.c	/^mDNSexport int DNSSECCanonicalOrder(const domainname *const d1, const domainname *const d2, int *subdomain)$/;"	f
DNSSECCryptoInit	mDNSMacOSX/CryptoSupport.c	/^mDNSexport mStatus DNSSECCryptoInit(mDNS *const m)$/;"	f
DNSSECDigestName	mDNSCore/DNSCommon.c	/^mDNSlocal char *DNSSECDigestName(mDNSu8 digest)$/;"	f
DNSSECNegativeValidationCB	mDNSCore/dnssec.c	/^mDNSlocal void DNSSECNegativeValidationCB(mDNS *const m, DNSSECVerifier *dv, CacheGroup *cg, ResourceRecord *answer, DNSSECStatus status)$/;"	f
DNSSECNoResponse	mDNSCore/dnssec.c	/^mDNSlocal void DNSSECNoResponse(mDNS *const m, DNSSECVerifier *dv)$/;"	f
DNSSECOK	mDNSCore/dnsproxy.c	/^    mDNSBool DNSSECOK;              \/\/ DNSSEC OK ?$/;"	m	struct:DNSProxyClient_struct	file:
DNSSECOptionalQuestion	mDNSCore/mDNSEmbeddedAPI.h	1877;"	d
DNSSECPlatformInit	mDNSMacOSX/DNSSECSupport.c	/^mDNSexport mStatus DNSSECPlatformInit(mDNS *const m)$/;"	f
DNSSECPositiveValidationCB	mDNSCore/dnssec.c	/^mDNSlocal void DNSSECPositiveValidationCB(mDNS *const m, DNSSECVerifier *dv, CacheGroup *cg, ResourceRecord *answer, DNSSECStatus status)$/;"	f
DNSSECProbe	mDNSMacOSX/DNSSECSupport.c	/^mDNSexport void DNSSECProbe(mDNS *const m)$/;"	f
DNSSECProbeCallback	mDNSMacOSX/DNSSECSupport.c	/^mDNSlocal void DNSSECProbeCallback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
DNSSECProbeQuestion	mDNSMacOSX/DNSSECSupport.c	/^DNSQuestion DNSSECProbeQuestion;$/;"	v
DNSSECQuestion	mDNSCore/mDNSEmbeddedAPI.h	1872;"	d
DNSSECRecordAnswersQuestion	mDNSCore/DNSCommon.c	/^mDNSlocal mDNSBool DNSSECRecordAnswersQuestion(const ResourceRecord *const rr, const DNSQuestion *const q, mDNSBool *checkType)$/;"	f
DNSSECRecordType	mDNSCore/mDNSEmbeddedAPI.h	896;"	d
DNSSECStatistics	mDNSCore/mDNSEmbeddedAPI.h	/^} DNSSECStatistics;$/;"	t	typeref:struct:__anon91
DNSSECStats	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSSECStatistics DNSSECStats;$/;"	m	struct:mDNS_struct
DNSSECStatsAction	mDNSCore/mDNSEmbeddedAPI.h	/^} DNSSECStatsAction;$/;"	t	typeref:enum:__anon89
DNSSECStatsType	mDNSCore/mDNSEmbeddedAPI.h	/^} DNSSECStatsType;$/;"	t	typeref:enum:__anon90
DNSSECStatus	mDNSCore/mDNSEmbeddedAPI.h	/^} DNSSECStatus;$/;"	t	typeref:enum:__anon51
DNSSECStatusName	mDNSCore/dnssec.c	/^mDNSexport char *DNSSECStatusName(DNSSECStatus status)$/;"	f
DNSSECValDone	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { DNSSECValNotRequired = 0, DNSSECValRequired, DNSSECValInProgress, DNSSECValDone } DNSSECValState;$/;"	e	enum:__anon85
DNSSECValInProgress	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { DNSSECValNotRequired = 0, DNSSECValRequired, DNSSECValInProgress, DNSSECValDone } DNSSECValState;$/;"	e	enum:__anon85
DNSSECValNotRequired	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { DNSSECValNotRequired = 0, DNSSECValRequired, DNSSECValInProgress, DNSSECValDone } DNSSECValState;$/;"	e	enum:__anon85
DNSSECValRequired	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { DNSSECValNotRequired = 0, DNSSECValRequired, DNSSECValInProgress, DNSSECValDone } DNSSECValState;$/;"	e	enum:__anon85
DNSSECValState	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { DNSSECValNotRequired = 0, DNSSECValRequired, DNSSECValInProgress, DNSSECValDone } DNSSECValState;$/;"	t	typeref:enum:__anon85
DNSSECValidationCB	mDNSCore/dnssec.c	/^mDNSlocal void DNSSECValidationCB(mDNS *const m, DNSSECVerifier *dv, DNSSECStatus status)$/;"	f
DNSSECVerifier	mDNSCore/dnssec.h	/^typedef struct DNSSECVerifier_struct DNSSECVerifier;$/;"	t	typeref:struct:DNSSECVerifier_struct
DNSSECVerifierCallback	mDNSCore/dnssec.h	/^typedef void DNSSECVerifierCallback (mDNS *const m, DNSSECVerifier *dv, DNSSECStatus status);$/;"	t
DNSSECVerifier_struct	mDNSCore/dnssec.h	/^struct DNSSECVerifier_struct$/;"	s
DNSSEC_Bogus	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSSEC_Bogus,           \/\/ failed to validate signatures$/;"	e	enum:__anon51
DNSSEC_Indeterminate	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSSEC_Indeterminate,   \/\/ Not used currently$/;"	e	enum:__anon51
DNSSEC_Insecure	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSSEC_Insecure,        \/\/ Cannot build a chain up to the trust anchor$/;"	e	enum:__anon51
DNSSEC_NoResponse	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSSEC_NoResponse       \/\/ No DNSSEC records to start with$/;"	e	enum:__anon51
DNSSEC_Secure	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSSEC_Secure = 1,      \/\/ Securely validated and has a chain up to the trust anchor$/;"	e	enum:__anon51
DNSSEC_VALIDATION_INSECURE	mDNSCore/mDNSEmbeddedAPI.h	1867;"	d
DNSSEC_VALIDATION_NONE	mDNSCore/mDNSEmbeddedAPI.h	1864;"	d
DNSSEC_VALIDATION_SECURE	mDNSCore/mDNSEmbeddedAPI.h	1865;"	d
DNSSEC_VALIDATION_SECURE_OPTIONAL	mDNSCore/mDNSEmbeddedAPI.h	1866;"	d
DNSSERVER_PENALTY_TIME	mDNSCore/uDNS.h	37;"	d
DNSScopeToString	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport const char *DNSScopeToString(mDNSu32 scope)$/;"	f
DNSSecQFlags	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSOpaque16 DNSSecQFlags    = { { kDNSFlag0_QR_Query    | kDNSFlag0_OP_StdQuery | kDNSFlag0_RD, kDNSFlag1_CD } };$/;"	v
DNSServer	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct DNSServer$/;"	s
DNSServer	mDNSCore/mDNSEmbeddedAPI.h	/^} DNSServer;$/;"	t	typeref:struct:DNSServer
DNSServerChangeForQuestion	mDNSCore/mDNS.c	/^mDNSexport void DNSServerChangeForQuestion(mDNS *const m, DNSQuestion *q, DNSServer *new)$/;"	f
DNSServerMatch	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool DNSServerMatch(DNSServer *d, mDNSInterfaceID InterfaceID, mDNSs32 ServiceID)$/;"	f
DNSServer_Disabled	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSServer_Disabled = 3$/;"	e	enum:__anon68
DNSServer_Failed	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSServer_Failed   = 2,$/;"	e	enum:__anon68
DNSServer_FlagDelete	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSServer_FlagDelete = 1,$/;"	e	enum:__anon69
DNSServer_FlagNew	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSServer_FlagNew    = 2$/;"	e	enum:__anon69
DNSServer_Passed	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSServer_Passed   = 1,$/;"	e	enum:__anon68
DNSServer_Untested	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSServer_Untested = 0,$/;"	e	enum:__anon68
DNSServers	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSServer        *DNSServers;           \/\/ list of DNS servers$/;"	m	struct:mDNS_struct
DNSService	mDNSWindows/DLL.NET/dnssd_NET.h	/^		public __abstract __gc class DNSService$/;"	c	namespace:Apple::DNSSD
DNSServiceAddRecord	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSServiceAddRecord$/;"	f
DNSServiceAddRecord	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceAddRecord$/;"	f
DNSServiceAddRecord	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceAddRecord$/;"	f
DNSServiceBrowse	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSServiceBrowse$/;"	f
DNSServiceBrowse	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceBrowse$/;"	f
DNSServiceBrowse	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceBrowse$/;"	f
DNSServiceBrowseDispose	mDNSShared/dnssd_clientshim.c	/^static void DNSServiceBrowseDispose(mDNS_DirectOP *op)$/;"	f	file:
DNSServiceBrowseReply	mDNSShared/dns_sd.h	/^typedef void (DNSSD_API *DNSServiceBrowseReply)$/;"	t
DNSServiceBrowser	mDNSMacOSX/daemon.c	/^typedef struct DNSServiceBrowser_struct DNSServiceBrowser;$/;"	t	typeref:struct:DNSServiceBrowser_struct	file:
DNSServiceBrowserCreate	mDNSMacOSX/DNSServiceDiscovery.c	/^dns_service_discovery_ref DNSServiceBrowserCreate (const char *regtype, const char *domain, DNSServiceBrowserReply callBack,void *context)$/;"	f
DNSServiceBrowserList	mDNSMacOSX/daemon.c	/^static DNSServiceBrowser           *DNSServiceBrowserList           = NULL;$/;"	v	file:
DNSServiceBrowserQuestion	mDNSMacOSX/daemon.c	/^typedef struct DNSServiceBrowserQuestion$/;"	s	file:
DNSServiceBrowserQuestion	mDNSMacOSX/daemon.c	/^} DNSServiceBrowserQuestion;$/;"	t	typeref:struct:DNSServiceBrowserQuestion	file:
DNSServiceBrowserReply	mDNSMacOSX/DNSServiceDiscovery.h	/^typedef void (*DNSServiceBrowserReply)($/;"	t
DNSServiceBrowserReplyAddInstance	mDNSMacOSX/DNSServiceDiscovery.h	/^    DNSServiceBrowserReplyAddInstance,  \/\/ Instance of service found$/;"	e	enum:__anon159
DNSServiceBrowserReplyRemoveInstance	mDNSMacOSX/DNSServiceDiscovery.h	/^    DNSServiceBrowserReplyRemoveInstance    \/\/ Instance has been removed from network$/;"	e	enum:__anon159
DNSServiceBrowserReplyResultType	mDNSMacOSX/DNSServiceDiscovery.h	/^} DNSServiceBrowserReplyResultType;$/;"	t	typeref:enum:__anon159
DNSServiceBrowserResult	mDNSMacOSX/daemon.c	/^typedef struct DNSServiceBrowserResult_struct DNSServiceBrowserResult;$/;"	t	typeref:struct:DNSServiceBrowserResult_struct	file:
DNSServiceBrowserResult_struct	mDNSMacOSX/daemon.c	/^struct DNSServiceBrowserResult_struct$/;"	s	file:
DNSServiceBrowser_NET	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^namespace DNSServiceBrowser_NET$/;"	n
DNSServiceBrowser_struct	mDNSMacOSX/daemon.c	/^struct DNSServiceBrowser_struct$/;"	s	file:
DNSServiceConstructFullName	mDNSShared/dnssd_clientlib.c	/^DNSServiceErrorType DNSSD_API DNSServiceConstructFullName$/;"	f
DNSServiceConstructFullName	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceConstructFullName$/;"	f
DNSServiceCreateConnection	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSServiceCreateConnection(DNSServiceRef *sdRef)$/;"	f
DNSServiceCreateConnection	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceCreateConnection(DNSServiceRef *sdRef)$/;"	f
DNSServiceCreateConnection	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceCreateConnection(DNSServiceRef *sdRef)$/;"	f
DNSServiceCreateDelegateConnection	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceCreateDelegateConnection(DNSServiceRef *sdRef, int32_t pid, uuid_t uuid)$/;"	f
DNSServiceDiscoverReplyFlagsFinished	mDNSMacOSX/DNSServiceDiscovery.h	/^    DNSServiceDiscoverReplyFlagsFinished,$/;"	e	enum:__anon158
DNSServiceDiscoverReplyFlagsMoreComing	mDNSMacOSX/DNSServiceDiscovery.h	/^    DNSServiceDiscoverReplyFlagsMoreComing,$/;"	e	enum:__anon158
DNSServiceDiscoveryDeallocate	mDNSMacOSX/DNSServiceDiscovery.c	/^void DNSServiceDiscoveryDeallocate(dns_service_discovery_ref dnsServiceDiscovery)$/;"	f
DNSServiceDiscoveryLookupServer	mDNSMacOSX/DNSServiceDiscovery.c	/^static mach_port_t DNSServiceDiscoveryLookupServer(void)$/;"	f	file:
DNSServiceDiscoveryMachPort	mDNSMacOSX/DNSServiceDiscovery.c	/^mach_port_t DNSServiceDiscoveryMachPort(dns_service_discovery_ref dnsServiceDiscovery)$/;"	f
DNSServiceDiscoveryReplyFlags	mDNSMacOSX/DNSServiceDiscovery.h	/^} DNSServiceDiscoveryReplyFlags;$/;"	t	typeref:enum:__anon158
DNSServiceDiscovery_handleReply	mDNSMacOSX/DNSServiceDiscovery.c	/^void DNSServiceDiscovery_handleReply(void *replyMsg)$/;"	f
DNSServiceDomainEnumReply	mDNSShared/dns_sd.h	/^typedef void (DNSSD_API *DNSServiceDomainEnumReply)$/;"	t
DNSServiceDomainEnumeration	mDNSMacOSX/daemon.c	/^typedef struct DNSServiceDomainEnumeration_struct DNSServiceDomainEnumeration;$/;"	t	typeref:struct:DNSServiceDomainEnumeration_struct	file:
DNSServiceDomainEnumerationCreate	mDNSMacOSX/DNSServiceDiscovery.c	/^dns_service_discovery_ref DNSServiceDomainEnumerationCreate (int registrationDomains, DNSServiceDomainEnumerationReply callBack, void *context)$/;"	f
DNSServiceDomainEnumerationList	mDNSMacOSX/daemon.c	/^static DNSServiceDomainEnumeration *DNSServiceDomainEnumerationList = NULL;$/;"	v	file:
DNSServiceDomainEnumerationReply	mDNSMacOSX/DNSServiceDiscovery.h	/^typedef void (*DNSServiceDomainEnumerationReply)($/;"	t
DNSServiceDomainEnumerationReplyAddDomain	mDNSMacOSX/DNSServiceDiscovery.h	/^    DNSServiceDomainEnumerationReplyAddDomain,          \/\/ Domain found$/;"	e	enum:__anon157
DNSServiceDomainEnumerationReplyAddDomainDefault	mDNSMacOSX/DNSServiceDiscovery.h	/^    DNSServiceDomainEnumerationReplyAddDomainDefault,       \/\/ Domain found (and should be selected by default)$/;"	e	enum:__anon157
DNSServiceDomainEnumerationReplyRemoveDomain	mDNSMacOSX/DNSServiceDiscovery.h	/^    DNSServiceDomainEnumerationReplyRemoveDomain,           \/\/ Domain has been removed from network$/;"	e	enum:__anon157
DNSServiceDomainEnumerationReplyResultType	mDNSMacOSX/DNSServiceDiscovery.h	/^} DNSServiceDomainEnumerationReplyResultType;$/;"	t	typeref:enum:__anon157
DNSServiceDomainEnumeration_struct	mDNSMacOSX/daemon.c	/^struct DNSServiceDomainEnumeration_struct$/;"	s	file:
DNSServiceEnumerateDomains	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSServiceEnumerateDomains$/;"	f
DNSServiceEnumerateDomains	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceEnumerateDomains$/;"	f
DNSServiceEnumerateDomains	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceEnumerateDomains$/;"	f
DNSServiceErrorType	mDNSShared/dns_sd.h	/^typedef int32_t DNSServiceErrorType;$/;"	t
DNSServiceException	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSServiceException::DNSServiceException$/;"	f	class:DNSServiceException
DNSServiceException	mDNSWindows/DLL.NET/dnssd_NET.h	/^		public __gc class DNSServiceException$/;"	c	namespace:Apple::DNSSD
DNSServiceFlags	mDNSShared/dns_sd.h	/^typedef uint32_t DNSServiceFlags;$/;"	t
DNSServiceGetAddrInfo	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSSD_API DNSServiceGetAddrInfo($/;"	f
DNSServiceGetAddrInfo	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceGetAddrInfo$/;"	f
DNSServiceGetAddrInfo	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceGetAddrInfo$/;"	f
DNSServiceGetAddrInfoDispose	mDNSShared/dnssd_clientshim.c	/^static void DNSServiceGetAddrInfoDispose(mDNS_DirectOP *op)$/;"	f	file:
DNSServiceGetAddrInfoReply	mDNSShared/dns_sd.h	/^typedef void (DNSSD_API *DNSServiceGetAddrInfoReply)$/;"	t
DNSServiceGetAddrInfoResponse	mDNSShared/dnssd_clientshim.c	/^static void DNSSD_API DNSServiceGetAddrInfoResponse($/;"	f	file:
DNSServiceGetPID	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceGetPID(const uint16_t srcport, int32_t *pid)$/;"	f
DNSServiceGetProperty	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceGetProperty(const char *property, void *result, uint32_t *size)$/;"	f
DNSServiceGetProperty	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceGetProperty$/;"	f
DNSServiceNATPortMappingCreate	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceNATPortMappingCreate$/;"	f
DNSServiceNATPortMappingCreate	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceNATPortMappingCreate$/;"	f
DNSServiceNATPortMappingReply	mDNSShared/dns_sd.h	/^typedef void (DNSSD_API *DNSServiceNATPortMappingReply)$/;"	t
DNSServiceOp	mDNSShared/dnssd_clientstub.c	/^typedef struct _DNSServiceRef_t DNSServiceOp;$/;"	t	typeref:struct:_DNSServiceRef_t	file:
DNSServiceProcessResult	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSServiceProcessResult(DNSServiceRef sdRef)$/;"	f
DNSServiceProcessResult	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceProcessResult(DNSServiceRef sdRef)$/;"	f
DNSServiceProcessResult	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceProcessResult(DNSServiceRef sdRef)$/;"	f
DNSServiceProtocol	mDNSShared/dns_sd.h	/^typedef uint32_t DNSServiceProtocol;$/;"	t
DNSServiceProtocol	mDNSShared/uds_daemon.c	4087;"	d	file:
DNSServiceQueryRecord	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSServiceQueryRecord$/;"	f
DNSServiceQueryRecord	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceQueryRecord$/;"	f
DNSServiceQueryRecord	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceQueryRecord$/;"	f
DNSServiceQueryRecordDispose	mDNSShared/dnssd_clientshim.c	/^static void DNSServiceQueryRecordDispose(mDNS_DirectOP *op)$/;"	f	file:
DNSServiceQueryRecordReply	mDNSShared/dns_sd.h	/^typedef void (DNSSD_API *DNSServiceQueryRecordReply)$/;"	t
DNSServiceQueryRecordResponse	mDNSShared/dnssd_clientshim.c	/^mDNSlocal void DNSServiceQueryRecordResponse(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
DNSServiceReconfirmRecord	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSSD_API DNSServiceReconfirmRecord$/;"	f
DNSServiceReconfirmRecord	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceReconfirmRecord$/;"	f
DNSServiceReconfirmRecord	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceReconfirmRecord$/;"	f
DNSServiceRef	mDNSShared/dns_sd.h	/^typedef struct _DNSServiceRef_t *DNSServiceRef;$/;"	t	typeref:struct:_DNSServiceRef_t
DNSServiceRefDeallocate	mDNSShared/dnssd_clientshim.c	/^void DNSServiceRefDeallocate(DNSServiceRef sdRef)$/;"	f
DNSServiceRefDeallocate	mDNSShared/dnssd_clientstub.c	/^void DNSSD_API DNSServiceRefDeallocate(DNSServiceRef sdRef)$/;"	f
DNSServiceRefDeallocate	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceRefDeallocate(DNSServiceRef sdRef)$/;"	f
DNSServiceRefDeallocateFunc	mDNSWindows/mDNSWin32.c	/^typedef void ( DNSSD_API *DNSServiceRefDeallocateFunc )( DNSServiceRef sdRef );$/;"	t	file:
DNSServiceRefSockFD	mDNSShared/dnssd_clientshim.c	/^int DNSServiceRefSockFD(DNSServiceRef sdRef)$/;"	f
DNSServiceRefSockFD	mDNSShared/dnssd_clientstub.c	/^int DNSSD_API DNSServiceRefSockFD(DNSServiceRef sdRef)$/;"	f
DNSServiceRefSockFD	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceRefSockFD(DNSServiceRef sdRef)$/;"	f
DNSServiceRefValid	mDNSShared/dnssd_clientstub.c	134;"	d	file:
DNSServiceRegister	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSServiceRegister$/;"	f
DNSServiceRegister	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceRegister$/;"	f
DNSServiceRegister	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceRegister$/;"	f
DNSServiceRegisterDispose	mDNSShared/dnssd_clientshim.c	/^static void DNSServiceRegisterDispose(mDNS_DirectOP *op)$/;"	f	file:
DNSServiceRegisterFunc	mDNSWindows/mDNSWin32.c	/^typedef DNSServiceErrorType ( DNSSD_API *DNSServiceRegisterFunc )$/;"	t	file:
DNSServiceRegisterRecord	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSServiceRegisterRecord$/;"	f
DNSServiceRegisterRecord	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceRegisterRecord$/;"	f
DNSServiceRegisterRecord	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceRegisterRecord$/;"	f
DNSServiceRegisterRecordReply	mDNSShared/dns_sd.h	/^typedef void (DNSSD_API *DNSServiceRegisterRecordReply)$/;"	t
DNSServiceRegisterReply	mDNSShared/dns_sd.h	/^typedef void (DNSSD_API *DNSServiceRegisterReply)$/;"	t
DNSServiceRegistration	mDNSMacOSX/daemon.c	/^typedef struct DNSServiceRegistration$/;"	s	file:
DNSServiceRegistration	mDNSMacOSX/daemon.c	/^} DNSServiceRegistration;$/;"	t	typeref:struct:DNSServiceRegistration	file:
DNSServiceRegistrationAddRecord	mDNSMacOSX/DNSServiceDiscovery.c	/^DNSRecordReference DNSServiceRegistrationAddRecord(dns_service_discovery_ref ref, uint16_t rrtype, uint16_t rdlen, const char *rdata, uint32_t ttl)$/;"	f
DNSServiceRegistrationCreate	mDNSMacOSX/DNSServiceDiscovery.c	/^dns_service_discovery_ref DNSServiceRegistrationCreate$/;"	f
DNSServiceRegistrationList	mDNSMacOSX/daemon.c	/^static DNSServiceRegistration      *DNSServiceRegistrationList      = NULL;$/;"	v	file:
DNSServiceRegistrationRemoveRecord	mDNSMacOSX/DNSServiceDiscovery.c	/^DNSServiceRegistrationReplyErrorType DNSServiceRegistrationRemoveRecord(dns_service_discovery_ref ref, DNSRecordReference reference)$/;"	f
DNSServiceRegistrationReply	mDNSMacOSX/DNSServiceDiscovery.h	/^typedef void (*DNSServiceRegistrationReply)($/;"	t
DNSServiceRegistrationReplyErrorType	mDNSMacOSX/DNSServiceDiscovery.h	/^} DNSServiceRegistrationReplyErrorType;$/;"	t	typeref:enum:__anon156
DNSServiceRegistrationUpdateRecord	mDNSMacOSX/DNSServiceDiscovery.c	/^DNSServiceRegistrationReplyErrorType DNSServiceRegistrationUpdateRecord(dns_service_discovery_ref ref, DNSRecordReference reference, uint16_t rdlen, const char *rdata, uint32_t ttl)$/;"	f
DNSServiceRemoveRecord	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSServiceRemoveRecord$/;"	f
DNSServiceRemoveRecord	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceRemoveRecord$/;"	f
DNSServiceRemoveRecord	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceRemoveRecord$/;"	f
DNSServiceResolve	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSServiceResolve$/;"	f
DNSServiceResolve	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceResolve$/;"	f
DNSServiceResolve	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceResolve$/;"	f
DNSServiceResolveDispose	mDNSShared/dnssd_clientshim.c	/^static void DNSServiceResolveDispose(mDNS_DirectOP *op)$/;"	f	file:
DNSServiceResolveReply	mDNSShared/dns_sd.h	/^typedef void (DNSSD_API *DNSServiceResolveReply)$/;"	t
DNSServiceResolver	mDNSMacOSX/daemon.c	/^typedef struct DNSServiceResolver_struct DNSServiceResolver;$/;"	t	typeref:struct:DNSServiceResolver_struct	file:
DNSServiceResolverList	mDNSMacOSX/daemon.c	/^static DNSServiceResolver          *DNSServiceResolverList          = NULL;$/;"	v	file:
DNSServiceResolverReply	mDNSMacOSX/DNSServiceDiscovery.h	/^typedef void (*DNSServiceResolverReply)($/;"	t
DNSServiceResolverResolve	mDNSMacOSX/DNSServiceDiscovery.c	/^dns_service_discovery_ref DNSServiceResolverResolve(const char *name, const char *regtype, const char *domain, DNSServiceResolverReply callBack, void *context)$/;"	f
DNSServiceResolver_struct	mDNSMacOSX/daemon.c	/^struct DNSServiceResolver_struct$/;"	s	file:
DNSServiceSetDefaultDomainForUser	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceSetDefaultDomainForUser(DNSServiceFlags flags, const char *domain)$/;"	f
DNSServiceSetDispatchQueue	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceSetDispatchQueue$/;"	f
DNSServiceSleepKeepalive	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceSleepKeepalive$/;"	f
DNSServiceSleepKeepaliveReply	mDNSShared/dns_sd.h	/^typedef void (DNSSD_API *DNSServiceSleepKeepaliveReply)$/;"	t
DNSServiceUpdateRecord	mDNSShared/dnssd_clientshim.c	/^DNSServiceErrorType DNSServiceUpdateRecord$/;"	f
DNSServiceUpdateRecord	mDNSShared/dnssd_clientstub.c	/^DNSServiceErrorType DNSSD_API DNSServiceUpdateRecord$/;"	f
DNSServiceUpdateRecord	mDNSWindows/DLLStub/DLLStub.cpp	/^DNSServiceUpdateRecord$/;"	f
DNSTrigger	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSs32 DNSTrigger;                \/\/ Time the DNSTrigger was given$/;"	m	struct:mDNS_PlatformSupport_struct
DNSTypeName	Clients/dns-sd.c	/^static char *DNSTypeName(unsigned short rr_type)$/;"	f	file:
DNSTypeName	mDNSCore/DNSCommon.c	/^mDNSexport char *DNSTypeName(mDNSu16 rrtype)$/;"	f
DNSXConnRef	mDNSMacOSX/Private/dns_services.h	/^typedef struct _DNSXConnRef_t *DNSXConnRef;$/;"	t	typeref:struct:_DNSXConnRef_t
DNSXEnableProxy	mDNSMacOSX/Private/dns_services.c	/^DNSXErrorType DNSXEnableProxy(DNSXConnRef *connRef, DNSProxyParameters proxyparam, IfIndex inIfindexArr[MaxInputIf], $/;"	f
DNSXEnableProxyReply	mDNSMacOSX/Private/dns_services.h	/^typedef void (*DNSXEnableProxyReply)$/;"	t
DNSXErrorType	mDNSMacOSX/Private/dns_services.h	/^} DNSXErrorType;$/;"	t	typeref:enum:__anon160
DNSXRefDeAlloc	mDNSMacOSX/Private/dns_services.c	/^void DNSXRefDeAlloc(DNSXConnRef connRef)$/;"	f
DNSZone	mDNSShared/dnsextd.h	/^typedef struct DNSZone$/;"	s
DNSZone	mDNSShared/dnsextd.h	/^} DNSZone;$/;"	t	typeref:struct:DNSZone
DNSZoneSpecType	mDNSShared/dnsextd.h	/^typedef enum DNSZoneSpecType$/;"	g
DNSZoneSpecType	mDNSShared/dnsextd.h	/^} DNSZoneSpecType;$/;"	t	typeref:enum:DNSZoneSpecType
DNS_ClassValues	mDNSCore/mDNSEmbeddedAPI.h	/^} DNS_ClassValues;$/;"	t	typeref:enum:__anon29
DNS_Flags	mDNSCore/DNSCommon.h	/^} DNS_Flags;$/;"	t	typeref:enum:__anon106
DNS_LABEL_MAXLEN	mDNSPosix/nss_mdns.c	336;"	d	file:
DNS_NAME_MAXLEN	mDNSPosix/nss_mdns.c	338;"	d	file:
DNS_OP_Name	mDNSCore/DNSCommon.c	3640;"	d	file:
DNS_PTR_AF_INET6_SIZE	mDNSPosix/nss_mdns.c	177;"	d	file:
DNS_PTR_AF_INET_SIZE	mDNSPosix/nss_mdns.c	154;"	d	file:
DNS_RC_Name	mDNSCore/DNSCommon.c	3648;"	d	file:
DNS_RDATA_TO_NAME_BAD_FORMAT	mDNSPosix/nss_mdns.c	/^    DNS_RDATA_TO_NAME_BAD_FORMAT = -1,$/;"	e	enum:__anon24	file:
DNS_RDATA_TO_NAME_PTR	mDNSPosix/nss_mdns.c	/^    DNS_RDATA_TO_NAME_PTR = -3,$/;"	e	enum:__anon24	file:
DNS_RDATA_TO_NAME_TOO_LONG	mDNSPosix/nss_mdns.c	/^    DNS_RDATA_TO_NAME_TOO_LONG = -2,$/;"	e	enum:__anon24	file:
DNS_SD_CLIENT_ENABLED	mDNSWindows/SystemService/Prefix.h	28;"	d
DNS_SERIAL_GT	mDNSCore/dnssec.h	132;"	d
DNS_SERIAL_LT	mDNSCore/dnssec.h	133;"	d
DNS_SERVICE_DISCOVERY_SERVER	mDNSMacOSX/DNSServiceDiscoveryDefines.h	23;"	d
DNS_TRIGGER_INTERVAL	mDNSMacOSX/mDNSMacOSX.c	189;"	d	file:
DNS_TypeValues	mDNSCore/mDNSEmbeddedAPI.h	/^} DNS_TypeValues;$/;"	t	typeref:enum:__anon30
DNS_XPC_H	mDNSMacOSX/Private/dns_xpc.h	11;"	d
DNSserverCallback	mDNSMacOSX/daemon.c	/^mDNSlocal void DNSserverCallback(CFMachPortRef port, void *msg, CFIndex size, void *info)$/;"	f
DNameListElem	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct DNameListElem$/;"	s
DNameListElem	mDNSCore/mDNSEmbeddedAPI.h	/^} DNameListElem;$/;"	t	typeref:struct:DNameListElem
DOUBLENAT	mDNSShared/Java/DNSSDException.java	/^    public static final int		DOUBLENAT                 = -65558;$/;"	f	class:DNSSDException
DS_FIXED_SIZE	Clients/dns-sd.c	199;"	d	file:
DS_FIXED_SIZE	mDNSCore/mDNSEmbeddedAPI.h	799;"	d
DVCallback	mDNSCore/dnssec.h	/^    DNSSECVerifierCallback *DVCallback;$/;"	m	struct:DNSSECVerifier_struct
DYNDNS_KEYCHAIN_DESCRIPTION	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	63;"	d
DaemonInfo	mDNSShared/dnsextd.h	/^} DaemonInfo;$/;"	t	typeref:struct:__anon116
DaemonReplyStatusCodes	mDNSMacOSX/Private/dns_xpc.h	/^} DaemonReplyStatusCodes;$/;"	t	typeref:enum:__anon162
DeadvertiseAllInterfaceRecords	mDNSCore/mDNS.c	/^mDNSlocal void DeadvertiseAllInterfaceRecords(mDNS *const m)$/;"	f
DeadvertiseInterface	mDNSCore/mDNS.c	/^mDNSlocal void DeadvertiseInterface(mDNS *const m, NetworkInterfaceInfo *set)$/;"	f
Dealloc	mDNSMacOSX/BonjourEvents.c	/^static void Dealloc(BonjourUserEventsPlugin* plugin)$/;"	f	file:
DebugAssertOutputHandler	mDNSShared/DebugServices.c	/^DebugAssertOutputHandler($/;"	f	file:
DebugDumpQuerySet	mDNSWindows/mdnsNSP/mdnsNSP.c	/^void	DebugDumpQuerySet( DebugLevel inLevel, const WSAQUERYSETW *inQuerySet )$/;"	f
DebugExtractTaskLevelInterruptDepth	mDNSShared/DebugServices.h	264;"	d
DebugExtractTaskLevelInterruptLevel	mDNSShared/DebugServices.h	261;"	d
DebugFPrintFInit	mDNSShared/DebugServices.c	/^static OSStatus DebugFPrintFInit( DebugOutputTypeFlags inFlags, const char *inFilename )$/;"	f	file:
DebugFPrintFPrint	mDNSShared/DebugServices.c	/^static void DebugFPrintFPrint( char *inData, size_t inSize )$/;"	f	file:
DebugFinalize	mDNSShared/DebugServices.c	/^DEBUG_EXPORT void       DebugFinalize( void )$/;"	f
DebugFlags	mDNSShared/DebugServices.h	/^typedef uint32_t DebugFlags;$/;"	t
DebugGetErrorString	mDNSShared/DebugServices.c	/^DEBUG_EXPORT const char *   DebugGetErrorString( int_least32_t inErrorCode, char *inBuffer, size_t inBufferSize )$/;"	f
DebugGetProperty	mDNSShared/DebugServices.c	/^DEBUG_EXPORT OSStatus   DebugGetProperty( DebugPropertyTag inTag, ... )$/;"	f
DebugHexDump	mDNSShared/DebugServices.c	/^DebugHexDump($/;"	f
DebugInitialize	mDNSShared/DebugServices.c	/^DEBUG_EXPORT OSStatus   DebugInitialize( DebugOutputType inType, ... )$/;"	f
DebugIsPrint	mDNSShared/DebugServices.c	73;"	d	file:
DebugKPrintFPrint	mDNSShared/DebugServices.c	/^static void DebugKPrintFPrint( char *inData, size_t inSize )$/;"	f	file:
DebugLevel	mDNSShared/DebugServices.h	/^typedef int32_t DebugLevel;$/;"	t
DebugLogMsg	mDNSShared/DebugServices.h	1258;"	d
DebugLogMsg	mDNSShared/DebugServices.h	1268;"	d
DebugLogMsg	mDNSShared/DebugServices.h	1271;"	d
DebugMacOSXIOLogPrint	mDNSShared/DebugServices.c	/^static void DebugMacOSXIOLogPrint( char *inData, size_t inSize )$/;"	f	file:
DebugMacOSXLogFunctionPtr	mDNSShared/DebugServices.c	/^typedef int ( *DebugMacOSXLogFunctionPtr )( const char *inFormat, ... );$/;"	t	file:
DebugMacOSXLogInit	mDNSShared/DebugServices.c	/^static OSStatus DebugMacOSXLogInit( void )$/;"	f	file:
DebugMacOSXLogPrint	mDNSShared/DebugServices.c	/^static void DebugMacOSXLogPrint( char *inData, size_t inSize )$/;"	f	file:
DebugMsg	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal void  DebugMsg( DebugLevel inLevel, const char *inFormat, ... )$/;"	f
DebugNSLog	mDNSShared/DebugServices.h	1234;"	d
DebugNSLog	mDNSShared/DebugServices.h	1236;"	d
DebugNSLog	mDNSShared/DebugServices.h	1238;"	d
DebugNSLog	mDNSShared/DebugServices.h	1242;"	d
DebugNSLog	mDNSShared/DebugServices.h	1244;"	d
DebugNSLog	mDNSShared/DebugServices.h	1246;"	d
DebugNameSpaceToString	mDNSWindows/mdnsNSP/mdnsNSP.c	1693;"	d	file:
DebugNumVersionToString	mDNSShared/DebugServices.c	/^static char *   DebugNumVersionToString( uint32_t inVersion, char *inString )$/;"	f	file:
DebugOutputFunctionPtr	mDNSShared/DebugServices.h	/^typedef void ( *DebugOutputFunctionPtr )( char *inData, size_t inSize, void *inContext );$/;"	t
DebugOutputType	mDNSShared/DebugServices.h	/^typedef uint32_t DebugOutputType;$/;"	t
DebugOutputTypeFlags	mDNSShared/DebugServices.h	/^typedef unsigned int DebugOutputTypeFlags;$/;"	t
DebugPrint	mDNSShared/DebugServices.c	/^static OSStatus DebugPrint( DebugLevel inLevel, char *inData, size_t inSize )$/;"	f	file:
DebugPrintAssert	mDNSShared/DebugServices.c	/^DebugPrintAssert($/;"	f
DebugPrintF	mDNSShared/DebugServices.c	/^DEBUG_EXPORT size_t DebugPrintF( DebugLevel inLevel, const char *inFormat, ... )$/;"	f
DebugPrintFVAList	mDNSShared/DebugServices.c	/^DEBUG_EXPORT size_t DebugPrintFVAList( DebugLevel inLevel, const char *inFormat, va_list inArgs )$/;"	f
DebugPropertyTag	mDNSShared/DebugServices.h	/^typedef uint32_t DebugPropertyTag;$/;"	t
DebugSNPrintF	mDNSShared/DebugServices.c	/^DEBUG_EXPORT size_t DebugSNPrintF(char *sbuffer, size_t buflen, const char *fmt, ...)$/;"	f
DebugSNPrintFVAList	mDNSShared/DebugServices.c	/^DEBUG_EXPORT size_t DebugSNPrintFVAList(char *sbuffer, size_t buflen, const char *fmt, va_list arg)$/;"	f
DebugServicesTest	mDNSShared/DebugServices.c	/^DEBUG_EXPORT OSStatus   DebugServicesTest( void )$/;"	f
DebugSetFilter	mDNSMacOSX/daemon.c	/^mDNSlocal void DebugSetFilter()$/;"	f
DebugSetProperty	mDNSShared/DebugServices.c	/^DEBUG_EXPORT OSStatus   DebugSetProperty( DebugPropertyTag inTag, ... )$/;"	f
DebugSocketFamilyToString	mDNSWindows/mdnsNSP/mdnsNSP.c	1687;"	d	file:
DebugSocketProtocolToString	mDNSWindows/mdnsNSP/mdnsNSP.c	1690;"	d	file:
DebugTaskLevel	mDNSShared/DebugServices.c	/^DEBUG_EXPORT uint32_t   DebugTaskLevel( void )$/;"	f
DebugWinCharToTCharString	mDNSShared/DebugServices.c	/^DebugWinCharToTCharString($/;"	f	file:
DebugWinEnableConsole	mDNSShared/DebugServices.c	/^static void DebugWinEnableConsole( void )$/;"	f	file:
DebugWindowsDebuggerPrint	mDNSShared/DebugServices.c	/^void    DebugWindowsDebuggerPrint( char *inData, size_t inSize )$/;"	f
DebugWindowsEventLogInit	mDNSShared/DebugServices.c	/^static OSStatus DebugWindowsEventLogInit( const char *inName, HMODULE inModule )$/;"	f	file:
DebugWindowsEventLogPrint	mDNSShared/DebugServices.c	/^static void DebugWindowsEventLogPrint( DebugLevel inLevel, char *inData, size_t inSize )$/;"	f	file:
DebugiDebugInit	mDNSShared/DebugServices.c	/^static OSStatus DebugiDebugInit( void )$/;"	f	file:
DebugiDebugPrint	mDNSShared/DebugServices.c	/^static void DebugiDebugPrint( char *inData, size_t inSize )$/;"	f	file:
DecodeDomainName	mDNSWindows/ControlPanel/ConfigPropertySheet.cpp	/^CConfigPropertySheet::DecodeDomainName( const char * raw, CString & decoded )$/;"	f	class:CConfigPropertySheet
DeconstructServiceName	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool DeconstructServiceName(const domainname *const fqdn,$/;"	f
DecrementAutoTargetServices	mDNSCore/mDNS.c	/^mDNSlocal void DecrementAutoTargetServices(mDNS *const m, AuthRecord *const rr)$/;"	f
DefBrowseQ	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion DefBrowseQ;$/;"	m	struct:SearchListElem
DefRegisterQ	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion DefRegisterQ;$/;"	m	struct:SearchListElem
DefaultAPIntervalForRecordType	mDNSCore/mDNS.c	695;"	d	file:
DefaultAnnounceIntervalForTypeShared	mDNSCore/mDNS.c	692;"	d	file:
DefaultAnnounceIntervalForTypeUnique	mDNSCore/mDNS.c	693;"	d	file:
DefaultDomain	mDNSMacOSX/daemon.c	/^    mDNSBool DefaultDomain;                \/\/ was the browse started on an explicit domain?$/;"	m	struct:DNSServiceBrowser_struct	file:
DefaultDomain	mDNSMacOSX/daemon.c	/^    mDNSBool DefaultDomain;$/;"	m	struct:DNSServiceRegistration	file:
DefaultPrinterExists	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::DefaultPrinterExists()$/;"	f	class:CThirdPage
DefaultProbeCountForRecordType	mDNSCore/mDNS.c	670;"	d	file:
DefaultProbeCountForTypeUnique	mDNSCore/mDNS.c	669;"	d	file:
DefaultProbeIntervalForTypeUnique	mDNSCore/mDNS.c	691;"	d	file:
DefaultTTLforRRType	mDNSCore/mDNSEmbeddedAPI.h	450;"	d
DelTrustAnchor	mDNSMacOSX/DNSSECSupport.c	/^mDNSlocal void DelTrustAnchor(mDNS *const m, const domainname *zone)$/;"	f
DelayAnswering	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 DelayAnswering;                 \/\/ Set if we want to defer answering this question until the cache settles$/;"	m	struct:DNSQuestion_struct
DelayDelivery	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 DelayDelivery;              \/\/ Set if we want to defer delivery of this answer to local clients$/;"	m	struct:CacheRecord_struct
DelaySleep	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 DelaySleep;                 \/\/ To inhibit re-sleeping too quickly right after wake$/;"	m	struct:mDNS_struct
DeleteCachedNSECS	mDNSCore/nsec.c	/^mDNSlocal void DeleteCachedNSECS(mDNS *const m, CacheRecord *cr)$/;"	f
DeleteLLQ	mDNSShared/dnsextd.c	/^mDNSlocal void DeleteLLQ(DaemonInfo *d, LLQEntry *e)$/;"	f
DeleteOneRecord	mDNSShared/dnsextd.c	/^mDNSlocal void DeleteOneRecord(DaemonInfo *d, CacheRecord *rr, domainname *zname, TCPSocket *sock)$/;"	f
DeleteRecords	mDNSShared/dnsextd.c	/^mDNSlocal void DeleteRecords(DaemonInfo *d, mDNSBool DeleteAll)$/;"	f
DeliverDNSSECStatus	mDNSCore/dnssec.c	/^mDNSlocal void DeliverDNSSECStatus(mDNS *const m, DNSSECVerifier *dv, ResourceRecord *answer, DNSSECStatus status)$/;"	f
DeliverInsecureProofResult	mDNSCore/dnssec.c	/^mDNSlocal void DeliverInsecureProofResult(mDNS *const m, InsecureContext *ic, DNSSECStatus status)$/;"	f
DeliverInsecureProofResultAsync	mDNSCore/dnssec.c	/^mDNSlocal void DeliverInsecureProofResultAsync(mDNS *const m, void *context)$/;"	f
DependentOn	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord     *DependentOn;        \/\/ This record depends on another for its uniqueness checking$/;"	m	struct:AuthRecord_struct
DeregLoop	mDNSCore/mDNS.c	/^mDNSlocal void DeregLoop(mDNS *const m, AuthRecord *const start)$/;"	f
DeregisterAutoTunnel6Record	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void DeregisterAutoTunnel6Record(mDNS *m, DomainAuthInfo *info)$/;"	f
DeregisterAutoTunnelDeviceInfoRecord	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void DeregisterAutoTunnelDeviceInfoRecord(mDNS *m, DomainAuthInfo *info)$/;"	f
DeregisterAutoTunnelHostRecord	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void DeregisterAutoTunnelHostRecord(mDNS *m, DomainAuthInfo *info)$/;"	f
DeregisterAutoTunnelRecord	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool DeregisterAutoTunnelRecord(mDNS *m, DomainAuthInfo *info, AuthRecord* record)$/;"	f
DeregisterAutoTunnelServiceRecords	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void DeregisterAutoTunnelServiceRecords(mDNS *m, DomainAuthInfo *info)$/;"	f
DeregisterLocalOnlyDomainEnumPTR	mDNSShared/uds_daemon.c	/^mDNSlocal void DeregisterLocalOnlyDomainEnumPTR(mDNS *m, const domainname *d, int type)$/;"	f
DeregisterOurServices	mDNSPosix/Responder.c	/^static void DeregisterOurServices(void)$/;"	f	file:
DeregisterProxyRecord	mDNSCore/mDNS.c	/^mDNSlocal void DeregisterProxyRecord(mDNS *const m, AuthRecord *const rr)$/;"	f
Destroy	mDNSCore/CryptoAlg.h	/^    mStatus (*Destroy)(AlgContext *ctx);$/;"	m	struct:__anon103
DetermineMaxEventFD	mDNSPosix/mDNSPosix.c	/^mDNSlocal void  DetermineMaxEventFD(void)$/;"	f
DeviceInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord DeviceInfo;$/;"	m	struct:mDNS_struct
DeviceInfoName	mDNSCore/mDNSEmbeddedAPI.h	2528;"	d
DictionaryIsEnabled	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSBool DictionaryIsEnabled(CFDictionaryRef dict)$/;"	f
DigestAlgFuncs	mDNSCore/CryptoAlg.c	/^AlgFuncs *DigestAlgFuncs[DIGEST_TYPE_MAX];$/;"	v
DigestAlgInit	mDNSCore/CryptoAlg.c	/^mDNSexport mStatus DigestAlgInit(mDNSu8 digestType, AlgFuncs *func)$/;"	f
DirectLink	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSu8 DirectLink;                          \/\/ IFEF_DIRECTLINK flag is set for interface$/;"	m	struct:NetworkInterfaceInfoOSX_struct
DisableSleepProxyClient	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int DisableSleepProxyClient = 0;$/;"	v
DisallowPID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool     DisallowPID;               \/\/ Is the query allowed for the "PID" that we are sending on behalf of ?$/;"	m	struct:DNSQuestion_struct
DiscardDeregistrations	mDNSCore/mDNS.c	/^mDNSlocal void DiscardDeregistrations(mDNS *const m)$/;"	f
DiscardPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort DiscardPort            = { { DiscardPortAsNumber            >> 8, DiscardPortAsNumber            & 0xFF } };$/;"	v
DiscardPortAsNumber	mDNSCore/DNSCommon.c	54;"	d	file:
DisplayError	mDNSPosix/NetMonitor.c	/^mDNSlocal void DisplayError(const mDNSAddr *srcaddr, const mDNSu8 *ptr, const mDNSu8 *const end, char *msg)$/;"	f
DisplayPacketHeader	mDNSPosix/NetMonitor.c	/^mDNSlocal void DisplayPacketHeader(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *const end, const mDNSAddr *srcaddr, mDNSIPPort srcport, const mDNSAddr *dstaddr, const mDNSInterfaceID InterfaceID)$/;"	f
DisplayQuery	mDNSPosix/NetMonitor.c	/^mDNSlocal void DisplayQuery(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *const end,$/;"	f
DisplayResourceRecord	mDNSPosix/NetMonitor.c	/^mDNSlocal void DisplayResourceRecord(const mDNSAddr *const srcaddr, const char *const op, const ResourceRecord *const pktrr)$/;"	f
DisplayResponse	mDNSPosix/NetMonitor.c	/^mDNSlocal void DisplayResponse(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *end,$/;"	f
Dispose	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		protected override void Dispose( bool disposing )$/;"	m	class:DNSServiceBrowser_NET.Form1
Dispose	Clients/SimpleChat.NET/SimpleChat.cs	/^		Dispose( bool disposing )$/;"	m	class:SimpleChat.NET.SimpleChat
Dispose	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::Dispose()$/;"	f	class:ServiceRef
Dispose	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRefImpl::Dispose()$/;"	f	class:ServiceRef::ServiceRefImpl
DisposeInfoFromUnmapList	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal void DisposeInfoFromUnmapList(mDNS *m, tcpLNTInfo *tcpInfo)$/;"	f
DisposeTCPConn	mDNSCore/uDNS.c	/^mDNSexport void DisposeTCPConn(struct tcpInfo_t *tcp)$/;"	f
DivertMulticastAdvertisements	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool DivertMulticastAdvertisements; \/\/ from interfaces that do not advertise local addresses to local-only$/;"	m	struct:mDNS_struct
DllCanUnloadNow	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^STDAPI	DllCanUnloadNow( void )$/;"	f
DllCanUnloadNow	mDNSWindows/DLLX/DLLX.cpp	/^STDAPI DllCanUnloadNow(void)$/;"	f
DllGetClassObject	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^STDAPI	DllGetClassObject( REFCLSID inCLSID, REFIID inIID, LPVOID *outResult )$/;"	f
DllGetClassObject	mDNSWindows/DLLX/DLLX.cpp	/^STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv)$/;"	f
DllMain	mDNSWindows/DLL/dllmain.c	/^BOOL APIENTRY	DllMain( HANDLE inModule, DWORD inReason, LPVOID inReserved )$/;"	f
DllMain	mDNSWindows/DLLX/DLLX.cpp	/^extern "C" BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved)$/;"	f
DllMain	mDNSWindows/mdnsNSP/mdnsNSP.c	/^BOOL APIENTRY	DllMain( HINSTANCE inInstance, DWORD inReason, LPVOID inReserved )$/;"	f
DllRegisterServer	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^STDAPI	DllRegisterServer( void )$/;"	f
DllRegisterServer	mDNSWindows/DLLX/DLLX.cpp	/^STDAPI DllRegisterServer(void)$/;"	f
DllRegisterServer	mDNSWindows/mdnsNSP/mdnsNSP.c	/^STDAPI	DllRegisterServer( void )$/;"	f
DllUnregisterServer	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^STDAPI	DllUnregisterServer( void )$/;"	f
DllUnregisterServer	mDNSWindows/DLLX/DLLX.cpp	/^STDAPI DllUnregisterServer(void)$/;"	f
DllUnregisterServer	mDNSWindows/mdnsNSP/mdnsNSP.c	/^STDAPI	DllUnregisterServer( void )$/;"	f
DoDataExchange	Clients/ExplorerPlugin/About.cpp	/^void CAbout::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CAbout
DoDataExchange	Clients/ExplorerPlugin/LoginDialog.cpp	/^void	LoginDialog::DoDataExchange( CDataExchange *inDX )$/;"	f	class:LoginDialog
DoDataExchange	Clients/PrinterSetupWizard/About.cpp	/^void CAbout::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CAbout
DoDataExchange	Clients/PrinterSetupWizard/FirstPage.cpp	/^void CFirstPage::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CFirstPage
DoDataExchange	Clients/PrinterSetupWizard/FourthPage.cpp	/^void CFourthPage::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CFourthPage
DoDataExchange	Clients/PrinterSetupWizard/SecondPage.cpp	/^void CSecondPage::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CSecondPage
DoDataExchange	Clients/PrinterSetupWizard/ThirdPage.cpp	/^void CThirdPage::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CThirdPage
DoDataExchange	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^void CAddBrowseDomain::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CAddBrowseDomain
DoDataExchange	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^void CBrowsingPage::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CBrowsingPage
DoDataExchange	mDNSWindows/ControlPanel/ConfigDialog.cpp	/^void CConfigDialog::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CConfigDialog
DoDataExchange	mDNSWindows/ControlPanel/FourthPage.cpp	/^void CFourthPage::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CFourthPage
DoDataExchange	mDNSWindows/ControlPanel/RegistrationPage.cpp	/^void CRegistrationPage::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CRegistrationPage
DoDataExchange	mDNSWindows/ControlPanel/SecondPage.cpp	/^void CSecondPage::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CSecondPage
DoDataExchange	mDNSWindows/ControlPanel/ServicesPage.cpp	/^void CPowerManagementWarning::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CPowerManagementWarning
DoDataExchange	mDNSWindows/ControlPanel/ServicesPage.cpp	/^void CServicesPage::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CServicesPage
DoDataExchange	mDNSWindows/ControlPanel/SharedSecret.cpp	/^void CSharedSecret::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CSharedSecret
DoDataExchange	mDNSWindows/DNSServiceBrowser/Windows/Sources/AboutDialog.cpp	/^void	AboutDialog::DoDataExchange(CDataExchange* pDX)$/;"	f	class:AboutDialog
DoDataExchange	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void ChooserDialog::DoDataExchange( CDataExchange *pDX )$/;"	f	class:ChooserDialog
DoDataExchange	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.cpp	/^void	LoginDialog::DoDataExchange( CDataExchange *inDX )$/;"	f	class:LoginDialog
DoDataExchange	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	/^void	BrowserDialog::DoDataExchange( CDataExchange *pDX )$/;"	f	class:BrowserDialog
DoKeepaliveCallbacks	mDNSCore/mDNS.c	/^mDNSlocal void DoKeepaliveCallbacks(mDNS *m)$/;"	f
DoOneQuery	mDNSPosix/Identify.c	/^mDNSlocal void DoOneQuery(DNSQuestion *q, char *qname, mDNSu16 qtype, const mDNSAddr *target, mDNSQuestionCallback callback)$/;"	f
DoQuery	mDNSPosix/Identify.c	/^mDNSlocal int DoQuery(DNSQuestion *q, char *qname, mDNSu16 qtype, const mDNSAddr *target, mDNSQuestionCallback callback)$/;"	f
Domain	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			public String	Domain;$/;"	f	class:DNSServiceBrowser_NET.Form1.BrowseData
Domain	Clients/SimpleChat.NET/SimpleChat.cs	/^        public String Domain;$/;"	f	class:SimpleChat.NET.PeerData
DomainAuthInfo	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct DomainAuthInfo$/;"	s
DomainAuthInfo	mDNSCore/mDNSEmbeddedAPI.h	/^} DomainAuthInfo;$/;"	t	typeref:struct:DomainAuthInfo
DomainEndsInDot	mDNSShared/dnssd_clientlib.c	/^static int DomainEndsInDot(const char *dom)$/;"	f	file:
DomainEnumFound	mDNSMacOSX/daemon.c	/^mDNSlocal void DomainEnumFound(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
DomainEnumQuery	mDNSCore/mDNS.c	/^mDNSexport mDNSBool DomainEnumQuery(const domainname *qname)$/;"	f
DomainEnumReply	mDNSShared/Java/JNISupport.c	/^static void DNSSD_API   DomainEnumReply( DNSServiceRef sdRef _UNUSED, DNSServiceFlags flags, uint32_t interfaceIndex,$/;"	f	file:
DomainEnumReply	mDNSWindows/DLLX/DNSSD.cpp	/^CDNSSD::DomainEnumReply$/;"	f	class:CDNSSD
DomainEnumReply	mDNSWindows/DLLX/DNSSDService.cpp	/^CDNSSDService::DomainEnumReply$/;"	f	class:CDNSSDService
DomainEventInfo	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^struct	DomainEventInfo$/;"	s	file:
DomainInSearchList	mDNSShared/uds_daemon.c	/^mDNSlocal mDNSBool DomainInSearchList(const domainname *domain, mDNSBool excludeLocal)$/;"	f
DomainListModel	Clients/Java/BrowserApp.java	/^class	DomainListModel extends DefaultListModel implements DomainListener$/;"	c
DomainListener	mDNSShared/Java/DomainListener.java	/^public interface DomainListener extends BaseListener$/;"	i
DomainMsg	Clients/dns-sd.c	530;"	d	file:
DomainNameComparisonFn	mDNSCore/mDNSEmbeddedAPI.h	/^typedef mDNSBool DomainNameComparisonFn (const domainname *const d1, const domainname *const d2);$/;"	t
DomainNameHashValue	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu32 DomainNameHashValue(const domainname *const name)$/;"	f
DomainNameLength	mDNSCore/mDNSEmbeddedAPI.h	2822;"	d
DomainNameLengthLimit	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu16 DomainNameLengthLimit(const domainname *const name, const mDNSu8 *limit)$/;"	f
DomainTest	Clients/Java/DNSSDUnitTest.java	/^	public		DomainTest()$/;"	m	class:DomainTest
DomainTest	Clients/Java/DNSSDUnitTest.java	/^class	DomainTest extends TermReporter implements DomainListener$/;"	c
DomainnameToLower	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void DomainnameToLower(const domainname * const in, domainname * const out)$/;"	f
DrawBWIcon	mDNSMacOS9/ShowInitIcon.c	/^static void DrawBWIcon (short iconID, Rect *iconRect)$/;"	f	file:
DumpPacket	mDNSCore/DNSCommon.c	/^mDNSexport void DumpPacket(mDNS *const m, mStatus status, mDNSBool sent, char *transport,$/;"	f
DumpRecords	mDNSCore/DNSCommon.c	/^mDNSlocal const mDNSu8 *DumpRecords(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *ptr, const mDNSu8 *const end, int count, char *label)$/;"	f
DumpStateLog	mDNSPosix/Bonjour.c	/^mDNSlocal void DumpStateLog(mDNS *const m)$/;"	f
DumpStateLog	mDNSPosix/PosixDaemon.c	/^mDNSlocal void DumpStateLog(mDNS *const m)$/;"	f
DupQuerySuppressions	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 DupQuerySuppressions;           \/\/ Duplicate query suppressions$/;"	m	struct:__anon92
DupRegTest	Clients/Java/DNSSDUnitTest.java	/^	public		DupRegTest() throws DNSSDException$/;"	m	class:DupRegTest
DupRegTest	Clients/Java/DNSSDUnitTest.java	/^class	DupRegTest extends TermReporter implements RegisterListener$/;"	c
DupSuppress	mDNSCore/mDNSEmbeddedAPI.h	/^    DupSuppressInfo DupSuppress[DupSuppressInfoSize];$/;"	m	struct:DNSQuestion_struct
DupSuppressInfo	mDNSCore/mDNSEmbeddedAPI.h	/^} DupSuppressInfo;$/;"	t	typeref:struct:__anon80
DupSuppressInfoSize	mDNSCore/mDNSEmbeddedAPI.h	1764;"	d
DuplicateOf	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion          *DuplicateOf;$/;"	m	struct:DNSQuestion_struct
DuplicateRecords	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord *DuplicateRecords;       \/\/ Records currently 'on hold' because they are duplicates of existing records$/;"	m	struct:mDNS_struct
Duration	mDNSShared/CommonServices.h	/^typedef int32_t Duration;$/;"	t
DynDNSConfigDidChange	mDNSWindows/mDNSWin32.c	/^void DynDNSConfigDidChange( mDNS * const inMDNS )$/;"	f
DynDNSHostNameCallback	mDNSCore/mDNS.c	/^mDNSlocal void DynDNSHostNameCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
DynDNSHostname	mDNSPosix/Bonjour.c	/^static domainname DynDNSHostname;$/;"	v	file:
DynDNSHostname	mDNSPosix/PosixDaemon.c	/^static domainname DynDNSHostname;$/;"	v	file:
DynDNSZone	mDNSPosix/Bonjour.c	/^static domainname DynDNSZone;                \/\/ Default wide-area zone for service registration$/;"	v	file:
DynDNSZone	mDNSPosix/PosixDaemon.c	/^static domainname DynDNSZone;                \/\/ Default wide-area zone for service registration$/;"	v	file:
DynamicStoreQueue	mDNSMacOSX/mDNSMacOSX.c	/^static dispatch_queue_t DynamicStoreQueue;$/;"	v	file:
DynamicStoreReconnected	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void DynamicStoreReconnected(SCDynamicStoreRef store, void *info)$/;"	f
DynamicStoreWrite	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void DynamicStoreWrite(int key, const char* subkey, uintptr_t value, signed long valueCnt)$/;"	f
EDIT_SYS_KEYCHAIN_RIGHT	mDNSMacOSX/PreferencePane/ConfigurationRights.h	49;"	d
EIPSEC_DO_GET_SUPP_LIST	mDNSMacOSX/ipsec_strerror.h	73;"	d
EIPSEC_FAMILY_MISMATCH	mDNSMacOSX/ipsec_strerror.h	75;"	d
EIPSEC_FEW_ARGUMENTS	mDNSMacOSX/ipsec_strerror.h	76;"	d
EIPSEC_INVAL_ADDRESS	mDNSMacOSX/ipsec_strerror.h	57;"	d
EIPSEC_INVAL_ALGS	mDNSMacOSX/ipsec_strerror.h	64;"	d
EIPSEC_INVAL_ARGUMENT	mDNSMacOSX/ipsec_strerror.h	53;"	d
EIPSEC_INVAL_DIR	mDNSMacOSX/ipsec_strerror.h	68;"	d
EIPSEC_INVAL_EXTTYPE	mDNSMacOSX/ipsec_strerror.h	63;"	d
EIPSEC_INVAL_FAMILY	mDNSMacOSX/ipsec_strerror.h	66;"	d
EIPSEC_INVAL_KEYLEN	mDNSMacOSX/ipsec_strerror.h	65;"	d
EIPSEC_INVAL_LEVEL	mDNSMacOSX/ipsec_strerror.h	60;"	d
EIPSEC_INVAL_MODE	mDNSMacOSX/ipsec_strerror.h	59;"	d
EIPSEC_INVAL_MSGTYPE	mDNSMacOSX/ipsec_strerror.h	62;"	d
EIPSEC_INVAL_POLICY	mDNSMacOSX/ipsec_strerror.h	56;"	d
EIPSEC_INVAL_PREFIXLEN	mDNSMacOSX/ipsec_strerror.h	67;"	d
EIPSEC_INVAL_PROTO	mDNSMacOSX/ipsec_strerror.h	58;"	d
EIPSEC_INVAL_SADBMSG	mDNSMacOSX/ipsec_strerror.h	54;"	d
EIPSEC_INVAL_SATYPE	mDNSMacOSX/ipsec_strerror.h	61;"	d
EIPSEC_INVAL_SPI	mDNSMacOSX/ipsec_strerror.h	69;"	d
EIPSEC_INVAL_VERSION	mDNSMacOSX/ipsec_strerror.h	55;"	d
EIPSEC_MAX	mDNSMacOSX/ipsec_strerror.h	78;"	d
EIPSEC_NOT_SUPPORTED	mDNSMacOSX/ipsec_strerror.h	52;"	d
EIPSEC_NO_ALGS	mDNSMacOSX/ipsec_strerror.h	71;"	d
EIPSEC_NO_BUFS	mDNSMacOSX/ipsec_strerror.h	72;"	d
EIPSEC_NO_ERROR	mDNSMacOSX/ipsec_strerror.h	51;"	d
EIPSEC_NO_PROTO	mDNSMacOSX/ipsec_strerror.h	70;"	d
EIPSEC_PROTO_MISMATCH	mDNSMacOSX/ipsec_strerror.h	74;"	d
EIPSEC_SYSTEM_ERROR	mDNSMacOSX/ipsec_strerror.h	77;"	d
ENC_ALG	mDNSCore/CryptoAlg.h	/^    ENC_ALG,$/;"	e	enum:__anon101
ENC_ALG_MAX	mDNSCore/mDNSEmbeddedAPI.h	797;"	d
ENC_BASE32	mDNSCore/mDNSEmbeddedAPI.h	795;"	d
ENC_BASE64	mDNSCore/mDNSEmbeddedAPI.h	796;"	d
ENOTCONN_compat	mDNSShared/CommonServices.h	439;"	d
ENOTCONN_compat	mDNSShared/CommonServices.h	451;"	d
ENTNAME	mDNSPosix/nss_mdns.c	379;"	d	file:
ENTRY_PREFIX	mDNSWindows/DLLX/dlldatax.c	40;"	d	file:
EPOCHFILETIME	mDNSWindows/PosixCompat.c	101;"	d	file:
ERROR	mDNSMacOSX/helper-stubs.c	44;"	d	file:
ERROR	mDNSMacOSX/helper-stubs.c	50;"	d	file:
ERROR	mDNSMacOSX/helper.h	52;"	d
ERROR	mDNSMacOSX/helper.h	59;"	d
ETCHOSTS_BUFSIZE	mDNSMacOSX/mDNSMacOSX.c	8844;"	d	file:
ETIMEDOUT_compat	mDNSShared/CommonServices.h	438;"	d
ETIMEDOUT_compat	mDNSShared/CommonServices.h	450;"	d
EWOULDBLOCK_compat	mDNSShared/CommonServices.h	437;"	d
EWOULDBLOCK_compat	mDNSShared/CommonServices.h	449;"	d
EXIT_IF_LIBDISPATCH_FATAL_ERROR	Clients/dns-sd.c	262;"	d	file:
EXIT_IF_LIBDISPATCH_FATAL_ERROR	Clients/dns-sd.c	265;"	d	file:
EXPIRATION_INTERVAL	mDNSShared/dnsextd.c	74;"	d	file:
EmptyComboBox	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::EmptyComboBox( CComboBox & box )$/;"	f	class:CSecondPage
EmptyQueues	Clients/PrinterSetupWizard/UtilTypes.h	/^Service::EmptyQueues()$/;"	f	class:PrinterSetupWizard::Service
EnableDeathNotificationForClient	mDNSMacOSX/daemon.c	/^mDNSlocal void EnableDeathNotificationForClient(mach_port_t ClientMachPort, void *m)$/;"	f
EnableNSP	mDNSWindows/NSPTool/NSPTool.c	/^DEBUG_LOCAL OSStatus	EnableNSP( const char *inGUID, BOOL inEnable )$/;"	f
EncAlgFuncs	mDNSCore/CryptoAlg.c	/^AlgFuncs *EncAlgFuncs[ENC_ALG_MAX];$/;"	v
EncAlgInit	mDNSCore/CryptoAlg.c	/^mDNSexport mStatus EncAlgInit(mDNSu8 alg, AlgFuncs *func)$/;"	f
Encode	mDNSCore/CryptoAlg.h	/^    mDNSu8* (*Encode)(AlgContext *ctx);$/;"	m	struct:__anon103
EnsureToolInstalled	mDNSMacOSX/PreferencePane/PrivilegedOperations.c	/^OSStatus EnsureToolInstalled(void)$/;"	f
EnumerateDomains	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSService::EnumerateDomains$/;"	f	class:DNSService
EnumerateDomains	mDNSWindows/DLLX/DNSSD.cpp	/^STDMETHODIMP CDNSSD::EnumerateDomains(DNSSDFlags flags, ULONG ifIndex, IDomainListener *listener, IDNSSDService **service)$/;"	f	class:CDNSSD
EnumerateDomains	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::EnumerateDomains(DNSSDFlags flags, ULONG ifIndex, IDNSSDEventManager *eventManager, IDNSSDService **service)$/;"	f	class:CDNSSDService
EnumerateDomainsCallback	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRefImpl::EnumerateDomainsCallback$/;"	f	class:ServiceRef::ServiceRefImpl
EnumerateDomainsDispatch	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::EnumerateDomainsDispatch$/;"	f	class:ServiceRef
Env	mDNSShared/Java/JNISupport.c	/^    JNIEnv          *Env;$/;"	m	struct:OpContext	file:
Equals	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			Equals(object other)$/;"	m	class:DNSServiceBrowser_NET.Form1.BrowseData
Equals	Clients/SimpleChat.NET/SimpleChat.cs	/^        Equals(object other)$/;"	m	class:SimpleChat.NET.PeerData
Established	mDNSShared/dnsextd.h	/^    Established     = 2$/;"	e	enum:__anon115
EtcHostsAddNewEntries	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool EtcHostsAddNewEntries(mDNS *const m, AuthHash *newhosts, mDNSBool justCheck)$/;"	f
EtcHostsDeleteOldEntries	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool EtcHostsDeleteOldEntries(mDNS *const m, AuthHash *newhosts, mDNSBool justCheck)$/;"	f
EtcHostsParseOneName	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal int EtcHostsParseOneName(int start, int length, char *buffer, char **name)$/;"	f
EventCallback	mDNSShared/dnsextd.h	/^typedef void (*EventCallback)( void * context );$/;"	t
EventList	mDNSShared/dnsextd.h	/^    CacheRecord *EventList;     \/\/ New answers (adds\/removes) to be sent to client$/;"	m	struct:AnswerListElem
EventSource	mDNSShared/dnsextd.h	/^typedef struct EventSource$/;"	s
EventSource	mDNSShared/dnsextd.h	/^} EventSource;$/;"	t	typeref:struct:EventSource
ExactlyOneFilter	mDNSPosix/NetMonitor.c	122;"	d	file:
ExampleClientEventLoop	mDNSPosix/ExampleClientApp.c	/^mDNSexport void ExampleClientEventLoop(mDNS *const m)$/;"	f
ExecWithCmdAndParam	mDNSMacOSX/PreferencePane/PrivilegedOperations.c	/^static OSStatus ExecWithCmdAndParam(const char *subCmd, CFDataRef paramData)$/;"	f	file:
Exists	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSu8 Exists;                              \/\/ 1 = currently exists in getifaddrs list; 0 = doesn't$/;"	m	struct:NetworkInterfaceInfoOSX_struct
ExitCallback	mDNSMacOSX/daemon.c	/^mDNSlocal void ExitCallback(int sig)$/;"	f
ExitInstance	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^CExplorerPluginApp::ExitInstance()$/;"	f	class:CExplorerPluginApp
ExitInstance	mDNSWindows/DNSServiceBrowser/Windows/Sources/Application.cpp	/^int	Application::ExitInstance( void )$/;"	f	class:Application
ExpectUnicastResp	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 ExpectUnicastResp;              \/\/ Set when we send a query with the kDNSQClass_UnicastResponse bit set$/;"	m	struct:DNSQuestion_struct
ExpectUnique	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool ExpectUnique;                  \/\/ Set by client if it's expecting unique RR(s) for this question, not shared RRs$/;"	m	struct:DNSQuestion_struct
ExpectingMulticastResponseForRecord	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool ExpectingMulticastResponseForRecord(mDNS *const m, CacheRecord *rr, const mDNSAddr *srcaddr, mDNSBool recordAccepted,$/;"	f
ExpectingUnicastResponseForQuestion	mDNSCore/mDNS.c	/^mDNSlocal DNSQuestion *ExpectingUnicastResponseForQuestion(const mDNS *const m, const mDNSIPPort port, const mDNSOpaque16 id, const DNSQuestion *const question, mDNSBool tcp)$/;"	f
ExpectingUnicastResponseForRecord	mDNSCore/mDNS.c	/^mDNSlocal DNSQuestion *ExpectingUnicastResponseForRecord(mDNS *const m,$/;"	f
ExpireDupSuppressInfo	mDNSCore/mDNS.c	/^mDNSlocal void ExpireDupSuppressInfo(DupSuppressInfo ds[DupSuppressInfoSize], mDNSs32 time)$/;"	f
ExpireDupSuppressInfoOnInterface	mDNSCore/mDNS.c	/^mDNSlocal void ExpireDupSuppressInfoOnInterface(DupSuppressInfo ds[DupSuppressInfoSize], mDNSs32 time, mDNSInterfaceID InterfaceID)$/;"	f
ExpiryTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 ExpiryTime;                             \/\/ Time this mapping expires, or zero if no mapping$/;"	m	struct:NATTraversalInfo_struct
ExplorerBar	Clients/ExplorerPlugin/ExplorerBar.cpp	/^ExplorerBar::ExplorerBar( void )$/;"	f	class:ExplorerBar
ExplorerBar	Clients/ExplorerPlugin/ExplorerBar.h	/^class ExplorerBar : public IDeskBand,$/;"	c
ExplorerBarWindow	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^ExplorerBarWindow::ExplorerBarWindow( void )$/;"	f	class:ExplorerBarWindow
ExplorerBarWindow	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^class ExplorerBarWindow : public CWnd$/;"	c
ExtAddress	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv4Addr ExtAddress;                      \/\/ the external address discovered via NAT-PMP or UPnP\/IGD$/;"	m	struct:mDNS_struct
ExternalAddress	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv4Addr ExternalAddress;                     \/\/ Initially set to onesIPv4Addr, until first callback$/;"	m	struct:NATTraversalInfo_struct
ExternalPort	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort ExternalPort;$/;"	m	struct:NATTraversalInfo_struct
ExternalizeAuthority	mDNSMacOSX/PreferencePane/ConfigurationAuthority.c	/^OSStatus ExternalizeAuthority(AuthorizationExternalForm *pAuth)$/;"	f
ExtraPackets0	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 ExtraPackets0;      \/\/ 0 to 2 packets$/;"	m	struct:__anon91
ExtraPackets10	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 ExtraPackets10;     \/\/ >= 10 packets$/;"	m	struct:__anon91
ExtraPackets3	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 ExtraPackets3;      \/\/ 3 to 6 packets$/;"	m	struct:__anon91
ExtraPackets7	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 ExtraPackets7;      \/\/ 7 to 9 packets$/;"	m	struct:__anon91
ExtraResourceRecord	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct ExtraResourceRecord_struct ExtraResourceRecord;$/;"	t	typeref:struct:ExtraResourceRecord_struct
ExtraResourceRecord_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct ExtraResourceRecord_struct$/;"	s
ExtractBits	mDNSShared/CommonServices.h	700;"	d
ExtractServiceType	mDNSPosix/NetMonitor.c	/^mDNSexport mDNSBool ExtractServiceType(const domainname *const fqdn, domainname *const srvtype)$/;"	f
Extras	mDNSCore/mDNSEmbeddedAPI.h	/^    ExtraResourceRecord *Extras;    \/\/ Optional list of extra AuthRecords attached to this service registration$/;"	m	struct:ServiceRecordSet_struct
F	mDNSCore/DNSDigest.c	883;"	d	file:
FIREWALL	mDNSShared/Java/DNSSDException.java	/^    public static final int		FIREWALL                  = -65550;$/;"	f	class:DNSSDException
FLEX	mDNSPosix/Makefile	/^FLEX = @flex$/;"	m
FLEXFLAGS_OS	mDNSPosix/Makefile	/^FLEXFLAGS_OS = -l$/;"	m
FORALL_AUTHRECORDS	mDNSCore/mDNSEmbeddedAPI.h	1461;"	d
FORALL_CACHERECORDS	mDNSCore/mDNSEmbeddedAPI.h	2463;"	d
FQDN	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname FQDN;$/;"	m	struct:mDNS_struct
FamilyToString	mDNSVxWorks/mDNSVxWorks.c	780;"	d	file:
FatPtr	mDNSMacOSX/mDNSMacOSX.c	/^typedef union { void *ptr; mDNSOpaque64 sixtyfourbits; } FatPtr;$/;"	t	typeref:union:__anon153	file:
FatalError	mDNSShared/uds_daemon.c	/^mDNSlocal void FatalError(char *errmsg)$/;"	f
FetchRootTA	mDNSMacOSX/DNSSECSupport.c	/^mDNSlocal void FetchRootTA(mDNS *const m)$/;"	f
FileSharingChangedNotification	mDNSWindows/SystemService/Service.c	/^FileSharingChangedNotification( HANDLE event, void *context )$/;"	f
FileSharingDidChange	mDNSWindows/mDNSWin32.c	/^void FileSharingDidChange( mDNS * const inMDNS )$/;"	f
FilterAddr	mDNSPosix/NetMonitor.c	/^    mDNSAddr FilterAddr;$/;"	m	struct:FilterList_struct	file:
FilterInterface	mDNSPosix/NetMonitor.c	/^static int FilterInterface = 0;$/;"	v	file:
FilterList	mDNSPosix/NetMonitor.c	/^typedef struct FilterList_struct FilterList;$/;"	t	typeref:struct:FilterList_struct	file:
FilterList_struct	mDNSPosix/NetMonitor.c	/^struct FilterList_struct$/;"	s	file:
Filters	mDNSPosix/NetMonitor.c	/^static FilterList *Filters;$/;"	v	file:
Final	mDNSCore/CryptoAlg.h	/^    mStatus (*Final)(AlgContext *ctx, void *data, mDNSu32 len);$/;"	m	struct:__anon103
FinalConstruct	mDNSWindows/DLLX/DNSSDEventManager.h	/^	HRESULT FinalConstruct()$/;"	f	class:CDNSSDEventManager
FinalConstruct	mDNSWindows/DLLX/DNSSDRecord.h	/^	HRESULT FinalConstruct()$/;"	f	class:CDNSSDRecord
FinalConstruct	mDNSWindows/DLLX/DNSSDService.cpp	/^HRESULT CDNSSDService::FinalConstruct()$/;"	f	class:CDNSSDService
FinalConstruct	mDNSWindows/DLLX/TXTRecord.h	/^	HRESULT FinalConstruct()$/;"	f	class:CTXTRecord
FinalRelease	mDNSWindows/DLLX/DNSSDEventManager.h	/^	void FinalRelease()$/;"	f	class:CDNSSDEventManager
FinalRelease	mDNSWindows/DLLX/DNSSDRecord.h	/^	void FinalRelease()$/;"	f	class:CDNSSDRecord
FinalRelease	mDNSWindows/DLLX/DNSSDService.cpp	/^void CDNSSDService::FinalRelease()$/;"	f	class:CDNSSDService
FinalRelease	mDNSWindows/DLLX/TXTRecord.h	/^	void FinalRelease()$/;"	f	class:CTXTRecord
FinalizeSearchDomainHash	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void FinalizeSearchDomainHash(mDNS *const m, MD5_CTX *sdc)$/;"	f
FinalizeUnicastQuestion	mDNSCore/mDNS.c	/^mDNSlocal void FinalizeUnicastQuestion(mDNS *const m, DNSQuestion *question, mDNSBool purge)$/;"	f
FindCompressionPointer	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *FindCompressionPointer(const mDNSu8 *const base, const mDNSu8 *const end, const mDNSu8 *const domname)$/;"	f
FindDuplicateQuestion	mDNSCore/mDNS.c	/^mDNSlocal DNSQuestion *FindDuplicateQuestion(const mDNS *const m, const DNSQuestion *const question)$/;"	f
FindFirstAdvertisedInterface	mDNSCore/mDNS.c	/^mDNSlocal NetworkInterfaceInfo *FindFirstAdvertisedInterface(mDNS *const m)$/;"	f
FindFirstSubType	mDNSShared/uds_daemon.c	/^mDNSlocal char *FindFirstSubType(char *p, char **AnonData)$/;"	f
FindHost	mDNSPosix/NetMonitor.c	/^mDNSlocal HostEntry *FindHost(const mDNSAddr *addr, HostList *list)$/;"	f
FindIdenticalRecordInCache	mDNSCore/mDNS.c	/^mDNSlocal CacheRecord *FindIdenticalRecordInCache(const mDNS *const m, const ResourceRecord *const pktrr)$/;"	f
FindInterfaceByIndex	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal NetworkInterfaceInfoVxWorks * FindInterfaceByIndex( mDNS *const inMDNS, int inFamily, mDNSu32 inIndex )$/;"	f
FindMatchingNSEC3ForName	mDNSCore/anonymous.c	/^mDNSlocal CacheRecord *FindMatchingNSEC3ForName(mDNS *const m, CacheRecord **nsec3, const domainname *name)$/;"	f
FindMyInterface	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSInterfaceID FindMyInterface(mDNS *const m, const mDNSAddr *addr)$/;"	f
FindNextSubType	mDNSShared/uds_daemon.c	/^mDNSlocal char *FindNextSubType(char *p)$/;"	f
FindRRSet	mDNSCore/mDNS.c	/^mDNSlocal const AuthRecord *FindRRSet(const mDNS *const m, const CacheRecord *const pktrr)$/;"	f
FindRoutableIPv4	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal NetworkInterfaceInfoVxWorks * FindRoutableIPv4( mDNS *const inMDNS, mDNSu32 inScopeID )$/;"	f
FindSPSInCache	mDNSCore/mDNS.c	/^mDNSexport void FindSPSInCache(mDNS *const m, const DNSQuestion *const q, const CacheRecord *sps[3])$/;"	f
FindSPSInCache1	mDNSCore/mDNS.c	/^mDNSlocal const CacheRecord *FindSPSInCache1(mDNS *const m, const DNSQuestion *const q, const CacheRecord *const c0, const CacheRecord *const c1)$/;"	f
FindServiceArrayIndex	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^DEBUG_LOCAL int	FindServiceArrayIndex( const ServiceInfoArray &inArray, const ServiceInfo &inService, int &outIndex )$/;"	f
FindTrustAnchor	mDNSCore/dnssec.c	/^mDNSlocal TrustAnchor *FindTrustAnchor(mDNS *const m, const domainname *const name)$/;"	f
FindUpdate	mDNSPosix/NetMonitor.c	/^mDNSlocal const mDNSu8 *FindUpdate(mDNS *const m, const DNSMessage *const query, const mDNSu8 *ptr, const mDNSu8 *const end,$/;"	f
FindZone	mDNSShared/dnsextd.c	/^FindZone$/;"	f
FinishDNSSECVerification	mDNSCore/dnssec.c	/^mDNSlocal void FinishDNSSECVerification(mDNS *const m, DNSSECVerifier *dv)$/;"	f
Fire_AddressFound	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^	HRESULT Fire_AddressFound( IDNSSDService * service,  DNSSDFlags flags,  ULONG ifIndex,  BSTR hostname,  DNSSDAddressFamily addressFamily,  BSTR address,  ULONG ttl)$/;"	f	class:CProxy_IDNSSDEvents
Fire_DomainFound	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^	HRESULT Fire_DomainFound( IDNSSDService * service,  DNSSDFlags flags,  ULONG ifIndex,  BSTR domain)$/;"	f	class:CProxy_IDNSSDEvents
Fire_DomainLost	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^	HRESULT Fire_DomainLost( IDNSSDService * service,  DNSSDFlags flags,  ULONG ifIndex,  BSTR domain)$/;"	f	class:CProxy_IDNSSDEvents
Fire_MappingCreated	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^	HRESULT Fire_MappingCreated( IDNSSDService * service,  DNSSDFlags flags,  ULONG ifIndex,  ULONG externalAddress,  DNSSDAddressFamily addressFamily,  DNSSDProtocol protocol,  USHORT internalPort,  USHORT externalPort,  ULONG ttl)$/;"	f	class:CProxy_IDNSSDEvents
Fire_OperationFailed	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^	HRESULT Fire_OperationFailed( IDNSSDService * service,  DNSSDError error)$/;"	f	class:CProxy_IDNSSDEvents
Fire_QueryRecordAnswered	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^	HRESULT Fire_QueryRecordAnswered( IDNSSDService * service,  DNSSDFlags flags,  ULONG ifIndex,  BSTR fullName,  DNSSDRRType rrtype,  DNSSDRRClass rrclass,  VARIANT rdata,  ULONG ttl)$/;"	f	class:CProxy_IDNSSDEvents
Fire_RecordRegistered	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^	HRESULT Fire_RecordRegistered( IDNSSDRecord * record,  DNSSDFlags flags)$/;"	f	class:CProxy_IDNSSDEvents
Fire_ServiceFound	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^	HRESULT Fire_ServiceFound( IDNSSDService * browser,  DNSSDFlags flags,  ULONG ifIndex,  BSTR serviceName,  BSTR regType,  BSTR domain)$/;"	f	class:CProxy_IDNSSDEvents
Fire_ServiceLost	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^	HRESULT Fire_ServiceLost( IDNSSDService * browser,  DNSSDFlags flags,  ULONG ifIndex,  BSTR serviceName,  BSTR regType,  BSTR domain)$/;"	f	class:CProxy_IDNSSDEvents
Fire_ServiceRegistered	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^	HRESULT Fire_ServiceRegistered( IDNSSDService * service,  DNSSDFlags flags,  BSTR name,  BSTR regType,  BSTR domain)$/;"	f	class:CProxy_IDNSSDEvents
Fire_ServiceResolved	mDNSWindows/DLLX/_IDNSSDEvents_CP.h	/^	HRESULT Fire_ServiceResolved( IDNSSDService * service,  DNSSDFlags flags,  ULONG ifIndex,  BSTR fullName,  BSTR hostName,  USHORT port,  ITXTRecord * record)$/;"	f	class:CProxy_IDNSSDEvents
FirewallChangedNotification	mDNSWindows/SystemService/Service.c	/^FirewallChangedNotification( HANDLE event, void *context )$/;"	f
FirewallDidChange	mDNSWindows/mDNSWin32.c	/^void FirewallDidChange( mDNS * const inMDNS )$/;"	f
FirstIPv4LLInterfaceForID	mDNSCore/mDNS.c	/^mDNSlocal NetworkInterfaceInfo *FirstIPv4LLInterfaceForID(mDNS *const m, const mDNSInterfaceID InterfaceID)$/;"	f
FirstInterfaceForID	mDNSCore/mDNS.c	/^mDNSlocal NetworkInterfaceInfo *FirstInterfaceForID(mDNS *const m, const mDNSInterfaceID InterfaceID)$/;"	f
FirstLabel	mDNSCore/mDNSEmbeddedAPI.h	2813;"	d
FlappingInterface1	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID FlappingInterface1;     \/\/ Set when an interface goes away, to flag if remove events are delivered for this Q$/;"	m	struct:DNSQuestion_struct
FlappingInterface2	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID FlappingInterface2;     \/\/ Set when an interface goes away, to flag if remove events are delivered for this Q$/;"	m	struct:DNSQuestion_struct
Flashing	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSu8 Flashing;                            \/\/ Set if interface appeared for less than 60 seconds and then vanished$/;"	m	struct:NetworkInterfaceInfoOSX_struct
FlushAddressCacheRecords	mDNSCore/uDNS.c	/^mDNSlocal void FlushAddressCacheRecords(mDNS *const m)$/;"	f
FlushAllCacheRecords	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void FlushAllCacheRecords(mDNS *const m)$/;"	f
FlushCache	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void (*FlushCache)(mDNS *const m);$/;"	t
FollowCNAME	mDNSCore/mDNSEmbeddedAPI.h	1880;"	d
ForceMCast	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool ForceMCast;                    \/\/ Set by client to force mDNS query, even for apparently uDNS names$/;"	m	struct:DNSQuestion_struct
ForceMCast	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 ForceMCast;                  \/\/ Set by client to advertise solely via multicast, even for apparently unicast names$/;"	m	struct:AuthRecord_struct
ForceMCast	mDNSShared/uds_daemon.c	/^            mDNSBool ForceMCast;$/;"	m	struct:request_state::__anon124::__anon125	file:
ForceNaturalAlignment	mDNSShared/dns_sd.h	/^typedef union _TXTRecordRef_t { char PrivateData[16]; char *ForceNaturalAlignment; } TXTRecordRef;$/;"	m	union:_TXTRecordRef_t
ForgetSem	mDNSVxWorks/mDNSVxWorks.c	113;"	d	file:
ForgetSocket	mDNSVxWorks/mDNSVxWorks.c	114;"	d	file:
Form1	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		public Form1()$/;"	m	class:DNSServiceBrowser_NET.Form1
Form1	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^	public class Form1 : System.Windows.Forms.Form$/;"	c	namespace:DNSServiceBrowser_NET
Form1_Load	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private void Form1_Load(object sender, EventArgs e) $/;"	m	class:DNSServiceBrowser_NET.Form1	file:
Form1_Load	Clients/SimpleChat.NET/SimpleChat.cs	/^		private void Form1_Load(object sender, EventArgs e) $/;"	m	class:SimpleChat.NET.SimpleChat	file:
FormatLLQOpt	mDNSShared/dnsextd.c	/^mDNSlocal void FormatLLQOpt(AuthRecord *opt, int opcode, const mDNSOpaque64 *const id, mDNSs32 lease)$/;"	f
FormatLeaseReply	mDNSShared/dnsextd.c	/^mDNSlocal PktMsg *FormatLeaseReply(DaemonInfo *d, PktMsg *orig, mDNSu32 lease)$/;"	f
FormatTime	Clients/dns-sd.c	/^static void FormatTime(unsigned long te, unsigned char *buf, int bufsize) $/;"	f	file:
FoundDomain	mDNSCore/uDNS.c	/^mDNSlocal void FoundDomain(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
FoundDomain	mDNSMacOS9/Mac OS Test Searcher.c	/^static void FoundDomain(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f	file:
FoundInstance	mDNSMacOS9/Mac OS Test Searcher.c	/^static void FoundInstance(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f	file:
FoundInstance	mDNSMacOS9/Searcher.c	/^static void FoundInstance(DNSServiceRef client, DNSServiceFlags flags, uint32_t interface, DNSServiceErrorType errorCode,$/;"	f	file:
FoundInstance	mDNSMacOSX/daemon.c	/^mDNSlocal void FoundInstance(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
FoundInstance	mDNSShared/dnssd_clientshim.c	/^mDNSlocal void FoundInstance(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
FoundInstance	mDNSShared/uds_daemon.c	/^mDNSlocal void FoundInstance(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
FoundInstanceAddress	mDNSMacOS9/Searcher.c	/^static void FoundInstanceAddress(DNSServiceRef sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceErrorType errorCode,$/;"	f	file:
FoundInstanceInfo	mDNSMacOS9/Mac OS Test Searcher.c	/^static void FoundInstanceInfo(mDNS *const m, ServiceInfoQuery *query)$/;"	f	file:
FoundInstanceInfo	mDNSMacOS9/Searcher.c	/^static void FoundInstanceInfo(DNSServiceRef sdRef, DNSServiceFlags flags, uint32_t interfaceIndex,$/;"	f	file:
FoundInstanceInfo	mDNSMacOSX/daemon.c	/^mDNSlocal void FoundInstanceInfo(mDNS *const m, ServiceInfoQuery *query)$/;"	f
FoundServiceInfo	mDNSCore/mDNS.c	/^mDNSlocal void FoundServiceInfo(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
FoundServiceInfo	mDNSShared/dnssd_clientshim.c	/^mDNSlocal void FoundServiceInfo(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
FoundServiceInfoSRV	mDNSCore/mDNS.c	/^mDNSlocal void FoundServiceInfoSRV(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
FoundServiceInfoTXT	mDNSCore/mDNS.c	/^mDNSlocal void FoundServiceInfoTXT(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
FoundStaticHostname	mDNSCore/uDNS.c	/^mDNSlocal void FoundStaticHostname(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
FragRegisterFileLibs	mDNSMacOS9/mDNSLibraryLoader.c	/^pascal OSErr FragRegisterFileLibs(ConstFSSpecPtr fss, Boolean unregister)$/;"	f
FreeARElemCallback	mDNSCore/uDNS.c	/^mDNSlocal void FreeARElemCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
FreeARElemCallback	mDNSShared/uds_daemon.c	/^mDNSlocal void FreeARElemCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
FreeAnonInfo	mDNSCore/anonymous.c	/^mDNSexport void FreeAnonInfo(AnonymousInfo *ai)$/;"	f
FreeAuthChain	mDNSCore/dnssec.c	/^mDNSlocal void FreeAuthChain(mDNS *const m, void *context)$/;"	f
FreeD2DARElemCallback	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void FreeD2DARElemCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
FreeDNSProxyClient	mDNSCore/dnsproxy.c	/^mDNSlocal void FreeDNSProxyClient(DNSProxyClient *pc)$/;"	f
FreeDNSRecords	mDNSShared/dnssd_clientstub.c	/^static void FreeDNSRecords(DNSServiceOp *sdRef)$/;"	f	file:
FreeDNSSECAuthChain	mDNSCore/dnssec.c	/^mDNSlocal void FreeDNSSECAuthChain(DNSSECVerifier *dv)$/;"	f
FreeDNSSECAuthChainInfo	mDNSCore/dnssec.c	/^mDNSlocal void FreeDNSSECAuthChainInfo(AuthChain *ac)$/;"	f
FreeDNSSECVerifier	mDNSCore/dnssec.c	/^mDNSexport void FreeDNSSECVerifier(mDNS *const m, DNSSECVerifier *dv)$/;"	f
FreeDNSSECVerifierRRSets	mDNSCore/dnssec.c	/^mDNSlocal void FreeDNSSECVerifierRRSets(DNSSECVerifier *dv)$/;"	f
FreeDNSServiceOp	mDNSShared/dnssd_clientstub.c	/^static void FreeDNSServiceOp(DNSServiceOp *x)$/;"	f	file:
FreeDNSServiceRegistration	mDNSShared/dnssd_clientshim.c	/^mDNSlocal void FreeDNSServiceRegistration(mDNS_DirectOP_Register *x)$/;"	f
FreeEtcHosts	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void FreeEtcHosts(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
FreeEtcHosts	mDNSPosix/mDNSPosix.c	/^mDNSexport void FreeEtcHosts(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
FreeEtcHosts	mDNSWindows/mDNSWin32.c	/^mDNSexport void FreeEtcHosts(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
FreeExtraRR	mDNSShared/uds_daemon.c	/^mDNSexport void FreeExtraRR(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
FreeInterface	mDNSWindows/mDNSWin32.c	/^mDNSlocal void CALLBACK FreeInterface( mDNSInterfaceData *inIFD )$/;"	f
FreeManufacturers	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::FreeManufacturers( Manufacturers & manufacturers )$/;"	f	class:CThirdPage
FreeNSECRecords	mDNSCore/mDNS.c	/^mDNSlocal void FreeNSECRecords(mDNS *const m, CacheRecord *NSECRecords)$/;"	f
FreeNewHosts	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void FreeNewHosts(AuthHash *newhosts)$/;"	f
FreePosixNetworkInterface	mDNSPosix/mDNSPosix.c	/^mDNSlocal void FreePosixNetworkInterface(PosixNetworkInterface *intf)$/;"	f
FreeServiceInstance	mDNSMacOSX/daemon.c	/^mDNSlocal void FreeServiceInstance(ServiceInstance *x)$/;"	f
FreeTCPContext	mDNSShared/dnsextd.c	/^FreeTCPContext$/;"	f
FullName	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			public String	    FullName;$/;"	f	class:DNSServiceBrowser_NET.Form1.ResolveData
FwdLinkOffset	mDNSShared/GenLinkedList.h	/^    size_t FwdLinkOffset,$/;"	m	struct:GenDoubleLinkedList
G	mDNSCore/DNSDigest.c	884;"	d	file:
GETLINK	mDNSShared/GenLinkedList.c	29;"	d	file:
GETOFFSET	mDNSShared/GenLinkedList.c	189;"	d	file:
GET_SA_LEN	mDNSPosix/mDNSUNP.h	56;"	d
GET_SA_LEN	mDNSPosix/mDNSUNP.h	59;"	d
GET_SA_LEN	mDNSPosix/mDNSUNP.h	62;"	d
GUIDtoString	mDNSWindows/NSPTool/NSPTool.c	/^DEBUG_LOCAL char *	GUIDtoString( const GUID *inGUID, char *outString )$/;"	f
GenDoubleLinkedList	mDNSShared/GenLinkedList.h	/^struct  GenDoubleLinkedList$/;"	s
GenDoubleLinkedList	mDNSShared/GenLinkedList.h	/^typedef struct GenDoubleLinkedList GenDoubleLinkedList;$/;"	t	typeref:struct:GenDoubleLinkedList
GenLLQEvents	mDNSShared/dnsextd.c	/^mDNSlocal void GenLLQEvents(DaemonInfo *d)$/;"	f
GenLinkedList	mDNSShared/GenLinkedList.h	/^struct  GenLinkedList$/;"	s
GenLinkedList	mDNSShared/GenLinkedList.h	/^typedef struct GenLinkedList GenLinkedList;$/;"	t	typeref:struct:GenLinkedList
GenLinkedOffsetList	mDNSShared/GenLinkedList.h	/^struct  GenLinkedOffsetList$/;"	s
GenLinkedOffsetList	mDNSShared/GenLinkedList.h	/^typedef struct GenLinkedOffsetList GenLinkedOffsetList;$/;"	t	typeref:struct:GenLinkedOffsetList
GenerateBonjourBrowserResponse	mDNSShared/uds_daemon.c	/^mDNSlocal void GenerateBonjourBrowserResponse(const domainname *const servicename, const mDNSInterfaceID id,$/;"	f
GenerateNTDResponse	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus GenerateNTDResponse(const domainname *const servicename, const mDNSInterfaceID id,$/;"	f
GenerateNegativeResponse	mDNSCore/mDNS.c	/^mDNSlocal void GenerateNegativeResponse(mDNS *const m, QC_result qc)$/;"	f
GenerateUnicastResponse	mDNSCore/mDNS.c	/^mDNSlocal mDNSu8 *GenerateUnicastResponse(const DNSMessage *const query, const mDNSu8 *const end,$/;"	f
GenerateUniqueDNSName	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal void  GenerateUniqueDNSName( char *outName, long *ioSeed )$/;"	f
GenerateUniqueHostName	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal void  GenerateUniqueHostName( char *outName, long *ioSeed )$/;"	f
GetAdaptersAddressesFunctionPtr	mDNSWindows/mDNSWin32.c	/^		( WINAPI * GetAdaptersAddressesFunctionPtr )( $/;"	t	file:
GetAdaptersAddressesFunctionPtr	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	( WINAPI * GetAdaptersAddressesFunctionPtr )( $/;"	t	file:
GetAdditionalMetric	mDNSWindows/SystemService/Service.c	/^GetAdditionalMetric( DWORD ifIndex )$/;"	f	file:
GetAddrInfo	mDNSWindows/DLLX/DNSSD.cpp	/^STDMETHODIMP CDNSSD::GetAddrInfo(DNSSDFlags flags, ULONG ifIndex, DNSSDAddressFamily addressFamily, BSTR hostName, IGetAddrInfoListener *listener, IDNSSDService **service)$/;"	f	class:CDNSSD
GetAddrInfo	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::GetAddrInfo(DNSSDFlags flags, ULONG ifIndex, DNSSDAddressFamily addressFamily, BSTR hostName, IDNSSDEventManager *eventManager, IDNSSDService **service)$/;"	f	class:CDNSSDService
GetAddrInfoReply	mDNSWindows/DLLX/DNSSD.cpp	/^CDNSSD::GetAddrInfoReply$/;"	f	class:CDNSSD
GetAddrInfoReply	mDNSWindows/DLLX/DNSSDService.cpp	/^CDNSSDService::GetAddrInfoReply$/;"	f	class:CDNSSDService
GetAllRRSetsForVerification	mDNSCore/dnssec.c	/^mDNSlocal mDNSBool GetAllRRSetsForVerification(mDNS *const m, DNSSECVerifier *dv)$/;"	f
GetAuthEntity	mDNSCore/mDNS.c	/^mDNSlocal AuthEntity *GetAuthEntity(AuthHash *r, const AuthGroup *const PreserveAG)$/;"	f
GetAuthGroup	mDNSCore/mDNS.c	/^mDNSlocal AuthGroup *GetAuthGroup(AuthHash *r, const mDNSu32 slot, const ResourceRecord *const rr)$/;"	f
GetAuthInfoForName	mDNSCore/uDNS.c	/^mDNSexport DomainAuthInfo *GetAuthInfoForName(mDNS *m, const domainname *const name)$/;"	f
GetAuthInfoForName_direct	mDNSCore/uDNS.c	/^mDNSlocal DomainAuthInfo *GetAuthInfoForName_direct(mDNS *m, const domainname *const name)$/;"	f
GetAuthInfoForName_internal	mDNSCore/uDNS.c	/^mDNSexport DomainAuthInfo *GetAuthInfoForName_internal(mDNS *m, const domainname *const name)$/;"	f
GetAuthInfoForQuestion	mDNSCore/uDNS.c	/^mDNSexport DomainAuthInfo *GetAuthInfoForQuestion(mDNS *m, const DNSQuestion *const q)  \/\/ Must be called with lock held$/;"	f
GetAuthInfoForQuestion	mDNSCore/uDNS.c	/^mDNSexport DomainAuthInfo *GetAuthInfoForQuestion(mDNS *m, const DNSQuestion *const q)$/;"	f
GetBSSID	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSEthAddr GetBSSID(char *ifa_name)$/;"	f
GetBackToMyMacZones	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal CFDictionaryRef GetBackToMyMacZones(CFDictionaryRef BTMMDict)$/;"	f
GetBandInfo	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::GetBandInfo( DWORD inBandID, DWORD inViewMode, DESKBANDINFO *outInfo )$/;"	f	class:ExplorerBar
GetBestServer	mDNSCore/mDNS.c	/^mDNSlocal DNSServer *GetBestServer(mDNS *m, const domainname *name, mDNSInterfaceID InterfaceID, mDNSs32 ServiceID, mDNSOpaque64 validBits,$/;"	f
GetBytes	mDNSWindows/DLLX/TXTRecord.h	/^	GetBytes()$/;"	f	class:CTXTRecord
GetCacheEntity	mDNSCore/mDNS.c	/^mDNSlocal CacheEntity *GetCacheEntity(mDNS *const m, const CacheGroup *const PreserveCG)$/;"	f
GetCacheGroup	mDNSCore/mDNS.c	/^mDNSlocal CacheGroup *GetCacheGroup(mDNS *const m, const mDNSu32 slot, const ResourceRecord *const rr)$/;"	f
GetCacheRecord	mDNSCore/mDNS.c	/^mDNSlocal CacheRecord *GetCacheRecord(mDNS *const m, CacheGroup *cg, mDNSu16 RDLength)$/;"	f
GetCertChain	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal CFArrayRef GetCertChain(SecIdentityRef identity)$/;"	f
GetClassID	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::GetClassID( LPCLSID outClassID )$/;"	f	class:ExplorerBar
GetCommandString	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP ExplorerBar::GetCommandString(UINT_PTR idCmd, UINT uType, UINT* pwReserved, LPSTR pszName, UINT cchMax)$/;"	f	class:ExplorerBar
GetConfigOption	mDNSShared/PlatformCommon.c	/^mDNSlocal mDNSBool GetConfigOption(char *dst, const char *option, FILE *f)$/;"	f
GetControlPanelApp	mDNSWindows/ControlPanel/ControlPanel.cpp	/^GetControlPanelApp()$/;"	f
GetCount	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^TextRecord::GetCount$/;"	f	class:TextRecord
GetCount	mDNSWindows/DLLX/TXTRecord.cpp	/^STDMETHODIMP CTXTRecord::GetCount(ULONG* count)$/;"	f	class:CTXTRecord
GetCurrentPMSetting	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void GetCurrentPMSetting(const CFStringRef name, mDNSs32 *val)$/;"	f
GetCursor	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^CPrinterSetupWizardSheet::GetCursor()$/;"	f	class:CPrinterSetupWizardSheet
GetDDNSDomains	mDNSWindows/mDNSWin32.c	/^mDNSlocal void GetDDNSDomains( DNameListElem ** domains, LPCWSTR lpSubKey )$/;"	f
GetDDNSFQDN	mDNSWindows/mDNSWin32.c	/^mDNSlocal void GetDDNSFQDN( domainname *const fqdn )$/;"	f
GetData	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    void    GetData( void *outData, uint16_t *outSize )$/;"	f	struct:TextRecord
GetDeviceDescription	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal mStatus GetDeviceDescription(mDNS *m, tcpLNTInfo *info)$/;"	f
GetEffectiveTTL	mDNSCore/mDNS.c	/^mDNSlocal mDNSu32 GetEffectiveTTL(const uDNS_LLQType LLQType, mDNSu32 ttl)      \/\/ TTL in seconds$/;"	f
GetEnv	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	41;"	d	file:
GetEnv	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	43;"	d	file:
GetEventManager	mDNSWindows/DLLX/DNSSDService.h	/^	GetEventManager()$/;"	f	class:CDNSSDService
GetFirstActiveInterface	mDNSCore/DNSCommon.c	/^mDNSexport NetworkInterfaceInfo *GetFirstActiveInterface(NetworkInterfaceInfo *intf)$/;"	f
GetHashCode	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			GetHashCode()$/;"	m	class:DNSServiceBrowser_NET.Form1.BrowseData
GetHashCode	Clients/SimpleChat.NET/SimpleChat.cs	/^        GetHashCode()$/;"	m	class:SimpleChat.NET.PeerData
GetHeadPtr	mDNSShared/GenLinkedList.c	/^void        *GetHeadPtr( GenLinkedOffsetList *pList)$/;"	f
GetHeader	mDNSMacOSX/helper.c	/^static CFMutableArrayRef GetHeader(const char* oldname, const char* newname, const CFStringRef msg, const char* suffix)$/;"	f	file:
GetIPv4FromName	mDNSCore/mDNS.c	/^mDNSlocal mStatus GetIPv4FromName(mDNSAddr *const a, const domainname *const name)$/;"	f
GetIPv6FromName	mDNSCore/mDNS.c	/^mDNSlocal mStatus GetIPv6FromName(mDNSAddr *const a, const domainname *const name)$/;"	f
GetIfIndexForName	mDNSShared/Java/DNSSD.java	/^	protected native int	GetIfIndexForName( String ifName);$/;"	m	class:AppleDNSSD
GetIpInterfaceEntryFunctionPtr	mDNSWindows/SystemService/Service.c	/^typedef DWORD ( WINAPI * GetIpInterfaceEntryFunctionPtr )( PMIB_IPINTERFACE_ROW );$/;"	t	file:
GetKeyAtIndex	mDNSWindows/DLLX/TXTRecord.cpp	/^STDMETHODIMP CTXTRecord::GetKeyAtIndex(ULONG index, BSTR* retval)$/;"	f	class:CTXTRecord
GetLLQEventPort	mDNSCore/uDNS.c	/^mDNSlocal mDNSu16 GetLLQEventPort(const mDNS *const m, const mDNSAddr *const dst)$/;"	f
GetLLQOptData	mDNSCore/DNSCommon.c	/^mDNSexport const rdataOPT *GetLLQOptData(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *const end)$/;"	f
GetLabelDecimalValue	mDNSCore/mDNS.c	/^mDNSlocal mStatus GetLabelDecimalValue(const mDNSu8 *const src, mDNSu8 *dst)$/;"	f
GetLargeResourceRecord	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *GetLargeResourceRecord(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *ptr,$/;"	f
GetLastPage	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^CPrinterSetupWizardSheet::GetLastPage()$/;"	f	class:CPrinterSetupWizardSheet
GetLen	mDNSWindows/DLLX/TXTRecord.h	/^	GetLen()$/;"	f	class:CTXTRecord
GetLength	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^TextRecord::GetLength$/;"	f	class:TextRecord
GetLocalizedResources	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^GetLocalizedResources()$/;"	f
GetLocalizedResources	Clients/PrinterSetupWizard/PrinterSetupWizardApp.cpp	/^GetLocalizedResources()$/;"	f
GetLocalizedResources	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^HINSTANCE	GetLocalizedResources()$/;"	f
GetLogin	Clients/ExplorerPlugin/LoginDialog.cpp	/^BOOL	LoginDialog::GetLogin( CString &outUsername, CString &outPassword )$/;"	f	class:LoginDialog
GetLogin	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.cpp	/^BOOL	LoginDialog::GetLogin( CString &outUsername, CString &outPassword )$/;"	f	class:LoginDialog
GetMAC	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal int GetMAC(mDNSEthAddr *eth, u_short ifindex)$/;"	f
GetMcastClients	mDNSShared/uds_daemon.c	/^mDNSlocal void GetMcastClients(request_state *req)$/;"	f
GetNameForIfIndex	mDNSShared/Java/DNSSD.java	/^	protected native String	GetNameForIfIndex( int ifIndex);$/;"	m	class:AppleDNSSD
GetNextActiveInterfaceID	mDNSCore/DNSCommon.c	/^mDNSexport mDNSInterfaceID GetNextActiveInterfaceID(const NetworkInterfaceInfo *intf)$/;"	f
GetNextLabel	Clients/ClientCommon.c	/^const char *GetNextLabel(const char *cstr, char label[64])$/;"	f
GetNextScheduledEvent	mDNSCore/DNSCommon.c	/^mDNSlocal mDNSs32 GetNextScheduledEvent(const mDNS *const m)$/;"	f
GetNonLocalizedResources	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^GetNonLocalizedResources()$/;"	f
GetNonLocalizedResources	Clients/PrinterSetupWizard/PrinterSetupWizardApp.cpp	/^GetNonLocalizedResources()$/;"	f
GetNonLocalizedResources	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^HINSTANCE	GetNonLocalizedResources()$/;"	f
GetOffsetLink	mDNSShared/GenLinkedList.c	/^void        *GetOffsetLink( GenLinkedOffsetList *pList, void *elem)$/;"	f
GetOldRacoonConfigDir	mDNSMacOSX/helper.c	/^static const char* GetOldRacoonConfigDir()$/;"	f	file:
GetOwner	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^ExplorerBar *   GetOwner( void ) const { return( mOwner ); }$/;"	f	class:ExplorerBarWindow
GetPktLease	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu32 GetPktLease(mDNS *m, DNSMessage *msg, const mDNSu8 *end)$/;"	f
GetPortArray	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSu16 GetPortArray(mDNS *const m, int trans, mDNSIPPort *portarray)$/;"	f
GetPrimaryInterface	mDNSWindows/mDNSWin32.c	/^GetPrimaryInterface()$/;"	f
GetPrimaryRef	mDNSWindows/DLLX/DNSSDService.h	/^	GetPrimaryRef()$/;"	f	class:CDNSSDService
GetProcAddress	mDNSWindows/DLLStub/DLLStub.cpp	/^DLLStub::GetProcAddress( FARPROC * func, LPCSTR lpProcName )$/;"	f	class:DLLStub
GetProperty	mDNSWindows/DLLX/DNSSD.cpp	/^STDMETHODIMP CDNSSD::GetProperty(BSTR prop, VARIANT * value )$/;"	f	class:CDNSSD
GetProperty	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::GetProperty(BSTR prop, VARIANT * value )$/;"	f	class:CDNSSDService
GetProtocol	Clients/dns-sd.c	/^static DNSServiceProtocol GetProtocol(const char *s)$/;"	f	file:
GetProxyRecords	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void GetProxyRecords(mDNS *const m, DNSMessage *const msg, uint32_t *const numbytes, FatPtr *const records, mDNSBool TCPKAOnly, mDNSBool supportsTCPKA)$/;"	f
GetRDLength	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu16 GetRDLength(const ResourceRecord *const rr, mDNSBool estimate)$/;"	f
GetRDLengthMem	mDNSCore/mDNS.c	/^mDNSlocal mDNSu16 GetRDLengthMem(const ResourceRecord *const rr)$/;"	f
GetRRClass	Clients/dns-sd.c	/^static uint16_t GetRRClass(const char *s)   $/;"	f	file:
GetRRDisplayString_rdb	mDNSCore/DNSCommon.c	/^mDNSexport char *GetRRDisplayString_rdb(const ResourceRecord *const rr, const RDataBody *const rd1, char *const buffer)$/;"	f
GetRRDomainNameTarget	mDNSCore/DNSCommon.h	176;"	d
GetRRType	Clients/dns-sd.c	/^static uint16_t GetRRType(const char *s)$/;"	f	file:
GetRacoonConfigDir	mDNSMacOSX/helper.c	/^static const char* GetRacoonConfigDir()$/;"	f	file:
GetRecordRef	mDNSWindows/DLLX/DNSSDRecord.h	/^	GetRecordRef()$/;"	f	class:CDNSSDRecord
GetRouteDestination	mDNSWindows/SystemService/Service.c	/^GetRouteDestination(DWORD * ifIndex, DWORD * address)$/;"	f	file:
GetScopeId	mDNSWindows/mdnsNSP/mdnsNSP.c	/^GetScopeId( DWORD ifIndex )$/;"	f
GetSelectedPrinter	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^CPrinterSetupWizardSheet::GetSelectedPrinter()$/;"	f	class:CPrinterSetupWizardSheet
GetServerForName	mDNSCore/mDNS.c	/^mDNSlocal DNSServer *GetServerForName(mDNS *m, const domainname *name, mDNSInterfaceID InterfaceID, mDNSs32 ServiceID)$/;"	f
GetServerForQuestion	mDNSCore/mDNS.c	/^mDNSexport DNSServer *GetServerForQuestion(mDNS *m, DNSQuestion *question)$/;"	f
GetServiceObject	mDNSWindows/DLLX/DNSSDRecord.h	/^	GetServiceObject()$/;"	f	class:CDNSSDRecord
GetServiceParameters	mDNSWindows/SystemService/Service.c	/^static OSStatus GetServiceParameters()$/;"	f	file:
GetServiceTarget	mDNSCore/uDNS.c	/^mDNSexport const domainname *GetServiceTarget(mDNS *m, AuthRecord *const rr)$/;"	f
GetSite	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::GetSite( REFIID inID, LPVOID *outResult )$/;"	f	class:ExplorerBar
GetSizeMax	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::GetSizeMax( ULARGE_INTEGER *outSizeMax )$/;"	f	class:ExplorerBar
GetStaticHostname	mDNSCore/uDNS.c	/^mDNSlocal void GetStaticHostname(mDNS *m)$/;"	f
GetSubordRef	mDNSWindows/DLLX/DNSSDService.h	/^	GetSubordRef()$/;"	f	class:CDNSSDService
GetSystemSleepTimerSetting	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSs32 GetSystemSleepTimerSetting(void)$/;"	f
GetTailPtr	mDNSShared/GenLinkedList.c	/^void        *GetTailPtr( GenLinkedOffsetList *pList)$/;"	f
GetTimeoutForMcastQuestion	mDNSCore/mDNS.c	/^mDNSlocal mDNSu32 GetTimeoutForMcastQuestion(mDNS *m, DNSQuestion *question)$/;"	f
GetUserSpecifiedComputerName	mDNSMacOS9/mDNSMacOS9.c	/^mDNSlocal void GetUserSpecifiedComputerName(domainlabel *const namelabel)$/;"	f
GetUserSpecifiedFriendlyComputerName	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void GetUserSpecifiedFriendlyComputerName(domainlabel *const namelabel)$/;"	f
GetUserSpecifiedFriendlyComputerName	mDNSPosix/mDNSPosix.c	/^mDNSlocal void GetUserSpecifiedFriendlyComputerName(domainlabel *const namelabel)$/;"	f
GetUserSpecifiedLocalHostName	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void GetUserSpecifiedLocalHostName(domainlabel *const namelabel)$/;"	f
GetUserSpecifiedRFC1034ComputerName	mDNSPosix/mDNSPosix.c	/^mDNSlocal void GetUserSpecifiedRFC1034ComputerName(domainlabel *const namelabel)$/;"	f
GetValueAtIndex	mDNSWindows/DLLX/TXTRecord.cpp	/^STDMETHODIMP CTXTRecord::GetValueAtIndex(ULONG index, VARIANT* retval)$/;"	f	class:CTXTRecord
GetValueForIPv4Addr	mDNSCore/mDNS.c	/^mDNSlocal mDNSu8 *GetValueForIPv4Addr(mDNSu8 *ptr, mDNSu8 *limit, mDNSv4Addr *v4)$/;"	f
GetValueForIPv6Addr	mDNSCore/mDNS.c	/^mDNSlocal mDNSu8 *GetValueForIPv6Addr(mDNSu8 *ptr, mDNSu8 *limit, mDNSv6Addr *v6)$/;"	f
GetValueForKeepalive	mDNSCore/mDNS.c	/^mDNSlocal mDNSu8 *GetValueForKeepalive(mDNSu8 *ptr, mDNSu8 *limit, mDNSu32 *value)$/;"	f
GetValueForKey	mDNSWindows/DLLX/TXTRecord.cpp	/^STDMETHODIMP CTXTRecord::GetValueForKey(BSTR key, VARIANT* value)$/;"	f	class:CTXTRecord
GetValueForMACAddr	mDNSCore/mDNS.c	/^mDNSlocal mDNSu8 *GetValueForMACAddr(mDNSu8 *ptr, mDNSu8 *limit, mDNSEthAddr *eth)$/;"	f
GetWindow	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::GetWindow( HWND *outWindow )$/;"	f	class:ExplorerBar
GetWindowsVersionString	mDNSWindows/mDNSWin32.c	/^mDNSlocal OSStatus	GetWindowsVersionString( char *inBuffer, size_t inBufferSize )$/;"	f
GetZoneData_QuestionCallback	mDNSCore/uDNS.c	/^mDNSlocal void GetZoneData_QuestionCallback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
GetZoneData_StartQuery	mDNSCore/uDNS.c	/^mDNSlocal mStatus GetZoneData_StartQuery(mDNS *const m, ZoneData *zd, mDNSu16 qtype)$/;"	f
GetmDNSManagedPref	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSBool GetmDNSManagedPref(CFStringRef key)$/;"	f
GetmDNSManagedPrefKeyVal	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool GetmDNSManagedPrefKeyVal(SCPreferencesRef prefs, CFStringRef key)$/;"	f
GoToURL	Clients/ExplorerPlugin/ExplorerBar.cpp	/^OSStatus	ExplorerBar::GoToURL( const CString &inURL )$/;"	f	class:ExplorerBar
GoodbyeCount	mDNSCore/mDNS.c	680;"	d	file:
GotADD	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 GotADD;$/;"	m	struct:ServiceInfoQuery_struct
GotPacketFromHost	mDNSPosix/NetMonitor.c	/^mDNSlocal HostEntry *GotPacketFromHost(const mDNSAddr *addr, HostPkt_Type t, mDNSOpaque16 id)$/;"	f
GotSRV	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 GotSRV;$/;"	m	struct:ServiceInfoQuery_struct
GotTXT	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 GotTXT;$/;"	m	struct:ServiceInfoQuery_struct
GrantCacheExtensions	mDNSCore/mDNS.c	/^mDNSexport void GrantCacheExtensions(mDNS *const m, DNSQuestion *q, mDNSu32 lease)$/;"	f
GrantUpdateCredit	mDNSCore/mDNS.c	/^mDNSlocal void GrantUpdateCredit(AuthRecord *rr)$/;"	f
H	mDNSCore/DNSDigest.c	885;"	d	file:
HASH_BLOCK_DATA_ORDER	mDNSCore/DNSDigest.c	259;"	d	file:
HASH_BLOCK_DATA_ORDER_ALIGNED	mDNSCore/DNSDigest.c	206;"	d	file:
HASH_BLOCK_DATA_ORDER_ALIGNED	mDNSCore/DNSDigest.c	527;"	d	file:
HASH_BLOCK_DATA_ORDER_ALIGNED	mDNSCore/DNSDigest.c	541;"	d	file:
HASH_BLOCK_HOST_ORDER	mDNSCore/DNSDigest.c	257;"	d	file:
HASH_CBLOCK	mDNSCore/DNSDigest.c	243;"	d	file:
HASH_CTX	mDNSCore/DNSDigest.c	242;"	d	file:
HASH_FINAL	mDNSCore/DNSDigest.c	/^int HASH_FINAL (unsigned char *md, HASH_CTX *c)$/;"	f
HASH_FINAL	mDNSCore/DNSDigest.c	248;"	d	file:
HASH_LBLOCK	mDNSCore/DNSDigest.c	244;"	d	file:
HASH_LBLOCK	mDNSCore/DNSDigest.c	390;"	d	file:
HASH_LONG	mDNSCore/DNSDigest.c	240;"	d	file:
HASH_LONG_LOG2	mDNSCore/DNSDigest.c	241;"	d	file:
HASH_LONG_LOG2	mDNSCore/DNSDigest.c	394;"	d	file:
HASH_MAKE_STRING	mDNSCore/DNSDigest.c	250;"	d	file:
HASH_TRANSFORM	mDNSCore/DNSDigest.c	/^void HASH_TRANSFORM (HASH_CTX *c, const unsigned char *data)$/;"	f
HASH_TRANSFORM	mDNSCore/DNSDigest.c	247;"	d	file:
HASH_UPDATE	mDNSCore/DNSDigest.c	/^int HASH_UPDATE (HASH_CTX *c, const void *data_, unsigned long len)$/;"	f
HASH_UPDATE	mDNSCore/DNSDigest.c	246;"	d	file:
HAS_ADDRINFO_API	Clients/dns-sd.c	191;"	d	file:
HAS_NAT_PMP_API	Clients/dns-sd.c	190;"	d	file:
HCRYPTPROV	mDNSWindows/mDNSWin32.c	/^   typedef ULONG_PTR HCRYPTPROV;    \/\/ WinCrypt.h, line 249$/;"	t	file:
HDS_BUTTONS	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	7;"	d
HDS_HIDDEN	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	8;"	d
HDS_HORZ	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	6;"	d
HEX_DIGIT_00000000	mDNSShared/CommonServices.h	1260;"	d
HEX_DIGIT_00000001	mDNSShared/CommonServices.h	1261;"	d
HEX_DIGIT_00000010	mDNSShared/CommonServices.h	1262;"	d
HEX_DIGIT_00000011	mDNSShared/CommonServices.h	1263;"	d
HEX_DIGIT_00000100	mDNSShared/CommonServices.h	1264;"	d
HEX_DIGIT_00000101	mDNSShared/CommonServices.h	1265;"	d
HEX_DIGIT_00000110	mDNSShared/CommonServices.h	1266;"	d
HEX_DIGIT_00000111	mDNSShared/CommonServices.h	1267;"	d
HEX_DIGIT_00001000	mDNSShared/CommonServices.h	1268;"	d
HEX_DIGIT_00001001	mDNSShared/CommonServices.h	1269;"	d
HEX_DIGIT_00001010	mDNSShared/CommonServices.h	1270;"	d
HEX_DIGIT_00001011	mDNSShared/CommonServices.h	1271;"	d
HEX_DIGIT_00001100	mDNSShared/CommonServices.h	1272;"	d
HEX_DIGIT_00001101	mDNSShared/CommonServices.h	1273;"	d
HEX_DIGIT_00001110	mDNSShared/CommonServices.h	1274;"	d
HEX_DIGIT_00001111	mDNSShared/CommonServices.h	1275;"	d
HEX_DIGIT_00010000	mDNSShared/CommonServices.h	1276;"	d
HEX_DIGIT_00010001	mDNSShared/CommonServices.h	1277;"	d
HEX_DIGIT_00010010	mDNSShared/CommonServices.h	1278;"	d
HEX_DIGIT_00010011	mDNSShared/CommonServices.h	1279;"	d
HEX_DIGIT_00010100	mDNSShared/CommonServices.h	1280;"	d
HEX_DIGIT_00010101	mDNSShared/CommonServices.h	1281;"	d
HEX_DIGIT_00010110	mDNSShared/CommonServices.h	1282;"	d
HEX_DIGIT_00010111	mDNSShared/CommonServices.h	1283;"	d
HEX_DIGIT_00011000	mDNSShared/CommonServices.h	1284;"	d
HEX_DIGIT_00011001	mDNSShared/CommonServices.h	1285;"	d
HEX_DIGIT_00011010	mDNSShared/CommonServices.h	1286;"	d
HEX_DIGIT_00011011	mDNSShared/CommonServices.h	1287;"	d
HEX_DIGIT_00011100	mDNSShared/CommonServices.h	1288;"	d
HEX_DIGIT_00011101	mDNSShared/CommonServices.h	1289;"	d
HEX_DIGIT_00011110	mDNSShared/CommonServices.h	1290;"	d
HEX_DIGIT_00011111	mDNSShared/CommonServices.h	1291;"	d
HEX_DIGIT_00100000	mDNSShared/CommonServices.h	1292;"	d
HEX_DIGIT_00100001	mDNSShared/CommonServices.h	1293;"	d
HEX_DIGIT_00100010	mDNSShared/CommonServices.h	1294;"	d
HEX_DIGIT_00100011	mDNSShared/CommonServices.h	1295;"	d
HEX_DIGIT_00100100	mDNSShared/CommonServices.h	1296;"	d
HEX_DIGIT_00100101	mDNSShared/CommonServices.h	1297;"	d
HEX_DIGIT_00100110	mDNSShared/CommonServices.h	1298;"	d
HEX_DIGIT_00100111	mDNSShared/CommonServices.h	1299;"	d
HEX_DIGIT_00101000	mDNSShared/CommonServices.h	1300;"	d
HEX_DIGIT_00101001	mDNSShared/CommonServices.h	1301;"	d
HEX_DIGIT_00101010	mDNSShared/CommonServices.h	1302;"	d
HEX_DIGIT_00101011	mDNSShared/CommonServices.h	1303;"	d
HEX_DIGIT_00101100	mDNSShared/CommonServices.h	1304;"	d
HEX_DIGIT_00101101	mDNSShared/CommonServices.h	1305;"	d
HEX_DIGIT_00101110	mDNSShared/CommonServices.h	1306;"	d
HEX_DIGIT_00101111	mDNSShared/CommonServices.h	1307;"	d
HEX_DIGIT_00110000	mDNSShared/CommonServices.h	1308;"	d
HEX_DIGIT_00110001	mDNSShared/CommonServices.h	1309;"	d
HEX_DIGIT_00110010	mDNSShared/CommonServices.h	1310;"	d
HEX_DIGIT_00110011	mDNSShared/CommonServices.h	1311;"	d
HEX_DIGIT_00110100	mDNSShared/CommonServices.h	1312;"	d
HEX_DIGIT_00110101	mDNSShared/CommonServices.h	1313;"	d
HEX_DIGIT_00110110	mDNSShared/CommonServices.h	1314;"	d
HEX_DIGIT_00110111	mDNSShared/CommonServices.h	1315;"	d
HEX_DIGIT_00111000	mDNSShared/CommonServices.h	1316;"	d
HEX_DIGIT_00111001	mDNSShared/CommonServices.h	1317;"	d
HEX_DIGIT_00111010	mDNSShared/CommonServices.h	1318;"	d
HEX_DIGIT_00111011	mDNSShared/CommonServices.h	1319;"	d
HEX_DIGIT_00111100	mDNSShared/CommonServices.h	1320;"	d
HEX_DIGIT_00111101	mDNSShared/CommonServices.h	1321;"	d
HEX_DIGIT_00111110	mDNSShared/CommonServices.h	1322;"	d
HEX_DIGIT_00111111	mDNSShared/CommonServices.h	1323;"	d
HEX_DIGIT_01000000	mDNSShared/CommonServices.h	1324;"	d
HEX_DIGIT_01000001	mDNSShared/CommonServices.h	1325;"	d
HEX_DIGIT_01000010	mDNSShared/CommonServices.h	1326;"	d
HEX_DIGIT_01000011	mDNSShared/CommonServices.h	1327;"	d
HEX_DIGIT_01000100	mDNSShared/CommonServices.h	1328;"	d
HEX_DIGIT_01000101	mDNSShared/CommonServices.h	1329;"	d
HEX_DIGIT_01000110	mDNSShared/CommonServices.h	1330;"	d
HEX_DIGIT_01000111	mDNSShared/CommonServices.h	1331;"	d
HEX_DIGIT_01001000	mDNSShared/CommonServices.h	1332;"	d
HEX_DIGIT_01001001	mDNSShared/CommonServices.h	1333;"	d
HEX_DIGIT_01001010	mDNSShared/CommonServices.h	1334;"	d
HEX_DIGIT_01001011	mDNSShared/CommonServices.h	1335;"	d
HEX_DIGIT_01001100	mDNSShared/CommonServices.h	1336;"	d
HEX_DIGIT_01001101	mDNSShared/CommonServices.h	1337;"	d
HEX_DIGIT_01001110	mDNSShared/CommonServices.h	1338;"	d
HEX_DIGIT_01001111	mDNSShared/CommonServices.h	1339;"	d
HEX_DIGIT_01010000	mDNSShared/CommonServices.h	1340;"	d
HEX_DIGIT_01010001	mDNSShared/CommonServices.h	1341;"	d
HEX_DIGIT_01010010	mDNSShared/CommonServices.h	1342;"	d
HEX_DIGIT_01010011	mDNSShared/CommonServices.h	1343;"	d
HEX_DIGIT_01010100	mDNSShared/CommonServices.h	1344;"	d
HEX_DIGIT_01010101	mDNSShared/CommonServices.h	1345;"	d
HEX_DIGIT_01010110	mDNSShared/CommonServices.h	1346;"	d
HEX_DIGIT_01010111	mDNSShared/CommonServices.h	1347;"	d
HEX_DIGIT_01011000	mDNSShared/CommonServices.h	1348;"	d
HEX_DIGIT_01011001	mDNSShared/CommonServices.h	1349;"	d
HEX_DIGIT_01011010	mDNSShared/CommonServices.h	1350;"	d
HEX_DIGIT_01011011	mDNSShared/CommonServices.h	1351;"	d
HEX_DIGIT_01011100	mDNSShared/CommonServices.h	1352;"	d
HEX_DIGIT_01011101	mDNSShared/CommonServices.h	1353;"	d
HEX_DIGIT_01011110	mDNSShared/CommonServices.h	1354;"	d
HEX_DIGIT_01011111	mDNSShared/CommonServices.h	1355;"	d
HEX_DIGIT_01100000	mDNSShared/CommonServices.h	1356;"	d
HEX_DIGIT_01100001	mDNSShared/CommonServices.h	1357;"	d
HEX_DIGIT_01100010	mDNSShared/CommonServices.h	1358;"	d
HEX_DIGIT_01100011	mDNSShared/CommonServices.h	1359;"	d
HEX_DIGIT_01100100	mDNSShared/CommonServices.h	1360;"	d
HEX_DIGIT_01100101	mDNSShared/CommonServices.h	1361;"	d
HEX_DIGIT_01100110	mDNSShared/CommonServices.h	1362;"	d
HEX_DIGIT_01100111	mDNSShared/CommonServices.h	1363;"	d
HEX_DIGIT_01101000	mDNSShared/CommonServices.h	1364;"	d
HEX_DIGIT_01101001	mDNSShared/CommonServices.h	1365;"	d
HEX_DIGIT_01101010	mDNSShared/CommonServices.h	1366;"	d
HEX_DIGIT_01101011	mDNSShared/CommonServices.h	1367;"	d
HEX_DIGIT_01101100	mDNSShared/CommonServices.h	1368;"	d
HEX_DIGIT_01101101	mDNSShared/CommonServices.h	1369;"	d
HEX_DIGIT_01101110	mDNSShared/CommonServices.h	1370;"	d
HEX_DIGIT_01101111	mDNSShared/CommonServices.h	1371;"	d
HEX_DIGIT_01110000	mDNSShared/CommonServices.h	1372;"	d
HEX_DIGIT_01110001	mDNSShared/CommonServices.h	1373;"	d
HEX_DIGIT_01110010	mDNSShared/CommonServices.h	1374;"	d
HEX_DIGIT_01110011	mDNSShared/CommonServices.h	1375;"	d
HEX_DIGIT_01110100	mDNSShared/CommonServices.h	1376;"	d
HEX_DIGIT_01110101	mDNSShared/CommonServices.h	1377;"	d
HEX_DIGIT_01110110	mDNSShared/CommonServices.h	1378;"	d
HEX_DIGIT_01110111	mDNSShared/CommonServices.h	1379;"	d
HEX_DIGIT_01111000	mDNSShared/CommonServices.h	1380;"	d
HEX_DIGIT_01111001	mDNSShared/CommonServices.h	1381;"	d
HEX_DIGIT_01111010	mDNSShared/CommonServices.h	1382;"	d
HEX_DIGIT_01111011	mDNSShared/CommonServices.h	1383;"	d
HEX_DIGIT_01111100	mDNSShared/CommonServices.h	1384;"	d
HEX_DIGIT_01111101	mDNSShared/CommonServices.h	1385;"	d
HEX_DIGIT_01111110	mDNSShared/CommonServices.h	1386;"	d
HEX_DIGIT_01111111	mDNSShared/CommonServices.h	1387;"	d
HEX_DIGIT_10000000	mDNSShared/CommonServices.h	1388;"	d
HEX_DIGIT_10000001	mDNSShared/CommonServices.h	1389;"	d
HEX_DIGIT_10000010	mDNSShared/CommonServices.h	1390;"	d
HEX_DIGIT_10000011	mDNSShared/CommonServices.h	1391;"	d
HEX_DIGIT_10000100	mDNSShared/CommonServices.h	1392;"	d
HEX_DIGIT_10000101	mDNSShared/CommonServices.h	1393;"	d
HEX_DIGIT_10000110	mDNSShared/CommonServices.h	1394;"	d
HEX_DIGIT_10000111	mDNSShared/CommonServices.h	1395;"	d
HEX_DIGIT_10001000	mDNSShared/CommonServices.h	1396;"	d
HEX_DIGIT_10001001	mDNSShared/CommonServices.h	1397;"	d
HEX_DIGIT_10001010	mDNSShared/CommonServices.h	1398;"	d
HEX_DIGIT_10001011	mDNSShared/CommonServices.h	1399;"	d
HEX_DIGIT_10001100	mDNSShared/CommonServices.h	1400;"	d
HEX_DIGIT_10001101	mDNSShared/CommonServices.h	1401;"	d
HEX_DIGIT_10001110	mDNSShared/CommonServices.h	1402;"	d
HEX_DIGIT_10001111	mDNSShared/CommonServices.h	1403;"	d
HEX_DIGIT_10010000	mDNSShared/CommonServices.h	1404;"	d
HEX_DIGIT_10010001	mDNSShared/CommonServices.h	1405;"	d
HEX_DIGIT_10010010	mDNSShared/CommonServices.h	1406;"	d
HEX_DIGIT_10010011	mDNSShared/CommonServices.h	1407;"	d
HEX_DIGIT_10010100	mDNSShared/CommonServices.h	1408;"	d
HEX_DIGIT_10010101	mDNSShared/CommonServices.h	1409;"	d
HEX_DIGIT_10010110	mDNSShared/CommonServices.h	1410;"	d
HEX_DIGIT_10010111	mDNSShared/CommonServices.h	1411;"	d
HEX_DIGIT_10011000	mDNSShared/CommonServices.h	1412;"	d
HEX_DIGIT_10011001	mDNSShared/CommonServices.h	1413;"	d
HEX_DIGIT_10011010	mDNSShared/CommonServices.h	1414;"	d
HEX_DIGIT_10011011	mDNSShared/CommonServices.h	1415;"	d
HEX_DIGIT_10011100	mDNSShared/CommonServices.h	1416;"	d
HEX_DIGIT_10011101	mDNSShared/CommonServices.h	1417;"	d
HEX_DIGIT_10011110	mDNSShared/CommonServices.h	1418;"	d
HEX_DIGIT_10011111	mDNSShared/CommonServices.h	1419;"	d
HEX_DIGIT_10100000	mDNSShared/CommonServices.h	1420;"	d
HEX_DIGIT_10100001	mDNSShared/CommonServices.h	1421;"	d
HEX_DIGIT_10100010	mDNSShared/CommonServices.h	1422;"	d
HEX_DIGIT_10100011	mDNSShared/CommonServices.h	1423;"	d
HEX_DIGIT_10100100	mDNSShared/CommonServices.h	1424;"	d
HEX_DIGIT_10100101	mDNSShared/CommonServices.h	1425;"	d
HEX_DIGIT_10100110	mDNSShared/CommonServices.h	1426;"	d
HEX_DIGIT_10100111	mDNSShared/CommonServices.h	1427;"	d
HEX_DIGIT_10101000	mDNSShared/CommonServices.h	1428;"	d
HEX_DIGIT_10101001	mDNSShared/CommonServices.h	1429;"	d
HEX_DIGIT_10101010	mDNSShared/CommonServices.h	1430;"	d
HEX_DIGIT_10101011	mDNSShared/CommonServices.h	1431;"	d
HEX_DIGIT_10101100	mDNSShared/CommonServices.h	1432;"	d
HEX_DIGIT_10101101	mDNSShared/CommonServices.h	1433;"	d
HEX_DIGIT_10101110	mDNSShared/CommonServices.h	1434;"	d
HEX_DIGIT_10101111	mDNSShared/CommonServices.h	1435;"	d
HEX_DIGIT_10110000	mDNSShared/CommonServices.h	1436;"	d
HEX_DIGIT_10110001	mDNSShared/CommonServices.h	1437;"	d
HEX_DIGIT_10110010	mDNSShared/CommonServices.h	1438;"	d
HEX_DIGIT_10110011	mDNSShared/CommonServices.h	1439;"	d
HEX_DIGIT_10110100	mDNSShared/CommonServices.h	1440;"	d
HEX_DIGIT_10110101	mDNSShared/CommonServices.h	1441;"	d
HEX_DIGIT_10110110	mDNSShared/CommonServices.h	1442;"	d
HEX_DIGIT_10110111	mDNSShared/CommonServices.h	1443;"	d
HEX_DIGIT_10111000	mDNSShared/CommonServices.h	1444;"	d
HEX_DIGIT_10111001	mDNSShared/CommonServices.h	1445;"	d
HEX_DIGIT_10111010	mDNSShared/CommonServices.h	1446;"	d
HEX_DIGIT_10111011	mDNSShared/CommonServices.h	1447;"	d
HEX_DIGIT_10111100	mDNSShared/CommonServices.h	1448;"	d
HEX_DIGIT_10111101	mDNSShared/CommonServices.h	1449;"	d
HEX_DIGIT_10111110	mDNSShared/CommonServices.h	1450;"	d
HEX_DIGIT_10111111	mDNSShared/CommonServices.h	1451;"	d
HEX_DIGIT_11000000	mDNSShared/CommonServices.h	1452;"	d
HEX_DIGIT_11000001	mDNSShared/CommonServices.h	1453;"	d
HEX_DIGIT_11000010	mDNSShared/CommonServices.h	1454;"	d
HEX_DIGIT_11000011	mDNSShared/CommonServices.h	1455;"	d
HEX_DIGIT_11000100	mDNSShared/CommonServices.h	1456;"	d
HEX_DIGIT_11000101	mDNSShared/CommonServices.h	1457;"	d
HEX_DIGIT_11000110	mDNSShared/CommonServices.h	1458;"	d
HEX_DIGIT_11000111	mDNSShared/CommonServices.h	1459;"	d
HEX_DIGIT_11001000	mDNSShared/CommonServices.h	1460;"	d
HEX_DIGIT_11001001	mDNSShared/CommonServices.h	1461;"	d
HEX_DIGIT_11001010	mDNSShared/CommonServices.h	1462;"	d
HEX_DIGIT_11001011	mDNSShared/CommonServices.h	1463;"	d
HEX_DIGIT_11001100	mDNSShared/CommonServices.h	1464;"	d
HEX_DIGIT_11001101	mDNSShared/CommonServices.h	1465;"	d
HEX_DIGIT_11001110	mDNSShared/CommonServices.h	1466;"	d
HEX_DIGIT_11001111	mDNSShared/CommonServices.h	1467;"	d
HEX_DIGIT_11010000	mDNSShared/CommonServices.h	1468;"	d
HEX_DIGIT_11010001	mDNSShared/CommonServices.h	1469;"	d
HEX_DIGIT_11010010	mDNSShared/CommonServices.h	1470;"	d
HEX_DIGIT_11010011	mDNSShared/CommonServices.h	1471;"	d
HEX_DIGIT_11010100	mDNSShared/CommonServices.h	1472;"	d
HEX_DIGIT_11010101	mDNSShared/CommonServices.h	1473;"	d
HEX_DIGIT_11010110	mDNSShared/CommonServices.h	1474;"	d
HEX_DIGIT_11010111	mDNSShared/CommonServices.h	1475;"	d
HEX_DIGIT_11011000	mDNSShared/CommonServices.h	1476;"	d
HEX_DIGIT_11011001	mDNSShared/CommonServices.h	1477;"	d
HEX_DIGIT_11011010	mDNSShared/CommonServices.h	1478;"	d
HEX_DIGIT_11011011	mDNSShared/CommonServices.h	1479;"	d
HEX_DIGIT_11011100	mDNSShared/CommonServices.h	1480;"	d
HEX_DIGIT_11011101	mDNSShared/CommonServices.h	1481;"	d
HEX_DIGIT_11011110	mDNSShared/CommonServices.h	1482;"	d
HEX_DIGIT_11011111	mDNSShared/CommonServices.h	1483;"	d
HEX_DIGIT_11100000	mDNSShared/CommonServices.h	1484;"	d
HEX_DIGIT_11100001	mDNSShared/CommonServices.h	1485;"	d
HEX_DIGIT_11100010	mDNSShared/CommonServices.h	1486;"	d
HEX_DIGIT_11100011	mDNSShared/CommonServices.h	1487;"	d
HEX_DIGIT_11100100	mDNSShared/CommonServices.h	1488;"	d
HEX_DIGIT_11100101	mDNSShared/CommonServices.h	1489;"	d
HEX_DIGIT_11100110	mDNSShared/CommonServices.h	1490;"	d
HEX_DIGIT_11100111	mDNSShared/CommonServices.h	1491;"	d
HEX_DIGIT_11101000	mDNSShared/CommonServices.h	1492;"	d
HEX_DIGIT_11101001	mDNSShared/CommonServices.h	1493;"	d
HEX_DIGIT_11101010	mDNSShared/CommonServices.h	1494;"	d
HEX_DIGIT_11101011	mDNSShared/CommonServices.h	1495;"	d
HEX_DIGIT_11101100	mDNSShared/CommonServices.h	1496;"	d
HEX_DIGIT_11101101	mDNSShared/CommonServices.h	1497;"	d
HEX_DIGIT_11101110	mDNSShared/CommonServices.h	1498;"	d
HEX_DIGIT_11101111	mDNSShared/CommonServices.h	1499;"	d
HEX_DIGIT_11110000	mDNSShared/CommonServices.h	1500;"	d
HEX_DIGIT_11110001	mDNSShared/CommonServices.h	1501;"	d
HEX_DIGIT_11110010	mDNSShared/CommonServices.h	1502;"	d
HEX_DIGIT_11110011	mDNSShared/CommonServices.h	1503;"	d
HEX_DIGIT_11110100	mDNSShared/CommonServices.h	1504;"	d
HEX_DIGIT_11110101	mDNSShared/CommonServices.h	1505;"	d
HEX_DIGIT_11110110	mDNSShared/CommonServices.h	1506;"	d
HEX_DIGIT_11110111	mDNSShared/CommonServices.h	1507;"	d
HEX_DIGIT_11111000	mDNSShared/CommonServices.h	1508;"	d
HEX_DIGIT_11111001	mDNSShared/CommonServices.h	1509;"	d
HEX_DIGIT_11111010	mDNSShared/CommonServices.h	1510;"	d
HEX_DIGIT_11111011	mDNSShared/CommonServices.h	1511;"	d
HEX_DIGIT_11111100	mDNSShared/CommonServices.h	1512;"	d
HEX_DIGIT_11111101	mDNSShared/CommonServices.h	1513;"	d
HEX_DIGIT_11111110	mDNSShared/CommonServices.h	1514;"	d
HEX_DIGIT_11111111	mDNSShared/CommonServices.h	1515;"	d
HIHardware	mDNSCore/mDNSEmbeddedAPI.h	/^    UTF8str255 HIHardware;$/;"	m	struct:mDNS_struct
HIHardware	mDNSPosix/NetMonitor.c	/^    UTF8str255 HIHardware;$/;"	m	struct:__anon19	file:
HINFO_HWstring	mDNSMacOSX/mDNSMacOSX.c	/^static char *HINFO_HWstring = "Device";$/;"	v	file:
HINFO_HWstring_buffer	mDNSMacOSX/mDNSMacOSX.c	/^static char HINFO_HWstring_buffer[32];$/;"	v	file:
HINFO_HWstring_prefixlen	mDNSMacOSX/mDNSMacOSX.c	/^static int HINFO_HWstring_prefixlen = 6;$/;"	v	file:
HISoftware	mDNSCore/mDNSEmbeddedAPI.h	/^    UTF8str255 HISoftware;$/;"	m	struct:mDNS_struct
HISoftware	mDNSPosix/NetMonitor.c	/^    UTF8str255 HISoftware;$/;"	m	struct:__anon19	file:
HMAC	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSEthAddr HMAC;       \/\/ Host's primary identifier (e.g. MAC of on-board Ethernet)$/;"	m	struct:__anon54
HMAC_IPAD	mDNSCore/DNSDigest.c	1275;"	d	file:
HMAC_IPAD	mDNSCore/mDNSEmbeddedAPI.h	1806;"	d
HMAC_LEN	mDNSCore/mDNSEmbeddedAPI.h	1805;"	d
HMAC_MD5_AlgName	mDNSCore/DNSDigest.c	1279;"	d	file:
HMAC_OPAD	mDNSCore/DNSDigest.c	1276;"	d	file:
HMAC_OPAD	mDNSCore/mDNSEmbeddedAPI.h	1807;"	d
HOST_FETCH32	mDNSCore/DNSDigest.c	532;"	d	file:
HOST_FETCH32	mDNSCore/DNSDigest.c	534;"	d	file:
HOST_FETCH32	mDNSCore/DNSDigest.c	546;"	d	file:
HOST_FETCH32	mDNSCore/DNSDigest.c	548;"	d	file:
HOST_c2l	mDNSCore/DNSDigest.c	564;"	d	file:
HOST_c2l_p	mDNSCore/DNSDigest.c	590;"	d	file:
HOST_c2l_p	mDNSCore/DNSDigest.c	626;"	d	file:
HOST_l2c	mDNSCore/DNSDigest.c	565;"	d	file:
HOST_p_c2l	mDNSCore/DNSDigest.c	574;"	d	file:
HOST_p_c2l	mDNSCore/DNSDigest.c	610;"	d	file:
HOST_p_c2l_p	mDNSCore/DNSDigest.c	581;"	d	file:
HOST_p_c2l_p	mDNSCore/DNSDigest.c	617;"	d	file:
HTTPCode_200	mDNSMacOSX/LegacyNATTraversal.c	/^    HTTPCode_200          = 200,$/;"	e	enum:__anon147	file:
HTTPCode_404	mDNSMacOSX/LegacyNATTraversal.c	/^    HTTPCode_404          = 404,$/;"	e	enum:__anon147	file:
HTTPCode_500	mDNSMacOSX/LegacyNATTraversal.c	/^    HTTPCode_500          = 500,$/;"	e	enum:__anon147	file:
HTTPCode_Bad	mDNSMacOSX/LegacyNATTraversal.c	/^    HTTPCode_Bad          = -3,$/;"	e	enum:__anon147	file:
HTTPCode_NeedMoreData	mDNSMacOSX/LegacyNATTraversal.c	/^    HTTPCode_NeedMoreData = -1, \/\/ No code found in stream$/;"	e	enum:__anon147	file:
HTTPCode_Other	mDNSMacOSX/LegacyNATTraversal.c	/^    HTTPCode_Other        = -2, \/\/ Valid code other than those below found in stream$/;"	e	enum:__anon147	file:
HTTP_ENCRYPT_ALWAYS	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^    HTTP_ENCRYPT_ALWAYS             \/* Always encrypt (SSL) *\/$/;"	e	enum:CPrinterSetupWizardSheet::http_encryption_e
HTTP_ENCRYPT_IF_REQUESTED	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^    HTTP_ENCRYPT_IF_REQUESTED,          \/* Encrypt if requested (TLS upgrade) *\/$/;"	e	enum:CPrinterSetupWizardSheet::http_encryption_e
HTTP_ENCRYPT_NEVER	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^    HTTP_ENCRYPT_NEVER,             \/* Never encrypt *\/$/;"	e	enum:CPrinterSetupWizardSheet::http_encryption_e
HTTP_ENCRYPT_REQUIRED	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^    HTTP_ENCRYPT_REQUIRED,          \/* Encryption is required (TLS upgrade) *\/$/;"	e	enum:CPrinterSetupWizardSheet::http_encryption_e
H_HELPERMSG_TYPES_H	mDNSMacOSX/helpermsg-types.h	19;"	d
H_HELPER_H	mDNSMacOSX/helper.h	19;"	d
H_HELPER_SERVER_H	mDNSMacOSX/helper-server.h	19;"	d
HaltOperation	mDNSShared/Java/DNSSD.java	/^	protected synchronized native void HaltOperation();$/;"	m	class:AppleService
HandleEvents	Clients/dns-sd.c	/^static void HandleEvents(void)$/;"	f	file:
HandleRequest	mDNSShared/dnsextd.c	/^HandleRequest$/;"	f
HandleSIG	mDNSMacOSX/daemon.c	/^mDNSlocal void HandleSIG(int sig)$/;"	f
HandleSIG	mDNSPosix/ExampleClientApp.c	/^mDNSlocal void HandleSIG(int signal)$/;"	f
HandleSIG	mDNSPosix/Identify.c	/^mDNSlocal void HandleSIG(int signal)$/;"	f
HandleSigHup	mDNSPosix/Responder.c	/^static void HandleSigHup(int sigraised)$/;"	f	file:
HandleSigInt	mDNSPosix/Responder.c	/^static void HandleSigInt(int sigraised)$/;"	f	file:
HandleSigQuit	mDNSPosix/Responder.c	/^static void HandleSigQuit(int sigraised)$/;"	f	file:
HandleSigUsr1	mDNSPosix/Responder.c	/^static void HandleSigUsr1(int sigraised)$/;"	f	file:
HandleTemporaryEventsForService	mDNSMacOSX/BonjourEvents.c	/^void HandleTemporaryEventsForService(BonjourUserEventsPlugin* plugin, NetBrowserInfo* browser, CFStringRef serviceName, CFMutableDictionaryRef eventsDictionary)$/;"	f
HasFocusIO	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::HasFocusIO( void )$/;"	f	class:ExplorerBar
HashSlot	mDNSCore/DNSCommon.h	241;"	d
HaveRoute	mDNSWindows/SystemService/Service.c	/^HaveRoute( PMIB_IPFORWARDROW rowExtant, unsigned long addr, unsigned long metric )$/;"	f	file:
HdrHToN	mDNSShared/dnsextd.c	/^mDNSlocal void HdrHToN(PktMsg *pkt)$/;"	f
HdrNToH	mDNSShared/dnsextd.c	/^mDNSlocal void HdrNToH(PktMsg *pkt)$/;"	f
Head	mDNSShared/GenLinkedList.h	/^    size_t Head,$/;"	m	struct:GenLinkedOffsetList
Head	mDNSShared/GenLinkedList.h	/^    void        *Head,$/;"	m	struct:GenDoubleLinkedList
Head	mDNSShared/GenLinkedList.h	/^    void        *Head,$/;"	m	struct:GenLinkedList
HeapEnableTerminationOnCorruption	Clients/PrinterSetupWizard/PrinterSetupWizardApp.cpp	29;"	d	file:
HeapEnableTerminationOnCorruption	Clients/dns-sd.c	87;"	d	file:
HeapEnableTerminationOnCorruption	mDNSWindows/ControlPanel/ControlPanelExe.cpp	35;"	d	file:
HeapEnableTerminationOnCorruption	mDNSWindows/SystemService/Service.c	56;"	d	file:
HelperQueue	mDNSMacOSX/helper-stubs.c	/^static dispatch_queue_t HelperQueue;$/;"	v	file:
HexDump	mDNSPosix/NetMonitor.c	/^mDNSlocal void HexDump(const mDNSu8 *ptr, const mDNSu8 *const end)$/;"	f
HexPair	Clients/dns-sd.c	1380;"	d	file:
HexVal	Clients/dns-sd.c	1376;"	d	file:
HexVal	mDNSCore/mDNS.c	2055;"	d	file:
HexVal	mDNSMacOSX/DNSSECSupport.c	135;"	d	file:
HndlSignal	mDNSShared/dnsextd.c	/^mDNSlocal void HndlSignal(int sig)$/;"	f
Host	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname Host;                    \/\/ Discovered result: Target host from SRV record$/;"	m	struct:ZoneData_struct
HostEntry	mDNSPosix/NetMonitor.c	/^} HostEntry;$/;"	t	typeref:struct:__anon19	file:
HostEntryTotalPackets	mDNSPosix/NetMonitor.c	176;"	d	file:
HostInterfaces	mDNSCore/mDNSEmbeddedAPI.h	/^    NetworkInterfaceInfo *HostInterfaces;$/;"	m	struct:mDNS_struct
HostList	mDNSPosix/NetMonitor.c	/^} HostList;$/;"	t	typeref:struct:__anon20	file:
HostName	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			public String	    HostName;$/;"	f	class:DNSServiceBrowser_NET.Form1.ResolveData
HostNameCallback	mDNSPosix/ProxyResponder.c	/^mDNSlocal void HostNameCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
HostNameConflict	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSs32 HostNameConflict;                   \/\/ Time we experienced conflict on our link-local host name$/;"	m	struct:mDNS_PlatformSupport_struct
HostPkt_B	mDNSPosix/NetMonitor.c	/^    HostPkt_B        = 3,       \/\/ Bad$/;"	e	enum:__anon18	file:
HostPkt_L	mDNSPosix/NetMonitor.c	/^    HostPkt_L        = 1,       \/\/ Legacy Query$/;"	e	enum:__anon18	file:
HostPkt_NumTypes	mDNSPosix/NetMonitor.c	/^    HostPkt_NumTypes = 4$/;"	e	enum:__anon18	file:
HostPkt_Q	mDNSPosix/NetMonitor.c	/^    HostPkt_Q        = 0,       \/\/ Query$/;"	e	enum:__anon18	file:
HostPkt_R	mDNSPosix/NetMonitor.c	/^    HostPkt_R        = 2,       \/\/ Response$/;"	e	enum:__anon18	file:
HostPkt_Type	mDNSPosix/NetMonitor.c	/^} HostPkt_Type;$/;"	t	typeref:enum:__anon18	file:
HostnameCallback	mDNSCore/uDNS.c	/^mDNSlocal void HostnameCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
HostnameInfo	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct HostnameInfo$/;"	s
HostnameInfo	mDNSCore/mDNSEmbeddedAPI.h	/^} HostnameInfo;$/;"	t	typeref:struct:HostnameInfo
Hostnames	mDNSCore/mDNSEmbeddedAPI.h	/^    HostnameInfo     *Hostnames;            \/\/ List of registered hostnames + hostname metadata$/;"	m	struct:mDNS_struct
HostsFile	mDNSWindows/mdnsNSP/mdnsNSP.c	/^typedef struct HostsFile$/;"	s	file:
HostsFile	mDNSWindows/mdnsNSP/mdnsNSP.c	/^} HostsFile;$/;"	t	typeref:struct:HostsFile	file:
HostsFileClose	mDNSWindows/mdnsNSP/mdnsNSP.c	/^HostsFileClose( HostsFile * self )$/;"	f
HostsFileInfo	mDNSWindows/mdnsNSP/mdnsNSP.c	/^typedef struct HostsFileInfo$/;"	s	file:
HostsFileInfo	mDNSWindows/mdnsNSP/mdnsNSP.c	/^} HostsFileInfo;$/;"	t	typeref:struct:HostsFileInfo	file:
HostsFileInfoFree	mDNSWindows/mdnsNSP/mdnsNSP.c	/^HostsFileInfoFree( HostsFileInfo * info )$/;"	f
HostsFileNext	mDNSWindows/mdnsNSP/mdnsNSP.c	/^HostsFileNext( HostsFile * self, HostsFileInfo ** hInfo )$/;"	f
HostsFileOpen	mDNSWindows/mdnsNSP/mdnsNSP.c	/^HostsFileOpen( HostsFile ** self, const char * fname )$/;"	f
I	mDNSCore/DNSDigest.c	886;"	d	file:
IDB_ABOUT	Clients/ExplorerPlugin/resource_res.h	13;"	d
IDB_ABOUT	Clients/PrinterSetupWizard/resource_exe.h	44;"	d
IDB_ABOUT	Clients/PrinterSetupWizard/resource_loc_res.h	45;"	d
IDB_ABOUT	Clients/PrinterSetupWizard/resource_res.h	44;"	d
IDB_BANNER_ICON	Clients/PrinterSetupWizard/resource_exe.h	39;"	d
IDB_BANNER_ICON	Clients/PrinterSetupWizard/resource_loc_res.h	40;"	d
IDB_BANNER_ICON	Clients/PrinterSetupWizard/resource_res.h	39;"	d
IDB_LOGO	Clients/ExplorerPlugin/resource_res.h	10;"	d
IDB_WATERMARK	Clients/PrinterSetupWizard/resource_exe.h	41;"	d
IDB_WATERMARK	Clients/PrinterSetupWizard/resource_loc_res.h	42;"	d
IDB_WATERMARK	Clients/PrinterSetupWizard/resource_res.h	41;"	d
IDC_ABOUT_APP_ICON	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	37;"	d
IDC_ABOUT_APP_NAME_TEXT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	34;"	d
IDC_ABOUT_APP_VERSION_TEXT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	35;"	d
IDC_ABOUT_BACKGROUND	Clients/ExplorerPlugin/resource_loc_res.h	13;"	d
IDC_ABOUT_COPYRIGHT_TEXT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	36;"	d
IDC_ADD_BROWSE_DOMAIN	mDNSWindows/ControlPanel/resource.h	42;"	d
IDC_ADVERTISE_SERVICES	mDNSWindows/ControlPanel/resource.h	25;"	d
IDC_ADVERTISE_SMB	mDNSWindows/ControlPanel/resource.h	44;"	d
IDC_BROWSE_LIST	Clients/PrinterSetupWizard/resource_exe.h	58;"	d
IDC_BROWSE_LIST	Clients/PrinterSetupWizard/resource_loc_res.h	59;"	d
IDC_BROWSE_LIST	Clients/PrinterSetupWizard/resource_res.h	58;"	d
IDC_BROWSE_LIST	mDNSWindows/ControlPanel/resource.h	39;"	d
IDC_BROWSE_LIST	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/resource.h	9;"	d
IDC_BUTTON1	Clients/PrinterSetupWizard/resource_exe.h	56;"	d
IDC_BUTTON1	Clients/PrinterSetupWizard/resource_loc_res.h	57;"	d
IDC_BUTTON1	Clients/PrinterSetupWizard/resource_res.h	56;"	d
IDC_BUTTON1	mDNSWindows/ControlPanel/resource.h	26;"	d
IDC_BUTTON2	mDNSWindows/ControlPanel/resource.h	40;"	d
IDC_CHECK1	Clients/PrinterSetupWizard/resource_exe.h	63;"	d
IDC_CHECK1	Clients/PrinterSetupWizard/resource_loc_res.h	64;"	d
IDC_CHECK1	Clients/PrinterSetupWizard/resource_res.h	63;"	d
IDC_CHECK1	mDNSWindows/ControlPanel/resource.h	28;"	d
IDC_CHOOSER_LIST	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	29;"	d
IDC_COMBO1	Clients/PrinterSetupWizard/resource_exe.h	60;"	d
IDC_COMBO1	Clients/PrinterSetupWizard/resource_loc_res.h	61;"	d
IDC_COMBO1	Clients/PrinterSetupWizard/resource_res.h	60;"	d
IDC_COMBO1	mDNSWindows/ControlPanel/resource.h	27;"	d
IDC_COMBO2	mDNSWindows/ControlPanel/resource.h	29;"	d
IDC_COMBO3	mDNSWindows/ControlPanel/resource.h	32;"	d
IDC_COMPLETE1	Clients/PrinterSetupWizard/resource_exe.h	80;"	d
IDC_COMPLETE1	Clients/PrinterSetupWizard/resource_loc_res.h	81;"	d
IDC_COMPLETE1	Clients/PrinterSetupWizard/resource_res.h	80;"	d
IDC_COMPLETE2	Clients/PrinterSetupWizard/resource_exe.h	81;"	d
IDC_COMPLETE2	Clients/PrinterSetupWizard/resource_loc_res.h	82;"	d
IDC_COMPLETE2	Clients/PrinterSetupWizard/resource_res.h	81;"	d
IDC_COMPONENT	Clients/ExplorerPlugin/resource_dll.h	10;"	d
IDC_COMPONENT	Clients/ExplorerPlugin/resource_loc_res.h	16;"	d
IDC_COMPONENT	Clients/ExplorerPlugin/resource_res.h	14;"	d
IDC_COMPONENT_VERSION	Clients/ExplorerPlugin/resource_dll.h	12;"	d
IDC_COMPONENT_VERSION	Clients/ExplorerPlugin/resource_loc_res.h	18;"	d
IDC_COMPONENT_VERSION	Clients/ExplorerPlugin/resource_res.h	16;"	d
IDC_DEFAULT_PRINTER	Clients/PrinterSetupWizard/resource_exe.h	64;"	d
IDC_DEFAULT_PRINTER	Clients/PrinterSetupWizard/resource_loc_res.h	65;"	d
IDC_DEFAULT_PRINTER	Clients/PrinterSetupWizard/resource_res.h	64;"	d
IDC_DESCRIPTION_FIELD	Clients/PrinterSetupWizard/resource_exe.h	77;"	d
IDC_DESCRIPTION_FIELD	Clients/PrinterSetupWizard/resource_loc_res.h	78;"	d
IDC_DESCRIPTION_FIELD	Clients/PrinterSetupWizard/resource_res.h	77;"	d
IDC_DESCRIPTION_LABEL	Clients/PrinterSetupWizard/resource_exe.h	79;"	d
IDC_DESCRIPTION_LABEL	Clients/PrinterSetupWizard/resource_loc_res.h	80;"	d
IDC_DESCRIPTION_LABEL	Clients/PrinterSetupWizard/resource_res.h	79;"	d
IDC_DESCRIPTION_TEXT2	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	15;"	d
IDC_DOMAIN_LIST	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	33;"	d
IDC_EDIT2	mDNSWindows/ControlPanel/resource.h	30;"	d
IDC_EDIT2	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	39;"	d
IDC_ENERGY_SAVER	mDNSWindows/ControlPanel/resource.h	45;"	d
IDC_EXPLORER_TREE	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	50;"	d	file:
IDC_FAILURE	mDNSWindows/ControlPanel/resource.h	33;"	d
IDC_GOODBYE	Clients/PrinterSetupWizard/resource_exe.h	69;"	d
IDC_GOODBYE	Clients/PrinterSetupWizard/resource_loc_res.h	70;"	d
IDC_GOODBYE	Clients/PrinterSetupWizard/resource_res.h	69;"	d
IDC_GREETING	Clients/PrinterSetupWizard/resource_exe.h	62;"	d
IDC_GREETING	Clients/PrinterSetupWizard/resource_loc_res.h	63;"	d
IDC_GREETING	Clients/PrinterSetupWizard/resource_res.h	62;"	d
IDC_HAVE_DISK	Clients/PrinterSetupWizard/resource_exe.h	74;"	d
IDC_HAVE_DISK	Clients/PrinterSetupWizard/resource_loc_res.h	75;"	d
IDC_HAVE_DISK	Clients/PrinterSetupWizard/resource_res.h	74;"	d
IDC_HOSTNAME	mDNSWindows/ControlPanel/resource.h	22;"	d
IDC_INFO	Clients/PrinterSetupWizard/resource_exe.h	50;"	d
IDC_INFO	Clients/PrinterSetupWizard/resource_loc_res.h	51;"	d
IDC_INFO	Clients/PrinterSetupWizard/resource_res.h	50;"	d
IDC_INFO_HOST_NAME_TEXT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	23;"	d
IDC_INFO_INTERFACE_TEXT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	20;"	d
IDC_INFO_INTERFACE_TEXT2	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	22;"	d
IDC_INFO_IP_TEXT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	18;"	d
IDC_INFO_NAME_TEXT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	14;"	d
IDC_INFO_TEXT_TEXT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	16;"	d
IDC_INSTALLING	Clients/PrinterSetupWizard/resource_exe.h	82;"	d
IDC_INSTALLING	Clients/PrinterSetupWizard/resource_loc_res.h	83;"	d
IDC_INSTALLING	Clients/PrinterSetupWizard/resource_res.h	82;"	d
IDC_IP_TEXT	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/resource.h	10;"	d
IDC_IP_TEXT2	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	17;"	d
IDC_IP_TEXT3	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	19;"	d
IDC_KEY	mDNSWindows/ControlPanel/resource.h	37;"	d
IDC_LEGAL	Clients/ExplorerPlugin/resource_dll.h	11;"	d
IDC_LEGAL	Clients/ExplorerPlugin/resource_loc_res.h	17;"	d
IDC_LEGAL	Clients/ExplorerPlugin/resource_res.h	15;"	d
IDC_LIST1	Clients/PrinterSetupWizard/resource_exe.h	57;"	d
IDC_LIST1	Clients/PrinterSetupWizard/resource_loc_res.h	58;"	d
IDC_LIST1	Clients/PrinterSetupWizard/resource_res.h	57;"	d
IDC_LIST1	mDNSWindows/ControlPanel/resource.h	38;"	d
IDC_LOCATION_FIELD	Clients/PrinterSetupWizard/resource_exe.h	78;"	d
IDC_LOCATION_FIELD	Clients/PrinterSetupWizard/resource_loc_res.h	79;"	d
IDC_LOCATION_FIELD	Clients/PrinterSetupWizard/resource_res.h	78;"	d
IDC_LOCATION_LABEL	Clients/PrinterSetupWizard/resource_exe.h	76;"	d
IDC_LOCATION_LABEL	Clients/PrinterSetupWizard/resource_loc_res.h	77;"	d
IDC_LOCATION_LABEL	Clients/PrinterSetupWizard/resource_res.h	76;"	d
IDC_LOGIN_PASSWORD_TEXT	Clients/ExplorerPlugin/resource_dll.h	14;"	d
IDC_LOGIN_PASSWORD_TEXT	Clients/ExplorerPlugin/resource_loc_res.h	20;"	d
IDC_LOGIN_PASSWORD_TEXT	Clients/ExplorerPlugin/resource_res.h	18;"	d
IDC_LOGIN_PASSWORD_TEXT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	40;"	d
IDC_LOGIN_USERNAME_TEXT	Clients/ExplorerPlugin/resource_dll.h	13;"	d
IDC_LOGIN_USERNAME_TEXT	Clients/ExplorerPlugin/resource_loc_res.h	19;"	d
IDC_LOGIN_USERNAME_TEXT	Clients/ExplorerPlugin/resource_res.h	17;"	d
IDC_LOGIN_USERNAME_TEXT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	38;"	d
IDC_NAME	mDNSWindows/ControlPanel/resource.h	36;"	d
IDC_NAME_TEXT2	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	13;"	d
IDC_PASSWORD	mDNSWindows/ControlPanel/resource.h	24;"	d
IDC_POWER_MANAGEMENT	mDNSWindows/ControlPanel/resource.h	43;"	d
IDC_PRINTER_DEFAULT	Clients/PrinterSetupWizard/resource_exe.h	72;"	d
IDC_PRINTER_DEFAULT	Clients/PrinterSetupWizard/resource_loc_res.h	73;"	d
IDC_PRINTER_DEFAULT	Clients/PrinterSetupWizard/resource_res.h	72;"	d
IDC_PRINTER_IMAGE	Clients/PrinterSetupWizard/resource_exe.h	65;"	d
IDC_PRINTER_IMAGE	Clients/PrinterSetupWizard/resource_loc_res.h	66;"	d
IDC_PRINTER_IMAGE	Clients/PrinterSetupWizard/resource_res.h	65;"	d
IDC_PRINTER_INFORMATION	Clients/PrinterSetupWizard/resource_exe.h	75;"	d
IDC_PRINTER_INFORMATION	Clients/PrinterSetupWizard/resource_loc_res.h	76;"	d
IDC_PRINTER_INFORMATION	Clients/PrinterSetupWizard/resource_res.h	75;"	d
IDC_PRINTER_MANUFACTURER	Clients/PrinterSetupWizard/resource_exe.h	67;"	d
IDC_PRINTER_MANUFACTURER	Clients/PrinterSetupWizard/resource_loc_res.h	68;"	d
IDC_PRINTER_MANUFACTURER	Clients/PrinterSetupWizard/resource_res.h	67;"	d
IDC_PRINTER_MODEL	Clients/PrinterSetupWizard/resource_exe.h	68;"	d
IDC_PRINTER_MODEL	Clients/PrinterSetupWizard/resource_loc_res.h	69;"	d
IDC_PRINTER_MODEL	Clients/PrinterSetupWizard/resource_res.h	68;"	d
IDC_PRINTER_NAME	Clients/PrinterSetupWizard/resource_exe.h	66;"	d
IDC_PRINTER_NAME	Clients/PrinterSetupWizard/resource_loc_res.h	67;"	d
IDC_PRINTER_NAME	Clients/PrinterSetupWizard/resource_res.h	66;"	d
IDC_PRINTER_PORT	Clients/PrinterSetupWizard/resource_exe.h	70;"	d
IDC_PRINTER_PORT	Clients/PrinterSetupWizard/resource_loc_res.h	71;"	d
IDC_PRINTER_PORT	Clients/PrinterSetupWizard/resource_res.h	70;"	d
IDC_PRINTER_PROTOCOL	Clients/PrinterSetupWizard/resource_exe.h	71;"	d
IDC_PRINTER_PROTOCOL	Clients/PrinterSetupWizard/resource_loc_res.h	72;"	d
IDC_PRINTER_PROTOCOL	Clients/PrinterSetupWizard/resource_res.h	71;"	d
IDC_PRINTER_SELECTION_TEXT	Clients/PrinterSetupWizard/resource_exe.h	73;"	d
IDC_PRINTER_SELECTION_TEXT	Clients/PrinterSetupWizard/resource_loc_res.h	74;"	d
IDC_PRINTER_SELECTION_TEXT	Clients/PrinterSetupWizard/resource_res.h	73;"	d
IDC_PROGRESS	Clients/PrinterSetupWizard/resource_exe.h	83;"	d
IDC_PROGRESS	Clients/PrinterSetupWizard/resource_loc_res.h	84;"	d
IDC_PROGRESS	Clients/PrinterSetupWizard/resource_res.h	83;"	d
IDC_RADIO1	Clients/PrinterSetupWizard/resource_exe.h	59;"	d
IDC_RADIO1	Clients/PrinterSetupWizard/resource_loc_res.h	60;"	d
IDC_RADIO1	Clients/PrinterSetupWizard/resource_res.h	59;"	d
IDC_RADIO2	Clients/PrinterSetupWizard/resource_exe.h	61;"	d
IDC_RADIO2	Clients/PrinterSetupWizard/resource_loc_res.h	62;"	d
IDC_RADIO2	Clients/PrinterSetupWizard/resource_res.h	61;"	d
IDC_REMOVE_BROWSE_DOMAIN	mDNSWindows/ControlPanel/resource.h	41;"	d
IDC_SECRET	mDNSWindows/ControlPanel/resource.h	31;"	d
IDC_SECRET_NAME	mDNSWindows/ControlPanel/resource.h	35;"	d
IDC_SERVICE_LIST	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	31;"	d
IDC_SERVICE_LIST2	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	30;"	d
IDC_SERVICE_LIST3	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	32;"	d
IDC_SUCCESS	mDNSWindows/ControlPanel/resource.h	34;"	d
IDC_TXT_TEXT	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/resource.h	11;"	d
IDC_USERNAME	mDNSWindows/ControlPanel/resource.h	23;"	d
IDD	Clients/ExplorerPlugin/About.h	/^enum { IDD = IDD_ABOUT };$/;"	e	enum:CAbout::__anon172
IDD	Clients/ExplorerPlugin/LoginDialog.h	/^enum { IDD = IDD_LOGIN };$/;"	e	enum:LoginDialog::__anon173
IDD	Clients/PrinterSetupWizard/About.h	/^enum { IDD = IDD_DIALOG1 };$/;"	e	enum:CAbout::__anon164
IDD	Clients/PrinterSetupWizard/FirstPage.h	/^enum { IDD = IDD_FIRST_PAGE };$/;"	e	enum:CFirstPage::__anon163
IDD	Clients/PrinterSetupWizard/FourthPage.h	/^enum { IDD = IDD_FOURTH_PAGE };$/;"	e	enum:CFourthPage::__anon167
IDD	Clients/PrinterSetupWizard/SecondPage.h	/^enum { IDD = IDD_SECOND_PAGE };$/;"	e	enum:CSecondPage::__anon166
IDD	Clients/PrinterSetupWizard/ThirdPage.h	/^enum { IDD = IDD_THIRD_PAGE };$/;"	e	enum:CThirdPage::__anon165
IDD	mDNSWindows/ControlPanel/BrowsingPage.h	/^	enum { IDD = IDR_ADD_BROWSE_DOMAIN };$/;"	e	enum:CAddBrowseDomain::__anon6
IDD	mDNSWindows/ControlPanel/BrowsingPage.h	/^	enum { IDD = IDR_APPLET_PAGE3 };$/;"	e	enum:CBrowsingPage::__anon5
IDD	mDNSWindows/ControlPanel/ConfigDialog.h	/^	enum { IDD = IDR_APPLET };$/;"	e	enum:CConfigDialog::__anon2
IDD	mDNSWindows/ControlPanel/FourthPage.h	/^	enum { IDD = IDR_APPLET_PAGE4 };$/;"	e	enum:CFourthPage::__anon9
IDD	mDNSWindows/ControlPanel/RegistrationPage.h	/^	enum { IDD = IDR_APPLET_PAGE1 };$/;"	e	enum:CRegistrationPage::__anon8
IDD	mDNSWindows/ControlPanel/SecondPage.h	/^	enum { IDD = IDR_APPLET_PAGE2 };$/;"	e	enum:CSecondPage::__anon7
IDD	mDNSWindows/ControlPanel/ServicesPage.h	/^	enum { IDD = IDR_APPLET_PAGE5 };$/;"	e	enum:CServicesPage::__anon3
IDD	mDNSWindows/ControlPanel/ServicesPage.h	/^	enum { IDD = IDR_POWER_MANAGEMENT_WARNING };$/;"	e	enum:CPowerManagementWarning::__anon4
IDD	mDNSWindows/ControlPanel/SharedSecret.h	/^	enum { IDD = IDR_SECRET };$/;"	e	enum:CSharedSecret::__anon1
IDD	mDNSWindows/DNSServiceBrowser/Windows/Sources/AboutDialog.h	/^		enum { IDD = IDD_ABOUT_DIALOG };$/;"	e	enum:AboutDialog::__anon16
IDD	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^		enum { IDD = IDD_CHOOSER_DIALOG };$/;"	e	enum:ChooserDialog::__anon14
IDD	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.h	/^		enum { IDD = IDD_LOGIN };$/;"	e	enum:LoginDialog::__anon15
IDD	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.h	/^		enum { IDD = IDD_APPLICATION_DIALOG };$/;"	e	enum:BrowserDialog::__anon12
IDD_ABOUT	Clients/ExplorerPlugin/resource_loc_res.h	10;"	d
IDD_ABOUTBOX	Clients/PrinterSetupWizard/resource_exe.h	6;"	d
IDD_ABOUTBOX	Clients/PrinterSetupWizard/resource_loc_res.h	6;"	d
IDD_ABOUTBOX	Clients/PrinterSetupWizard/resource_res.h	6;"	d
IDD_ABOUT_DIALOG	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	26;"	d
IDD_APPLICATION_DIALOG	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/resource.h	5;"	d
IDD_CHOOSER_DIALOG	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	25;"	d
IDD_DIALOG1	Clients/PrinterSetupWizard/resource_exe.h	45;"	d
IDD_DIALOG1	Clients/PrinterSetupWizard/resource_loc_res.h	46;"	d
IDD_DIALOG1	Clients/PrinterSetupWizard/resource_res.h	45;"	d
IDD_FIRST_PAGE	Clients/PrinterSetupWizard/resource_exe.h	14;"	d
IDD_FIRST_PAGE	Clients/PrinterSetupWizard/resource_loc_res.h	14;"	d
IDD_FIRST_PAGE	Clients/PrinterSetupWizard/resource_res.h	14;"	d
IDD_FOURTH_PAGE	Clients/PrinterSetupWizard/resource_exe.h	42;"	d
IDD_FOURTH_PAGE	Clients/PrinterSetupWizard/resource_loc_res.h	43;"	d
IDD_FOURTH_PAGE	Clients/PrinterSetupWizard/resource_res.h	42;"	d
IDD_LOGIN	Clients/ExplorerPlugin/resource_loc_res.h	12;"	d
IDD_LOGIN	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	27;"	d
IDD_PRINTERSETUPWIZARD_DIALOG	Clients/PrinterSetupWizard/resource_exe.h	8;"	d
IDD_PRINTERSETUPWIZARD_DIALOG	Clients/PrinterSetupWizard/resource_loc_res.h	8;"	d
IDD_PRINTERSETUPWIZARD_DIALOG	Clients/PrinterSetupWizard/resource_res.h	8;"	d
IDD_SECOND_PAGE	Clients/PrinterSetupWizard/resource_exe.h	17;"	d
IDD_SECOND_PAGE	Clients/PrinterSetupWizard/resource_loc_res.h	17;"	d
IDD_SECOND_PAGE	Clients/PrinterSetupWizard/resource_res.h	17;"	d
IDD_THIRD_PAGE	Clients/PrinterSetupWizard/resource_exe.h	40;"	d
IDD_THIRD_PAGE	Clients/PrinterSetupWizard/resource_loc_res.h	41;"	d
IDD_THIRD_PAGE	Clients/PrinterSetupWizard/resource_res.h	40;"	d
IDI_BUTTON_2K	Clients/ExplorerPlugin/resource_res.h	11;"	d
IDI_BUTTON_XP	Clients/ExplorerPlugin/resource_res.h	12;"	d
IDI_ENERGY_SAVER	mDNSWindows/ControlPanel/resource.h	15;"	d
IDI_FAILURE	mDNSWindows/ControlPanel/resource.h	13;"	d
IDI_ICON2	Clients/PrinterSetupWizard/resource_exe.h	46;"	d
IDI_ICON2	Clients/PrinterSetupWizard/resource_loc_res.h	47;"	d
IDI_ICON2	Clients/PrinterSetupWizard/resource_res.h	46;"	d
IDI_INFO	Clients/PrinterSetupWizard/resource_exe.h	43;"	d
IDI_INFO	Clients/PrinterSetupWizard/resource_loc_res.h	44;"	d
IDI_INFO	Clients/PrinterSetupWizard/resource_res.h	43;"	d
IDI_PRINTER	Clients/PrinterSetupWizard/resource_exe.h	47;"	d
IDI_PRINTER	Clients/PrinterSetupWizard/resource_loc_res.h	48;"	d
IDI_PRINTER	Clients/PrinterSetupWizard/resource_res.h	47;"	d
IDI_SUCCESS	mDNSWindows/ControlPanel/resource.h	14;"	d
IDM_ABOUTBOX	Clients/PrinterSetupWizard/resource_exe.h	5;"	d
IDM_ABOUTBOX	Clients/PrinterSetupWizard/resource_loc_res.h	5;"	d
IDM_ABOUTBOX	Clients/PrinterSetupWizard/resource_res.h	5;"	d
IDM_SHAREDNEW	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	15;"	d
IDM_SHAREDNEWDEFAULT	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	16;"	d
IDNSSDBROWSELISTENER_IID	Clients/FirefoxExtension/IDNSSDService.h	23;"	d
IDNSSDBROWSELISTENER_IID_STR	Clients/FirefoxExtension/IDNSSDService.h	21;"	d
IDNSSDBrowseListener	Clients/FirefoxExtension/IDNSSDService.h	/^class NS_NO_VTABLE NS_SCRIPTABLE IDNSSDBrowseListener : public nsISupports {$/;"	c
IDNSSDRESOLVELISTENER_IID	Clients/FirefoxExtension/IDNSSDService.h	96;"	d
IDNSSDRESOLVELISTENER_IID_STR	Clients/FirefoxExtension/IDNSSDService.h	94;"	d
IDNSSDResolveListener	Clients/FirefoxExtension/IDNSSDService.h	/^class NS_NO_VTABLE NS_SCRIPTABLE IDNSSDResolveListener : public nsISupports {$/;"	c
IDNSSDSERVICE_IID	Clients/FirefoxExtension/IDNSSDService.h	169;"	d
IDNSSDSERVICE_IID_STR	Clients/FirefoxExtension/IDNSSDService.h	167;"	d
IDNSSDService	Clients/FirefoxExtension/IDNSSDService.h	/^class NS_NO_VTABLE NS_SCRIPTABLE IDNSSDService : public nsISupports {$/;"	c
IDP_SOCKETS_INIT_FAILED	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	7;"	d
IDP_SOCKETS_INIT_FAILED	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/resource.h	6;"	d
IDR_ADD_BROWSE_DOMAIN	mDNSWindows/ControlPanel/resource.h	16;"	d
IDR_APPLET	mDNSWindows/ControlPanel/resource.h	5;"	d
IDR_APPLET_PAGE1	mDNSWindows/ControlPanel/resource.h	6;"	d
IDR_APPLET_PAGE2	mDNSWindows/ControlPanel/resource.h	8;"	d
IDR_APPLET_PAGE3	mDNSWindows/ControlPanel/resource.h	10;"	d
IDR_APPLET_PAGE4	mDNSWindows/ControlPanel/resource.h	11;"	d
IDR_APPLET_PAGE5	mDNSWindows/ControlPanel/resource.h	12;"	d
IDR_BROWSELISTENER	mDNSWindows/DLLX/resource.h	9;"	d
IDR_CHOOSER_DIALOG_MENU	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	24;"	d
IDR_CHOOSER_DIALOG_MENU_ACCELERATORS	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	28;"	d
IDR_CONTEXT_MENU	Clients/ExplorerPlugin/resource_loc_res.h	11;"	d
IDR_DLLX	mDNSWindows/DLLX/resource.h	6;"	d
IDR_DNSSD	mDNSWindows/DLLX/resource.h	7;"	d
IDR_DNSSDEVENTMANAGER	mDNSWindows/DLLX/resource.h	19;"	d
IDR_DNSSDRECORD	mDNSWindows/DLLX/resource.h	16;"	d
IDR_DNSSDSERVICE	mDNSWindows/DLLX/resource.h	8;"	d
IDR_ENUMERATEDOMAINSLISTENER	mDNSWindows/DLLX/resource.h	12;"	d
IDR_GETADDRINFOLISTENER	mDNSWindows/DLLX/resource.h	15;"	d
IDR_MAINFRAME	Clients/PrinterSetupWizard/resource_exe.h	37;"	d
IDR_MAINFRAME	Clients/PrinterSetupWizard/resource_loc_res.h	38;"	d
IDR_MAINFRAME	Clients/PrinterSetupWizard/resource_res.h	37;"	d
IDR_MAINFRAME	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/resource.h	8;"	d
IDR_MAIN_ICON	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	21;"	d
IDR_NATPORTMAPPINGLISTENER	mDNSWindows/DLLX/resource.h	18;"	d
IDR_POWER_MANAGEMENT_WARNING	mDNSWindows/ControlPanel/resource.h	17;"	d
IDR_QUERYRECORDLISTENER	mDNSWindows/DLLX/resource.h	14;"	d
IDR_REGISTERLISTENER	mDNSWindows/DLLX/resource.h	13;"	d
IDR_REGISTERRECORDLISTENER	mDNSWindows/DLLX/resource.h	17;"	d
IDR_RESOLVELISTENER	mDNSWindows/DLLX/resource.h	10;"	d
IDR_SECRET	mDNSWindows/ControlPanel/resource.h	9;"	d
IDR_TXTRECORD	mDNSWindows/DLLX/resource.h	11;"	d
IDR_WMDMLOGGER	Clients/FirefoxExtension/resource.h	6;"	d
IDR_WMDMLOGGER	mDNSWindows/DLL/resource.h	6;"	d
IDR_WMDMLOGGER	mDNSWindows/NSPTool/resource.h	6;"	d
IDR_WMDMLOGGER	mDNSWindows/mdnsNSP/resource.h	6;"	d
IDS_ABOUT	Clients/ExplorerPlugin/resource_loc_res.h	14;"	d
IDS_ABOUTBOX	Clients/PrinterSetupWizard/resource_exe.h	7;"	d
IDS_ABOUTBOX	Clients/PrinterSetupWizard/resource_loc_res.h	7;"	d
IDS_ABOUTBOX	Clients/PrinterSetupWizard/resource_res.h	7;"	d
IDS_ABOUTBOX	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	5;"	d
IDS_ABOUT_URL	Clients/ExplorerPlugin/resource_loc_res.h	15;"	d
IDS_APPLET_DESCRIPTION	mDNSWindows/ControlPanel/resource.h	7;"	d
IDS_APPLET_NAME	mDNSWindows/ControlPanel/resource.h	20;"	d
IDS_APPLET_TOOLTIP	mDNSWindows/ControlPanel/resource.h	21;"	d
IDS_BAD_INF_FILE	Clients/PrinterSetupWizard/resource_exe.h	52;"	d
IDS_BAD_INF_FILE	Clients/PrinterSetupWizard/resource_loc_res.h	53;"	d
IDS_BAD_INF_FILE	Clients/PrinterSetupWizard/resource_res.h	52;"	d
IDS_BAD_INF_FILE_CAPTION	Clients/PrinterSetupWizard/resource_exe.h	53;"	d
IDS_BAD_INF_FILE_CAPTION	Clients/PrinterSetupWizard/resource_loc_res.h	54;"	d
IDS_BAD_INF_FILE_CAPTION	Clients/PrinterSetupWizard/resource_res.h	53;"	d
IDS_BROWSER_LIST_COLUMN_NAME	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/resource.h	7;"	d
IDS_BROWSE_SUBTITLE	Clients/PrinterSetupWizard/resource_exe.h	12;"	d
IDS_BROWSE_SUBTITLE	Clients/PrinterSetupWizard/resource_loc_res.h	12;"	d
IDS_BROWSE_SUBTITLE	Clients/PrinterSetupWizard/resource_res.h	12;"	d
IDS_BROWSE_TITLE	Clients/PrinterSetupWizard/resource_exe.h	11;"	d
IDS_BROWSE_TITLE	Clients/PrinterSetupWizard/resource_loc_res.h	11;"	d
IDS_BROWSE_TITLE	Clients/PrinterSetupWizard/resource_res.h	11;"	d
IDS_CAPTION	Clients/PrinterSetupWizard/resource_exe.h	13;"	d
IDS_CAPTION	Clients/PrinterSetupWizard/resource_loc_res.h	13;"	d
IDS_CAPTION	Clients/PrinterSetupWizard/resource_res.h	13;"	d
IDS_CHOOSER_CHOOSER_IP_COLUMN_NAME	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	11;"	d
IDS_CHOOSER_CHOOSER_NAME_COLUMN_NAME	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	10;"	d
IDS_CHOOSER_DOMAIN_COLUMN_NAME	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	6;"	d
IDS_CHOOSER_SERVICE_COLUMN_DESC	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	12;"	d
IDS_CHOOSER_SERVICE_COLUMN_NAME	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	8;"	d
IDS_CHOOSER_SERVICE_COLUMN_TYPE	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	9;"	d
IDS_DEF_LOGENABLED	Clients/FirefoxExtension/resource.h	15;"	d
IDS_DEF_LOGENABLED	mDNSWindows/DLL/resource.h	15;"	d
IDS_DEF_LOGENABLED	mDNSWindows/NSPTool/resource.h	15;"	d
IDS_DEF_LOGENABLED	mDNSWindows/mdnsNSP/resource.h	15;"	d
IDS_DEF_LOGFILE	Clients/FirefoxExtension/resource.h	12;"	d
IDS_DEF_LOGFILE	mDNSWindows/DLL/resource.h	12;"	d
IDS_DEF_LOGFILE	mDNSWindows/NSPTool/resource.h	12;"	d
IDS_DEF_LOGFILE	mDNSWindows/mdnsNSP/resource.h	12;"	d
IDS_DEF_MAXSIZE	Clients/FirefoxExtension/resource.h	13;"	d
IDS_DEF_MAXSIZE	mDNSWindows/DLL/resource.h	13;"	d
IDS_DEF_MAXSIZE	mDNSWindows/NSPTool/resource.h	13;"	d
IDS_DEF_MAXSIZE	mDNSWindows/mdnsNSP/resource.h	13;"	d
IDS_DEF_SHRINKTOSIZE	Clients/FirefoxExtension/resource.h	14;"	d
IDS_DEF_SHRINKTOSIZE	mDNSWindows/DLL/resource.h	14;"	d
IDS_DEF_SHRINKTOSIZE	mDNSWindows/NSPTool/resource.h	14;"	d
IDS_DEF_SHRINKTOSIZE	mDNSWindows/mdnsNSP/resource.h	14;"	d
IDS_ERROR_CAPTION	Clients/PrinterSetupWizard/resource_exe.h	36;"	d
IDS_ERROR_CAPTION	Clients/PrinterSetupWizard/resource_loc_res.h	37;"	d
IDS_ERROR_CAPTION	Clients/PrinterSetupWizard/resource_res.h	36;"	d
IDS_ERROR_SELECTING_PRINTER_CAPTION	Clients/PrinterSetupWizard/resource_exe.h	22;"	d
IDS_ERROR_SELECTING_PRINTER_CAPTION	Clients/PrinterSetupWizard/resource_loc_res.h	22;"	d
IDS_ERROR_SELECTING_PRINTER_CAPTION	Clients/PrinterSetupWizard/resource_res.h	22;"	d
IDS_ERROR_SELECTING_PRINTER_TEXT	Clients/PrinterSetupWizard/resource_exe.h	21;"	d
IDS_ERROR_SELECTING_PRINTER_TEXT	Clients/PrinterSetupWizard/resource_loc_res.h	21;"	d
IDS_ERROR_SELECTING_PRINTER_TEXT	Clients/PrinterSetupWizard/resource_res.h	21;"	d
IDS_FIREWALL	Clients/ExplorerPlugin/resource_dll.h	9;"	d
IDS_FIREWALL	Clients/ExplorerPlugin/resource_loc_res.h	9;"	d
IDS_FIREWALL	Clients/ExplorerPlugin/resource_res.h	9;"	d
IDS_FIREWALL	Clients/PrinterSetupWizard/resource_exe.h	35;"	d
IDS_FIREWALL	Clients/PrinterSetupWizard/resource_loc_res.h	36;"	d
IDS_FIREWALL	Clients/PrinterSetupWizard/resource_res.h	35;"	d
IDS_FIREWALL_CAPTION	Clients/PrinterSetupWizard/resource_exe.h	38;"	d
IDS_FIREWALL_CAPTION	Clients/PrinterSetupWizard/resource_loc_res.h	39;"	d
IDS_FIREWALL_CAPTION	Clients/PrinterSetupWizard/resource_res.h	38;"	d
IDS_GOODBYE	Clients/PrinterSetupWizard/resource_exe.h	9;"	d
IDS_GOODBYE	Clients/PrinterSetupWizard/resource_loc_res.h	9;"	d
IDS_GOODBYE	Clients/PrinterSetupWizard/resource_res.h	9;"	d
IDS_GOODBYE_GOOD1	Clients/PrinterSetupWizard/resource_exe.h	15;"	d
IDS_GOODBYE_GOOD1	Clients/PrinterSetupWizard/resource_loc_res.h	15;"	d
IDS_GOODBYE_GOOD1	Clients/PrinterSetupWizard/resource_res.h	15;"	d
IDS_GOODBYTE_GOOD2	Clients/PrinterSetupWizard/resource_exe.h	18;"	d
IDS_GOODBYTE_GOOD2	Clients/PrinterSetupWizard/resource_loc_res.h	18;"	d
IDS_GOODBYTE_GOOD2	Clients/PrinterSetupWizard/resource_res.h	18;"	d
IDS_GREETING	Clients/PrinterSetupWizard/resource_exe.h	10;"	d
IDS_GREETING	Clients/PrinterSetupWizard/resource_loc_res.h	10;"	d
IDS_GREETING	Clients/PrinterSetupWizard/resource_res.h	10;"	d
IDS_INSTALL_ERROR_CAPTION	Clients/PrinterSetupWizard/resource_exe.h	23;"	d
IDS_INSTALL_ERROR_CAPTION	Clients/PrinterSetupWizard/resource_loc_res.h	23;"	d
IDS_INSTALL_ERROR_CAPTION	Clients/PrinterSetupWizard/resource_res.h	23;"	d
IDS_INSTALL_ERROR_MESSAGE	Clients/PrinterSetupWizard/resource_exe.h	24;"	d
IDS_INSTALL_ERROR_MESSAGE	Clients/PrinterSetupWizard/resource_loc_res.h	24;"	d
IDS_INSTALL_ERROR_MESSAGE	Clients/PrinterSetupWizard/resource_res.h	24;"	d
IDS_INSTALL_SUBTITLE	Clients/PrinterSetupWizard/resource_exe.h	20;"	d
IDS_INSTALL_SUBTITLE	Clients/PrinterSetupWizard/resource_loc_res.h	20;"	d
IDS_INSTALL_SUBTITLE	Clients/PrinterSetupWizard/resource_res.h	20;"	d
IDS_INSTALL_TITLE	Clients/PrinterSetupWizard/resource_exe.h	19;"	d
IDS_INSTALL_TITLE	Clients/PrinterSetupWizard/resource_loc_res.h	19;"	d
IDS_INSTALL_TITLE	Clients/PrinterSetupWizard/resource_res.h	19;"	d
IDS_LARGE_FONT	Clients/PrinterSetupWizard/resource_exe.h	34;"	d
IDS_LARGE_FONT	Clients/PrinterSetupWizard/resource_loc_res.h	35;"	d
IDS_LARGE_FONT	Clients/PrinterSetupWizard/resource_res.h	34;"	d
IDS_LOG_DATETIME	Clients/FirefoxExtension/resource.h	10;"	d
IDS_LOG_DATETIME	mDNSWindows/DLL/resource.h	10;"	d
IDS_LOG_DATETIME	mDNSWindows/NSPTool/resource.h	10;"	d
IDS_LOG_DATETIME	mDNSWindows/mdnsNSP/resource.h	10;"	d
IDS_LOG_SEV_ERROR	Clients/FirefoxExtension/resource.h	9;"	d
IDS_LOG_SEV_ERROR	mDNSWindows/DLL/resource.h	9;"	d
IDS_LOG_SEV_ERROR	mDNSWindows/NSPTool/resource.h	9;"	d
IDS_LOG_SEV_ERROR	mDNSWindows/mdnsNSP/resource.h	9;"	d
IDS_LOG_SEV_INFO	Clients/FirefoxExtension/resource.h	7;"	d
IDS_LOG_SEV_INFO	mDNSWindows/DLL/resource.h	7;"	d
IDS_LOG_SEV_INFO	mDNSWindows/NSPTool/resource.h	7;"	d
IDS_LOG_SEV_INFO	mDNSWindows/mdnsNSP/resource.h	7;"	d
IDS_LOG_SEV_WARN	Clients/FirefoxExtension/resource.h	8;"	d
IDS_LOG_SEV_WARN	mDNSWindows/DLL/resource.h	8;"	d
IDS_LOG_SEV_WARN	mDNSWindows/NSPTool/resource.h	8;"	d
IDS_LOG_SEV_WARN	mDNSWindows/mdnsNSP/resource.h	8;"	d
IDS_LOG_SRCNAME	Clients/FirefoxExtension/resource.h	11;"	d
IDS_LOG_SRCNAME	mDNSWindows/DLL/resource.h	11;"	d
IDS_LOG_SRCNAME	mDNSWindows/NSPTool/resource.h	11;"	d
IDS_LOG_SRCNAME	mDNSWindows/mdnsNSP/resource.h	11;"	d
IDS_MANUFACTURER_HEADING	Clients/PrinterSetupWizard/resource_exe.h	25;"	d
IDS_MANUFACTURER_HEADING	Clients/PrinterSetupWizard/resource_loc_res.h	25;"	d
IDS_MANUFACTURER_HEADING	Clients/PrinterSetupWizard/resource_res.h	25;"	d
IDS_MDNSRESPONDER_NOT_AVAILABLE	Clients/ExplorerPlugin/resource_dll.h	8;"	d
IDS_MDNSRESPONDER_NOT_AVAILABLE	Clients/ExplorerPlugin/resource_loc_res.h	8;"	d
IDS_MDNSRESPONDER_NOT_AVAILABLE	Clients/ExplorerPlugin/resource_res.h	8;"	d
IDS_MODEL_HEADING	Clients/PrinterSetupWizard/resource_exe.h	26;"	d
IDS_MODEL_HEADING	Clients/PrinterSetupWizard/resource_loc_res.h	26;"	d
IDS_MODEL_HEADING	Clients/PrinterSetupWizard/resource_res.h	26;"	d
IDS_MUTEX_TIMEOUT	Clients/FirefoxExtension/resource.h	16;"	d
IDS_MUTEX_TIMEOUT	mDNSWindows/DLL/resource.h	16;"	d
IDS_MUTEX_TIMEOUT	mDNSWindows/NSPTool/resource.h	16;"	d
IDS_MUTEX_TIMEOUT	mDNSWindows/mdnsNSP/resource.h	16;"	d
IDS_NAME	Clients/ExplorerPlugin/resource_dll.h	5;"	d
IDS_NAME	Clients/ExplorerPlugin/resource_loc_res.h	5;"	d
IDS_NAME	Clients/ExplorerPlugin/resource_res.h	5;"	d
IDS_NO	Clients/PrinterSetupWizard/resource_exe.h	33;"	d
IDS_NO	Clients/PrinterSetupWizard/resource_loc_res.h	34;"	d
IDS_NO	Clients/PrinterSetupWizard/resource_res.h	33;"	d
IDS_NO_MATCH_INF_FILE	Clients/PrinterSetupWizard/resource_exe.h	54;"	d
IDS_NO_MATCH_INF_FILE	Clients/PrinterSetupWizard/resource_loc_res.h	55;"	d
IDS_NO_MATCH_INF_FILE	Clients/PrinterSetupWizard/resource_res.h	54;"	d
IDS_NO_MATCH_INF_FILE_CAPTION	Clients/PrinterSetupWizard/resource_exe.h	55;"	d
IDS_NO_MATCH_INF_FILE_CAPTION	Clients/PrinterSetupWizard/resource_loc_res.h	56;"	d
IDS_NO_MATCH_INF_FILE_CAPTION	Clients/PrinterSetupWizard/resource_res.h	55;"	d
IDS_NO_MDNSRESPONDER_SERVICE_CAPTION	Clients/PrinterSetupWizard/resource_exe.h	29;"	d
IDS_NO_MDNSRESPONDER_SERVICE_CAPTION	Clients/PrinterSetupWizard/resource_loc_res.h	29;"	d
IDS_NO_MDNSRESPONDER_SERVICE_CAPTION	Clients/PrinterSetupWizard/resource_res.h	29;"	d
IDS_NO_MDNSRESPONDER_SERVICE_TEXT	Clients/PrinterSetupWizard/resource_exe.h	28;"	d
IDS_NO_MDNSRESPONDER_SERVICE_TEXT	Clients/PrinterSetupWizard/resource_loc_res.h	28;"	d
IDS_NO_MDNSRESPONDER_SERVICE_TEXT	Clients/PrinterSetupWizard/resource_res.h	28;"	d
IDS_NO_PRINTERS	Clients/PrinterSetupWizard/resource_exe.h	27;"	d
IDS_NO_PRINTERS	Clients/PrinterSetupWizard/resource_loc_res.h	27;"	d
IDS_NO_PRINTERS	Clients/PrinterSetupWizard/resource_res.h	27;"	d
IDS_PRINTERS	Clients/ExplorerPlugin/resource_dll.h	7;"	d
IDS_PRINTERS	Clients/ExplorerPlugin/resource_loc_res.h	7;"	d
IDS_PRINTERS	Clients/ExplorerPlugin/resource_res.h	7;"	d
IDS_PRINTER_MATCH_BAD	Clients/PrinterSetupWizard/resource_exe.h	31;"	d
IDS_PRINTER_MATCH_BAD	Clients/PrinterSetupWizard/resource_loc_res.h	31;"	d
IDS_PRINTER_MATCH_BAD	Clients/PrinterSetupWizard/resource_res.h	31;"	d
IDS_PRINTER_MATCH_GOOD	Clients/PrinterSetupWizard/resource_exe.h	30;"	d
IDS_PRINTER_MATCH_GOOD	Clients/PrinterSetupWizard/resource_loc_res.h	30;"	d
IDS_PRINTER_MATCH_GOOD	Clients/PrinterSetupWizard/resource_res.h	30;"	d
IDS_PRINTER_MATCH_MAYBE	Clients/PrinterSetupWizard/resource_loc_res.h	32;"	d
IDS_PRINTER_UNAVAILABLE	Clients/PrinterSetupWizard/resource_exe.h	51;"	d
IDS_PRINTER_UNAVAILABLE	Clients/PrinterSetupWizard/resource_loc_res.h	52;"	d
IDS_PRINTER_UNAVAILABLE	Clients/PrinterSetupWizard/resource_res.h	51;"	d
IDS_PROJNAME	Clients/FirefoxExtension/resource.h	5;"	d
IDS_PROJNAME	mDNSWindows/DLL/resource.h	5;"	d
IDS_PROJNAME	mDNSWindows/DLLX/resource.h	5;"	d
IDS_PROJNAME	mDNSWindows/NSPTool/resource.h	5;"	d
IDS_PROJNAME	mDNSWindows/mdnsNSP/resource.h	5;"	d
IDS_REINSTALL	Clients/PrinterSetupWizard/resource_exe.h	48;"	d
IDS_REINSTALL	Clients/PrinterSetupWizard/resource_loc_res.h	49;"	d
IDS_REINSTALL	Clients/PrinterSetupWizard/resource_res.h	48;"	d
IDS_REINSTALL	mDNSWindows/ControlPanel/resource.h	18;"	d
IDS_REINSTALL_CAPTION	Clients/PrinterSetupWizard/resource_exe.h	49;"	d
IDS_REINSTALL_CAPTION	Clients/PrinterSetupWizard/resource_loc_res.h	50;"	d
IDS_REINSTALL_CAPTION	Clients/PrinterSetupWizard/resource_res.h	49;"	d
IDS_REINSTALL_CAPTION	mDNSWindows/ControlPanel/resource.h	19;"	d
IDS_SEARCHING	Clients/PrinterSetupWizard/resource_exe.h	16;"	d
IDS_SEARCHING	Clients/PrinterSetupWizard/resource_loc_res.h	16;"	d
IDS_SEARCHING	Clients/PrinterSetupWizard/resource_res.h	16;"	d
IDS_SERVICE_DESCRIPTION	mDNSWindows/SystemService/resource.h	6;"	d
IDS_SHNEW	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	14;"	d
IDS_WEB_SITES	Clients/ExplorerPlugin/resource_dll.h	6;"	d
IDS_WEB_SITES	Clients/ExplorerPlugin/resource_loc_res.h	6;"	d
IDS_WEB_SITES	Clients/ExplorerPlugin/resource_res.h	6;"	d
IDS_YES	Clients/PrinterSetupWizard/resource_exe.h	32;"	d
IDS_YES	Clients/PrinterSetupWizard/resource_loc_res.h	33;"	d
IDS_YES	Clients/PrinterSetupWizard/resource_res.h	32;"	d
ID_FILE_EXIT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	41;"	d
ID_HELP_ABOUT	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	42;"	d
ID_Menu	Clients/ExplorerPlugin/resource_dll.h	15;"	d
ID_Menu	Clients/ExplorerPlugin/resource_loc_res.h	21;"	d
ID_Menu	Clients/ExplorerPlugin/resource_res.h	19;"	d
IFI_ALIAS	mDNSPosix/mDNSUNP.h	110;"	d
IFI_HADDR	mDNSPosix/mDNSUNP.h	66;"	d
IFI_NAME	mDNSPosix/mDNSUNP.h	65;"	d
IFNAMSIZ	Clients/dns-sd.c	90;"	d	file:
IFNAMSIZ	mDNSPosix/NetMonitor.c	44;"	d	file:
IF_NAMESIZE	mDNSShared/Java/JNISupport.c	53;"	d	file:
IF_WAKE_ON_MAGIC_PACKET	mDNSMacOSX/mDNSMacOSX.c	3834;"	d	file:
IMAC	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSEthAddr IMAC;       \/\/ Interface's MAC address (if different to primary MAC)$/;"	m	struct:__anon54
INADDR_NONE	mDNSPosix/ProxyResponder.c	34;"	d	file:
INCOMPATIBLE	mDNSShared/Java/DNSSDException.java	/^    public static final int		INCOMPATIBLE              = -65551;$/;"	f	class:DNSSDException
INET6_ADDRSTRLEN	mDNSPosix/mDNSUNP.h	105;"	d
INFOCallback	mDNSMacOSX/daemon.c	/^mDNSlocal void INFOCallback(void)$/;"	f
INFO_SIGNAL	mDNSShared/dnsextd.c	88;"	d	file:
INFO_SIGNAL	mDNSShared/dnsextd.c	90;"	d	file:
INITGUID	Clients/ExplorerPlugin/ExplorerPlugin.cpp	25;"	d	file:
INIT_DATA_A	mDNSCore/DNSDigest.c	914;"	d	file:
INIT_DATA_B	mDNSCore/DNSDigest.c	915;"	d	file:
INIT_DATA_C	mDNSCore/DNSDigest.c	916;"	d	file:
INIT_DATA_D	mDNSCore/DNSDigest.c	917;"	d	file:
INIT_RECORD_REG_INTERVAL	mDNSCore/uDNS.h	57;"	d
INIT_UCAST_POLL_INTERVAL	mDNSCore/uDNS.h	29;"	d
INSTALLDIR	mDNSWindows/Java/makefile	/^INSTALLDIR = root\\"Program Files"\\Bonjour$/;"	m
INSTBASE	mDNSPosix/Makefile	/^INSTBASE=$(LOCALBASE)$/;"	m
INSTBASE	mDNSPosix/Makefile	/^INSTBASE?=\/usr$/;"	m
INT16_C	mDNSShared/CommonServices.h	802;"	d
INT32_C	mDNSShared/CommonServices.h	806;"	d
INT64_C	mDNSShared/CommonServices.h	811;"	d
INT64_C	mDNSShared/CommonServices.h	813;"	d
INT8_C	mDNSShared/CommonServices.h	798;"	d
INT8_MIN	mDNSShared/CommonServices.h	748;"	d
INVALID	mDNSShared/Java/DNSSDException.java	/^    public static final int		INVALID                   = -65549;$/;"	f	class:DNSSDException
IOConnectCallStructMethod	mDNSMacOSX/mDNSMacOSX.c	/^IOConnectCallStructMethod($/;"	f	file:
IOPMAssertion	mDNSMacOSX/mDNSMacOSX.h	/^    IOPMAssertionID IOPMAssertion;$/;"	m	struct:mDNS_PlatformSupport_struct
IOPMConnection	mDNSMacOSX/mDNSMacOSX.h	/^    IOPMConnection IOPMConnection;$/;"	m	struct:mDNS_PlatformSupport_struct
IPAddressMACMapping	mDNSCore/mDNSEmbeddedAPI.h	/^} IPAddressMACMapping;$/;"	t	typeref:struct:__anon48
IPC_FLAGS_NOREPLY	mDNSShared/dnssd_ipc.h	104;"	d
IPPort	mDNSMacOSX/DNSServiceDiscoveryDefines.h	/^typedef struct { char bytes[4]; } IPPort;$/;"	t	typeref:struct:__anon148
IPSECPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort IPSECPort              = { { IPSECPortAsNumber              >> 8, IPSECPortAsNumber              & 0xFF } };$/;"	v
IPSECPortAsNumber	mDNSCore/DNSCommon.c	58;"	d	file:
IPV6_2292_HOPLIMIT	mDNSPosix/mDNSUNP.h	29;"	d
IPV6_2292_HOPLIMIT	mDNSPosix/mDNSUNP.h	35;"	d
IPV6_2292_PKTINFO	mDNSPosix/mDNSUNP.h	28;"	d
IPV6_2292_PKTINFO	mDNSPosix/mDNSUNP.h	34;"	d
IP_RECVTTL	mDNSMacOSX/mDNSMacOSX.c	58;"	d	file:
IPv4Available	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 IPv4Available;               \/\/ If InterfaceActive, set if v4 available on this InterfaceID$/;"	m	struct:NetworkInterfaceInfo_struct
IPv4HostList	mDNSPosix/NetMonitor.c	/^static HostList IPv4HostList = { 0, 0, 0 };$/;"	v	file:
IPv6AddressFromString	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSv6Addr IPv6AddressFromString(char* buf)$/;"	f
IPv6AddressIsOnInterface	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool IPv6AddressIsOnInterface(mDNSv6Addr ipv6Addr, char *ifname)$/;"	f
IPv6Available	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 IPv6Available;               \/\/ If InterfaceActive, set if v6 available on this InterfaceID$/;"	m	struct:NetworkInterfaceInfo_struct
IPv6CheckSum	mDNSCore/mDNS.c	/^mDNSlocal mDNSu16 IPv6CheckSum(const mDNSv6Addr *const src, const mDNSv6Addr *const dst, const mDNSu8 protocol, const void *const data, const mDNSu32 length)$/;"	f
IPv6FMTARGS	mDNSMacOSX/helper.c	204;"	d	file:
IPv6FMTSTRING	mDNSMacOSX/helper.c	203;"	d	file:
IPv6HostList	mDNSPosix/NetMonitor.c	/^static HostList IPv6HostList = { 0, 0, 0 };$/;"	v	file:
ISOCODES	mDNSWindows/isocode.h	/^unsigned char ISOCODES[] = {$/;"	v
IS_A_PRINTF_STYLE_FUNCTION	mDNSCore/mDNSDebug.h	61;"	d
IS_A_PRINTF_STYLE_FUNCTION	mDNSCore/mDNSDebug.h	63;"	d
I_IMAGENONE	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	12;"	d
IdenticalAnonInfo	mDNSCore/anonymous.c	/^mDNSexport mDNSBool IdenticalAnonInfo(AnonymousInfo *a1, AnonymousInfo *a2)$/;"	f
IdenticalResourceRecord	mDNSCore/DNSCommon.h	143;"	d
IdenticalSameNameRecord	mDNSCore/DNSCommon.h	152;"	d
IfChangeRec	mDNSPosix/mDNSPosix.c	/^struct IfChangeRec$/;"	s	file:
IfChangeRec	mDNSPosix/mDNSPosix.c	/^typedef struct IfChangeRec IfChangeRec;$/;"	t	typeref:struct:IfChangeRec	file:
IfIndex	mDNSMacOSX/Private/dns_services.h	34;"	d
IfindexToInterfaceInfoOSX	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport NetworkInterfaceInfoOSX *IfindexToInterfaceInfoOSX(const mDNS *const m, mDNSInterfaceID ifindex)$/;"	f
IgnoreIPv4LL	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 IgnoreIPv4LL;                \/\/ Set if IPv4 Link-Local addresses have to be ignored.$/;"	m	struct:NetworkInterfaceInfo_struct
ImmedAdditional	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID ImmedAdditional;    \/\/ Hint that we might want to also send this record, just to be helpful$/;"	m	struct:AuthRecord_struct
ImmedAnswer	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID ImmedAnswer;        \/\/ Someone on this interface issued a query we need to answer (all-ones for all interfaces)$/;"	m	struct:AuthRecord_struct
ImmedAnswerMarkTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 ImmedAnswerMarkTime;$/;"	m	struct:AuthRecord_struct
ImmedUnicast	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 ImmedUnicast;                \/\/ Set if we may send our response directly via unicast to the requester$/;"	m	struct:AuthRecord_struct
InFlightRDLen	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 InFlightRDLen;  \/\/ currently being registered$/;"	m	struct:AuthRecord_struct
InFlightRData	mDNSCore/mDNSEmbeddedAPI.h	/^    RData *InFlightRData;$/;"	m	struct:AuthRecord_struct
InHostsTable	mDNSWindows/mdnsNSP/mdnsNSP.c	/^InHostsTable( const char * name )$/;"	f
IncludeInProbe	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 IncludeInProbe;              \/\/ Set if this RR is being put into a probe right now$/;"	m	struct:AuthRecord_struct
IncrementAutoTargetServices	mDNSCore/mDNS.c	/^mDNSlocal void IncrementAutoTargetServices(mDNS *const m, AuthRecord *const rr)$/;"	f
IncrementLabelSuffix	mDNSCore/DNSCommon.c	/^mDNSexport void IncrementLabelSuffix(domainlabel *name, mDNSBool RichText)$/;"	f
IndeterminateStatus	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 IndeterminateStatus;$/;"	m	struct:__anon91
InetChecksum	mDNSMacOSX/helper.c	/^InetChecksum(unsigned short *ptr,int nbytes)$/;"	f
InfoCallback	mDNSPosix/Identify.c	/^mDNSlocal void InfoCallback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
Init	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^void CPrinterSetupWizardSheet::Init(void)$/;"	f	class:CPrinterSetupWizardSheet
InitBrowseList	Clients/PrinterSetupWizard/SecondPage.cpp	/^CSecondPage::InitBrowseList()$/;"	f	class:CSecondPage
InitCommonState	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool InitCommonState(mDNS *const m, DNSQuestion *const question)$/;"	f
InitConfigAuthority	mDNSMacOSX/PreferencePane/ConfigurationAuthority.c	/^OSStatus InitConfigAuthority(void)$/;"	f
InitConnection	mDNSMacOSX/Private/dns_services.c	/^static DNSXErrorType InitConnection(DNSXConnRef *connRef, const char *servname, dispatch_queue_t clientq, void *AppCallBack)$/;"	f	file:
InitDNSConfig	mDNSCore/mDNS.c	/^mDNSlocal void InitDNSConfig(mDNS *const m, DNSQuestion *const question)$/;"	f
InitDNSSECProxyState	mDNSCore/mDNS.c	/^mDNSlocal void InitDNSSECProxyState(mDNS *const m, DNSQuestion *const question)$/;"	f
InitDoubleLinkedList	mDNSShared/GenLinkedList.c	/^void        InitDoubleLinkedList( GenDoubleLinkedList *pList, size_t fwdLinkOffset,$/;"	f
InitInstance	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^CExplorerPluginApp::InitInstance()$/;"	f	class:CExplorerPluginApp
InitInstance	Clients/PrinterSetupWizard/PrinterSetupWizardApp.cpp	/^BOOL CPrinterSetupWizardApp::InitInstance()$/;"	f	class:CPrinterSetupWizardApp
InitInstance	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^CCPApp::InitInstance()$/;"	f	class:CCPApp
InitInstance	mDNSWindows/DNSServiceBrowser/Windows/Sources/Application.cpp	/^BOOL	Application::InitInstance()$/;"	f	class:Application
InitInstance	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/Application.cpp	/^BOOL Application::InitInstance()$/;"	f	class:Application
InitLLQNATState	mDNSCore/mDNS.c	/^mDNSlocal void InitLLQNATState(mDNS *const m)$/;"	f
InitLLQState	mDNSCore/mDNS.c	/^mDNSlocal void InitLLQState(DNSQuestion *const question)$/;"	f
InitLeaseTable	mDNSShared/dnsextd.c	/^mDNSlocal int InitLeaseTable(DaemonInfo *d)$/;"	f
InitLibrary	mDNSShared/Java/DNSSD.java	/^	protected static native int	InitLibrary( int callerVersion);$/;"	m	class:AppleDNSSD
InitLinkedList	mDNSShared/GenLinkedList.c	/^void        InitLinkedList( GenLinkedList *pList, size_t linkOffset)$/;"	f
InitLinkedOffsetList	mDNSShared/GenLinkedList.c	/^void        InitLinkedOffsetList( GenLinkedOffsetList *pList, size_t linkOffset)$/;"	f
InitWABState	mDNSCore/mDNS.c	/^mDNSlocal void InitWABState(DNSQuestion *const question)$/;"	f
InitialAnnounceCount	mDNSCore/mDNS.c	675;"	d	file:
InitialQuestionInterval	mDNSCore/uDNS.h	48;"	d
InitialTAFetchInterval	mDNSMacOSX/DNSSECSupport.c	46;"	d	file:
InitialWakeOnResolveCount	mDNSCore/mDNS.c	685;"	d	file:
InitializeAnonInfoForCR	mDNSCore/anonymous.c	/^mDNSexport void InitializeAnonInfoForCR(mDNS *const m, CacheRecord **McastNSEC3Records, CacheRecord *cr)$/;"	f
InitializeAnonInfoForQuestion	mDNSCore/anonymous.c	/^mDNSexport void InitializeAnonInfoForQuestion(mDNS *const m, CacheRecord **McastNSEC3Records, DNSQuestion *q)$/;"	f
InitializeComponent	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private void InitializeComponent()$/;"	m	class:DNSServiceBrowser_NET.Form1	file:
InitializeComponent	Clients/SimpleChat.NET/SimpleChat.cs	/^		private void InitializeComponent()$/;"	m	class:SimpleChat.NET.SimpleChat	file:
InitializeDNSMessage	mDNSCore/DNSCommon.c	/^mDNSexport void InitializeDNSMessage(DNSMessageHeader *h, mDNSOpaque16 id, mDNSOpaque16 flags)$/;"	f
InitializeLastAPTime	mDNSCore/mDNS.c	/^mDNSlocal void InitializeLastAPTime(mDNS *const m, AuthRecord *const rr)$/;"	f
InitializeNSEC3Record	mDNSCore/anonymous.c	/^mDNSlocal mDNSBool InitializeNSEC3Record(ResourceRecord *rr, const mDNSu8 *AnonData, int len, mDNSu32 salt)$/;"	f
InitializeNetWakeState	mDNSCore/mDNS.c	/^mDNSlocal void InitializeNetWakeState(mDNS *const m, NetworkInterfaceInfo *set)$/;"	f
InitializeQuestion	mDNSCore/dnssec.c	/^mDNSexport void InitializeQuestion(mDNS *const m, DNSQuestion *question, mDNSInterfaceID InterfaceID, const domainname *qname, mDNSu16 qtype, mDNSQuestionCallback *callback, void *context)$/;"	f
InitializeQuestion	mDNSCore/dnssec.c	/^mDNSexport void InitializeQuestion(mDNS *const m, DNSQuestion *question, mDNSInterfaceID InterfaceID, const domainname *qname,$/;"	f
InlineCacheRDSize	mDNSCore/mDNSEmbeddedAPI.h	1018;"	d
InsecureContext	mDNSCore/dnssec.h	/^typedef struct InsecureContext_struct InsecureContext;$/;"	t	typeref:struct:InsecureContext_struct
InsecureContext_struct	mDNSCore/dnssec.h	/^struct InsecureContext_struct$/;"	s
InsecureProofDone	mDNSCore/dnssec.h	/^    mDNSu8 InsecureProofDone;$/;"	m	struct:DNSSECVerifier_struct
InsecureStatus	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 InsecureStatus;$/;"	m	struct:__anon91
InsertAuthRecord	mDNSCore/mDNS.c	/^mDNSexport AuthGroup *InsertAuthRecord(mDNS *const m, AuthHash *r, AuthRecord *rr)$/;"	f
InsertBits	mDNSShared/CommonServices.h	683;"	d
Install	mDNSMacOSX/BonjourEvents.c	/^static void Install(void *instance)$/;"	f	file:
InstallDriverThread	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::InstallDriverThread( LPVOID inParam )$/;"	f	class:CPrinterSetupWizardSheet
InstallNSP	mDNSWindows/NSPTool/NSPTool.c	/^OSStatus	InstallNSP( const char *inName, const char *inGUID, const char *inPath )$/;"	f
InstallPrinter	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::InstallPrinter(Printer * printer)$/;"	f	class:CPrinterSetupWizardSheet
InstallPrinterCUPS	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::InstallPrinterCUPS(Printer * printer, Service * service, CUPSLibrary & cupsLib )$/;"	f	class:CPrinterSetupWizardSheet
InstallPrinterCUPS	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::InstallPrinterCUPS(Printer * printer, Service * service, CUPSLibrary & cupsLib, TCHAR * env )$/;"	f	class:CPrinterSetupWizardSheet
InstallPrinterIPP	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::InstallPrinterIPP(Printer * printer, Service * service, Logger & log)$/;"	f	class:CPrinterSetupWizardSheet
InstallPrinterPDLAndLPR	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::InstallPrinterPDLAndLPR(Printer * printer, Service * service, Logger & log )$/;"	f	class:CPrinterSetupWizardSheet
InstallPrinterPort	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::InstallPrinterPort( Printer * printer, Service * service, DWORD protocol, Logger & log )$/;"	f	class:CPrinterSetupWizardSheet
InstallService	mDNSWindows/SystemService/Service.c	/^static OSStatus	InstallService( LPCTSTR inName, LPCTSTR inDisplayName, LPCTSTR inDescription, LPCTSTR inPath )$/;"	f	file:
IntPort	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort IntPort;                             \/\/ Client's internal port number (doesn't change)$/;"	m	struct:NATTraversalInfo_struct
InterfaceActive	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 InterfaceActive;             \/\/ Set if interface is sending & receiving packets (see comment above)$/;"	m	struct:NetworkInterfaceInfo_struct
InterfaceAddress	mDNSMacOS9/mDNSMacOS9.h	/^typedef struct { TOptionHeader h; mDNSv4Addr multicastGroupAddress; mDNSv4Addr InterfaceAddress; } TIPAddMulticastOption;$/;"	m	struct:__anon177
InterfaceChangeCallback	mDNSPosix/mDNSPosix.c	/^mDNSlocal void InterfaceChangeCallback(int fd, short filter, void *context)$/;"	f
InterfaceDown	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 InterfaceDown;                  \/\/ Total Interface Down events$/;"	m	struct:__anon92
InterfaceDownFlap	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 InterfaceDownFlap;              \/\/ Total Interface Down events with flaps$/;"	m	struct:__anon92
InterfaceID	mDNSCore/dnssec.h	/^    mDNSInterfaceID InterfaceID;    \/\/ InterfaceID of the question$/;"	m	struct:DNSSECVerifier_struct
InterfaceID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID InterfaceID;            \/\/ Non-zero if you want to issue queries only on a single specific IP interface$/;"	m	struct:DNSQuestion_struct
InterfaceID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID InterfaceID;        \/\/ ID of the interface the response was received on$/;"	m	struct:__anon86
InterfaceID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID InterfaceID;        \/\/ Identifies physical interface; MUST NOT be 0, -1, or -2$/;"	m	struct:NetworkInterfaceInfo_struct
InterfaceID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID InterfaceID;        \/\/ Set if this RR is specific to one interface$/;"	m	struct:ResourceRecord_struct
InterfaceID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID InterfaceID;$/;"	m	struct:NATTraversalInfo_struct
InterfaceID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID InterfaceID;$/;"	m	struct:SearchListElem
InterfaceID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID InterfaceID;$/;"	m	struct:__anon80
InterfaceID	mDNSShared/uds_daemon.c	/^            mDNSInterfaceID InterfaceID;$/;"	m	struct:request_state::__anon124::__anon126	file:
InterfaceIndex	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			public uint		    InterfaceIndex;$/;"	f	class:DNSServiceBrowser_NET.Form1.ResolveData
InterfaceIndex	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			public uint		InterfaceIndex;$/;"	f	class:DNSServiceBrowser_NET.Form1.BrowseData
InterfaceIndex	Clients/SimpleChat.NET/SimpleChat.cs	/^        public uint InterfaceIndex;$/;"	f	class:SimpleChat.NET.PeerData
InterfaceList	mDNSMacOSX/mDNSMacOSX.h	/^    NetworkInterfaceInfoOSX *InterfaceList;$/;"	m	struct:mDNS_PlatformSupport_struct
InterfaceListDidChange	mDNSWindows/mDNSWin32.c	/^void InterfaceListDidChange( mDNS * const inMDNS )$/;"	f
InterfaceListNotification	mDNSWindows/SystemService/Service.c	/^InterfaceListNotification( SOCKET socket, LPWSANETWORKEVENTS event, void *context )$/;"	f
InterfaceNameForID	mDNSCore/mDNS.c	/^mDNSexport char *InterfaceNameForID(mDNS *const m, const mDNSInterfaceID InterfaceID)$/;"	f
InterfaceSupportsKeepAlive	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal  mDNSBool InterfaceSupportsKeepAlive(NetworkInterfaceInfo *const intf)$/;"	f
InterfaceUp	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 InterfaceUp;                    \/\/ Total Interface UP events$/;"	m	struct:__anon92
InterfaceUpFlap	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 InterfaceUpFlap;                \/\/ Total Interface UP events with flaps$/;"	m	struct:__anon92
InternalTXTRecordSearch	mDNSShared/dnssd_clientlib.c	/^static uint8_t *InternalTXTRecordSearch$/;"	f	file:
IntfId	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID IntfId;$/;"	m	struct:__anon47
InvokeCommand	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP ExplorerBar::InvokeCommand(LPCMINVOKECOMMANDINFO lpici)$/;"	f	class:ExplorerBar
Is64BitWindows	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^Is64BitWindows()$/;"	f	file:
IsAligned	mDNSShared/CommonServices.h	622;"	d
IsAppleNetwork	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool IsAppleNetwork(mDNS *const m)$/;"	f
IsAppleTV	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool IsAppleTV(void)$/;"	f
IsAuthorized	mDNSShared/dnsextd.c	/^mDNSlocal mDNSBool IsAuthorized( DaemonInfo * d, PktMsg * pkt, DomainAuthInfo ** key, mDNSu16 * rcode, mDNSu16 * tcode )$/;"	f
IsBTMMDomain	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool IsBTMMDomain(domainname *d)$/;"	f
IsCiscoVPN	mDNSWindows/SystemService/Service.c	/^IsCiscoVPN( IP_ADAPTER_INFO * pAdapter )$/;"	f	file:
IsCompatibleInterface	mDNSVxWorks/mDNSVxWorks.c	762;"	d	file:
IsCompatibleInterface	mDNSVxWorks/mDNSVxWorks.c	768;"	d	file:
IsDeviceInfoRecord	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool IsDeviceInfoRecord(const domainname *d)$/;"	f
IsDirty	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::IsDirty( void )$/;"	f	class:ExplorerBar
IsDuplicateClient	mDNSCore/dnsproxy.c	/^mDNSlocal DNSQuestion *IsDuplicateClient(const mDNS *const m, const mDNSAddr *const addr, const mDNSIPPort port, const mDNSOpaque16 id,$/;"	f
IsEntitled	mDNSMacOSX/Private/xpc_services.c	/^mDNSlocal mDNSBool IsEntitled(xpc_connection_t conn, const char *password)$/;"	f
IsFamiliarRacoonConfiguration	mDNSMacOSX/helper.c	/^static int IsFamiliarRacoonConfiguration(const char* racoon_config_path)$/;"	f	file:
IsFieldAligned	mDNSShared/CommonServices.h	630;"	d
IsGetZoneDataQuestion	mDNSCore/uDNS.c	/^mDNSexport mDNSBool IsGetZoneDataQuestion(DNSQuestion *q)$/;"	f
IsInstalled	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^IsInstalled()$/;"	f	class:CPrinterSetupWizardSheet::CUPSLibrary
IsJuniperVPN	mDNSWindows/SystemService/Service.c	/^IsJuniperVPN( IP_ADAPTER_INFO * pAdapter )$/;"	f	file:
IsLLQ	mDNSCore/mDNS.c	10333;"	d	file:
IsLLQAck	mDNSShared/dnsextd.c	/^mDNSlocal mDNSBool IsLLQAck(PktMsg *pkt)$/;"	f
IsLLQRequest	mDNSShared/dnsextd.c	/^mDNSlocal mDNSBool IsLLQRequest(PktMsg *pkt)$/;"	f
IsLinkLocalSockAddr	mDNSVxWorks/mDNSVxWorks.c	774;"	d	file:
IsLocalDomain	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool IsLocalDomain(const domainname *d)$/;"	f
IsLocalName	mDNSWindows/mdnsNSP/mdnsNSP.c	/^IsLocalName( HostsFileInfo * node )$/;"	f
IsNortelVPN	mDNSWindows/SystemService/Service.c	/^IsNortelVPN( IP_ADAPTER_INFO * pAdapter )$/;"	f	file:
IsNotify	mDNSShared/dnsextd.c	/^mDNSlocal mDNSBool IsNotify(PktMsg *pkt)$/;"	f
IsPointToPoint	mDNSWindows/mDNSWin32.c	/^mDNSlocal mDNSBool IsPointToPoint( IP_ADAPTER_UNICAST_ADDRESS * addr )$/;"	f
IsPrivateDomain	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool IsPrivateDomain(mDNS *const m, DNSQuestion *q)$/;"	f
IsPublicSRV	mDNSShared/dnsextd.c	/^IsPublicSRV$/;"	f
IsQuery	mDNSShared/dnsextd.c	/^mDNSlocal mDNSBool IsQuery( PktMsg * pkt )$/;"	f
IsQuestionNew	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool IsQuestionNew(mDNS *const m, DNSQuestion *question)$/;"	f
IsRecordMergeable	mDNSCore/uDNS.c	/^mDNSlocal mDNSBool IsRecordMergeable(mDNS *const m, AuthRecord *rr, mDNSs32 time)$/;"	f
IsResponseAcceptable	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool IsResponseAcceptable(mDNS *const m, const CacheRecord *crlist, DNSQuestion *q, mDNSBool *nseclist)$/;"	f
IsReverseLookup	mDNSWindows/mdnsNSP/mdnsNSP.c	/^IsReverseLookup( LPCWSTR name, size_t size )$/;"	f
IsSameName	mDNSWindows/mdnsNSP/mdnsNSP.c	/^IsSameName( HostsFileInfo * node, const char * name )$/;"	f
IsSystemServiceDisabled	mDNSWindows/DLL/dllmain.c	/^IsSystemServiceDisabled()$/;"	f
IsUnicastUpdate	mDNSCore/DNSCommon.c	2437;"	d	file:
IsUpdate	mDNSShared/dnsextd.c	/^mDNSlocal mDNSBool IsUpdate( PktMsg * pkt )$/;"	f
IsVPCRunning	mDNSWindows/VPCDetect.cpp	/^IsVPCRunning( BOOL * inVirtualPC )$/;"	f
IsValidAddress	mDNSWindows/SystemService/Service.c	/^IsValidAddress( const char * addr )$/;"	f	file:
IsValidSocket	mDNSShared/CommonServices.h	440;"	d
IsValidSocket	mDNSShared/CommonServices.h	452;"	d
IsWOMPEnabled	mDNSWindows/mDNSWin32.c	/^IsWOMPEnabled( mDNS * const m )$/;"	f
IsWOMPEnabledForAdapter	mDNSWindows/mDNSWin32.c	/^IsWOMPEnabledForAdapter( const char * adapterName )$/;"	f
JAR	mDNSPosix/Makefile	/^JAR = $(JDK)\/bin\/jar$/;"	m
JAR	mDNSWindows/Java/makefile	/^JAR = $(JDK)\\bin\\jar$/;"	m
JARCONTENTS	mDNSPosix/Makefile	/^JARCONTENTS =	$(OBJDIR)\/com\/apple\/dnssd\/DNSSDService.class \\$/;"	m
JARCONTENTS	mDNSWindows/Java/makefile	/^JARCONTENTS =	$(OBJDIR)\\com\\apple\\dnssd\\DNSSDService.class \\$/;"	m
JAVAC	mDNSPosix/Makefile	/^JAVAC = $(JDK)\/bin\/javac$/;"	m
JAVAC	mDNSWindows/Java/makefile	/^JAVAC = $(JDK)\\bin\\javac$/;"	m
JAVACFLAGS	mDNSPosix/Makefile	/^JAVACFLAGS = $(CFLAGS) $(JAVACFLAGS_OS) -I$(JDK)\/include$/;"	m
JAVACFLAGS	mDNSWindows/Java/makefile	/^JAVACFLAGS = $(CFLAGS) $(JAVACFLAGS_OS)$/;"	m
JAVACFLAGS_OS	mDNSPosix/Makefile	/^JAVACFLAGS_OS = -dynamiclib -I\/System\/Library\/Frameworks\/JavaVM.framework\/Headers -framework JavaVM $/;"	m
JAVACFLAGS_OS	mDNSPosix/Makefile	/^JAVACFLAGS_OS = -fPIC -shared -ldns_sd$/;"	m
JAVADOC	mDNSPosix/Makefile	/^JAVADOC = $(JDK)\/bin\/javadoc$/;"	m
JAVAH	mDNSPosix/Makefile	/^JAVAH = $(JDK)\/bin\/javah$/;"	m
JAVAH	mDNSWindows/Java/makefile	/^JAVAH = $(JDK)\\bin\\javah$/;"	m
JAVASRC	mDNSPosix/Makefile	/^JAVASRC	= $(SHAREDDIR)\/Java$/;"	m
JAVASRC	mDNSWindows/Java/makefile	/^JAVASRC	= $(SHAREDDIR)\\Java$/;"	m
JDK	mDNSPosix/Makefile	/^JDK = \/System\/Library\/Frameworks\/JavaVM.framework\/Home$/;"	m
JDK	mDNSPosix/Makefile	/^JDK = \/usr\/jdk$/;"	m
JDK	mDNSWindows/Java/makefile	/^JDK = $(JAVA_HOME)$/;"	m
JavaObj	mDNSShared/Java/JNISupport.c	/^    jobject JavaObj;$/;"	m	struct:OpContext	file:
Java_com_apple_dnssd_AppleBrowser_CreateBrowser	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleBrowser_CreateBrowser( JNIEnv *pEnv, jobject pThis,$/;"	f
Java_com_apple_dnssd_AppleDNSRecord_Remove	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleDNSRecord_Remove( JNIEnv *pEnv, jobject pThis)$/;"	f
Java_com_apple_dnssd_AppleDNSRecord_Update	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleDNSRecord_Update( JNIEnv *pEnv, jobject pThis,$/;"	f
Java_com_apple_dnssd_AppleDNSSD_ConstructName	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleDNSSD_ConstructName( JNIEnv *pEnv, jobject pThis _UNUSED,$/;"	f
Java_com_apple_dnssd_AppleDNSSD_GetIfIndexForName	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleDNSSD_GetIfIndexForName( JNIEnv *pEnv, jobject pThis _UNUSED,$/;"	f
Java_com_apple_dnssd_AppleDNSSD_GetNameForIfIndex	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jstring JNICALL Java_com_apple_dnssd_AppleDNSSD_GetNameForIfIndex( JNIEnv *pEnv, jobject pThis _UNUSED,$/;"	f
Java_com_apple_dnssd_AppleDNSSD_InitLibrary	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleDNSSD_InitLibrary( JNIEnv *pEnv, jclass cls,$/;"	f
Java_com_apple_dnssd_AppleDNSSD_ReconfirmRecord	mDNSShared/Java/JNISupport.c	/^JNIEXPORT void JNICALL Java_com_apple_dnssd_AppleDNSSD_ReconfirmRecord( JNIEnv *pEnv, jobject pThis _UNUSED,$/;"	f
Java_com_apple_dnssd_AppleDomainEnum_BeginEnum	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleDomainEnum_BeginEnum( JNIEnv *pEnv, jobject pThis,$/;"	f
Java_com_apple_dnssd_AppleQuery_CreateQuery	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleQuery_CreateQuery( JNIEnv *pEnv, jobject pThis,$/;"	f
Java_com_apple_dnssd_AppleRecordRegistrar_CreateConnection	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleRecordRegistrar_CreateConnection( JNIEnv *pEnv, jobject pThis)$/;"	f
Java_com_apple_dnssd_AppleRecordRegistrar_RegisterRecord	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleRecordRegistrar_RegisterRecord( JNIEnv *pEnv, jobject pThis,$/;"	f
Java_com_apple_dnssd_AppleRegistration_AddRecord	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleRegistration_AddRecord( JNIEnv *pEnv, jobject pThis,$/;"	f
Java_com_apple_dnssd_AppleRegistration_BeginRegister	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleRegistration_BeginRegister( JNIEnv *pEnv, jobject pThis,$/;"	f
Java_com_apple_dnssd_AppleResolver_CreateResolver	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleResolver_CreateResolver( JNIEnv *pEnv, jobject pThis,$/;"	f
Java_com_apple_dnssd_AppleService_BlockForData	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleService_BlockForData( JNIEnv *pEnv, jobject pThis)$/;"	f
Java_com_apple_dnssd_AppleService_HaltOperation	mDNSShared/Java/JNISupport.c	/^JNIEXPORT void JNICALL Java_com_apple_dnssd_AppleService_HaltOperation( JNIEnv *pEnv, jobject pThis)$/;"	f
Java_com_apple_dnssd_AppleService_ProcessResults	mDNSShared/Java/JNISupport.c	/^JNIEXPORT jint JNICALL Java_com_apple_dnssd_AppleService_ProcessResults( JNIEnv *pEnv, jobject pThis)$/;"	f
KATimeExpire	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 KATimeExpire;               \/\/ In platform time units: time to send keepalive packet for the proxy record$/;"	m	struct:AuthRecord_struct
KERNEL_EOPNOTSUPP	mDNSMacOSX/mDNSMacOSX.c	3913;"	d	file:
KQSocketEventSource	mDNSMacOSX/daemon.c	/^typedef struct KQSocketEventSource$/;"	s	file:
KQSocketEventSource	mDNSMacOSX/daemon.c	/^} KQSocketEventSource;$/;"	t	typeref:struct:KQSocketEventSource	file:
KQSocketSet	mDNSMacOSX/mDNSMacOSX.h	/^} KQSocketSet;$/;"	t	typeref:struct:__anon145
KQWokenFlushBytes	mDNSMacOSX/daemon.c	/^mDNSlocal void KQWokenFlushBytes(int fd, __unused short filter, __unused void *context)$/;"	f
KQcallback	mDNSMacOSX/mDNSMacOSX.h	/^    KQueueEventCallback KQcallback;$/;"	m	struct:__anon144
KQcontext	mDNSMacOSX/mDNSMacOSX.h	/^    void                *KQcontext;$/;"	m	struct:__anon144
KQtask	mDNSMacOSX/mDNSMacOSX.h	/^    const char          *KQtask;        \/\/ For debugging messages$/;"	m	struct:__anon144
KQueueEntry	mDNSMacOSX/mDNSMacOSX.h	/^} KQueueEntry;$/;"	t	typeref:struct:__anon144
KQueueEventCallback	mDNSMacOSX/mDNSMacOSX.h	/^typedef void (*KQueueEventCallback)(int fd, short filter, void *context);$/;"	t
KQueueFD	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int KQueueFD;$/;"	v
KQueueLock	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void KQueueLock(mDNS *const m)$/;"	f
KQueueLoop	mDNSMacOSX/daemon.c	/^mDNSlocal void * KQueueLoop(void *m_param)$/;"	f
KQueueSet	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int KQueueSet(int fd, u_short flags, short filter, KQueueEntry *const entryRef)$/;"	f
KQueueSet	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int KQueueSet(int fd, u_short flags, short filter, const KQueueEntry *const entryRef)$/;"	f
KQueueUnlock	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void KQueueUnlock(mDNS *const m, const char const *task)$/;"	f
KQueueUnlock	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void KQueueUnlock(mDNS *const m, const char* task)$/;"	f
KeyChainTimer	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSs32 KeyChainTimer;$/;"	m	struct:mDNS_PlatformSupport_struct
KeychainChanged	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal OSStatus KeychainChanged(SecKeychainEvent keychainEvent, SecKeychainCallbackInfo *info, void *context)$/;"	f
KnownAnswerMultiplePkts	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 KnownAnswerMultiplePkts;        \/\/ Known Answer in queries spannign multiple packets$/;"	m	struct:__anon92
KnownAnswerSuppressions	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 KnownAnswerSuppressions;        \/\/ Known Answer suppressions$/;"	m	struct:__anon92
KnownAnswers	mDNSShared/dnsextd.h	/^    CacheRecord *KnownAnswers;  \/\/ All valid answers delivered to client$/;"	m	struct:AnswerListElem
KnownServiceEntry	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^struct	KnownServiceEntry$/;"	s	file:
KnownUniqueNameConflicts	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 KnownUniqueNameConflicts;       \/\/ Name Conflicts for KnownUnique Records$/;"	m	struct:__anon92
LANG_CODE_LEN	mDNSWindows/isocode.h	132;"	d
LAUNCH_DATA_MACHPORT	mDNSMacOSX/helper-main.c	50;"	d	file:
LAUNCH_JOBKEY_MACHSERVICES	mDNSMacOSX/helper-main.c	49;"	d	file:
LD	mDNSPosix/Makefile	/^LD = $(CC) -dynamiclib$/;"	m
LD	mDNSPosix/Makefile	/^LD = gcc -shared$/;"	m
LD	mDNSPosix/Makefile	/^LD = ld -shared$/;"	m
LD	mDNSWindows/Java/makefile	/^LD = ld$/;"	m
LDCONFIG	mDNSPosix/Makefile	/^LDCONFIG = ldconfig$/;"	m
LDSUFFIX	mDNSPosix/Makefile	/^LDSUFFIX = dylib$/;"	m
LDSUFFIX	mDNSPosix/Makefile	/^LDSUFFIX = so$/;"	m
LEASETABLE_INIT_NBUCKETS	mDNSShared/dnsextd.c	73;"	d	file:
LENGTHOF	Clients/ExplorerPlugin/ExplorerBar.cpp	41;"	d	file:
LE_FETCH32	mDNSCore/DNSDigest.c	460;"	d	file:
LE_FETCH32	mDNSCore/DNSDigest.c	469;"	d	file:
LF	mDNSShared/CommonServices.h	417;"	d
LFSTR	mDNSShared/CommonServices.h	419;"	d
LIBDIR	mDNSWindows/Java/makefile	/^LIBDIR = ..\\DLL\\Win32\\Debug$/;"	m
LIBDIR	mDNSWindows/Java/makefile	/^LIBDIR = ..\\DLL\\Win32\\Release$/;"	m
LIBS	Clients/Makefile	/^LIBS = -L..\/mDNSPosix\/build\/prod\/ -ldns_sd$/;"	m
LIBS	Clients/Makefile	/^LIBS =$/;"	m
LIBVERS	mDNSPosix/Makefile	/^LIBVERS = 1$/;"	m
LINKOPTS	mDNSPosix/Makefile	/^LINKOPTS = -lSystem$/;"	m
LINKOPTS	mDNSPosix/Makefile	/^LINKOPTS = -lsocket -lnsl -lresolv$/;"	m
LINKOPTS	mDNSPosix/Makefile	/^LINKOPTS =$/;"	m
LINKOPTS_PTHREAD	mDNSPosix/Makefile	/^LINKOPTS_PTHREAD = -lpthread$/;"	m
LINKOPTS_PTHREAD	mDNSPosix/Makefile	/^LINKOPTS_PTHREAD = -pthread$/;"	m
LISTENQ	mDNSShared/dnsextd.c	70;"	d	file:
LISTENQ	mDNSShared/dnssd_ipc.h	81;"	d
LISTENQ	mDNSShared/dnssd_ipc.h	88;"	d
LIST_ALL_INTERFACES	mDNSMacOSX/mDNSMacOSX.c	25;"	d	file:
LLQCompleteHandshake	mDNSShared/dnsextd.c	/^mDNSlocal void LLQCompleteHandshake(DaemonInfo *d, LLQEntry *e, LLQOptData *llq, mDNSOpaque16 msgID, TCPSocket *sock)$/;"	f
LLQEntry	mDNSShared/dnsextd.h	/^typedef struct LLQEntry$/;"	s
LLQEntry	mDNSShared/dnsextd.h	/^} LLQEntry;$/;"	t	typeref:struct:LLQEntry
LLQErr_BadVers	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQErr_BadVers    = 5,$/;"	e	enum:__anon82
LLQErr_FormErr	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQErr_FormErr    = 3,$/;"	e	enum:__anon82
LLQErr_NoError	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQErr_NoError    = 0,$/;"	e	enum:__anon82
LLQErr_NoSuchLLQ	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQErr_NoSuchLLQ  = 4,$/;"	e	enum:__anon82
LLQErr_ServFull	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQErr_ServFull   = 1,$/;"	e	enum:__anon82
LLQErr_Static	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQErr_Static     = 2,$/;"	e	enum:__anon82
LLQErr_UnknownErr	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQErr_UnknownErr = 6$/;"	e	enum:__anon82
LLQEventListenSock	mDNSShared/dnsextd.h	/^    int LLQEventListenSock;          \/\/ the main thread listening on EventListenSock, indicating that the zone has changed$/;"	m	struct:__anon116
LLQEventNotifySock	mDNSShared/dnsextd.h	/^    int LLQEventNotifySock;          \/\/ Unix domain socket pair - update handling thread writes to EventNotifySock, which wakes$/;"	m	struct:__anon116
LLQGotZoneData	mDNSCore/uDNS.c	/^mDNSexport void LLQGotZoneData(mDNS *const m, mStatus err, const ZoneData *zoneInfo)$/;"	f
LLQLease	mDNSShared/dnsextd.c	/^mDNSlocal mDNSu32 LLQLease(LLQEntry *e)$/;"	f
LLQNAT	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTraversalInfo LLQNAT;                    \/\/ Single shared NAT Traversal to receive inbound LLQ notifications$/;"	m	struct:mDNS_struct
LLQNATCallback	mDNSCore/mDNS.c	/^mDNSlocal void LLQNATCallback(mDNS *m, NATTraversalInfo *n)$/;"	f
LLQOptData	mDNSCore/mDNSEmbeddedAPI.h	/^} LLQOptData;$/;"	t	typeref:struct:__anon53
LLQRefresh	mDNSShared/dnsextd.c	/^mDNSlocal void LLQRefresh(DaemonInfo *d, LLQEntry *e, LLQOptData *llq, mDNSOpaque16 msgID, TCPSocket *sock )$/;"	f
LLQSetupChallenge	mDNSShared/dnsextd.c	/^mDNSlocal void LLQSetupChallenge(DaemonInfo *d, LLQEntry *e, LLQOptData *llq, mDNSOpaque16 msgID)$/;"	f
LLQState	mDNSShared/dnsextd.h	/^} LLQState;$/;"	t	typeref:enum:__anon115
LLQTable	mDNSShared/dnsextd.h	/^    LLQEntry *LLQTable[LLQ_TABLESIZE];  \/\/ !!!KRS change this and RRTable to use a common data structure$/;"	m	struct:__anon116
LLQ_Established	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQ_Established       = 3,$/;"	e	enum:__anon81
LLQ_InitialRequest	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQ_InitialRequest    = 1,$/;"	e	enum:__anon81
LLQ_LEASE_FUDGE	mDNSShared/dnsextd.c	82;"	d	file:
LLQ_MAX_LEASE	mDNSShared/dnsextd.c	81;"	d	file:
LLQ_MIN_LEASE	mDNSShared/dnsextd.c	80;"	d	file:
LLQ_MONITOR_ERR_INTERVAL	mDNSShared/dnsextd.c	85;"	d	file:
LLQ_MONITOR_INTERVAL	mDNSShared/dnsextd.c	86;"	d	file:
LLQ_POLL_INTERVAL	mDNSCore/uDNS.h	33;"	d
LLQ_Poll	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQ_Poll              = 4$/;"	e	enum:__anon81
LLQ_SecondaryRequest	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQ_SecondaryRequest  = 2,$/;"	e	enum:__anon81
LLQ_State	mDNSCore/mDNSEmbeddedAPI.h	/^} LLQ_State;$/;"	t	typeref:enum:__anon81
LLQ_TABLESIZE	mDNSShared/dnsextd.h	31;"	d
LMHCheckSum	mDNSMacOS9/ShowInitIcon.c	39;"	d	file:
LMHCoord	mDNSMacOS9/ShowInitIcon.c	38;"	d	file:
LMVCheckSum	mDNSMacOS9/ShowInitIcon.c	36;"	d	file:
LMVCoord	mDNSMacOS9/ShowInitIcon.c	37;"	d	file:
LN	mDNSPosix/Makefile	/^LN = ln -s -f$/;"	m
LNTDiscoveryOp	mDNSCore/mDNSEmbeddedAPI.h	/^    LNTDiscoveryOp      = 1,$/;"	e	enum:__anon66
LNTExternalAddrOp	mDNSCore/mDNSEmbeddedAPI.h	/^    LNTExternalAddrOp   = 2,$/;"	e	enum:__anon66
LNTOp_t	mDNSCore/mDNSEmbeddedAPI.h	/^} LNTOp_t;$/;"	t	typeref:enum:__anon66
LNTPortMapDeleteOp	mDNSCore/mDNSEmbeddedAPI.h	/^    LNTPortMapDeleteOp  = 4$/;"	e	enum:__anon66
LNTPortMapOp	mDNSCore/mDNSEmbeddedAPI.h	/^    LNTPortMapOp        = 3,$/;"	e	enum:__anon66
LNT_ClearState	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSexport void LNT_ClearState(mDNS *const m)$/;"	f
LNT_ConfigureRouterInfo	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSexport void LNT_ConfigureRouterInfo(mDNS *m, const mDNSInterfaceID InterfaceID, const mDNSu8 *const data, const mDNSu16 len)$/;"	f
LNT_GetExternalAddress	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSexport mStatus LNT_GetExternalAddress(mDNS *m)$/;"	f
LNT_MAXBUFSIZE	mDNSCore/mDNSEmbeddedAPI.h	1228;"	d
LNT_MapPort	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSexport mStatus LNT_MapPort(mDNS *m, NATTraversalInfo *const n)$/;"	f
LNT_SendDiscoveryMsg	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSexport void LNT_SendDiscoveryMsg(mDNS *m)$/;"	f
LNT_UnmapPort	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSexport mStatus LNT_UnmapPort(mDNS *m, NATTraversalInfo *const n)$/;"	f
LOAddressAnswers	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 LOAddressAnswers;                \/\/ Number of answers from the local only auth records that are$/;"	m	struct:DNSQuestion_struct
LOCALBASE	mDNSPosix/Makefile	/^LOCALBASE?=\/usr\/local$/;"	m
LOCALHOST_ONLY	mDNSShared/Java/DNSSD.java	/^    public static final int     LOCALHOST_ONLY = -1;$/;"	f	class:DNSSD
LOCAL_CFLAGS	build.android/jni/Android.mk	/^LOCAL_CFLAGS := -I..\/mDNSCore 	\\$/;"	m
LOCAL_CFLAGS	build.android/jni/Android.mk	/^LOCAL_CFLAGS := -I..\/mDNSCore       \\$/;"	m
LOCAL_MODULE	build.android/jni/Android.mk	/^LOCAL_MODULE    := libbonjour_aj$/;"	m
LOCAL_MODULE	build.android/jni/Android.mk	/^LOCAL_MODULE    := mdnsd_aj $/;"	m
LOCAL_MODULE	build.android/jni/Android.mk	/^LOCAL_MODULE    := testBonjour_aj$/;"	m
LOCAL_MODULE	build.android/jni/Android.mk	/^LOCAL_MODULE := dns-sd_aj$/;"	m
LOCAL_MODULE	build.android/jni/Android.mk	/^LOCAL_MODULE := libdns_sd_aj$/;"	m
LOCAL_MODULE	build.android/jni/Android.mk	/^LOCAL_MODULE := mDNSNetMonitor_aj$/;"	m
LOCAL_ONLY_NAME	mDNSShared/Java/JNISupport.c	919;"	d	file:
LOCAL_PATH	build.android/jni/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SHARED_LIBRARIES	build.android/jni/Android.mk	/^LOCAL_SHARED_LIBRARIES := bonjour_aj$/;"	m
LOCAL_SHARED_LIBRARIES	build.android/jni/Android.mk	/^LOCAL_SHARED_LIBRARIES := dns_sd_aj$/;"	m
LOCAL_SRC_FILES	build.android/jni/Android.mk	/^LOCAL_SRC_FILES := ..\/..\/Clients\/dns-sd.c         \\$/;"	m
LOCAL_SRC_FILES	build.android/jni/Android.mk	/^LOCAL_SRC_FILES := ..\/..\/mDNSPosix\/Bonjour.c 	        \\$/;"	m
LOCAL_SRC_FILES	build.android/jni/Android.mk	/^LOCAL_SRC_FILES := ..\/..\/mDNSPosix\/PosixDaemon.c 	    \\$/;"	m
LOCAL_SRC_FILES	build.android/jni/Android.mk	/^LOCAL_SRC_FILES := ..\/..\/mDNSPosix\/mDNSPosix.c         \\$/;"	m
LOCAL_SRC_FILES	build.android/jni/Android.mk	/^LOCAL_SRC_FILES := ..\/..\/mDNSPosix\/testBonjour.c$/;"	m
LOCAL_SRC_FILES	build.android/jni/Android.mk	/^LOCAL_SRC_FILES := ..\/..\/mDNSShared\/dnssd_clientlib.c    \\$/;"	m
LOG_CONS	mDNSShared/mDNSDebug.c	32;"	d	file:
LOG_HELPER_BODY	mDNSShared/mDNSDebug.c	73;"	d	file:
LOG_INFO	mDNSShared/dnssd_clientstub.c	68;"	d	file:
LOG_PERROR	mDNSShared/mDNSDebug.c	33;"	d	file:
LOG_PID	mDNSShared/mDNSDebug.c	31;"	d	file:
LOG_WARNING	mDNSShared/dnssd_clientstub.c	67;"	d	file:
LONG_TIME	Clients/dns-sd.c	256;"	d	file:
LOOPBACK	mDNSShared/dnsextd.c	68;"	d	file:
LPR	Clients/PrinterSetupWizard/tcpxcv.h	30;"	d
LabelContainsSuffix	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool LabelContainsSuffix(const domainlabel *const name, const mDNSBool RichText)$/;"	f
LargeAnswers	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 LargeAnswers;                   \/\/ Number of answers with rdata > 1024 bytes$/;"	m	struct:DNSQuestion_struct
LargeCacheRecord	mDNSCore/mDNSEmbeddedAPI.h	/^} LargeCacheRecord;$/;"	t	typeref:struct:__anon79
LastAPTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 LastAPTime;                 \/\/ In platform time units: Last time we sent announcement\/probe$/;"	m	struct:AuthRecord_struct
LastAnswerPktNum	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 LastAnswerPktNum;               \/\/ The sequence number of the last response packet containing an answer to this Q$/;"	m	struct:DNSQuestion_struct
LastConfigGeneration	mDNSMacOSX/mDNSMacOSX.h	/^    uint64_t LastConfigGeneration;     \/\/ DNS configuration generation number$/;"	m	struct:mDNS_PlatformSupport_struct
LastLabel	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *LastLabel(const domainname *d)$/;"	f
LastMCInterface	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID LastMCInterface;    \/\/ Interface this record was multicast on at the time LastMCTime was recorded$/;"	m	struct:AuthRecord_struct
LastMCTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 LastMCTime;                 \/\/ Last time we multicast this record (used to guard against packet-storm attacks)$/;"	m	struct:AuthRecord_struct
LastNATMapResultCode	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 LastNATMapResultCode;               \/\/ Most recent error code for mappings$/;"	m	struct:mDNS_struct
LastNATReplyLocalTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 LastNATReplyLocalTime;              \/\/ Local time in ticks when most recent NAT packet was received$/;"	m	struct:mDNS_struct
LastNATupseconds	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 LastNATupseconds;                   \/\/ NAT engine uptime in seconds, from most recent NAT packet$/;"	m	struct:mDNS_struct
LastQTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 LastQTime;                      \/\/ Last scheduled transmission of this Q on *all* applicable interfaces$/;"	m	struct:DNSQuestion_struct
LastQTxTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 LastQTxTime;                    \/\/ Last time this Q was sent on one (but not necessarily all) interfaces$/;"	m	struct:DNSQuestion_struct
LastQuery	mDNSPosix/NetMonitor.c	/^    mDNSs32 LastQuery;$/;"	m	struct:__anon19	file:
LastSeen	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSs32 LastSeen;                           \/\/ If Exists==0, last time this interface appeared in getifaddrs list$/;"	m	struct:NetworkInterfaceInfoOSX_struct
LastUnansweredTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 LastUnansweredTime;         \/\/ In platform time units; last time we incremented UnansweredQueries$/;"	m	struct:CacheRecord_struct
LastUsed	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 LastUsed;                   \/\/ In platform time units$/;"	m	struct:CacheRecord_struct
Latency0	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Latency0;           \/\/ 0 to 4 ms$/;"	m	struct:__anon91
Latency10	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Latency10;          \/\/ 10 to 19 ms$/;"	m	struct:__anon91
Latency100	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Latency100;         \/\/ >= 100 ms$/;"	m	struct:__anon91
Latency20	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Latency20;          \/\/ 20 to 49 ms$/;"	m	struct:__anon91
Latency5	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Latency5;           \/\/ 5 to  9 ms$/;"	m	struct:__anon91
Latency50	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Latency50;          \/\/ 50 to 99 ms$/;"	m	struct:__anon91
LaunchdCheckin	mDNSMacOSX/daemon.c	/^mDNSlocal void LaunchdCheckin(void)$/;"	f
Length	mDNSCore/CryptoAlg.h	/^    mDNSu32 (*Length)(AlgContext *ctx);$/;"	m	struct:__anon103
Lifetime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Lifetime;$/;"	m	struct:NATTraversalInfo_struct
LightweightOp	mDNSShared/uds_daemon.c	4666;"	d	file:
LinkOffset	mDNSShared/GenLinkedList.h	/^    size_t LinkOffset;$/;"	m	struct:GenLinkedList
LinkOffset	mDNSShared/GenLinkedList.h	/^    size_t LinkOffset;$/;"	m	struct:GenLinkedOffsetList
LinkTrustAnchor	mDNSMacOSX/DNSSECSupport.c	/^mDNSlocal void LinkTrustAnchor(mDNS *const m, TrustAnchor *ta)$/;"	f
ListNameSpaces	mDNSWindows/NSPTool/NSPTool.c	/^DEBUG_LOCAL OSStatus	ListNameSpaces( void )$/;"	f
ListenerThread	Clients/Java/SimpleChat.java	/^	public			ListenerThread( Runnable owner, DatagramSocket s, DatagramPacket p) $/;"	m	class:ListenerThread
ListenerThread	Clients/Java/SimpleChat.java	/^class	ListenerThread extends Thread$/;"	c
Load	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::Load( LPSTREAM inStream )$/;"	f	class:ExplorerBar
Load	mDNSWindows/ControlPanel/SharedSecret.cpp	/^CSharedSecret::Load( CString zone )$/;"	f	class:CSharedSecret
LoadGenericPrintDriverDefs	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::LoadGenericPrintDriverDefs( Manufacturers & manufacturers )$/;"	f	class:CThirdPage
LoadPrintDriverDefs	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::LoadPrintDriverDefs( Manufacturers & manufacturers )$/;"	f	class:CThirdPage
LoadPrintDriverDefsFromFile	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::LoadPrintDriverDefsFromFile(Manufacturers & manufacturers, const CString & filename, bool checkForDuplicateModels )$/;"	f	class:CThirdPage
LoadPrinterNames	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::LoadPrinterNames()$/;"	f	class:CPrinterSetupWizardSheet
LoadTextAndDisableWindow	Clients/PrinterSetupWizard/SecondPage.cpp	/^CSecondPage::LoadTextAndDisableWindow( CString & text )$/;"	f	class:CSecondPage
LocalDeviceInfoName	mDNSCore/mDNSEmbeddedAPI.h	2529;"	d
LocalDomainEnumRecords	mDNSShared/uds_daemon.c	/^static ARListElem    *LocalDomainEnumRecords;       \/\/ List of locally-generated PTR records to augment those we learn from the network$/;"	v	file:
LocalOnlyQuestions	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion *LocalOnlyQuestions;    \/\/ Questions with InterfaceID set to mDNSInterface_LocalOnly or mDNSInterface_P2P$/;"	m	struct:mDNS_struct
LocalOnlyRecordAnswersQuestion	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool LocalOnlyRecordAnswersQuestion(AuthRecord *const ar, const DNSQuestion *const q)$/;"	f
LocalRecordReady	mDNSCore/DNSCommon.h	181;"	d
LocalRecordRmvEventsForQuestion	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool LocalRecordRmvEventsForQuestion(mDNS *const m, DNSQuestion *q)$/;"	f
LocalRemoveEvents	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 LocalRemoveEvents;           \/\/ Set if we may need to deliver remove events for local-only questions and\/or local-only records$/;"	m	struct:mDNS_struct
LocalSocket	mDNSCore/mDNSEmbeddedAPI.h	/^    UDPSocket            *LocalSocket;$/;"	m	struct:DNSQuestion_struct
LocateAdditionals	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *LocateAdditionals(const DNSMessage *const msg, const mDNSu8 *const end)$/;"	f
LocateAnswers	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *LocateAnswers(const DNSMessage *const msg, const mDNSu8 *const end)$/;"	f
LocateAuthorities	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *LocateAuthorities(const DNSMessage *const msg, const mDNSu8 *const end)$/;"	f
LocateOptRR	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *LocateOptRR(const DNSMessage *const msg, const mDNSu8 *const end, int minsize)$/;"	f
LocateSubordinateRequest	mDNSShared/uds_daemon.c	/^mDNSlocal request_state *LocateSubordinateRequest(request_state *request)$/;"	f
LockServer	Clients/ExplorerPlugin/ClassFactory.cpp	/^STDMETHODIMP	ClassFactory::LockServer( BOOL inLock )$/;"	f	class:ClassFactory
Log	mDNSShared/dnsextd.c	/^mDNSlocal void Log(const char *format, ...)$/;"	f
LogAuthRecords	mDNSShared/uds_daemon.c	/^mDNSlocal void LogAuthRecords(mDNS *const m, const mDNSs32 now, AuthRecord *ResourceRecords, int *proxy)$/;"	f
LogClientInfo	mDNSShared/uds_daemon.c	/^mDNSlocal void LogClientInfo(mDNS *const m, request_state *req)$/;"	f
LogDNSSEC	mDNSCore/dnssec.h	130;"	d
LogDebug	mDNSMacOSX/Private/dns_services.c	/^static void LogDebug(const char *prefix, xpc_object_t o)$/;"	f	file:
LogDebugEnabled	mDNSMacOSX/Private/dns_services.c	/^static bool LogDebugEnabled()$/;"	f	file:
LogErr	mDNSShared/dnsextd.c	/^mDNSlocal void LogErr(const char *fn, const char *operation)$/;"	f
LogErr	mDNSWindows/Poll.c	118;"	d	file:
LogEtcHosts	mDNSShared/uds_daemon.c	/^mDNSlocal void LogEtcHosts(mDNS *const m)$/;"	f
LogInfo	mDNSCore/mDNSDebug.h	101;"	d
LogInfo	mDNSCore/mDNSDebug.h	107;"	d
LogInfo	mDNSCore/mDNSDebug.h	118;"	d
LogLevel	mDNSShared/DebugServices.h	/^typedef int32_t LogLevel;$/;"	t
LogLocalOnlyAuthRecords	mDNSShared/uds_daemon.c	/^mDNSlocal void LogLocalOnlyAuthRecords(mDNS *const m)$/;"	f
LogMDNSStatistics	mDNSShared/uds_daemon.c	/^mDNSexport void LogMDNSStatistics(mDNS *const m)$/;"	f
LogMcast	mDNSShared/uds_daemon.h	40;"	d
LogMcastClientInfo	mDNSShared/uds_daemon.c	/^mDNSlocal void LogMcastClientInfo(request_state *req)$/;"	f
LogMcastNoIdent	mDNSShared/uds_daemon.h	41;"	d
LogMcastQ	mDNSShared/uds_daemon.h	38;"	d
LogMcastQuestion	mDNSShared/uds_daemon.c	/^mDNSlocal void LogMcastQuestion(mDNS *const m, const DNSQuestion *const q, request_state *req, q_state status)$/;"	f
LogMcastS	mDNSShared/uds_daemon.h	39;"	d
LogMcastService	mDNSShared/uds_daemon.c	/^mDNSlocal void LogMcastService(mDNS *const m, const AuthRecord *const ar, request_state *req, reg_state status)$/;"	f
LogMcastStateInfo	mDNSShared/uds_daemon.c	/^mDNSexport void LogMcastStateInfo(mDNS *const m, mDNSBool mflag, mDNSBool start, mDNSBool mstatelog)$/;"	f
LogMemCorruption	mDNSMacOSX/daemon.c	/^mDNSexport void LogMemCorruption(const char *format, ...)$/;"	f
LogMsg	mDNSCore/mDNSDebug.h	104;"	d
LogMsg	mDNSCore/mDNSDebug.h	115;"	d
LogMsg	mDNSCore/mDNSDebug.h	98;"	d
LogMsg	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void LogMsg(const char *format, ...) { (void)format; }$/;"	f
LogMsg	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void LogMsg(const char *format, ...)$/;"	f
LogMsg	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport void LogMsg( const char *inFormat, ... )$/;"	f
LogMsg	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void LogMsg( const char *inFormat, ... )$/;"	f
LogMsgNoIdent	mDNSCore/mDNSDebug.h	149;"	d
LogMsgWithLevel	mDNSMacOSX/helper-main.c	/^void LogMsgWithLevel(mDNSLogLevel_t logLevel, const char *fmt, ...)$/;"	f
LogMsgWithLevelv	mDNSShared/mDNSDebug.c	/^mDNSlocal void LogMsgWithLevelv(mDNSLogLevel_t logLevel, const char *format, va_list ptr)$/;"	f
LogOneAuthRecord	mDNSShared/uds_daemon.c	/^mDNSlocal void LogOneAuthRecord(mDNS *const m, const AuthRecord *ar, mDNSs32 now, const char *const ifname)$/;"	f
LogOperation	mDNSCore/mDNSDebug.h	105;"	d
LogOperation	mDNSCore/mDNSDebug.h	116;"	d
LogOperation	mDNSCore/mDNSDebug.h	99;"	d
LogSPS	mDNSCore/mDNSDebug.h	100;"	d
LogSPS	mDNSCore/mDNSDebug.h	106;"	d
LogSPS	mDNSCore/mDNSDebug.h	117;"	d
LogTimer	mDNSShared/uds_daemon.c	5876;"	d	file:
Logger	Clients/PrinterSetupWizard/Logger.cpp	/^Logger::Logger()$/;"	f	class:Logger
Logger	Clients/PrinterSetupWizard/Logger.h	/^class Logger : public std::ofstream$/;"	c
LoginDialog	Clients/ExplorerPlugin/LoginDialog.cpp	/^LoginDialog::LoginDialog( CWnd *inParent )$/;"	f	class:LoginDialog
LoginDialog	Clients/ExplorerPlugin/LoginDialog.h	/^class LoginDialog : public CDialog$/;"	c
LoginDialog	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.cpp	/^LoginDialog::LoginDialog( CWnd *inParent )$/;"	f	class:LoginDialog
LoginDialog	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.h	/^class	LoginDialog : public CDialog$/;"	c
LongLived	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool LongLived;                     \/\/ Set by client for calls to mDNS_StartQuery to indicate LLQs to unicast layer.$/;"	m	struct:DNSQuestion_struct
Lookup	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::Lookup(const char * inName)$/;"	f	class:CPrinterSetupWizardSheet
LookupLLQ	mDNSShared/dnsextd.c	/^mDNSlocal LLQEntry *LookupLLQ(DaemonInfo *d, struct sockaddr_in cli, domainname *qname, mDNSu16 qtype, const mDNSOpaque64 *const id)$/;"	f
LookupService	Clients/PrinterSetupWizard/UtilTypes.h	/^Printer::LookupService$/;"	f	class:PrinterSetupWizard::Printer
Loopback	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 Loopback;                    \/\/ Set if this is the loopback interface$/;"	m	struct:NetworkInterfaceInfo_struct
LoopbackIPCPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort LoopbackIPCPort        = { { LoopbackIPCPortAsNumber        >> 8, LoopbackIPCPortAsNumber        & 0xFF } };$/;"	v
LoopbackIPCPortAsNumber	mDNSCore/DNSCommon.c	64;"	d	file:
LsaGetSecret	mDNSWindows/Secret.c	/^LsaGetSecret( const char * inDomain, char * outDomain, unsigned outDomainSize, char * outKey, unsigned outKeySize, char * outSecret, unsigned outSecretSize )$/;"	f
LsaSetSecret	mDNSWindows/Secret.c	/^LsaSetSecret( const char * inDomain, const char * inKey, const char * inSecret )$/;"	f
MAC	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSEthAddr MAC;$/;"	m	struct:NetworkInterfaceInfo_struct
MACHRETRYLOOP_BEGIN	mDNSMacOSX/helper-stubs.c	84;"	d	file:
MACHRETRYLOOP_END	mDNSMacOSX/helper-stubs.c	87;"	d	file:
MANPATH	mDNSPosix/Makefile	/^MANPATH := \/usr\/man$/;"	m
MANPATH	mDNSPosix/Makefile	/^MANPATH := \/usr\/share\/man$/;"	m
MASTER_COMPANY_NAME	mDNSWindows/WinVersRes.h	24;"	d
MASTER_LEGAL_COPYRIGHT	mDNSWindows/WinVersRes.h	33;"	d
MASTER_PROD_NAME	mDNSWindows/WinVersRes.h	21;"	d
MASTER_PROD_VERS	mDNSWindows/WinVersRes.h	27;"	d
MASTER_PROD_VERS_STR	mDNSWindows/WinVersRes.h	28;"	d
MASTER_PROD_VERS_STR2	mDNSWindows/WinVersRes.h	29;"	d
MASTER_PROD_VERS_STR3	mDNSWindows/WinVersRes.h	30;"	d
MAXCOMLEN	mDNSShared/uds_daemon.c	58;"	d	file:
MAX_ADDRESS_STR_LEN	Clients/PrinterSetupWizard/tcpxcv.h	40;"	d
MAX_ANONYMOUS_DATA	mDNSShared/uds_daemon.c	81;"	d	file:
MAX_BPF_ADDRS	mDNSMacOSX/mDNSMacOSX.c	3383;"	d	file:
MAX_CTLPATH	mDNSShared/dnssd_ipc.h	90;"	d
MAX_DEVICEDESCRIPTION_STR_LEN	Clients/PrinterSetupWizard/tcpxcv.h	41;"	d
MAX_DNSSEC_RETRANSMISSIONS	mDNSCore/uDNS.h	77;"	d
MAX_DNSSEC_UNANSWERED_QUERIES	mDNSCore/uDNS.h	35;"	d
MAX_DOMAIN_LABEL	mDNSCore/mDNSEmbeddedAPI.h	390;"	d
MAX_DOMAIN_NAME	mDNSCore/mDNSEmbeddedAPI.h	395;"	d
MAX_DOMAIN_NAME	mDNSShared/Java/DNSSD.java	/^    public static final int     MAX_DOMAIN_NAME = 1009;$/;"	f	class:DNSSD
MAX_ESCAPED_DOMAIN_LABEL	mDNSCore/mDNSEmbeddedAPI.h	412;"	d
MAX_ESCAPED_DOMAIN_NAME	mDNSCore/mDNSEmbeddedAPI.h	413;"	d
MAX_IPADDR_STR_LEN	Clients/PrinterSetupWizard/tcpxcv.h	39;"	d
MAX_IPV6_TEXTUAL	mDNSMacOSX/mDNSMacOSX.c	7607;"	d	file:
MAX_KEY_LENGTH	mDNSWindows/ControlPanel/BrowsingPage.cpp	25;"	d	file:
MAX_KEY_LENGTH	mDNSWindows/ControlPanel/FourthPage.cpp	26;"	d	file:
MAX_KEY_LENGTH	mDNSWindows/ControlPanel/RegistrationPage.cpp	29;"	d	file:
MAX_KEY_LENGTH	mDNSWindows/ControlPanel/SecondPage.cpp	26;"	d	file:
MAX_KEY_LENGTH	mDNSWindows/ControlPanel/ServicesPage.cpp	26;"	d	file:
MAX_LABELS	Clients/dns-sd.c	533;"	d	file:
MAX_LABELS	mDNSWindows/mdnsNSP/mdnsNSP.c	43;"	d	file:
MAX_MODEL_NAME_LEN	mDNSMacOSX/mDNSMacOSX.c	10374;"	d	file:
MAX_MSG_SIZE	mDNSMacOSX/helper-main.c	/^static const mach_msg_size_t MAX_MSG_SIZE = sizeof(union max_msg_size) + MAX_TRAILER_SIZE;$/;"	v	file:
MAX_NETWORKNAME2_LEN	Clients/PrinterSetupWizard/tcpxcv.h	36;"	d
MAX_NETWORKNAME_LEN	Clients/PrinterSetupWizard/tcpxcv.h	35;"	d
MAX_PORTNAME_LEN	Clients/PrinterSetupWizard/tcpxcv.h	34;"	d
MAX_PROBE_RESTARTS	mDNSCore/mDNS.c	682;"	d	file:
MAX_PROXY_RECORDS	mDNSCore/mDNSEmbeddedAPI.h	2437;"	d
MAX_QUEUENAME_LEN	Clients/PrinterSetupWizard/tcpxcv.h	38;"	d
MAX_RECORD_REG_INTERVAL	mDNSCore/uDNS.h	58;"	d
MAX_RECURSE_COUNT	mDNSCore/dnssec.c	96;"	d	file:
MAX_REVERSE_MAPPING_NAME	mDNSCore/mDNSEmbeddedAPI.h	421;"	d
MAX_REVERSE_MAPPING_NAME_V4	mDNSCore/mDNSEmbeddedAPI.h	419;"	d
MAX_REVERSE_MAPPING_NAME_V6	mDNSCore/mDNSEmbeddedAPI.h	420;"	d
MAX_SNMP_COMMUNITY_STR_LEN	Clients/PrinterSetupWizard/tcpxcv.h	37;"	d
MAX_UCAST_POLL_INTERVAL	mDNSCore/uDNS.h	31;"	d
MAX_UCAST_UNANSWERED_QUERIES	mDNSCore/uDNS.h	36;"	d
MAX_UNICAST_DNS_SERVERS	mDNSCore/uDNS.c	53;"	d	file:
MAX_UPDATE_REFRESH_COUNT	mDNSCore/uDNS.h	63;"	d
MCAST_NSEC3_RDLENGTH	mDNSCore/mDNSEmbeddedAPI.h	873;"	d
MD32_REG_T	mDNSCore/DNSDigest.c	847;"	d	file:
MD5_BLOCK_BYTES	mDNSCore/mDNSEmbeddedAPI.h	3488;"	d
MD5_BLOCK_LONG	mDNSCore/mDNSEmbeddedAPI.h	3489;"	d
MD5_CBLOCK	mDNSCore/DNSDigest.c	189;"	d	file:
MD5_CTX	mDNSCore/mDNSEmbeddedAPI.h	/^} MD5_CTX;$/;"	t	typeref:struct:MD5state_st
MD5_DIGEST_LENGTH	mDNSCore/DNSDigest.c	191;"	d	file:
MD5_DIGEST_LENGTH	mDNSCore/mDNSEmbeddedAPI.h	3487;"	d
MD5_Init	mDNSCore/DNSDigest.c	/^int MD5_Init(MD5_CTX *c)$/;"	f
MD5_LBLOCK	mDNSCore/DNSDigest.c	190;"	d	file:
MD5_LEN	mDNSCore/DNSDigest.c	1277;"	d	file:
MD5_LEN	mDNSCore/mDNSEmbeddedAPI.h	1808;"	d
MD5_LONG_LOG2	mDNSCore/DNSDigest.c	198;"	d	file:
MD5state_st	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct MD5state_st$/;"	s
MDNSInterfaceItem	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^struct  MDNSInterfaceItem$/;"	s	file:
MDNSInterfaceItem	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^typedef struct  MDNSInterfaceItem MDNSInterfaceItem;$/;"	t	typeref:struct:MDNSInterfaceItem
MDNSPipeCommandCode	mDNSVxWorks/mDNSVxWorks.c	/^typedef uint8_t MDNSPipeCommandCode;$/;"	t	file:
MDNSPipeCommandCode	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^typedef uint8_t MDNSPipeCommandCode;$/;"	t	file:
MDNSSocketRef	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^typedef int MDNSSocketRef;$/;"	t	file:
MDNS_AAAA_OVER_IPV4	mDNSVxWorks/mDNSVxWorks.c	27;"	d	file:
MDNS_ANCHOR_NAME	mDNSMacOSX/P2PPacketFilter.c	29;"	d	file:
MDNS_ANCHOR_PATH	mDNSMacOSX/P2PPacketFilter.c	30;"	d	file:
MDNS_BUILDINGSHAREDLIBRARY	mDNSMacOS9/mDNSPrefix.h	47;"	d
MDNS_BUILDINGSHAREDLIBRARY	mDNSMacOS9/mDNSPrefix.h	51;"	d
MDNS_BUILDINGSTUBLIBRARY	mDNSMacOS9/mDNSPrefix.h	54;"	d
MDNS_C99_VA_ARGS	mDNSCore/mDNSDebug.h	74;"	d
MDNS_C99_VA_ARGS	mDNSCore/mDNSDebug.h	77;"	d
MDNS_C99_VA_ARGS	mDNSCore/mDNSDebug.h	82;"	d
MDNS_C99_VA_ARGS	mDNSCore/mDNSDebug.h	86;"	d
MDNS_C99_VA_ARGS	mDNSCore/mDNSDebug.h	90;"	d
MDNS_CHECK_PRINTF_STYLE_FUNCTIONS	mDNSCore/mDNSDebug.h	37;"	d
MDNS_DEBUGMSGS	mDNSMacOS9/mDNSPrefix.h	34;"	d
MDNS_DEBUGMSGS	mDNSMacOS9/mDNSPrefix.h	40;"	d
MDNS_DEBUGMSGS	mDNSMacOS9/mDNSPrefix.h	44;"	d
MDNS_DEBUGMSGS	mDNSMacOS9/mDNSPrefix.h	50;"	d
MDNS_DEBUGMSGS	mDNSWindows/NSPTool/Prefix.h	23;"	d
MDNS_DEBUGMSGS	mDNSWindows/SystemService/Prefix.h	23;"	d
MDNS_DEBUG_PACKETS	mDNSVxWorks/mDNSVxWorks.c	30;"	d	file:
MDNS_DEBUG_SHOW	mDNSVxWorks/mDNSVxWorks.c	31;"	d	file:
MDNS_ENABLE_PPP	mDNSVxWorks/mDNSVxWorks.c	29;"	d	file:
MDNS_EXCLUDE_IPV4_ROUTABLE_IPV6	mDNSVxWorks/mDNSVxWorks.c	28;"	d	file:
MDNS_FIX_IPHLPAPI_PREFIX_BUG	mDNSWindows/mDNSWin32.c	71;"	d	file:
MDNS_GNU_VA_ARGS	mDNSCore/mDNSDebug.h	75;"	d
MDNS_GNU_VA_ARGS	mDNSCore/mDNSDebug.h	78;"	d
MDNS_GNU_VA_ARGS	mDNSCore/mDNSDebug.h	83;"	d
MDNS_GNU_VA_ARGS	mDNSCore/mDNSDebug.h	87;"	d
MDNS_GNU_VA_ARGS	mDNSCore/mDNSDebug.h	91;"	d
MDNS_HAS_VA_ARG_MACROS	mDNSCore/mDNSDebug.h	80;"	d
MDNS_HAS_VA_ARG_MACROS	mDNSCore/mDNSDebug.h	84;"	d
MDNS_HAS_VA_ARG_MACROS	mDNSCore/mDNSDebug.h	88;"	d
MDNS_HAS_VA_ARG_MACROS	mDNSCore/mDNSDebug.h	92;"	d
MDNS_LOG_DEBUG	mDNSCore/mDNSDebug.h	/^    MDNS_LOG_DEBUG,$/;"	e	enum:__anon100
MDNS_LOG_INFO	mDNSCore/mDNSDebug.h	/^    MDNS_LOG_INFO,$/;"	e	enum:__anon100
MDNS_LOG_MSG	mDNSCore/mDNSDebug.h	/^    MDNS_LOG_MSG,$/;"	e	enum:__anon100
MDNS_LOG_OPERATION	mDNSCore/mDNSDebug.h	/^    MDNS_LOG_OPERATION,$/;"	e	enum:__anon100
MDNS_LOG_SPS	mDNSCore/mDNSDebug.h	/^    MDNS_LOG_SPS,$/;"	e	enum:__anon100
MDNS_MM_TIMEOUT	mDNSMacOSX/daemon.c	96;"	d	file:
MDNS_NO_IPSEC	mDNSMacOSX/helper.c	70;"	d	file:
MDNS_NO_IPSEC	mDNSMacOSX/pfkey.c	68;"	d	file:
MDNS_ONLYSYSTEMTASK	mDNSMacOS9/mDNSPrefix.h	33;"	d
MDNS_ONLYSYSTEMTASK	mDNSMacOS9/mDNSPrefix.h	39;"	d
MDNS_ONLYSYSTEMTASK	mDNSMacOS9/mDNSPrefix.h	43;"	d
MDNS_SET_HINFO_STRINGS	mDNSWindows/mDNSWin32.c	72;"	d	file:
MDNS_TCP_SERVERADDR	mDNSShared/dnssd_ipc.h	79;"	d
MDNS_TCP_SERVERPORT	mDNSShared/dnssd_ipc.h	80;"	d
MDNS_TRACER	mDNSCore/mDNS.c	91;"	d	file:
MDNS_UDS_SERVERPATH	mDNSShared/dnssd_ipc.h	86;"	d
MDNS_VERBOSE	mDNSPosix/nss_mdns.c	/^const int MDNS_VERBOSE = 0;$/;"	v
MDNS_WINDOWS_ENABLE_IPV4	mDNSWindows/mDNSWin32.c	69;"	d	file:
MDNS_WINDOWS_ENABLE_IPV6	mDNSWindows/mDNSWin32.c	70;"	d	file:
MDNS_WINDOWS_USE_IPV6_IF_ADDRS	mDNSWindows/mDNSWin32.c	68;"	d	file:
MERGE_DELAY_TIME	mDNSCore/uDNS.h	59;"	d
MIN_DNS_MESSAGE_SIZE	mDNSCore/dnsproxy.c	74;"	d	file:
MIN_OPENFILES	mDNSShared/uds_daemon.c	5035;"	d	file:
MIN_SIZE_X	Clients/ExplorerPlugin/ExplorerBar.cpp	42;"	d	file:
MIN_SIZE_Y	Clients/ExplorerPlugin/ExplorerBar.cpp	43;"	d	file:
MIN_UCAST_RETRANS_TIMEOUT	mDNSCore/uDNS.h	41;"	d
MIN_UPDATE_REFRESH_TIME	mDNSCore/uDNS.h	64;"	d
MODULO_ISOCODES	mDNSWindows/isocode.h	133;"	d
MORE_COMING	mDNSShared/Java/DNSSD.java	/^	public static final int		MORE_COMING = ( 1 << 0 );$/;"	f	class:DNSSD
MPExpectingKA	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool MPExpectingKA;             \/\/ Multi-packet query handling: Set when we increment MPUnansweredQ; allows one KA$/;"	m	struct:CacheRecord_struct
MPLastUnansweredQT	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 MPLastUnansweredQT;         \/\/ Multi-packet query handling: Last time we incremented MPUnansweredQ$/;"	m	struct:CacheRecord_struct
MPUnansweredKA	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 MPUnansweredKA;             \/\/ Multi-packet query handling: Number of times we've seen this record in a KA list$/;"	m	struct:CacheRecord_struct
MPUnansweredQ	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 MPUnansweredQ;              \/\/ Multi-packet query handling: Number of times we've seen a query for this record$/;"	m	struct:CacheRecord_struct
MPktNum	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 MPktNum;                    \/\/ Unique sequence number assigned to each received Multicast packet$/;"	m	struct:mDNS_struct
MSG_PAD_BYTES	mDNSShared/uds_daemon.c	301;"	d	file:
MVERS	Makefile	/^MVERS = "mDNSResponder-522.90.2"$/;"	m
MacOSXSystemBuildNumber	mDNSMacOSX/helper.c	/^static int MacOSXSystemBuildNumber(char* letter_out, int* minor_out)$/;"	f	file:
MachineHasActiveIPv6	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool MachineHasActiveIPv6(mDNS *const m)$/;"	f
Main	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		static void Main() $/;"	m	class:DNSServiceBrowser_NET.Form1	file:
Main	Clients/SimpleChat.NET/SimpleChat.cs	/^		static void Main() $/;"	m	class:SimpleChat.NET.SimpleChat	file:
Main	mDNSWindows/SystemService/Service.c	/^int	Main( int argc, LPTSTR argv[] )$/;"	f
MainCallback	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSCallback *MainCallback;$/;"	m	struct:mDNS_struct
MainContext	mDNSCore/mDNSEmbeddedAPI.h	/^    void         *MainContext;$/;"	m	struct:mDNS_struct
MainLoop	mDNSPosix/Bonjour.c	/^mDNSlocal mStatus MainLoop(mDNS *m) \/\/ Loop until we quit.$/;"	f
MainLoop	mDNSPosix/PosixDaemon.c	/^mDNSlocal mStatus MainLoop(mDNS *m) \/\/ Loop until we quit.$/;"	f
MakeDomainLabelFromLiteralString	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool MakeDomainLabelFromLiteralString(domainlabel *const label, const char *cstr)$/;"	f
MakeDomainNameFromDNSNameString	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *MakeDomainNameFromDNSNameString(domainname *const name, const char *cstr)$/;"	f
MakeLsaStringFromUTF8String	mDNSWindows/Secret.c	/^MakeLsaStringFromUTF8String( PLSA_UNICODE_STRING output, const char * input )$/;"	f
MakeNegativeCacheRecord	mDNSCore/mDNS.c	/^mDNSexport void MakeNegativeCacheRecord(mDNS *const m, CacheRecord *const cr,$/;"	f
MakeTCPConn	mDNSCore/uDNS.c	/^mDNSlocal tcpInfo_t *MakeTCPConn(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *const end,$/;"	f
MakeTCPConnection	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal mStatus MakeTCPConnection(mDNS *const m, tcpLNTInfo *info, const mDNSAddr *const Addr, const mDNSIPPort Port, LNTOp_t op)$/;"	f
MakeUTF8StringFromLsaString	mDNSWindows/Secret.c	/^MakeUTF8StringFromLsaString( char * output, size_t len, PLSA_UNICODE_STRING input )$/;"	f
ManageEventsCallback	mDNSMacOSX/BonjourEvents.c	/^static void ManageEventsCallback(UserEventAgentLaunchdAction action, CFNumberRef token, CFTypeRef eventMatchDict, void* vContext)$/;"	f	file:
Manufacturer	Clients/PrinterSetupWizard/UtilTypes.h	/^struct Manufacturer$/;"	s	namespace:PrinterSetupWizard
Manufacturers	Clients/PrinterSetupWizard/ThirdPage.h	/^typedef std::map<CString, Manufacturer*, compare_func> Manufacturers;$/;"	t	class:CThirdPage
MarkAllInterfacesInactive	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void MarkAllInterfacesInactive(mDNS *const m, mDNSs32 utc)$/;"	f
MarkAllInterfacesInactive	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal void  MarkAllInterfacesInactive( mDNS *const inMDNS, mDNSs32 inUTC )$/;"	f
MarkRRForSending	mDNSCore/uDNS.c	/^mDNSlocal AuthRecord *MarkRRForSending(mDNS *const m)$/;"	f
MarkedForDeletion	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool MarkedForDeletion;$/;"	m	struct:ClientTunnel
MatchDependentOn	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool MatchDependentOn(const mDNS *const m, const CacheRecord *const pktrr, const AuthRecord *const master)$/;"	f
MatchGeneric	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::MatchGeneric( Manufacturers & manufacturers, Printer * printer, Service * service, Manufacturer ** manufacturer, Model ** model )$/;"	f	class:CThirdPage
MatchManufacturer	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::MatchManufacturer( Manufacturers & manufacturers, const CString & name)$/;"	f	class:CThirdPage
MatchModel	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::MatchModel(Manufacturer * manufacturer, const CString & name)$/;"	f	class:CThirdPage
MatchPrinter	Clients/PrinterSetupWizard/ThirdPage.cpp	/^OSStatus CThirdPage::MatchPrinter(Manufacturers & manufacturers, Printer * printer, Service * service, bool useCUPSWorkaround)$/;"	f	class:CThirdPage
MatchingAnswersForQueries	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 MatchingAnswersForQueries;      \/\/ Queries for which we had a response$/;"	m	struct:__anon92
Max	mDNSShared/CommonServices.h	665;"	d
MaxInputIf	mDNSMacOSX/Private/dns_services.h	33;"	d
MaxIp	mDNSCore/mDNSEmbeddedAPI.h	384;"	d
MaxMsg	mDNSCore/mDNSEmbeddedAPI.h	2282;"	d
MaxQuestionInterval	mDNSCore/uDNS.h	49;"	d
MaxRDLength	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 MaxRDLength;    \/\/ Amount of storage allocated for rdata (usually sizeof(RDataBody))$/;"	m	struct:__anon59
MaxRDLength	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 MaxRDLength;    \/\/ Storage allocated for data (may be greater than InlineCacheRDSize if additional storage follows this object)$/;"	m	struct:__anon60
MaxUnansweredQueries	mDNSCore/mDNS.c	716;"	d	file:
MaxWidth	mDNSPosix/NetMonitor.c	497;"	d	file:
MaximumRDSize	mDNSCore/mDNSEmbeddedAPI.h	1003;"	d
MaximumRDSize	mDNSCore/mDNSEmbeddedAPI.h	100;"	d
McastResolver	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct McastResolver$/;"	s
McastResolver	mDNSCore/mDNSEmbeddedAPI.h	/^} McastResolver;$/;"	t	typeref:struct:McastResolver
McastResolver_FlagDelete	mDNSCore/mDNSEmbeddedAPI.h	/^    McastResolver_FlagDelete = 1,$/;"	e	enum:__anon70
McastResolver_FlagNew	mDNSCore/mDNSEmbeddedAPI.h	/^    McastResolver_FlagNew    = 2$/;"	e	enum:__anon70
McastResolvers	mDNSCore/mDNSEmbeddedAPI.h	/^    McastResolver    *McastResolvers;       \/\/ list of Mcast Resolvers$/;"	m	struct:mDNS_struct
McastTxRx	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 McastTxRx;                   \/\/ Send\/Receive multicast on this { InterfaceID, address family } ?$/;"	m	struct:NetworkInterfaceInfo_struct
Min	mDNSShared/CommonServices.h	655;"	d
Model	Clients/PrinterSetupWizard/UtilTypes.h	/^struct Model$/;"	s	namespace:PrinterSetupWizard
Models	Clients/PrinterSetupWizard/UtilTypes.h	/^typedef std::list<Model*>   Models;$/;"	t	namespace:PrinterSetupWizard
MsgBuffer	mDNSCore/mDNSEmbeddedAPI.h	/^    char MsgBuffer[MaxMsg];             \/\/ Temp storage used while building error log messages$/;"	m	struct:mDNS_struct
MsgSize0	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 MsgSize0;           \/\/ DNSSEC message size <= 1024$/;"	m	struct:__anon91
MsgSize1	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 MsgSize1;           \/\/ DNSSEC message size <= 2048$/;"	m	struct:__anon91
MsgSize2	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 MsgSize2;           \/\/ DNSSEC message size > 2048$/;"	m	struct:__anon91
MulticastDNSPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort MulticastDNSPort       = { { MulticastDNSPortAsNumber       >> 8, MulticastDNSPortAsNumber       & 0xFF } };$/;"	v
MulticastDNSPortAsNumber	mDNSCore/DNSCommon.c	63;"	d	file:
MulticastDNSPortAsNumber	mDNSMacOS9/mDNSMacOS9.c	61;"	d	file:
MulticastHostname	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname MulticastHostname;       \/\/ Fully Qualified "dot-local" Host Name, e.g. "Foo.local."$/;"	m	struct:mDNS_struct
MulticastInterface	mDNSMacOSX/mDNSMacOSX.c	1042;"	d	file:
MulticastPacketsSent	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 MulticastPacketsSent;       \/\/ Number of multicast packets sent.$/;"	m	struct:mDNS_struct
MulticastResponses	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 MulticastResponses;             \/\/ Multicast responses to queries$/;"	m	struct:__anon92
MulticastWakeupStruct	mDNSWindows/mDNSWin32.c	/^typedef struct MulticastWakeupStruct$/;"	s	file:
MulticastWakeupStruct	mDNSWindows/mDNSWin32.c	/^} MulticastWakeupStruct;$/;"	t	typeref:struct:MulticastWakeupStruct	file:
MustSendRecord	mDNSCore/mDNS.c	6736;"	d	file:
MyDNSServiceState	mDNSMacOSX/PreferencePane/DNSServiceDiscoveryPref.h	/^typedef struct MyDNSServiceState {$/;"	s
MyDNSServiceState	mDNSMacOSX/PreferencePane/DNSServiceDiscoveryPref.h	/^} MyDNSServiceState;$/;"	t	typeref:struct:MyDNSServiceState
MyRegDeleteKey	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^DEBUG_LOCAL OSStatus MyRegDeleteKey( HKEY hKeyRoot, LPTSTR lpSubKey )$/;"	f
MyRegDeleteKey	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^DEBUG_LOCAL OSStatus MyRegDeleteKey( HKEY hKeyRoot, LPTSTR lpSubKey )$/;"	f
MyRegisterRecordCallback	Clients/dns-sd.c	/^static void DNSSD_API MyRegisterRecordCallback(DNSServiceRef service, DNSRecordRef rec, const DNSServiceFlags flags,$/;"	f	file:
MySend	mDNSShared/dnsextd.c	/^mDNSlocal int MySend(TCPSocket *sock, const void *msg, int len)$/;"	f
NAME_CONFLICT	mDNSShared/Java/DNSSDException.java	/^    public static final int		NAME_CONFLICT             = -65548;$/;"	f	class:DNSSDException
NATErr_NetFail	mDNSCore/mDNSEmbeddedAPI.h	/^    NATErr_NetFail = 3,$/;"	e	enum:__anon62
NATErr_None	mDNSCore/mDNSEmbeddedAPI.h	/^    NATErr_None    = 0,$/;"	e	enum:__anon62
NATErr_Opcode	mDNSCore/mDNSEmbeddedAPI.h	/^    NATErr_Opcode  = 5$/;"	e	enum:__anon62
NATErr_Refused	mDNSCore/mDNSEmbeddedAPI.h	/^    NATErr_Refused = 2,$/;"	e	enum:__anon62
NATErr_Res	mDNSCore/mDNSEmbeddedAPI.h	/^    NATErr_Res     = 4,$/;"	e	enum:__anon62
NATErr_Vers	mDNSCore/mDNSEmbeddedAPI.h	/^    NATErr_Vers    = 1,$/;"	e	enum:__anon62
NATErr_t	mDNSCore/mDNSEmbeddedAPI.h	/^typedef mDNSu16 NATErr_t;$/;"	t
NATLease	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 NATLease;                               \/\/ Requested lifetime in seconds (doesn't change)$/;"	m	struct:NATTraversalInfo_struct
NATMAP_DEFAULT_LEASE	mDNSCore/mDNSEmbeddedAPI.h	1088;"	d
NATMAP_INIT_RETRY	mDNSCore/mDNSEmbeddedAPI.h	1087;"	d
NATMAP_MAX_RETRY_INTERVAL	mDNSCore/mDNSEmbeddedAPI.h	1085;"	d
NATMAP_MIN_RETRY_INTERVAL	mDNSCore/mDNSEmbeddedAPI.h	1086;"	d
NATMAP_VERS	mDNSCore/mDNSEmbeddedAPI.h	1089;"	d
NATMcastRecvskt	mDNSCore/mDNSEmbeddedAPI.h	/^    UDPSocket        *NATMcastRecvskt;          \/\/ For receiving PCP & NAT-PMP announcement multicasts from router on port 5350$/;"	m	struct:mDNS_struct
NATOp_AddrRequest	mDNSCore/mDNSEmbeddedAPI.h	/^    NATOp_AddrRequest    = 0,$/;"	e	enum:__anon61
NATOp_AddrResponse	mDNSCore/mDNSEmbeddedAPI.h	/^    NATOp_AddrResponse   = 0x80 | 0,$/;"	e	enum:__anon61
NATOp_MapTCP	mDNSCore/mDNSEmbeddedAPI.h	/^    NATOp_MapTCP         = 2,$/;"	e	enum:__anon61
NATOp_MapTCPResponse	mDNSCore/mDNSEmbeddedAPI.h	/^    NATOp_MapTCPResponse = 0x80 | 2,$/;"	e	enum:__anon61
NATOp_MapUDP	mDNSCore/mDNSEmbeddedAPI.h	/^    NATOp_MapUDP         = 1,$/;"	e	enum:__anon61
NATOp_MapUDPResponse	mDNSCore/mDNSEmbeddedAPI.h	/^    NATOp_MapUDPResponse = 0x80 | 1,$/;"	e	enum:__anon61
NATOp_t	mDNSCore/mDNSEmbeddedAPI.h	/^} NATOp_t;$/;"	t	typeref:enum:__anon61
NATPMPAnnouncementPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort NATPMPAnnouncementPort = { { NATPMPAnnouncementPortAsNumber >> 8, NATPMPAnnouncementPortAsNumber & 0xFF } };$/;"	v
NATPMPAnnouncementPortAsNumber	mDNSCore/DNSCommon.c	60;"	d	file:
NATPMPPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort NATPMPPort             = { { NATPMPPortAsNumber             >> 8, NATPMPPortAsNumber             & 0xFF } };$/;"	v
NATPMPPortAsNumber	mDNSCore/DNSCommon.c	61;"	d	file:
NATPORTMAPPINGDISABLED	mDNSShared/Java/DNSSDException.java	/^    public static final int		NATPORTMAPPINGDISABLED    = -65565;$/;"	f	class:DNSSDException
NATPORTMAPPINGUNSUPPORTED	mDNSShared/Java/DNSSDException.java	/^    public static final int		NATPORTMAPPINGUNSUPPORTED = -65564;$/;"	f	class:DNSSDException
NATPortMappingCreate	mDNSWindows/DLLX/DNSSD.cpp	/^STDMETHODIMP CDNSSD::NATPortMappingCreate(DNSSDFlags flags, ULONG ifIndex, DNSSDAddressFamily addressFamily, DNSSDProtocol protocol, USHORT internalPort, USHORT externalPort, ULONG ttl, INATPortMappingListener *listener, IDNSSDService **service)$/;"	f	class:CDNSSD
NATPortMappingCreate	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::NATPortMappingCreate(DNSSDFlags flags, ULONG ifIndex, DNSSDAddressFamily addressFamily, DNSSDProtocol protocol, USHORT internalPort, USHORT externalPort, ULONG ttl, IDNSSDEventManager *eventManager, IDNSSDService **service)$/;"	f	class:CDNSSDService
NATPortMappingReply	mDNSWindows/DLLX/DNSSD.cpp	/^CDNSSD::NATPortMappingReply$/;"	f	class:CDNSSD
NATPortMappingReply	mDNSWindows/DLLX/DNSSDService.cpp	/^CDNSSDService::NATPortMappingReply$/;"	f	class:CDNSSDService
NATSetNextRenewalTime	mDNSCore/uDNS.c	/^mDNSlocal void NATSetNextRenewalTime(mDNS *const m, NATTraversalInfo *n)$/;"	f
NATTProtocol	mDNSCore/mDNSEmbeddedAPI.h	/^} NATTProtocol;$/;"	t	typeref:enum:__anon67
NATTProtocolNATPMP	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTProtocolNATPMP  = 1,$/;"	e	enum:__anon67
NATTProtocolNone	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTProtocolNone    = 0,$/;"	e	enum:__anon67
NATTProtocolPCP	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTProtocolPCP     = 3,$/;"	e	enum:__anon67
NATTProtocolUPNPIGD	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTProtocolUPNPIGD = 2,$/;"	e	enum:__anon67
NATTRAVERSAL	mDNSShared/Java/DNSSDException.java	/^    public static final int		NATTRAVERSAL              = -65557;$/;"	f	class:DNSSDException
NATTraversalClientCallback	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void (*NATTraversalClientCallback)(mDNS *m, NATTraversalInfo *n);$/;"	t
NATTraversalInfo	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct NATTraversalInfo_struct NATTraversalInfo;$/;"	t	typeref:struct:NATTraversalInfo_struct
NATTraversalInfo_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct NATTraversalInfo_struct$/;"	s
NATTraversals	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTraversalInfo *NATTraversals;$/;"	m	struct:mDNS_struct
NATinfo	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTraversalInfo NATinfo;$/;"	m	struct:AuthRecord_struct
NATinfo	mDNSShared/uds_daemon.c	/^            NATTraversalInfo NATinfo;$/;"	m	struct:request_state::__anon124::__anon128	file:
NDP_Adv	mDNSCore/mDNSEmbeddedAPI.h	638;"	d
NDP_Override	mDNSCore/mDNSEmbeddedAPI.h	642;"	d
NDP_Router	mDNSCore/mDNSEmbeddedAPI.h	640;"	d
NDP_Sol	mDNSCore/mDNSEmbeddedAPI.h	637;"	d
NDP_Solicited	mDNSCore/mDNSEmbeddedAPI.h	641;"	d
NDP_SrcLL	mDNSCore/mDNSEmbeddedAPI.h	644;"	d
NDP_TgtLL	mDNSCore/mDNSEmbeddedAPI.h	645;"	d
NDP_prefix	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSv6Addr NDP_prefix         = { { 0xFF,0x02,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x01, 0xFF,0x00,0x00,0xFB } };  \/\/ FF02:0:0:0:0:1:FF00::\/104$/;"	v
NEXTADDR	mDNSMacOSX/helper.c	2658;"	d	file:
NOAUTH	mDNSShared/Java/DNSSDException.java	/^    public static final int		NOAUTH                    = -65555;$/;"	f	class:DNSSDException
NOMENU	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	13;"	d
NOSUCHKEY	mDNSShared/Java/DNSSDException.java	/^    public static final int		NOSUCHKEY                 = -65556;$/;"	f	class:DNSSDException
NOSUCHRECORD	mDNSShared/Java/DNSSDException.java	/^    public static final int		NOSUCHRECORD              = -65554;$/;"	f	class:DNSSDException
NOT_INITIALIZED	mDNSShared/Java/DNSSDException.java	/^    public static final int		NOT_INITIALIZED           = -65545;$/;"	f	class:DNSSDException
NO_AUTO_RENAME	mDNSShared/Java/DNSSD.java	/^	public static final int		NO_AUTO_RENAME = ( 1 << 3 );$/;"	f	class:DNSSD
NO_AWACS	mDNSMacOSX/mDNSMacOSX.c	111;"	d	file:
NO_CACHE	mDNSShared/Java/DNSSDException.java	/^    public static final int		NO_CACHE                  = -65546;$/;"	f	class:DNSSDException
NO_CFUSERNOTIFICATION	mDNSMacOSX/helper.c	72;"	d	file:
NO_CFUSERNOTIFICATION	mDNSMacOSX/mDNSMacOSX.h	43;"	d
NO_D2D	mDNSMacOSX/mDNSMacOSX.c	110;"	d	file:
NO_ERROR	mDNSShared/Java/DNSSDException.java	/^    public static final int		NO_ERROR                  =  0;$/;"	f	class:DNSSDException
NO_HINFO	mDNSCore/mDNS.c	93;"	d	file:
NO_MEMORY	mDNSShared/Java/DNSSDException.java	/^    public static final int		NO_MEMORY                 = -65539;$/;"	f	class:DNSSDException
NO_SECURITYFRAMEWORK	mDNSMacOSX/helper-main.c	45;"	d	file:
NO_SECURITYFRAMEWORK	mDNSMacOSX/helper.c	73;"	d	file:
NO_SECURITYFRAMEWORK	mDNSMacOSX/mDNSMacOSX.h	42;"	d
NO_SUCH_NAME	mDNSShared/Java/DNSSDException.java	/^    public static final int		NO_SUCH_NAME              = -65538;$/;"	f	class:DNSSDException
NO_WCF	mDNSCore/mDNS.c	63;"	d	file:
NO_WCF	mDNSShared/uds_daemon.c	74;"	d	file:
NR_AdditionalTo	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord     *NR_AdditionalTo;    \/\/ Set if this record was selected by virtue of being additional to another$/;"	m	struct:AuthRecord_struct
NR_AnswerMulticast	mDNSCore/mDNS.c	102;"	d	file:
NR_AnswerTo	mDNSCore/mDNSEmbeddedAPI.h	/^    const mDNSu8   *NR_AnswerTo;        \/\/ Set if this record was selected by virtue of being a direct answer to a question$/;"	m	struct:AuthRecord_struct
NR_AnswerUnicast	mDNSCore/mDNS.c	103;"	d	file:
NSEC3CEProof	mDNSCore/nsec3.c	/^    NSEC3CEProof$/;"	e	enum:__anon108	file:
NSEC3ClosestEncloser	mDNSCore/nsec3.c	/^    NSEC3ClosestEncloser,$/;"	e	enum:__anon108	file:
NSEC3ClosestEncloserProof	mDNSCore/nsec3.c	/^mDNSlocal mDNSBool NSEC3ClosestEncloserProof(mDNS *const m, CacheRecord *ncr, domainname *name, CacheRecord **closestEncloser, CacheRecord **closerEncloser,$/;"	f
NSEC3Covers	mDNSCore/nsec3.c	/^    NSEC3Covers,$/;"	e	enum:__anon108	file:
NSEC3CoversName	mDNSCore/nsec3.c	/^mDNSlocal mDNSBool NSEC3CoversName(mDNS *const m, CacheRecord *ncr, const mDNSu8 *hashName, int hashLen, const mDNSu8 *b32Name,$/;"	f
NSEC3Find	mDNSCore/nsec3.c	/^mDNSlocal mDNSBool NSEC3Find(mDNS *const m, NSEC3FindValues val, CacheRecord *ncr, domainname *origName, CacheRecord **closestEncloser,$/;"	f
NSEC3FindValues	mDNSCore/nsec3.c	/^} NSEC3FindValues;$/;"	t	typeref:enum:__anon108	file:
NSEC3HashName	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *NSEC3HashName(const domainname *name, rdataNSEC3 *nsec3, const mDNSu8 *AnonData, int AnonDataLen,$/;"	f
NSEC3NameErrorProof	mDNSCore/nsec3.c	/^mDNSexport void NSEC3NameErrorProof(mDNS *const m, DNSSECVerifier *dv, CacheRecord *ncr)$/;"	f
NSEC3NoDataError	mDNSCore/nsec3.c	/^mDNSlocal mDNSBool NSEC3NoDataError(mDNS *const m, CacheRecord *ncr, domainname *name, mDNSu16 qtype, CacheRecord **closestEncloser)$/;"	f
NSEC3NoDataProof	mDNSCore/nsec3.c	/^mDNSexport void NSEC3NoDataProof(mDNS *const m, DNSSECVerifier *dv, CacheRecord *ncr)$/;"	f
NSEC3OptOut	mDNSCore/nsec3.c	/^mDNSlocal mDNSBool NSEC3OptOut(CacheRecord *cr)$/;"	f
NSEC3Parse	mDNSCore/DNSCommon.c	/^mDNSexport void NSEC3Parse(const ResourceRecord *const rr, mDNSu8 **salt, int *hashLength, mDNSu8 **nxtName, int *bitmaplen, mDNSu8 **bitmap)$/;"	f
NSEC3RecordIsDelegation	mDNSCore/nsec3.c	/^mDNSexport CacheRecord *NSEC3RecordIsDelegation(mDNS *const m, domainname *name, mDNSu16 qtype)$/;"	f
NSEC3SameName	mDNSCore/nsec3.c	/^mDNSlocal int NSEC3SameName(const mDNSu8 *name, int namelen, const mDNSu8 *nsecName, int nsecLen)$/;"	f
NSEC3WildcardAnswerProof	mDNSCore/nsec3.c	/^mDNSexport mDNSBool NSEC3WildcardAnswerProof(mDNS *const m, CacheRecord *ncr, DNSSECVerifier *dv)$/;"	f
NSEC3_FIXED_SIZE	mDNSCore/mDNSEmbeddedAPI.h	855;"	d
NSEC3_FLAGS_OPTOUT	mDNSCore/mDNSEmbeddedAPI.h	856;"	d
NSEC3_MAX_B32_LEN	mDNSCore/mDNSEmbeddedAPI.h	883;"	d
NSEC3_MAX_HASH_LEN	mDNSCore/mDNSEmbeddedAPI.h	880;"	d
NSEC3_MAX_ITERATIONS	mDNSCore/mDNSEmbeddedAPI.h	857;"	d
NSEC3_OPT_OUT	mDNSCore/dnssec.h	89;"	d
NSECAnswersENT	mDNSCore/nsec.c	/^mDNSlocal mDNSBool NSECAnswersENT(const ResourceRecord *const rr, domainname *qname)$/;"	f
NSECClosestEncloser	mDNSCore/nsec.c	/^mDNSlocal const domainname *NSECClosestEncloser(ResourceRecord *rr, domainname *qname)$/;"	f
NSECNameExists	mDNSCore/nsec.c	/^mDNSlocal int NSECNameExists(mDNS *const m, ResourceRecord *rr, domainname *name, mDNSu16 qtype)$/;"	f
NSECNoDataError	mDNSCore/nsec.c	/^mDNSlocal mDNSBool NSECNoDataError(mDNS *const m, ResourceRecord *rr, domainname *name, mDNSu16 qtype, domainname **wildcard)$/;"	f
NSECNoWildcard	mDNSCore/nsec.c	/^mDNSlocal mDNSBool NSECNoWildcard(mDNS *const m, ResourceRecord *rr, domainname *qname, mDNSu16 qtype)$/;"	f
NSECParentForQuestion	mDNSCore/nsec.c	/^mDNSlocal CacheRecord *NSECParentForQuestion(mDNS *const m, DNSQuestion *q)$/;"	f
NSECRecordIsDelegation	mDNSCore/nsec.c	/^mDNSexport CacheRecord *NSECRecordIsDelegation(mDNS *const m, domainname *name, mDNSu16 qtype)$/;"	f
NSEC_MCAST_WINDOW_SIZE	mDNSCore/mDNSEmbeddedAPI.h	992;"	d
NSEC_PROVES_NONAME_EXISTS	mDNSCore/dnssec.h	88;"	d
NSEC_PROVES_NOTYPE_EXISTS	mDNSCore/dnssec.h	87;"	d
NSIPCPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort NSIPCPort              = { { NSIPCPortAsNumber              >> 8, NSIPCPortAsNumber              & 0xFF } };$/;"	v
NSIPCPortAsNumber	mDNSCore/DNSCommon.c	59;"	d	file:
NSPCleanup	mDNSWindows/mdnsNSP/mdnsNSP.c	/^int	WSPAPI	NSPCleanup( LPGUID inProviderID )$/;"	f
NSPGetServiceClassInfo	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL int WSPAPI	NSPGetServiceClassInfo(	LPGUID inProviderID, LPDWORD ioSize, LPWSASERVICECLASSINFOW ioServiceClassInfo )$/;"	f
NSPInstallServiceClass	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL int WSPAPI	NSPInstallServiceClass( LPGUID inProviderID, LPWSASERVICECLASSINFOW inServiceClassInfo )$/;"	f
NSPLock	mDNSWindows/mdnsNSP/mdnsNSP.c	147;"	d	file:
NSPLookupServiceBegin	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	NSPLookupServiceBegin($/;"	f
NSPLookupServiceEnd	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL int WSPAPI	NSPLookupServiceEnd( HANDLE inLookup )$/;"	f
NSPLookupServiceNext	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	NSPLookupServiceNext(  $/;"	f
NSPRemoveServiceClass	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL int WSPAPI	NSPRemoveServiceClass( LPGUID inProviderID, LPGUID inServiceClassID )$/;"	f
NSPSetService	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	NSPSetService($/;"	f
NSPStartup	mDNSWindows/mdnsNSP/mdnsNSP.c	/^int WSPAPI	NSPStartup( LPGUID inProviderID, LPNSP_ROUTINE outRoutines )$/;"	f
NSPUnlock	mDNSWindows/mdnsNSP/mdnsNSP.c	148;"	d	file:
NSSCallback	mDNSCore/mDNS.c	/^mDNSlocal void NSSCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
NSSINSTPATH	mDNSPosix/Makefile	/^NSSINSTPATH := \/lib$/;"	m
NSSLIBFILE	mDNSPosix/Makefile	/^NSSLIBFILE  := $(NSSLIBNAME)-$(NSSVERSION).so$/;"	m
NSSLIBNAME	mDNSPosix/Makefile	/^NSSLIBNAME  := libnss_mdns$/;"	m
NSSLINKNAME	mDNSPosix/Makefile	/^NSSLINKNAME := $(NSSLIBNAME).so.2$/;"	m
NSSVERSION	mDNSPosix/Makefile	/^NSSVERSION  := 0.2$/;"	m
NS_DECL_IDNSSDBROWSELISTENER	Clients/FirefoxExtension/IDNSSDService.h	40;"	d
NS_DECL_IDNSSDRESOLVELISTENER	Clients/FirefoxExtension/IDNSSDService.h	113;"	d
NS_DECL_IDNSSDSERVICE	Clients/FirefoxExtension/IDNSSDService.h	192;"	d
NS_FORWARD_IDNSSDBROWSELISTENER	Clients/FirefoxExtension/IDNSSDService.h	44;"	d
NS_FORWARD_IDNSSDRESOLVELISTENER	Clients/FirefoxExtension/IDNSSDService.h	117;"	d
NS_FORWARD_IDNSSDSERVICE	Clients/FirefoxExtension/IDNSSDService.h	198;"	d
NS_FORWARD_SAFE_IDNSSDBROWSELISTENER	Clients/FirefoxExtension/IDNSSDService.h	48;"	d
NS_FORWARD_SAFE_IDNSSDRESOLVELISTENER	Clients/FirefoxExtension/IDNSSDService.h	121;"	d
NS_FORWARD_SAFE_IDNSSDSERVICE	Clients/FirefoxExtension/IDNSSDService.h	204;"	d
NS_NO_VTABLE	Clients/FirefoxExtension/IDNSSDService.h	15;"	d
NToH16	mDNSCore/DNSDigest.c	/^mDNSlocal mDNSu16 NToH16(mDNSu8 * bytes)$/;"	f
NToH32	mDNSCore/DNSDigest.c	/^mDNSlocal mDNSu32 NToH32(mDNSu8 * bytes)$/;"	f
NUM_ISOCODES	mDNSWindows/isocode.h	131;"	d
NUM_PROXY_TCP_CONNS	mDNSMacOSX/DNSProxySupport.c	29;"	d	file:
Name	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			public String	Name;$/;"	f	class:DNSServiceBrowser_NET.Form1.BrowseData
Name	Clients/SimpleChat.NET/SimpleChat.cs	/^        public String Name;$/;"	f	class:SimpleChat.NET.PeerData
NameCallback	mDNSPosix/Identify.c	/^mDNSlocal void NameCallback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
NameConflicts	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 NameConflicts;                  \/\/ Normal Name conflicts$/;"	m	struct:__anon92
NameErrorNSECCallback	mDNSCore/nsec.c	/^mDNSexport void NameErrorNSECCallback(mDNS *const m, DNSSECVerifier *dv, DNSSECStatus status)$/;"	f
NameErrorProof	mDNSCore/nsec.c	/^mDNSlocal void NameErrorProof(mDNS *const m, DNSSECVerifier *dv, CacheRecord *ncr)$/;"	f
NegativeCacheRecordForRR	mDNSCore/dnssec.c	/^mDNSlocal CacheRecord* NegativeCacheRecordForRR(mDNS *const m, const ResourceRecord *const rr)$/;"	f
NetBrowserInfo	mDNSMacOSX/BonjourEvents.c	/^} NetBrowserInfo;$/;"	t	typeref:struct:__anon150	file:
NetBrowserInfoCopyDescription	mDNSMacOSX/BonjourEvents.c	/^CFStringRef NetBrowserInfoCopyDescription(const void *value)$/;"	f
NetBrowserInfoCreate	mDNSMacOSX/BonjourEvents.c	/^NetBrowserInfo* NetBrowserInfoCreate(CFStringRef serviceType, CFStringRef domain, void* context)$/;"	f
NetBrowserInfoEqual	mDNSMacOSX/BonjourEvents.c	/^Boolean NetBrowserInfoEqual(const void *value1, const void *value2)$/;"	f
NetBrowserInfoHash	mDNSMacOSX/BonjourEvents.c	/^CFHashCode  NetBrowserInfoHash(const void *value)$/;"	f
NetBrowserInfoRelease	mDNSMacOSX/BonjourEvents.c	/^void NetBrowserInfoRelease(CFAllocatorRef allocator, const void* info)$/;"	f
NetBrowserInfoRetain	mDNSMacOSX/BonjourEvents.c	/^const void* NetBrowserInfoRetain(CFAllocatorRef allocator, const void* info)$/;"	f
NetWake	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 NetWake;                     \/\/ Set if Wake-On-Magic-Packet is enabled on this interface$/;"	m	struct:NetworkInterfaceInfo_struct
NetWakeBrowse	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion NetWakeBrowse;$/;"	m	struct:NetworkInterfaceInfo_struct
NetWakeInterface	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool NetWakeInterface(NetworkInterfaceInfoOSX *i)$/;"	f
NetWakeResolve	mDNSCore/mDNS.c	/^mDNSlocal void NetWakeResolve(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
NetWakeResolve	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion NetWakeResolve[3];      \/\/ For fault-tolerance, we try up to three Sleep Proxies$/;"	m	struct:NetworkInterfaceInfo_struct
NetworkChanged	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void NetworkChanged(SCDynamicStoreRef store, CFArrayRef changedKeys, void *context)$/;"	f
NetworkChanged	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSs32 NetworkChanged;$/;"	m	struct:mDNS_PlatformSupport_struct
NetworkChangedKey_BTMMConnectivity	mDNSMacOSX/mDNSMacOSX.c	/^static CFStringRef NetworkChangedKey_BTMMConnectivity = CFSTR("State:\/Network\/Connectivity");$/;"	v	file:
NetworkChangedKey_BackToMyMac	mDNSMacOSX/mDNSMacOSX.c	/^static CFStringRef NetworkChangedKey_BackToMyMac      = CFSTR("Setup:\/Network\/BackToMyMac");$/;"	v	file:
NetworkChangedKey_Computername	mDNSMacOSX/mDNSMacOSX.c	/^static CFStringRef NetworkChangedKey_Computername;$/;"	v	file:
NetworkChangedKey_DNS	mDNSMacOSX/mDNSMacOSX.c	/^static CFStringRef NetworkChangedKey_DNS;$/;"	v	file:
NetworkChangedKey_DynamicDNS	mDNSMacOSX/mDNSMacOSX.c	/^static CFStringRef NetworkChangedKey_DynamicDNS       = CFSTR("Setup:\/Network\/DynamicDNS");$/;"	v	file:
NetworkChangedKey_Hostnames	mDNSMacOSX/mDNSMacOSX.c	/^static CFStringRef NetworkChangedKey_Hostnames;$/;"	v	file:
NetworkChangedKey_IPv4	mDNSMacOSX/mDNSMacOSX.c	/^static CFStringRef NetworkChangedKey_IPv4;$/;"	v	file:
NetworkChangedKey_IPv6	mDNSMacOSX/mDNSMacOSX.c	/^static CFStringRef NetworkChangedKey_IPv6;$/;"	v	file:
NetworkChangedKey_PowerSettings	mDNSMacOSX/mDNSMacOSX.c	/^static CFStringRef NetworkChangedKey_PowerSettings    = CFSTR("State:\/IOKit\/PowerManagement\/CurrentSettings");$/;"	v	file:
NetworkChangedKey_StateInterfacePrefix	mDNSMacOSX/mDNSMacOSX.c	/^static CFStringRef NetworkChangedKey_StateInterfacePrefix;$/;"	v	file:
NetworkInterfaceInfo	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct NetworkInterfaceInfo_struct NetworkInterfaceInfo;$/;"	t	typeref:struct:NetworkInterfaceInfo_struct
NetworkInterfaceInfoOSX	mDNSMacOSX/mDNSMacOSX.h	/^typedef struct NetworkInterfaceInfoOSX_struct NetworkInterfaceInfoOSX;$/;"	t	typeref:struct:NetworkInterfaceInfoOSX_struct
NetworkInterfaceInfoOSX_struct	mDNSMacOSX/mDNSMacOSX.h	/^struct NetworkInterfaceInfoOSX_struct$/;"	s
NetworkInterfaceInfoVxWorks	mDNSVxWorks/mDNSVxWorks.h	/^struct  NetworkInterfaceInfoVxWorks$/;"	s
NetworkInterfaceInfoVxWorks	mDNSVxWorks/mDNSVxWorks.h	/^typedef struct  NetworkInterfaceInfoVxWorks NetworkInterfaceInfoVxWorks;$/;"	t	typeref:struct:NetworkInterfaceInfoVxWorks
NetworkInterfaceInfo_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct NetworkInterfaceInfo_struct$/;"	s
NetworkLayerPacket	mDNSCore/mDNSEmbeddedAPI.h	/^} NetworkLayerPacket;$/;"	t	typeref:union:__anon46
NewAddress	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv4Addr NewAddress;                          \/\/ May be updated with actual value assigned by gateway$/;"	m	struct:NATTraversalInfo_struct
NewContext	mDNSShared/Java/JNISupport.c	/^static OpContext    *NewContext( JNIEnv *pEnv, jobject owner,$/;"	f	file:
NewLLQ	mDNSShared/dnsextd.c	/^mDNSlocal LLQEntry *NewLLQ(DaemonInfo *d, struct sockaddr_in cli, domainname *qname, mDNSu16 qtype, mDNSu32 lease )$/;"	f
NewLocalOnlyQuestions	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion *NewLocalOnlyQuestions; \/\/ Fresh local-only or P2P questions not yet answered$/;"	m	struct:mDNS_struct
NewLocalOnlyRecords	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord     *NewLocalOnlyRecords;$/;"	m	struct:AuthGroup_struct
NewLocalOnlyRecords	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool NewLocalOnlyRecords;       \/\/ Fresh AuthRecords (local only) not yet delivered to our local questions$/;"	m	struct:mDNS_struct
NewLocalRecords	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord *NewLocalRecords;        \/\/ Fresh AuthRecords (public) not yet delivered to our local-only questions$/;"	m	struct:mDNS_struct
NewQuestions	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion *NewQuestions;          \/\/ Fresh questions not yet answered from cache$/;"	m	struct:mDNS_struct
NewRData	mDNSCore/mDNSEmbeddedAPI.h	/^    RData          *NewRData;           \/\/ Set if we are updating this record with new rdata$/;"	m	struct:AuthRecord_struct
NewRequest	mDNSShared/uds_daemon.c	/^mDNSlocal request_state *NewRequest(void)$/;"	f
NewResult	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus NewResult;                              \/\/ New error code; will be copied to Result just prior to invoking callback$/;"	m	struct:NATTraversalInfo_struct
Next	mDNSPosix/mDNSPosix.c	/^    struct  PosixEventSource    *Next;$/;"	m	struct:PosixEventSource	typeref:struct:PosixEventSource::PosixEventSource	file:
NextCacheCheck	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextCacheCheck;             \/\/ Next time to refresh cache record before it expires$/;"	m	struct:mDNS_struct
NextCacheCheckEvent	mDNSCore/mDNS.c	2867;"	d	file:
NextInCFList	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheRecord    *NextInCFList;       \/\/ Set if this is in the list of records we just received with the cache flush bit set$/;"	m	struct:CacheRecord_struct
NextInDQList	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion          *NextInDQList;$/;"	m	struct:DNSQuestion_struct
NextInKAList	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheRecord    *NextInKAList;       \/\/ Link to the next element in the chain of known answers to send$/;"	m	struct:CacheRecord_struct
NextQSendTime	mDNSCore/mDNSEmbeddedAPI.h	1850;"	d
NextRef	mDNSMacOSX/daemon.c	/^    uint32_t NextRef;$/;"	m	struct:DNSServiceRegistration	file:
NextRequiredQuery	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextRequiredQuery;          \/\/ In platform time units$/;"	m	struct:CacheRecord_struct
NextResponse	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord     *NextResponse;       \/\/ Link to the next element in the chain of responses to generate$/;"	m	struct:AuthRecord_struct
NextSPSAttempt	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextSPSAttempt;             \/\/ -1 if we're not currently attempting to register with any Sleep Proxy$/;"	m	struct:NetworkInterfaceInfo_struct
NextSPSAttemptTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextSPSAttemptTime;$/;"	m	struct:NetworkInterfaceInfo_struct
NextSRVUpdate	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextSRVUpdate;                  \/\/ Time to perform delayed update$/;"	m	struct:mDNS_struct
NextScheduledEvent	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextScheduledEvent;         \/\/ Derived from values below$/;"	m	struct:mDNS_struct
NextScheduledKA	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextScheduledKA;            \/\/ Next time to send Keepalive packets (SPS)$/;"	m	struct:mDNS_struct
NextScheduledNATOp	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextScheduledNATOp;         \/\/ Next time to send NAT-traversal packets$/;"	m	struct:mDNS_struct
NextScheduledProbe	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextScheduledProbe;         \/\/ Next time to probe for new authoritative record$/;"	m	struct:mDNS_struct
NextScheduledQuery	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextScheduledQuery;         \/\/ Next time to send query in its exponential backoff sequence$/;"	m	struct:mDNS_struct
NextScheduledResponse	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextScheduledResponse;      \/\/ Next time to send authoritative record(s) in responses$/;"	m	struct:mDNS_struct
NextScheduledSPRetry	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextScheduledSPRetry;       \/\/ Time next sleep proxy registration action is required.$/;"	m	struct:mDNS_struct
NextScheduledSPS	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextScheduledSPS;           \/\/ Next time to purge expiring Sleep Proxy records$/;"	m	struct:mDNS_struct
NextScheduledStopTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextScheduledStopTime;      \/\/ Next time to stop a question$/;"	m	struct:mDNS_struct
NextStatLogTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextStatLogTime;            \/\/ Next time to log statistics.$/;"	m	struct:mDNS_struct
NextUpdateCredit	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextUpdateCredit;           \/\/ Time next token is added to bucket$/;"	m	struct:AuthRecord_struct
NextuDNSEvent	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 NextuDNSEvent;                  \/\/ uDNS next event$/;"	m	struct:mDNS_struct
Nh	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Nl,Nh;$/;"	m	struct:MD5state_st
Nl	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Nl,Nh;$/;"	m	struct:MD5state_st
NoAnswer	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 NoAnswer;                        \/\/ Set if we want to suppress answers until tunnel setup has completed$/;"	m	struct:DNSQuestion_struct
NoAnswer_Fail	mDNSCore/mDNSEmbeddedAPI.h	/^enum { NoAnswer_Normal = 0, NoAnswer_Suspended = 1, NoAnswer_Fail = 2 };$/;"	e	enum:__anon83
NoAnswer_Normal	mDNSCore/mDNSEmbeddedAPI.h	/^enum { NoAnswer_Normal = 0, NoAnswer_Suspended = 1, NoAnswer_Fail = 2 };$/;"	e	enum:__anon83
NoAnswer_Suspended	mDNSCore/mDNSEmbeddedAPI.h	/^enum { NoAnswer_Normal = 0, NoAnswer_Suspended = 1, NoAnswer_Fail = 2 };$/;"	e	enum:__anon83
NoCacheAnswer	mDNSCore/mDNS.c	/^mDNSlocal void NoCacheAnswer(mDNS *const m, CacheRecord *rr)$/;"	f
NoDataNSECCallback	mDNSCore/nsec.c	/^mDNSexport void NoDataNSECCallback(mDNS *const m, DNSSECVerifier *dv, DNSSECStatus status)$/;"	f
NoDataProof	mDNSCore/nsec.c	/^mDNSlocal void NoDataProof(mDNS *const m, DNSSECVerifier *dv, CacheRecord *ncr)$/;"	f
NoResponseStatus	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 NoResponseStatus;$/;"	m	struct:__anon91
NoSuchServiceCallback	mDNSPosix/ProxyResponder.c	/^mDNSlocal void NoSuchServiceCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
NoTestQuery	mDNSCore/uDNS.c	/^mDNSlocal mDNSBool NoTestQuery(DNSQuestion *q)$/;"	f
NonZeroTime	mDNSCore/mDNSEmbeddedAPI.h	/^mDNSinline mDNSs32 NonZeroTime(mDNSs32 t) { if (t) return(t);else return(1);}$/;"	f
NormalMaxDNSMessageData	mDNSCore/mDNSEmbeddedAPI.h	502;"	d
NormalQueries	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 NormalQueries;                  \/\/ Queries with QU bit not set$/;"	m	struct:__anon92
NormalizeManufacturerName	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::NormalizeManufacturerName( const CString & name )$/;"	f	class:CThirdPage
NotAnInteger	Clients/dns-sd.c	/^typedef union { unsigned char b[2]; unsigned short NotAnInteger; } Opaque16;$/;"	m	union:__anon171	file:
NotAnInteger	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[ 2]; mDNSu16 NotAnInteger; } mDNSOpaque16;$/;"	m	union:__anon31
NotAnInteger	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[ 4]; mDNSu32 NotAnInteger; } mDNSOpaque32;$/;"	m	union:__anon32
NotAnInteger	mDNSMacOS9/Responder.c	/^typedef union { UInt8 b[2]; UInt16 NotAnInteger; } mDNSOpaque16;$/;"	m	union:__anon183	file:
NotAnInteger	mDNSMacOS9/Searcher.c	/^typedef union { UInt8 b[2]; UInt16 NotAnInteger; } mDNSOpaque16;$/;"	m	union:__anon185	file:
NoteSignal	mDNSPosix/mDNSPosix.c	/^mDNSlocal void  NoteSignal(int signum)$/;"	f
NotificationCallBackDismissed	mDNSMacOSX/helper.c	/^static void NotificationCallBackDismissed(CFUserNotificationRef userNotification, CFOptionFlags responseFlags)$/;"	f	file:
NotifyOfElusiveBug	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void NotifyOfElusiveBug(const char *title, const char *msg)  \/\/ Both strings are UTF-8 text$/;"	f
NotifySD	mDNSPosix/mDNSPosix.c	/^    int NotifySD;$/;"	m	struct:IfChangeRec	file:
NotifyUser	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSs32 NotifyUser;$/;"	m	struct:mDNS_PlatformSupport_struct
NumAAAA	mDNSPosix/Identify.c	/^static volatile int NumAnswers, NumAddr, NumAAAA, NumHINFO;$/;"	v	file:
NumAdditionals	mDNSPosix/NetMonitor.c	/^static int NumProbes, NumGoodbyes, NumQuestions, NumLegacy, NumAnswers, NumAdditionals;$/;"	v	file:
NumAddr	mDNSPosix/Identify.c	/^static volatile int NumAnswers, NumAddr, NumAAAA, NumHINFO;$/;"	v	file:
NumAnswers	mDNSPosix/Identify.c	/^static volatile int NumAnswers, NumAddr, NumAAAA, NumHINFO;$/;"	v	file:
NumAnswers	mDNSPosix/NetMonitor.c	/^static int NumProbes, NumGoodbyes, NumQuestions, NumLegacy, NumAnswers, NumAdditionals;$/;"	v	file:
NumCacheRecordsForInterfaceID	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu32 NumCacheRecordsForInterfaceID(const mDNS *const m, mDNSInterfaceID id)$/;"	f
NumFailedProbes	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 NumFailedProbes;$/;"	m	struct:mDNS_struct
NumGoodbyes	mDNSPosix/NetMonitor.c	/^static int NumProbes, NumGoodbyes, NumQuestions, NumLegacy, NumAnswers, NumAdditionals;$/;"	v	file:
NumHINFO	mDNSPosix/Identify.c	/^static volatile int NumAnswers, NumAddr, NumAAAA, NumHINFO;$/;"	v	file:
NumLegacy	mDNSPosix/NetMonitor.c	/^static int NumProbes, NumGoodbyes, NumQuestions, NumLegacy, NumAnswers, NumAdditionals;$/;"	v	file:
NumPackets	mDNSCore/dnssec.h	/^    mDNSu8 NumPackets;              \/\/ Number of packets that we send on the wire for DNSSEC verification.$/;"	m	struct:DNSSECVerifier_struct
NumPktB	mDNSPosix/NetMonitor.c	/^static int NumPktQ, NumPktL, NumPktR, NumPktB;  \/\/ Query\/Legacy\/Response\/Bad$/;"	v	file:
NumPktL	mDNSPosix/NetMonitor.c	/^static int NumPktQ, NumPktL, NumPktR, NumPktB;  \/\/ Query\/Legacy\/Response\/Bad$/;"	v	file:
NumPktQ	mDNSPosix/NetMonitor.c	/^static int NumPktQ, NumPktL, NumPktR, NumPktB;  \/\/ Query\/Legacy\/Response\/Bad$/;"	v	file:
NumPktR	mDNSPosix/NetMonitor.c	/^static int NumPktQ, NumPktL, NumPktR, NumPktB;  \/\/ Query\/Legacy\/Response\/Bad$/;"	v	file:
NumProbes	mDNSPosix/NetMonitor.c	/^static int NumProbes, NumGoodbyes, NumQuestions, NumLegacy, NumAnswers, NumAdditionals;$/;"	v	file:
NumProbesSent	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 NumProbesSent;      \/\/ Number of probes sent$/;"	m	struct:__anon91
NumQueries	mDNSPosix/NetMonitor.c	/^    mDNSu32 NumQueries;$/;"	m	struct:__anon19	file:
NumQuestions	mDNSPosix/NetMonitor.c	/^static int NumProbes, NumGoodbyes, NumQuestions, NumLegacy, NumAnswers, NumAdditionals;$/;"	v	file:
NumSubTypes	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 NumSubTypes;$/;"	m	struct:ServiceRecordSet_struct
NumSubTypes	mDNSMacOSX/daemon.c	/^    int NumSubTypes;$/;"	m	struct:DNSServiceRegistration	file:
NumUnicastDNSServers	mDNSCore/uDNS.c	/^mDNSu8 NumUnicastDNSServers = 0;$/;"	v
NumVersionBuild	mDNSShared/CommonServices.h	1182;"	d
NumVersionExtractBugFix	mDNSShared/CommonServices.h	1192;"	d
NumVersionExtractMajor	mDNSShared/CommonServices.h	1189;"	d
NumVersionExtractMinor	mDNSShared/CommonServices.h	1191;"	d
NumVersionExtractMinorAndBugFix	mDNSShared/CommonServices.h	1190;"	d
NumVersionExtractRevision	mDNSShared/CommonServices.h	1194;"	d
NumVersionExtractStage	mDNSShared/CommonServices.h	1193;"	d
OBJDIR	mDNSPosix/Makefile	/^OBJDIR = objects\/debug$/;"	m
OBJDIR	mDNSPosix/Makefile	/^OBJDIR ?= objects\/prod$/;"	m
OBJDIR	mDNSWindows/Java/makefile	/^OBJDIR = objects\\debug$/;"	m
OBJDIR	mDNSWindows/Java/makefile	/^OBJDIR = objects\\prod$/;"	m
ONE_HOUR	mDNSMacOSX/mDNSMacOSX.c	1494;"	d	file:
ONLYSYSTEMTASKcode	mDNSMacOS9/mDNSMacOS9.c	/^static OTEventCode ONLYSYSTEMTASKcode;$/;"	v	file:
ONLYSYSTEMTASKcontextPtr	mDNSMacOS9/mDNSMacOS9.c	/^static void       *ONLYSYSTEMTASKcontextPtr;$/;"	v	file:
ONLYSYSTEMTASKcookie	mDNSMacOS9/mDNSMacOS9.c	/^static void       *ONLYSYSTEMTASKcookie;$/;"	v	file:
ONLYSYSTEMTASKevent	mDNSMacOS9/mDNSMacOS9.c	/^static Boolean ONLYSYSTEMTASKevent;$/;"	v	file:
ONLYSYSTEMTASKresult	mDNSMacOS9/mDNSMacOS9.c	/^static OTResult ONLYSYSTEMTASKresult;$/;"	v	file:
OPBanner	mDNSPosix/NetMonitor.c	129;"	d	file:
OPTINSTALL	mDNSPosix/Makefile	/^OPTINSTALL   = InstalledNSS$/;"	m
OPTIONALTARG	mDNSPosix/Makefile	/^OPTIONALTARG = nss_mdns$/;"	m
OP_NumTypes	mDNSPosix/NetMonitor.c	/^    OP_NumTypes = 6$/;"	e	enum:__anon17	file:
OP_answer	mDNSPosix/NetMonitor.c	/^    OP_answer       = 3,$/;"	e	enum:__anon17	file:
OP_browsea	mDNSPosix/NetMonitor.c	/^    OP_browsea      = 3,$/;"	e	enum:__anon17	file:
OP_browsegroup	mDNSPosix/NetMonitor.c	/^    OP_browsegroup  = 2,$/;"	e	enum:__anon17	file:
OP_browseq	mDNSPosix/NetMonitor.c	/^    OP_browseq      = 2,$/;"	e	enum:__anon17	file:
OP_goodbye	mDNSPosix/NetMonitor.c	/^    OP_goodbye      = 1,$/;"	e	enum:__anon17	file:
OP_probe	mDNSPosix/NetMonitor.c	/^    OP_probe        = 0,$/;"	e	enum:__anon17	file:
OP_query	mDNSPosix/NetMonitor.c	/^    OP_query        = 2,$/;"	e	enum:__anon17	file:
OP_resolvea	mDNSPosix/NetMonitor.c	/^    OP_resolvea     = 5,$/;"	e	enum:__anon17	file:
OP_resolvegroup	mDNSPosix/NetMonitor.c	/^    OP_resolvegroup = 4,$/;"	e	enum:__anon17	file:
OP_resolveq	mDNSPosix/NetMonitor.c	/^    OP_resolveq     = 4,$/;"	e	enum:__anon17	file:
OSStatus	mDNSShared/CommonServices.h	/^typedef int32_t OSStatus;$/;"	t
OSXVers	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int OSXVers, iOSVers;$/;"	v
OSX_VER	mDNSMacOSX/mDNSMacOSX.c	10368;"	d	file:
OSX_VER_LEN	mDNSMacOSX/mDNSMacOSX.c	10369;"	d	file:
OTCARBONAPPLICATION	mDNSMacOS9/mDNSPrefix.h	32;"	d
OTCARBONAPPLICATION	mDNSMacOS9/mDNSPrefix.h	38;"	d
OTTimerTask	mDNSMacOS9/mDNSMacOS9.h	/^    long OTTimerTask;$/;"	m	struct:mDNS_PlatformSupport_struct
Occulting	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSu8 Occulting;                           \/\/ Set if interface vanished for less than 60 seconds and then came back$/;"	m	struct:NetworkInterfaceInfoOSX_struct
OfferSleepProxyService	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int OfferSleepProxyService = 0;$/;"	v
OffsetAddToHead	mDNSShared/GenLinkedList.c	/^void        OffsetAddToHead( GenLinkedOffsetList *pList, void *elem)$/;"	f
OffsetAddToTail	mDNSShared/GenLinkedList.c	/^void        OffsetAddToTail( GenLinkedOffsetList *pList, void *elem)$/;"	f
OffsetRemoveFromList	mDNSShared/GenLinkedList.c	/^int     OffsetRemoveFromList( GenLinkedOffsetList *pList, void *elem)$/;"	f
OffsetReplaceElem	mDNSShared/GenLinkedList.c	/^int         OffsetReplaceElem( GenLinkedOffsetList *pList, void *elemInList, void *newElem)$/;"	f
OnAbout	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::OnAbout() $/;"	f	class:ChooserDialog
OnActivate	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void ChooserDialog::OnActivate( UINT nState, CWnd* pWndOther, BOOL bMinimized )$/;"	f	class:ChooserDialog
OnAddPrinter	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnAddPrinter($/;"	f	class:CPrinterSetupWizardSheet
OnAddPrinter	Clients/PrinterSetupWizard/SecondPage.cpp	/^CSecondPage::OnAddPrinter($/;"	f	class:CSecondPage
OnAddRegistrationDomain	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::OnAddRegistrationDomain( CString & domain )$/;"	f	class:CSecondPage
OnAddService	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnAddService($/;"	f	class:CPrinterSetupWizardSheet
OnBattery	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool OnBattery(void)$/;"	f
OnBnClickedAddBrowseDomain	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CBrowsingPage::OnBnClickedAddBrowseDomain()$/;"	f	class:CBrowsingPage
OnBnClickedAdvertise	mDNSWindows/ControlPanel/SecondPage.cpp	/^void CSecondPage::OnBnClickedAdvertise()$/;"	f	class:CSecondPage
OnBnClickedAdvertiseSMB	mDNSWindows/ControlPanel/ServicesPage.cpp	/^void CServicesPage::OnBnClickedAdvertiseSMB()$/;"	f	class:CServicesPage
OnBnClickedAdvertiseServices	mDNSWindows/ControlPanel/RegistrationPage.cpp	/^void CRegistrationPage::OnBnClickedAdvertiseServices()$/;"	f	class:CRegistrationPage
OnBnClickedDefaultPrinter	Clients/PrinterSetupWizard/ThirdPage.cpp	/^void CThirdPage::OnBnClickedDefaultPrinter()$/;"	f	class:CThirdPage
OnBnClickedHaveDisk	Clients/PrinterSetupWizard/ThirdPage.cpp	/^void CThirdPage::OnBnClickedHaveDisk()$/;"	f	class:CThirdPage
OnBnClickedPowerManagement	mDNSWindows/ControlPanel/FourthPage.cpp	/^void CFourthPage::OnBnClickedPowerManagement()$/;"	f	class:CFourthPage
OnBnClickedPowerManagement	mDNSWindows/ControlPanel/ServicesPage.cpp	/^void CServicesPage::OnBnClickedPowerManagement()$/;"	f	class:CServicesPage
OnBnClickedRemoveBrowseDomain	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CBrowsingPage::OnBnClickedRemoveBrowseDomain()$/;"	f	class:CBrowsingPage
OnBnClickedSharedSecret	mDNSWindows/ControlPanel/SecondPage.cpp	/^void CSecondPage::OnBnClickedSharedSecret()$/;"	f	class:CSecondPage
OnBrowse	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnBrowse($/;"	f	class:CPrinterSetupWizardSheet
OnBrowserCallBack	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	/^	BrowserDialog::OnBrowserCallBack( $/;"	f	class:BrowserDialog
OnBrowserListDoubleClick	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	/^void	BrowserDialog::OnBrowserListDoubleClick( NMHDR *pNMHDR, LRESULT *pResult ) $/;"	f	class:BrowserDialog
OnCancel	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void ChooserDialog::OnCancel() $/;"	f	class:ChooserDialog
OnCbnEditChange	mDNSWindows/ControlPanel/SecondPage.cpp	/^void CSecondPage::OnCbnEditChange()$/;"	f	class:CSecondPage
OnCbnSelChange	mDNSWindows/ControlPanel/SecondPage.cpp	/^void CSecondPage::OnCbnSelChange()$/;"	f	class:CSecondPage
OnChooserListChanged	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::OnChooserListChanged( NMHDR *pNMHDR, LRESULT *pResult ) $/;"	f	class:ChooserDialog
OnChooserListDoubleClick	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::OnChooserListDoubleClick( NMHDR *pNMHDR, LRESULT *pResult )$/;"	f	class:ChooserDialog
OnClose	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void ChooserDialog::OnClose() $/;"	f	class:ChooserDialog
OnCommand	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^BOOL CPrinterSetupWizardSheet::OnCommand(WPARAM wParam, LPARAM lParam)$/;"	f	class:CPrinterSetupWizardSheet
OnCommand	mDNSWindows/ControlPanel/ConfigPropertySheet.cpp	/^CConfigPropertySheet::OnCommand(WPARAM wParam, LPARAM lParam)$/;"	f	class:CConfigPropertySheet
OnContextMenu	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnContextMenu(CWnd * pWnd, CPoint pos)$/;"	f	class:CPrinterSetupWizardSheet
OnCplMsg	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApp::OnCplMsg(HWND hWndCPl, UINT uMsg, LPARAM lParam1, LPARAM lParam2)$/;"	f	class:CCPApp
OnCreate	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^int	ExplorerBarWindow::OnCreate( LPCREATESTRUCT inCreateStruct )$/;"	f	class:ExplorerBarWindow
OnCtlColor	Clients/ExplorerPlugin/About.cpp	/^HBRUSH CAbout::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)$/;"	f	class:CAbout
OnDataReady	mDNSWindows/ControlPanel/ConfigPropertySheet.cpp	/^CConfigPropertySheet::OnDataReady(WPARAM inWParam, LPARAM inLParam)$/;"	f	class:CConfigPropertySheet
OnDestroy	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^void	ExplorerBarWindow::OnDestroy( void ) $/;"	f	class:ExplorerBarWindow
OnDomainAdd	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^LONG	ChooserDialog::OnDomainAdd( WPARAM inWParam, LPARAM inLParam )$/;"	f	class:ChooserDialog
OnDomainListChanged	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::OnDomainListChanged( NMHDR *pNMHDR, LRESULT *pResult ) $/;"	f	class:ChooserDialog
OnDomainRemove	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^LONG	ChooserDialog::OnDomainRemove( WPARAM inWParam, LPARAM inLParam )$/;"	f	class:ChooserDialog
OnDoubleClick	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^void	ExplorerBarWindow::OnDoubleClick( NMHDR *inNMHDR, LRESULT *outResult )$/;"	f	class:ExplorerBarWindow
OnEnChangeHostname	mDNSWindows/ControlPanel/RegistrationPage.cpp	/^void CRegistrationPage::OnEnChangeHostname()$/;"	f	class:CRegistrationPage
OnEnChangePassword	mDNSWindows/ControlPanel/RegistrationPage.cpp	/^void CRegistrationPage::OnEnChangePassword()$/;"	f	class:CRegistrationPage
OnEnChangeUsername	mDNSWindows/ControlPanel/RegistrationPage.cpp	/^void CRegistrationPage::OnEnChangeUsername()$/;"	f	class:CRegistrationPage
OnEndDialog	mDNSWindows/ControlPanel/ConfigPropertySheet.cpp	/^CConfigPropertySheet::OnEndDialog()$/;"	f	class:CConfigPropertySheet
OnExit	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApp::OnExit()$/;"	f	class:CCPApp
OnExit	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void ChooserDialog::OnExit() $/;"	f	class:ChooserDialog
OnFileClose	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void ChooserDialog::OnFileClose() $/;"	f	class:ChooserDialog
OnInit	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApp::OnInit()$/;"	f	class:CCPApp
OnInitDialog	Clients/ExplorerPlugin/About.cpp	/^CAbout::OnInitDialog()$/;"	f	class:CAbout
OnInitDialog	Clients/ExplorerPlugin/LoginDialog.cpp	/^BOOL	LoginDialog::OnInitDialog( void )$/;"	f	class:LoginDialog
OnInitDialog	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^BOOL CPrinterSetupWizardSheet::OnInitDialog()$/;"	f	class:CPrinterSetupWizardSheet
OnInitDialog	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CAddBrowseDomain::OnInitDialog()$/;"	f	class:CAddBrowseDomain
OnInitDialog	mDNSWindows/ControlPanel/ConfigPropertySheet.cpp	/^CConfigPropertySheet::OnInitDialog()$/;"	f	class:CConfigPropertySheet
OnInitDialog	mDNSWindows/ControlPanel/ServicesPage.cpp	/^CPowerManagementWarning::OnInitDialog()$/;"	f	class:CPowerManagementWarning
OnInitDialog	mDNSWindows/DNSServiceBrowser/Windows/Sources/AboutDialog.cpp	/^BOOL	AboutDialog::OnInitDialog() $/;"	f	class:AboutDialog
OnInitDialog	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^BOOL	ChooserDialog::OnInitDialog( void )$/;"	f	class:ChooserDialog
OnInitDialog	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.cpp	/^BOOL	LoginDialog::OnInitDialog( void )$/;"	f	class:LoginDialog
OnInitDialog	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	/^BOOL	BrowserDialog::OnInitDialog()$/;"	f	class:BrowserDialog
OnInitMenuPopup	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::OnInitMenuPopup( CMenu *pPopupMenu, UINT nIndex, BOOL bSysMenu ) $/;"	f	class:ChooserDialog
OnInitPage	Clients/PrinterSetupWizard/FourthPage.cpp	/^CFourthPage::OnInitPage()$/;"	f	class:CFourthPage
OnInitPage	Clients/PrinterSetupWizard/ThirdPage.cpp	/^OSStatus CThirdPage::OnInitPage()$/;"	f	class:CThirdPage
OnInquire	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApplet::OnInquire(CPLINFO* pInfo)$/;"	f	class:CCPApplet
OnKillActive	Clients/PrinterSetupWizard/FirstPage.cpp	/^CFirstPage::OnKillActive()$/;"	f	class:CFirstPage
OnKillActive	Clients/PrinterSetupWizard/FourthPage.cpp	/^CFourthPage::OnKillActive()$/;"	f	class:CFourthPage
OnKillActive	Clients/PrinterSetupWizard/SecondPage.cpp	/^CSecondPage::OnKillActive()$/;"	f	class:CSecondPage
OnKillActive	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::OnKillActive()$/;"	f	class:CThirdPage
OnLvnItemchangedBrowseList	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CBrowsingPage::OnLvnItemchangedBrowseList(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CBrowsingPage
OnLvnItemchangedManufacturer	Clients/PrinterSetupWizard/ThirdPage.cpp	/^void CThirdPage::OnLvnItemchangedManufacturer(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CThirdPage
OnLvnItemchangedPrinterModel	Clients/PrinterSetupWizard/ThirdPage.cpp	/^void CThirdPage::OnLvnItemchangedPrinterModel(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CThirdPage
OnNcDestroy	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void ChooserDialog::OnNcDestroy() $/;"	f	class:ChooserDialog
OnNewInquire	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApplet::OnNewInquire(NEWCPLINFO* pInfo)$/;"	f	class:CCPApplet
OnNmClickBrowseList	Clients/PrinterSetupWizard/SecondPage.cpp	/^void CSecondPage::OnNmClickBrowseList(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CSecondPage
OnOK	Clients/ExplorerPlugin/LoginDialog.cpp	/^void	LoginDialog::OnOK( void )$/;"	f	class:LoginDialog
OnOK	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnOK()$/;"	f	class:CPrinterSetupWizardSheet
OnOK	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CAddBrowseDomain::OnOK()$/;"	f	class:CAddBrowseDomain
OnOK	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CBrowsingPage::OnOK()$/;"	f	class:CBrowsingPage
OnOK	mDNSWindows/ControlPanel/FourthPage.cpp	/^CFourthPage::OnOK()$/;"	f	class:CFourthPage
OnOK	mDNSWindows/ControlPanel/RegistrationPage.cpp	/^CRegistrationPage::OnOK()$/;"	f	class:CRegistrationPage
OnOK	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::OnOK()$/;"	f	class:CSecondPage
OnOK	mDNSWindows/ControlPanel/ServicesPage.cpp	/^CPowerManagementWarning::OnOK()$/;"	f	class:CPowerManagementWarning
OnOK	mDNSWindows/ControlPanel/ServicesPage.cpp	/^CServicesPage::OnOK()$/;"	f	class:CServicesPage
OnOK	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.cpp	/^void	LoginDialog::OnOK( void )$/;"	f	class:LoginDialog
OnProcessEvent	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnProcessEvent(WPARAM inWParam, LPARAM inLParam)$/;"	f	class:CPrinterSetupWizardSheet
OnQuery	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnQuery($/;"	f	class:CPrinterSetupWizardSheet
OnReadMessage	Clients/SimpleChat.NET/SimpleChat.cs	/^        OnReadMessage$/;"	m	class:SimpleChat.NET.SimpleChat	file:
OnReadSocket	Clients/SimpleChat.NET/SimpleChat.cs	/^		OnReadSocket$/;"	m	class:SimpleChat.NET.SimpleChat	file:
OnRemovePrinter	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnRemovePrinter( Printer * printer, bool moreComing )$/;"	f	class:CPrinterSetupWizardSheet
OnRemovePrinter	Clients/PrinterSetupWizard/SecondPage.cpp	/^CSecondPage::OnRemovePrinter($/;"	f	class:CSecondPage
OnRemoveRegistrationDomain	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::OnRemoveRegistrationDomain( CString & domain )$/;"	f	class:CSecondPage
OnRemoveService	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnRemoveService( Service * service )$/;"	f	class:CPrinterSetupWizardSheet
OnResolve	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^LONG	ExplorerBarWindow::OnResolve( ResolveInfo * resolve )$/;"	f	class:ExplorerBarWindow
OnResolve	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnResolve($/;"	f	class:CPrinterSetupWizardSheet
OnResolve	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^LONG	ChooserDialog::OnResolve( WPARAM inWParam, LPARAM inLParam )$/;"	f	class:ChooserDialog
OnResolveService	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnResolveService( Service * service )$/;"	f	class:CPrinterSetupWizardSheet
OnResolveService	Clients/PrinterSetupWizard/SecondPage.cpp	/^CSecondPage::OnResolveService( Service * service )$/;"	f	class:CSecondPage
OnRun	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApplet::OnRun(CWnd* pParentWnd)$/;"	f	class:CCPApplet
OnSelect	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApplet::OnSelect()$/;"	f	class:CCPApplet
OnServiceAdd	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^LONG	ExplorerBarWindow::OnServiceAdd( ServiceInfo * service )$/;"	f	class:ExplorerBarWindow
OnServiceAdd	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^LONG	ChooserDialog::OnServiceAdd( WPARAM inWParam, LPARAM inLParam )$/;"	f	class:ChooserDialog
OnServiceAdd	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	/^LONG	BrowserDialog::OnServiceAdd( WPARAM inWParam, LPARAM inLParam )$/;"	f	class:BrowserDialog
OnServiceEvent	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^ExplorerBarWindow::OnServiceEvent(WPARAM inWParam, LPARAM inLParam)$/;"	f	class:ExplorerBarWindow
OnServiceListChanged	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::OnServiceListChanged( NMHDR *pNMHDR, LRESULT *pResult ) $/;"	f	class:ChooserDialog
OnServiceRemove	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^LONG	ExplorerBarWindow::OnServiceRemove( ServiceInfo * service )$/;"	f	class:ExplorerBarWindow
OnServiceRemove	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^LONG	ChooserDialog::OnServiceRemove( WPARAM inWParam, LPARAM inLParam )$/;"	f	class:ChooserDialog
OnServiceRemove	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	/^LONG	BrowserDialog::OnServiceRemove( WPARAM inWParam, LPARAM inLParam )$/;"	f	class:BrowserDialog
OnSetActive	Clients/PrinterSetupWizard/FirstPage.cpp	/^CFirstPage::OnSetActive()$/;"	f	class:CFirstPage
OnSetActive	Clients/PrinterSetupWizard/FourthPage.cpp	/^CFourthPage::OnSetActive()$/;"	f	class:CFourthPage
OnSetActive	Clients/PrinterSetupWizard/SecondPage.cpp	/^CSecondPage::OnSetActive()$/;"	f	class:CSecondPage
OnSetActive	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::OnSetActive()$/;"	f	class:CThirdPage
OnSetActive	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CBrowsingPage::OnSetActive()$/;"	f	class:CBrowsingPage
OnSetActive	mDNSWindows/ControlPanel/FourthPage.cpp	/^CFourthPage::OnSetActive()$/;"	f	class:CFourthPage
OnSetActive	mDNSWindows/ControlPanel/RegistrationPage.cpp	/^CRegistrationPage::OnSetActive()$/;"	f	class:CRegistrationPage
OnSetActive	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::OnSetActive()$/;"	f	class:CSecondPage
OnSetActive	mDNSWindows/ControlPanel/ServicesPage.cpp	/^CServicesPage::OnSetActive()$/;"	f	class:CServicesPage
OnSetCursor	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnSetCursor(CWnd * pWnd, UINT nHitTest, UINT message)$/;"	f	class:CPrinterSetupWizardSheet
OnSetCursor	Clients/PrinterSetupWizard/SecondPage.cpp	/^CSecondPage::OnSetCursor(CWnd * pWnd, UINT nHitTest, UINT message)$/;"	f	class:CSecondPage
OnSize	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^void	ExplorerBarWindow::OnSize( UINT inType, int inX, int inY ) $/;"	f	class:ExplorerBarWindow
OnSocketEvent	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OnSocketEvent(WPARAM inWParam, LPARAM inLParam)$/;"	f	class:CPrinterSetupWizardSheet
OnStartParms	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApplet::OnStartParms(CWnd * pParentWnd, LPCTSTR extra)$/;"	f	class:CCPApplet
OnStop	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApplet::OnStop()$/;"	f	class:CCPApplet
OnSysCommand	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::OnSysCommand( UINT inID, LPARAM inParam ) $/;"	f	class:ChooserDialog
OnTvnKeyDownBrowseList	Clients/PrinterSetupWizard/SecondPage.cpp	/^void CSecondPage::OnTvnKeyDownBrowseList( NMHDR * pNMHDR, LRESULT * pResult)$/;"	f	class:CSecondPage
OnTvnSelchangedBrowseList	Clients/PrinterSetupWizard/SecondPage.cpp	/^void CSecondPage::OnTvnSelchangedBrowseList(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CSecondPage
OpContext	mDNSShared/Java/JNISupport.c	/^struct  OpContext$/;"	s	file:
OpContext	mDNSShared/Java/JNISupport.c	/^typedef struct OpContext OpContext;$/;"	t	typeref:struct:OpContext	file:
Opaque16	Clients/dns-sd.c	/^typedef union { unsigned char b[2]; unsigned short NotAnInteger; } Opaque16;$/;"	t	typeref:union:__anon171	file:
OpenIfNotifySocket	mDNSPosix/mDNSPosix.c	/^mDNSlocal mStatus OpenIfNotifySocket(int *pFD)$/;"	f
OperationFailed	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^        public void OperationFailed$/;"	m	class:DNSServiceBrowser_NET.Form1
OperationFailed	Clients/SimpleChat.NET/SimpleChat.cs	/^        OperationFailed$/;"	m	class:SimpleChat.NET.SimpleChat
OrderQueueFunc	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OrderQueueFunc( const Queue * q1, const Queue * q2 )$/;"	f	class:CPrinterSetupWizardSheet
OrderServiceFunc	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::OrderServiceFunc( const Service * a, const Service * b )$/;"	f	class:CPrinterSetupWizardSheet
OrigRDLen	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 OrigRDLen;      \/\/ previously registered, being deleted$/;"	m	struct:AuthRecord_struct
OrigRData	mDNSCore/mDNSEmbeddedAPI.h	/^    RData *OrigRData;$/;"	m	struct:AuthRecord_struct
OwnerOptData	mDNSCore/mDNSEmbeddedAPI.h	/^} OwnerOptData;$/;"	t	typeref:struct:__anon54
P2PPacketFilterAddBonjourRuleSet	mDNSMacOSX/P2PPacketFilter.c	/^int P2PPacketFilterAddBonjourRuleSet(const char * interfaceName, u_int32_t count, pfArray_t portArray, pfArray_t protocolArray )$/;"	f
P2PPacketFilterClearBonjourRules	mDNSMacOSX/P2PPacketFilter.c	/^int P2PPacketFilterClearBonjourRules()$/;"	f
P2P_NAME	mDNSShared/Java/JNISupport.c	920;"	d	file:
PACKET_RATE	mDNSMacOSX/mDNSMacOSX.c	1495;"	d	file:
PBM_SETMARQUEE	Clients/PrinterSetupWizard/FourthPage.cpp	28;"	d	file:
PBS_MARQUEE	Clients/PrinterSetupWizard/FourthPage.cpp	24;"	d	file:
PCONFIG_INFO_DATA_1	Clients/PrinterSetupWizard/tcpxcv.h	/^}   CONFIG_INFO_DATA_1, *PCONFIG_INFO_DATA_1;$/;"	t	typeref:struct:_CONFIG_INFO_DATA_1
PCPNonce	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 PCPNonce[3];                        \/\/ the nonce if using PCP$/;"	m	struct:mDNS_struct
PCPOp_Announce	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPOp_Announce = 0,$/;"	e	enum:__anon63
PCPOp_Map	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPOp_Map      = 1$/;"	e	enum:__anon63
PCPOp_t	mDNSCore/mDNSEmbeddedAPI.h	/^} PCPOp_t;$/;"	t	typeref:enum:__anon63
PCPProto_All	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPProto_All = 0,$/;"	e	enum:__anon64
PCPProto_TCP	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPProto_TCP = 6,$/;"	e	enum:__anon64
PCPProto_UDP	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPProto_UDP = 17$/;"	e	enum:__anon64
PCPProto_t	mDNSCore/mDNSEmbeddedAPI.h	/^} PCPProto_t;$/;"	t	typeref:enum:__anon64
PCPResult_AddrMismatch	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_AddrMismatch    = 12,$/;"	e	enum:__anon65
PCPResult_CantProvideExt	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_CantProvideExt  = 11,$/;"	e	enum:__anon65
PCPResult_ExcesRemotePeer	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_ExcesRemotePeer = 13$/;"	e	enum:__anon65
PCPResult_MalformedOption	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_MalformedOption = 6,$/;"	e	enum:__anon65
PCPResult_MalformedReq	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_MalformedReq    = 3,$/;"	e	enum:__anon65
PCPResult_NetworkFailure	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_NetworkFailure  = 7,$/;"	e	enum:__anon65
PCPResult_NoResources	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_NoResources     = 8,$/;"	e	enum:__anon65
PCPResult_NotAuthorized	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_NotAuthorized   = 2,$/;"	e	enum:__anon65
PCPResult_Success	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_Success         = 0,$/;"	e	enum:__anon65
PCPResult_UnsuppOpcode	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_UnsuppOpcode    = 4,$/;"	e	enum:__anon65
PCPResult_UnsuppOption	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_UnsuppOption    = 5,$/;"	e	enum:__anon65
PCPResult_UnsuppProtocol	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_UnsuppProtocol  = 9,$/;"	e	enum:__anon65
PCPResult_UnsuppVersion	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_UnsuppVersion   = 1,$/;"	e	enum:__anon65
PCPResult_UserExQuota	mDNSCore/mDNSEmbeddedAPI.h	/^    PCPResult_UserExQuota     = 10,$/;"	e	enum:__anon65
PCPResult_t	mDNSCore/mDNSEmbeddedAPI.h	/^} PCPResult_t;$/;"	t	typeref:enum:__anon65
PCP_VERS	mDNSCore/mDNSEmbeddedAPI.h	1152;"	d
PCP_WAITSECS_AFTER_EPOCH_INVALID	mDNSCore/mDNSEmbeddedAPI.h	1153;"	d
PDELETE_PORT_DATA_1	Clients/PrinterSetupWizard/tcpxcv.h	/^}   DELETE_PORT_DATA_1, *PDELETE_PORT_DATA_1;$/;"	t	typeref:struct:_DELETE_PORT_DATA_1
PFPortArraySize	mDNSMacOSX/helpermsg-types.h	27;"	d
PF_CLEAR_RULES	mDNSMacOSX/P2PPacketFilter.h	/^    PF_CLEAR_RULES$/;"	e	enum:__anon142
PF_DEV_PATH	mDNSMacOSX/P2PPacketFilter.c	32;"	d	file:
PF_SET_RULES	mDNSMacOSX/P2PPacketFilter.h	/^    PF_SET_RULES,$/;"	e	enum:__anon142
PID_FILE	mDNSShared/uds_daemon.c	307;"	d	file:
PID_FILE	mDNSShared/uds_daemon.c	47;"	d	file:
PMRLS	mDNSMacOSX/mDNSMacOSX.h	/^    CFRunLoopSourceRef PMRLS;$/;"	m	struct:mDNS_PlatformSupport_struct
PORT_DATA_1	Clients/PrinterSetupWizard/tcpxcv.h	/^}   PORT_DATA_1, *PPORT_DATA_1;$/;"	t	typeref:struct:_PORT_DATA_1
PORT_DATA_2	Clients/PrinterSetupWizard/tcpxcv.h	/^}   PORT_DATA_2, *PPORT_DATA_2;$/;"	t	typeref:struct:_PORT_DATA_2
PORT_DATA_LIST_1	Clients/PrinterSetupWizard/tcpxcv.h	/^}   PORT_DATA_LIST_1, *PPORT_DATA_LIST_1;$/;"	t	typeref:struct:_PORT_DATA_LIST_1
PPORT_DATA_1	Clients/PrinterSetupWizard/tcpxcv.h	/^}   PORT_DATA_1, *PPORT_DATA_1;$/;"	t	typeref:struct:_PORT_DATA_1
PPORT_DATA_2	Clients/PrinterSetupWizard/tcpxcv.h	/^}   PORT_DATA_2, *PPORT_DATA_2;$/;"	t	typeref:struct:_PORT_DATA_2
PPORT_DATA_LIST_1	Clients/PrinterSetupWizard/tcpxcv.h	/^}   PORT_DATA_LIST_1, *PPORT_DATA_LIST_1;$/;"	t	typeref:struct:_PORT_DATA_LIST_1
PRINT_DEBUG_BYTES_LIMIT	mDNSMacOSX/mDNSMacOSX.c	367;"	d	file:
PRIVATE_LLQ_SERVICE_TYPE	mDNSCore/uDNS.c	/^mDNSlocal const domainname *PRIVATE_LLQ_SERVICE_TYPE    = (const domainname*)"\\x0C_dns-llq-tls"    "\\x04_tcp";$/;"	v
PRIVATE_QUERY_SERVICE_TYPE	mDNSCore/uDNS.c	/^mDNSlocal const domainname *PRIVATE_QUERY_SERVICE_TYPE  = (const domainname*)"\\x0E_dns-query-tls"  "\\x04_tcp";$/;"	v
PRIVATE_UPDATE_SERVICE_TYPE	mDNSCore/uDNS.c	/^mDNSlocal const domainname *PRIVATE_UPDATE_SERVICE_TYPE = (const domainname*)"\\x0F_dns-update-tls" "\\x04_tcp";$/;"	v
PRIV_OP_TOOL_VERS	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	47;"	d
PROC_IFINET6_PATH	mDNSPosix/mDNSUNP.h	100;"	d
PROTOCOL_LPR_TYPE	Clients/PrinterSetupWizard/tcpxcv.h	31;"	d
PROTOCOL_RAWTCP_TYPE	Clients/PrinterSetupWizard/tcpxcv.h	26;"	d
PROTOCOL_UNKNOWN_TYPE	Clients/PrinterSetupWizard/tcpxcv.h	21;"	d
PROV_RSA_FULL	mDNSWindows/mDNSWin32.c	234;"	d	file:
PString	mDNSWindows/DLL.NET/PString.h	/^		PString(String* string)$/;"	f	class:Apple::PString
PString	mDNSWindows/DLL.NET/PString.h	/^	__gc class PString$/;"	c	namespace:Apple
PUBLIC_LLQ_SERVICE_TYPE	mDNSCore/uDNS.c	/^mDNSlocal const domainname *PUBLIC_LLQ_SERVICE_TYPE     = (const domainname*)"\\x08_dns-llq"        "\\x04_udp";$/;"	v
PUBLIC_UPDATE_SERVICE_TYPE	mDNSCore/uDNS.c	/^mDNSlocal const domainname *PUBLIC_UPDATE_SERVICE_TYPE  = (const domainname*)"\\x0B_dns-update"     "\\x04_udp";$/;"	v
PacketRRConflict	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool PacketRRConflict(const mDNS *const m, const AuthRecord *const our, const CacheRecord *const pktrr)$/;"	f
PacketRRMatchesSignature	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool PacketRRMatchesSignature(const CacheRecord *const pktrr, const AuthRecord *const authrr)$/;"	f
Pad64	mDNSCore/DNSDigest.c	/^static const char Pad64 = '=';$/;"	v	file:
ParseArguments	mDNSPosix/Client.c	/^static void ParseArguments(int argc, char **argv)$/;"	f	file:
ParseArguments	mDNSPosix/Responder.c	/^static void ParseArguments(int argc, char **argv)$/;"	f	file:
ParseBackToMyMacAddr	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSv6Addr ParseBackToMyMacAddr(CFDictionaryRef BTMMDict, CFStringRef ifKey, CFStringRef addrKey)$/;"	f
ParseBackToMyMacZone	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSv6Addr ParseBackToMyMacZone(CFDictionaryRef zones, DomainAuthInfo* info)$/;"	f
ParseCmdLinArgs	mDNSPosix/Bonjour.c	/^mDNSlocal void ParseCmdLinArgs(int argc, char **argv)$/;"	f
ParseCmdLinArgs	mDNSPosix/PosixDaemon.c	/^mDNSlocal void ParseCmdLinArgs(int argc, char **argv)$/;"	f
ParseDNSSECRecords	Clients/dns-sd.c	/^static void ParseDNSSECRecords(uint16_t rrtype, char *rdb, char *p, unsigned const char *rd, uint16_t rdlen)$/;"	f	file:
ParseDNSServers	mDNSPosix/mDNSPosix.c	/^mDNSexport int ParseDNSServers(mDNS *m, const char *filePath)$/;"	f
ParseEDNS0	mDNSCore/dnsproxy.c	/^mDNSlocal mDNSBool ParseEDNS0(DNSProxyClient *pc, const mDNSu8 *ptr, int length, const mDNSu8 *limit)$/;"	f
ParseElement	mDNSMacOSX/DNSSECSupport.c	/^mDNSlocal mDNSBool ParseElement(xmlDocPtr tadoc, xmlNode * a_node, TrustAnchor *ta)$/;"	f
ParseElementChildren	mDNSMacOSX/DNSSECSupport.c	/^mDNSlocal mDNSBool ParseElementChildren(xmlDocPtr tadoc, xmlNode *node, TrustAnchor *ta)$/;"	f
ParseHTTPResponseCode	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal mDNSs16 ParseHTTPResponseCode(const mDNSu8 **const data, const mDNSu8 *const end)$/;"	f
ParseHttpUrl	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal mStatus ParseHttpUrl(const mDNSu8 *ptr, const mDNSu8 *const end, mDNSu8 **const addressAndPort, mDNSIPPort *const port, mDNSu8 **const path)$/;"	f
ParseTSIGError	mDNSCore/uDNS.c	/^mDNSlocal mStatus ParseTSIGError(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *const end, const domainname *const displayname)$/;"	f
ParseTextRecord	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::ParseTextRecord( Service * service, Queue * q, uint16_t inTXTSize, const char * inTXT )$/;"	f	class:CPrinterSetupWizardSheet
PathForResource	mDNSWindows/loclibrary.h	41;"	d
PathForResource	mDNSWindows/loclibrary.h	44;"	d
PathForResourceA	mDNSWindows/loclibrary.c	/^int PathForResourceA ( HMODULE module, const char *name, char *locFile, int locFileLen)$/;"	f
PathForResourceW	mDNSWindows/loclibrary.c	/^int PathForResourceW ( HMODULE module, const wchar_t *name, wchar_t *locFile, int locFileLen)$/;"	f
PathForResourceWithPath	mDNSWindows/loclibrary.h	42;"	d
PathForResourceWithPath	mDNSWindows/loclibrary.h	45;"	d
PathForResourceWithPathA	mDNSWindows/loclibrary.c	/^int PathForResourceWithPathA (const char *path, const char *nm, $/;"	f
PathForResourceWithPathW	mDNSWindows/loclibrary.c	/^int PathForResourceWithPathW (const wchar_t *path, const wchar_t *nm, $/;"	f
PeerData	Clients/SimpleChat.NET/SimpleChat.cs	/^    public class PeerData$/;"	c	namespace:SimpleChat.NET
PenalizeDNSServer	mDNSCore/uDNS.c	/^mDNSexport void PenalizeDNSServer(mDNS *const m, DNSQuestion *q, mDNSOpaque16 responseFlags)$/;"	f
PenaltyTimeForServer	mDNSCore/mDNS.c	/^mDNSinline mDNSs32 PenaltyTimeForServer(mDNS *m, DNSServer *server)$/;"	f
PktMsg	mDNSShared/dnsextd.h	/^} PktMsg;$/;"	t	typeref:struct:__anon114
PktNum	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 PktNum;                     \/\/ Unique sequence number assigned to each received packet$/;"	m	struct:mDNS_struct
PlatformStorage	mDNSMacOSX/daemon.c	/^static mDNS_PlatformSupport PlatformStorage;$/;"	v	file:
PlatformStorage	mDNSPosix/Bonjour.c	/^static mDNS_PlatformSupport PlatformStorage;$/;"	v	file:
PlatformStorage	mDNSPosix/Client.c	/^static mDNS_PlatformSupport PlatformStorage;  \/\/ Stores this platform's globals$/;"	v	file:
PlatformStorage	mDNSPosix/Identify.c	/^static mDNS_PlatformSupport PlatformStorage;  \/\/ Stores this platform's globals$/;"	v	file:
PlatformStorage	mDNSPosix/NetMonitor.c	/^static mDNS_PlatformSupport PlatformStorage;    \/\/ Stores this platform's globals$/;"	v	file:
PlatformStorage	mDNSPosix/PosixDaemon.c	/^static mDNS_PlatformSupport PlatformStorage;$/;"	v	file:
PlatformStorage	mDNSPosix/ProxyResponder.c	/^static mDNS_PlatformSupport PlatformStorage;  \/\/ Stores this platform's globals$/;"	v	file:
PlatformStorage	mDNSPosix/Responder.c	/^static mDNS_PlatformSupport PlatformStorage;  \/\/ Stores this platform's globals$/;"	v	file:
PlatformSupportStorage	mDNSMacOS9/Mac OS Test Searcher.c	/^static mDNS_PlatformSupport PlatformSupportStorage;$/;"	v	file:
PlatformSupportStorage	mDNSMacOS9/mDNSLibrary.c	/^static mDNS_PlatformSupport PlatformSupportStorage;$/;"	v	file:
Platform_t	mDNSCore/mDNSEmbeddedAPI.h	/^} Platform_t;$/;"	t	typeref:enum:__anon52
Poll	mDNSWindows/Poll.c	/^} Poll;$/;"	t	typeref:struct:Poll_struct	file:
PollRegisterSource	mDNSWindows/Poll.c	/^PollRegisterSource( PollSource *source )$/;"	f
PollRemoveWorker	mDNSWindows/Poll.c	/^PollRemoveWorker( Worker *worker )$/;"	f
PollSetup	mDNSWindows/Poll.c	/^PollSetup()$/;"	f
PollSource	mDNSWindows/Poll.c	/^} PollSource;$/;"	t	typeref:struct:PollSource_struct	file:
PollSource_struct	mDNSWindows/Poll.c	/^typedef struct PollSource_struct$/;"	s	file:
PollStartWorkers	mDNSWindows/Poll.c	/^PollStartWorkers()$/;"	f
PollStopWorkers	mDNSWindows/Poll.c	/^PollStopWorkers()$/;"	f
PollUnregisterSource	mDNSWindows/Poll.c	/^PollUnregisterSource( PollSource *source )$/;"	f
Poll_struct	mDNSWindows/Poll.c	/^typedef struct Poll_struct$/;"	s	file:
PoofCacheDeletions	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 PoofCacheDeletions;             \/\/ Number of times the cache was deleted due to POOF$/;"	m	struct:__anon92
Populate	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		Populate(BrowseData browseData, ResolveData resolveData)$/;"	m	class:DNSServiceBrowser_NET.Form1
Populate	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::Populate( CComboBox & box, HKEY key, StringList & l )$/;"	f	class:CSecondPage
PopulateServicesList	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::PopulateServicesList( void )$/;"	f	class:ChooserDialog
PopulateUI	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::PopulateUI(Manufacturers & manufacturers)$/;"	f	class:CThirdPage
Port	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			public int		    Port;$/;"	f	class:DNSServiceBrowser_NET.Form1.ResolveData
Port	Clients/SimpleChat.NET/SimpleChat.cs	/^        public int Port;$/;"	f	class:SimpleChat.NET.PeerData
Port	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort Port;                    \/\/ Discovered result: Update port, query port, or LLQ port from SRV record$/;"	m	struct:ZoneData_struct
Port	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort Port;                    \/\/ router port$/;"	m	struct:tcpLNTInfo_struct
Port	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort Port;$/;"	m	struct:tcpInfo_t
PosixErrorToStatus	mDNSPosix/mDNSPosix.c	96;"	d	file:
PosixEventSource	mDNSPosix/mDNSPosix.c	/^struct PosixEventSource$/;"	s	file:
PosixEventSource	mDNSPosix/mDNSPosix.c	/^typedef struct PosixEventSource PosixEventSource;$/;"	t	typeref:struct:PosixEventSource	file:
PosixNetworkInterface	mDNSPosix/mDNSPosix.h	/^struct PosixNetworkInterface$/;"	s
PosixNetworkInterface	mDNSPosix/mDNSPosix.h	/^typedef struct PosixNetworkInterface PosixNetworkInterface;$/;"	t	typeref:struct:PosixNetworkInterface
PosixService	mDNSPosix/Responder.c	/^struct PosixService {$/;"	s	file:
PosixService	mDNSPosix/Responder.c	/^typedef struct PosixService PosixService;$/;"	t	typeref:struct:PosixService	file:
PostNcDestroy	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::PostNcDestroy() $/;"	f	class:ChooserDialog
PowerChanged	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void PowerChanged(void *refcon, io_service_t service, natural_t messageType, void *messageArgument)$/;"	f
PowerConnection	mDNSMacOSX/mDNSMacOSX.h	/^    io_connect_t PowerConnection;$/;"	m	struct:mDNS_PlatformSupport_struct
PowerNotifier	mDNSMacOSX/mDNSMacOSX.h	/^    io_object_t PowerNotifier;$/;"	m	struct:mDNS_PlatformSupport_struct
PowerOn	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void PowerOn(mDNS *const m)$/;"	f
PowerPortRef	mDNSMacOSX/mDNSMacOSX.h	/^    IONotificationPortRef PowerPortRef;$/;"	m	struct:mDNS_PlatformSupport_struct
PowerResumeNotification	mDNSWindows/SystemService/Service.c	/^PowerResumeNotification( HANDLE event, void * context )$/;"	f
PowerSuspendNotification	mDNSWindows/SystemService/Service.c	/^PowerSuspendNotification( HANDLE event, void * context )$/;"	f
PreTranslateMessage	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^BOOL	ChooserDialog::PreTranslateMessage(MSG* pMsg) $/;"	f	class:ChooserDialog
Prefschanged	mDNSMacOSX/daemon.c	/^mDNSlocal void Prefschanged()$/;"	f
PrepareForIdle	mDNSMacOSX/daemon.c	/^mDNSlocal void PrepareForIdle(void *m_param)$/;"	f
PrimaryMAC	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSEthAddr PrimaryMAC;             \/\/ Used as unique host ID$/;"	m	struct:mDNS_struct
PrintCachedRecords	mDNSShared/uds_daemon.c	/^mDNSlocal void PrintCachedRecords(mDNS *const m, const CacheRecord *cr, mDNSu32 slot, const mDNSu32 remain, const char *ifname, mDNSu32 *CacheUsed)$/;"	f
PrintFixedSignInfo	mDNSCore/dnssec.c	/^mDNSlocal void PrintFixedSignInfo(rdataRRSig *rrsig, domainname *signerName, int sigNameLen, mDNSu8 *fixedPart, int fixedPartLen)$/;"	f
PrintHash	mDNSCore/nsec3.c	/^mDNSlocal void PrintHash(mDNSu8 *digest, int digestlen, char *buffer, int buflen)$/;"	f
PrintHelp	mDNSShared/dnsextd.c	/^mDNSlocal void PrintHelp(void)$/;"	f
PrintHelper	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void PrintHelper(const char *const tag, mDNSu8 *lhs, mDNSu16 lhs_len, mDNSu8 *rhs, mDNSu16 rhs_len)$/;"	f
PrintHex	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void PrintHex(mDNSu8 *data, mDNSu16 len)$/;"	f
PrintLLQAnswers	mDNSShared/dnsextd.c	/^mDNSlocal void PrintLLQAnswers(DaemonInfo *d)$/;"	f
PrintLLQTable	mDNSShared/dnsextd.c	/^mDNSlocal void PrintLLQTable(DaemonInfo *d)$/;"	f
PrintLeaseTable	mDNSShared/dnsextd.c	/^mDNSlocal void PrintLeaseTable(DaemonInfo *d)$/;"	f
PrintLog	mDNSShared/dnsextd.c	/^mDNSlocal void PrintLog(const char *buffer)$/;"	f
PrintNetLinkMsg	mDNSPosix/mDNSPosix.c	/^mDNSlocal void      PrintNetLinkMsg(const struct nlmsghdr *pNLMsg)$/;"	f
PrintOneCacheRecord	mDNSShared/uds_daemon.c	/^mDNSlocal void PrintOneCacheRecord(mDNS *const m, const CacheRecord *cr, mDNSu32 slot, const mDNSu32 remain, const char *ifname, mDNSu32 *CacheUsed)$/;"	f
PrintRoutingSocketMsg	mDNSPosix/mDNSPosix.c	/^mDNSlocal void      PrintRoutingSocketMsg(const struct ifa_msghdr *pRSMsg)$/;"	f
PrintServiceInfo	mDNSMacOS9/Mac OS Test Searcher.c	/^static void PrintServiceInfo(SearcherServices *services)$/;"	f	file:
PrintServiceInfo	mDNSMacOS9/Searcher.c	/^static void PrintServiceInfo(SearcherServices *services)$/;"	f	file:
PrintTypeBitmap	mDNSCore/DNSCommon.c	/^mDNSlocal void PrintTypeBitmap(const mDNSu8 *bmap, int bitmaplen, char *const buffer, mDNSu32 length)$/;"	f
PrintUsage	mDNSPosix/Client.c	/^static void PrintUsage()$/;"	f	file:
PrintUsage	mDNSPosix/Responder.c	/^static void PrintUsage()$/;"	f	file:
PrintUsage	mDNSShared/dnsextd.c	/^mDNSlocal void PrintUsage(void)$/;"	f
PrintVarSignInfo	mDNSCore/dnssec.c	/^mDNSlocal void PrintVarSignInfo(mDNSu16 rdlen, mDNSu8 *rdata)$/;"	f
Printer	Clients/PrinterSetupWizard/UtilTypes.h	/^Printer::Printer()$/;"	f	class:PrinterSetupWizard::Printer
Printer	Clients/PrinterSetupWizard/UtilTypes.h	/^struct Printer$/;"	s	namespace:PrinterSetupWizard
PrinterNames	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^typedef std::list<CString>          PrinterNames;$/;"	t	class:CPrinterSetupWizardSheet
PrinterSetupWizard	Clients/PrinterSetupWizard/UtilTypes.h	/^namespace PrinterSetupWizard$/;"	n
Printers	Clients/PrinterSetupWizard/UtilTypes.h	/^typedef std::list<Printer*> Printers;$/;"	t	namespace:PrinterSetupWizard
Private	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool Private;           \/\/ If zone is private, DNS updates may have to be encrypted to prevent eavesdropping$/;"	m	struct:AuthRecord_struct
PrivateDNSPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort PrivateDNSPort         = { { PrivateDNSPortAsNumber         >> 8, PrivateDNSPortAsNumber         & 0xFF } };$/;"	v
PrivateDNSPortAsNumber	mDNSCore/DNSCommon.c	66;"	d	file:
PrivateData	mDNSShared/dns_sd.h	/^typedef union _TXTRecordRef_t { char PrivateData[16]; char *ForceNaturalAlignment; } TXTRecordRef;$/;"	m	union:_TXTRecordRef_t
PrivateQuery	mDNSCore/mDNSEmbeddedAPI.h	1617;"	d
PrivateQueryGotZoneData	mDNSCore/uDNS.c	/^mDNSlocal void PrivateQueryGotZoneData(mDNS *const m, mStatus err, const ZoneData *zoneInfo)$/;"	f
ProbeCount	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 ProbeCount;                  \/\/ Number of probes remaining before this record is valid (kDNSRecordTypeUnique)$/;"	m	struct:AuthRecord_struct
ProbeFailTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 ProbeFailTime;$/;"	m	struct:mDNS_struct
ProbeRestartCount	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 ProbeRestartCount;           \/\/ Number of times we have restarted probing$/;"	m	struct:AuthRecord_struct
ProcessArgs	mDNSShared/dnsextd.c	/^mDNSlocal int ProcessArgs(int argc, char *argv[], DaemonInfo *d)$/;"	f
ProcessArgs	mDNSWindows/NSPTool/NSPTool.c	/^DEBUG_LOCAL int ProcessArgs( int argc, char* argv[] )$/;"	f
ProcessCommand	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mStatus   ProcessCommand( mDNS * const inMDNS )$/;"	f
ProcessCommand	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mStatus   ProcessCommand( mDNS * const inMDNS )$/;"	f
ProcessCommandReconfigure	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal void  ProcessCommandReconfigure( mDNS *inMDNS )$/;"	f
ProcessConndConfigChanges	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void ProcessConndConfigChanges(mDNS *const m)$/;"	f
ProcessQuery	mDNSCore/mDNS.c	/^mDNSlocal mDNSu8 *ProcessQuery(mDNS *const m, const DNSMessage *const query, const mDNSu8 *const end,$/;"	f
ProcessReply	mDNSShared/dnssd_clientstub.c	/^    ProcessReplyFn ProcessReply;        \/\/ Function pointer to the code to handle received messages$/;"	m	struct:_DNSServiceRef_t	file:
ProcessReplyFn	mDNSShared/dnssd_clientstub.c	/^typedef void (*ProcessReplyFn)(DNSServiceOp *const sdr, const CallbackHeader *const cbh, const char *msg, const char *const end);$/;"	t	file:
ProcessResults	mDNSShared/Java/DNSSD.java	/^	protected native int	ProcessResults();$/;"	m	class:AppleService
ProcessRoutingNotification	mDNSPosix/mDNSPosix.c	/^mDNSlocal mDNSu32       ProcessRoutingNotification(int sd)$/;"	f
ProcessUnicastResponse	mDNSPosix/NetMonitor.c	/^mDNSlocal void ProcessUnicastResponse(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *end, const mDNSAddr *srcaddr, const mDNSInterfaceID InterfaceID)$/;"	f
ProcessingThread	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ProcessingThread()$/;"	f	class:ServiceRef
ProcessingThread	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRefImpl::ProcessingThread()$/;"	f	class:ServiceRef::ServiceRefImpl
ProgramName	mDNSPosix/Client.c	/^mDNSexport const char ProgramName[] = "mDNSClientPosix";$/;"	v
ProgramName	mDNSPosix/Identify.c	/^mDNSexport const char ProgramName[] = "mDNSIdentify";$/;"	v
ProgramName	mDNSPosix/NetMonitor.c	/^mDNSexport const char ProgramName[] = "mDNSNetMonitor";$/;"	v
ProgramName	mDNSPosix/ProxyResponder.c	/^mDNSexport const char ProgramName[] = "mDNSProxyResponderPosix";$/;"	v
ProgramName	mDNSPosix/Responder.c	/^mDNSexport const char ProgramName[] = "mDNSResponderPosix";$/;"	v
ProgramName	mDNSShared/dnsextd.c	/^mDNSexport const char ProgramName[] = "dnsextd";$/;"	v
ProgramName	mDNSShared/uds_daemon.c	/^mDNSexport const char ProgramName[] = "mDNSResponder";$/;"	v
Property	mDNSMacOSX/LegacyNATTraversal.c	/^} Property;$/;"	t	typeref:struct:Property_struct	file:
Property_struct	mDNSMacOSX/LegacyNATTraversal.c	/^typedef struct Property_struct$/;"	s	file:
Protocol	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 Protocol;                                \/\/ NATOp_MapUDP or NATOp_MapTCP, or zero if just requesting the external IP address$/;"	m	struct:NATTraversalInfo_struct
PrototypeSPSName	mDNSCore/mDNSEmbeddedAPI.h	3478;"	d
ProveInsecure	mDNSCore/dnssec.c	/^mDNSexport void ProveInsecure(mDNS *const m, DNSSECVerifier *dv, InsecureContext *ic, domainname *trigger)$/;"	f
ProveInsecureCallback	mDNSCore/dnssec.c	/^mDNSlocal void ProveInsecureCallback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
ProxyCallback	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void ProxyCallback (mDNS *const m, void *socket, void *const msg, const mDNSu8 *const end, const mDNSAddr *const srcaddr,$/;"	t
ProxyCallbackCommon	mDNSCore/dnsproxy.c	/^mDNSlocal void ProxyCallbackCommon(mDNS *const m, void *socket, void *const pkt, const mDNSu8 *const end, const mDNSAddr *const srcaddr,$/;"	f
ProxyClientCallback	mDNSCore/dnsproxy.c	/^mDNSlocal void ProxyClientCallback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
ProxyDNSSECOK	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 ProxyDNSSECOK;                   \/\/ Proxy Question with EDNS0 DNSSEC OK bit set$/;"	m	struct:DNSQuestion_struct
ProxyHost	mDNSPosix/ProxyResponder.c	/^} ProxyHost;$/;"	t	typeref:struct:__anon21	file:
ProxyQuestion	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 ProxyQuestion;                   \/\/ Proxy Question$/;"	m	struct:DNSQuestion_struct
ProxyRecords	mDNSCore/mDNSEmbeddedAPI.h	/^    int ProxyRecords;                           \/\/ Total number of records we're holding as proxy$/;"	m	struct:mDNS_struct
ProxyTCPAccept	mDNSMacOSX/DNSProxySupport.c	/^mDNSlocal void ProxyTCPAccept(int s1, short filter, void *context)$/;"	f
ProxyTCPCallback	mDNSCore/dnsproxy.c	/^mDNSexport void ProxyTCPCallback(mDNS *const m, void *socket, void *const pkt, const mDNSu8 *const end, const mDNSAddr *const srcaddr, const mDNSIPPort srcport, const mDNSAddr *dstaddr, const mDNSIPPort dstport, const mDNSInterfaceID InterfaceID, void *context)$/;"	f
ProxyTCPCallback	mDNSCore/dnsproxy.c	/^mDNSexport void ProxyTCPCallback(mDNS *const m, void *socket, void *const pkt, const mDNSu8 *const end, const mDNSAddr *const srcaddr,$/;"	f
ProxyTCPInfo_t	mDNSMacOSX/DNSProxySupport.c	/^} ProxyTCPInfo_t;$/;"	t	typeref:struct:__anon143	file:
ProxyTCPRead	mDNSMacOSX/DNSProxySupport.c	/^mDNSlocal int ProxyTCPRead(ProxyTCPInfo_t *tcpInfo)$/;"	f
ProxyTCPSocketCallBack	mDNSMacOSX/DNSProxySupport.c	/^mDNSlocal void ProxyTCPSocketCallBack(int s1, short filter, void *context)$/;"	f
ProxyUDPCallback	mDNSCore/dnsproxy.c	/^mDNSexport void ProxyUDPCallback(mDNS *const m, void *socket, void *const pkt, const mDNSu8 *const end, const mDNSAddr *const srcaddr, const mDNSIPPort srcport, const mDNSAddr *dstaddr, const mDNSIPPort dstport, const mDNSInterfaceID InterfaceID, void *context)$/;"	f
ProxyUDPCallback	mDNSCore/dnsproxy.c	/^mDNSexport void ProxyUDPCallback(mDNS *const m, void *socket, void *const pkt, const mDNSu8 *const end, const mDNSAddr *const srcaddr,$/;"	f
PurgeOrReconfirmCacheRecord	mDNSCore/mDNS.c	/^mDNSlocal void PurgeOrReconfirmCacheRecord(mDNS *const m, CacheRecord *cr, const DNSServer * const ptr, mDNSBool lameduck)$/;"	f
PutRR_OS	mDNSCore/DNSCommon.h	214;"	d
PutRR_OS_TTL	mDNSCore/DNSCommon.h	211;"	d
PutResourceRecord	mDNSCore/DNSCommon.h	207;"	d
PutResourceRecordTTL	mDNSCore/DNSCommon.h	201;"	d
PutResourceRecordTTLJumbo	mDNSCore/DNSCommon.h	204;"	d
PutResourceRecordTTLWithLimit	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *PutResourceRecordTTLWithLimit(DNSMessage *const msg, mDNSu8 *ptr, mDNSu16 *count, ResourceRecord *rr, mDNSu32 ttl, const mDNSu8 *limit)$/;"	f
PutUpdateSRV	mDNSShared/dnsextd.c	/^mDNSlocal mDNSu8 *PutUpdateSRV(DaemonInfo *d, DNSZone * zone, PktMsg *pkt, mDNSu8 *ptr, char *regtype, mDNSIPPort port, mDNSBool registration)$/;"	f
QC_add	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { QC_rmv = 0, QC_add, QC_addnocache, QC_forceresponse, QC_dnssec , QC_nodnssec, QC_suppressed } QC_result;$/;"	e	enum:__anon84
QC_addnocache	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { QC_rmv = 0, QC_add, QC_addnocache, QC_forceresponse, QC_dnssec , QC_nodnssec, QC_suppressed } QC_result;$/;"	e	enum:__anon84
QC_dnssec	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { QC_rmv = 0, QC_add, QC_addnocache, QC_forceresponse, QC_dnssec , QC_nodnssec, QC_suppressed } QC_result;$/;"	e	enum:__anon84
QC_forceresponse	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { QC_rmv = 0, QC_add, QC_addnocache, QC_forceresponse, QC_dnssec , QC_nodnssec, QC_suppressed } QC_result;$/;"	e	enum:__anon84
QC_nodnssec	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { QC_rmv = 0, QC_add, QC_addnocache, QC_forceresponse, QC_dnssec , QC_nodnssec, QC_suppressed } QC_result;$/;"	e	enum:__anon84
QC_result	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { QC_rmv = 0, QC_add, QC_addnocache, QC_forceresponse, QC_dnssec , QC_nodnssec, QC_suppressed } QC_result;$/;"	t	typeref:enum:__anon84
QC_rmv	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { QC_rmv = 0, QC_add, QC_addnocache, QC_forceresponse, QC_dnssec , QC_nodnssec, QC_suppressed } QC_result;$/;"	e	enum:__anon84
QC_suppressed	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { QC_rmv = 0, QC_add, QC_addnocache, QC_forceresponse, QC_dnssec , QC_nodnssec, QC_suppressed } QC_result;$/;"	e	enum:__anon84
QDStorage	mDNSMacOS9/ShowInitIcon.c	/^} QDStorage;$/;"	t	typeref:struct:__anon184	file:
Query	mDNSWindows/mdnsNSP/mdnsNSP.c	/^struct	Query$/;"	s	file:
Query	mDNSWindows/mdnsNSP/mdnsNSP.c	/^typedef struct	Query		Query;$/;"	t	typeref:struct:Query	file:
QueryAnswered	Clients/SimpleChat.NET/SimpleChat.cs	/^		QueryAnswered$/;"	m	class:SimpleChat.NET.SimpleChat
QueryContextMenu	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP  ExplorerBar::QueryContextMenu(HMENU hShellContextMenu, UINT iContextMenuFirstItem, UINT idCmdFirst, UINT idCmdLast, UINT uFlags)$/;"	f	class:ExplorerBar
QueryCopyQuerySet	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	QueryCopyQuerySet( $/;"	f
QueryCopyQuerySetSize	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL size_t	QueryCopyQuerySetSize( QueryRef inRef, const WSAQUERYSETW *inQuerySet, DWORD inQuerySetFlags )$/;"	f
QueryCopyQuerySetTo	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	QueryCopyQuerySetTo( $/;"	f
QueryCreate	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL OSStatus	QueryCreate( const WSAQUERYSETW *inQuerySet, DWORD inQuerySetFlags, QueryRef *outRef )$/;"	f
QueryFlags	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSOpaque16 QueryFlags      = { { kDNSFlag0_QR_Query    | kDNSFlag0_OP_StdQuery,                0 } };$/;"	v
QueryInterface	Clients/ExplorerPlugin/ClassFactory.cpp	/^STDMETHODIMP	ClassFactory::QueryInterface( REFIID inID, LPVOID *outResult )$/;"	f	class:ClassFactory
QueryInterface	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::QueryInterface( REFIID inID, LPVOID *outResult )$/;"	f	class:ExplorerBar
QueryInterface	mDNSMacOSX/BonjourEvents.c	/^static HRESULT QueryInterface(void *myInstance, REFIID iid, LPVOID *ppv)$/;"	f	file:
QueryListener	mDNSShared/Java/QueryListener.java	/^public interface QueryListener extends BaseListener$/;"	i
QueryRecord	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSService::QueryRecord$/;"	f	class:DNSService
QueryRecord	mDNSWindows/DLLX/DNSSD.cpp	/^STDMETHODIMP CDNSSD::QueryRecord(DNSSDFlags flags, ULONG ifIndex, BSTR fullname, DNSSDRRType rrtype, DNSSDRRClass rrclass, IQueryRecordListener *listener, IDNSSDService **service)$/;"	f	class:CDNSSD
QueryRecord	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::QueryRecord(DNSSDFlags flags, ULONG ifIndex, BSTR fullname, DNSSDRRType rrtype, DNSSDRRClass rrclass, IDNSSDEventManager *eventManager, IDNSSDService **service)$/;"	f	class:CDNSSDService
QueryRecordCallback	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRefImpl::QueryRecordCallback$/;"	f	class:ServiceRef::ServiceRefImpl
QueryRecordCallback4	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	QueryRecordCallback4($/;"	f
QueryRecordCallback6	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	QueryRecordCallback6($/;"	f
QueryRecordDispatch	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::QueryRecordDispatch$/;"	f	class:ServiceRef
QueryRecordReply	mDNSWindows/DLLX/DNSSD.cpp	/^CDNSSD::QueryRecordReply$/;"	f	class:CDNSSD
QueryRecordReply	mDNSWindows/DLLX/DNSSDService.cpp	/^CDNSSDService::QueryRecordReply$/;"	f	class:CDNSSDService
QueryRef	mDNSWindows/mdnsNSP/mdnsNSP.c	/^typedef struct	Query *		QueryRef;$/;"	t	typeref:struct:Query	file:
QueryRelease	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL OSStatus	QueryRelease( QueryRef inRef )$/;"	f
QueryRetain	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL OSStatus	QueryRetain( QueryRef inRef )$/;"	f
QuerySuppressed	mDNSCore/mDNSEmbeddedAPI.h	1615;"	d
QueryTest	Clients/Java/DNSSDUnitTest.java	/^	public		QueryTest( int flags, int ifIndex, String serviceName, int rrtype, int rrclass)$/;"	m	class:QueryTest
QueryTest	Clients/Java/DNSSDUnitTest.java	/^class	QueryTest extends TermReporter implements QueryListener$/;"	c
QuestionCallback	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSQuestionCallback *QuestionCallback;$/;"	m	struct:DNSQuestion_struct
QuestionContext	mDNSCore/mDNSEmbeddedAPI.h	/^    void                 *QuestionContext;$/;"	m	struct:DNSQuestion_struct
QuestionHasLocalAnswers	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool QuestionHasLocalAnswers(mDNS *const m, DNSQuestion *q)$/;"	f
QuestionIntervalStep	mDNSCore/uDNS.h	45;"	d
QuestionIntervalStep2	mDNSCore/uDNS.h	46;"	d
QuestionIntervalStep3	mDNSCore/uDNS.h	47;"	d
QuestionIntervalThreshold	mDNSCore/uDNS.h	52;"	d
QuestionValidForDNSTrigger	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool QuestionValidForDNSTrigger(DNSQuestion *q)$/;"	f
Question_uDNS	mDNSCore/mDNSEmbeddedAPI.h	1605;"	d
Questions	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion *Questions;             \/\/ List of all registered questions, active and inactive$/;"	m	struct:mDNS_struct
Queue	Clients/PrinterSetupWizard/UtilTypes.h	/^Queue::Queue()$/;"	f	class:PrinterSetupWizard::Queue
Queue	Clients/PrinterSetupWizard/UtilTypes.h	/^struct Queue$/;"	s	namespace:PrinterSetupWizard
QueuedRDLen	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 QueuedRDLen;    \/\/ pending operation (re-transmitting if necessary) THEN register the queued update$/;"	m	struct:AuthRecord_struct
QueuedRData	mDNSCore/mDNSEmbeddedAPI.h	/^    RData *QueuedRData;$/;"	m	struct:AuthRecord_struct
Queues	Clients/PrinterSetupWizard/UtilTypes.h	/^typedef std::list<Queue*>   Queues;$/;"	t	namespace:PrinterSetupWizard
R0	mDNSCore/DNSDigest.c	888;"	d	file:
R1	mDNSCore/DNSDigest.c	893;"	d	file:
R2	mDNSCore/DNSDigest.c	898;"	d	file:
R3	mDNSCore/DNSDigest.c	903;"	d	file:
RAWTCP	Clients/PrinterSetupWizard/tcpxcv.h	25;"	d
RC	mDNSWindows/Java/makefile	/^RC = rc$/;"	m
RDATACompare	mDNSCore/dnssec.c	/^mDNSlocal int RDATACompare(const void *rdata1, const void *rdata2)$/;"	f
RData	mDNSCore/mDNSEmbeddedAPI.h	/^} RData;$/;"	t	typeref:struct:__anon59
RDataBody	mDNSCore/mDNSEmbeddedAPI.h	/^} RDataBody;$/;"	t	typeref:union:__anon57
RDataBody2	mDNSCore/mDNSEmbeddedAPI.h	/^} RDataBody2;$/;"	t	typeref:union:__anon58
RDataHashValue	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu32 RDataHashValue(const ResourceRecord *const rr)$/;"	f
RData_small	mDNSCore/mDNSEmbeddedAPI.h	/^} RData_small;$/;"	t	typeref:struct:__anon60
RECV_BUFLEN	mDNSShared/dnsextd.c	72;"	d	file:
REFUSED	mDNSShared/Java/DNSSDException.java	/^    public static final int		REFUSED                   = -65553;$/;"	f	class:DNSSDException
REGISTER_PROXY_DLL	mDNSWindows/DLLX/dlldatax.c	24;"	d	file:
REGISTRATION_DOMAINS	mDNSShared/Java/DNSSD.java	/^	public static final int		REGISTRATION_DOMAINS = ( 1 << 7 );$/;"	f	class:DNSSD
RESPONSE_WINDOW	mDNSCore/uDNS.h	34;"	d
RESTART_GOODBYE_DELAY	mDNSCore/uDNS.h	28;"	d
REVERSE_FETCH32	mDNSCore/DNSDigest.c	484;"	d	file:
REVERSE_FETCH32	mDNSCore/DNSDigest.c	490;"	d	file:
RM	mDNSPosix/Makefile	/^RM = rm$/;"	m
RM	mDNSWindows/Java/makefile	/^RM = del \/Q$/;"	m
RMDIR	mDNSWindows/Java/makefile	/^RMDIR = rmdir \/S \/Q$/;"	m
ROOT_TA_UPDATE_INTERVAL	mDNSMacOSX/DNSSECSupport.c	38;"	d	file:
ROTATE	mDNSCore/DNSDigest.c	400;"	d	file:
ROTATE	mDNSCore/DNSDigest.c	406;"	d	file:
ROTATE	mDNSCore/DNSDigest.c	409;"	d	file:
ROTATE	mDNSCore/DNSDigest.c	411;"	d	file:
ROTATE	mDNSCore/DNSDigest.c	427;"	d	file:
ROTATE	mDNSCore/DNSDigest.c	436;"	d	file:
ROTATE	mDNSCore/DNSDigest.c	513;"	d	file:
RRAdditionalSize	mDNSCore/uDNS.c	/^mDNSlocal mDNSu32 RRAdditionalSize(mDNS *const m, DomainAuthInfo *AuthInfo)$/;"	f
RRAdjustTTL	mDNSCore/mDNS.c	713;"	d	file:
RRAny	mDNSCore/mDNSEmbeddedAPI.h	1610;"	d
RRAssertsExistence	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool RRAssertsExistence(const ResourceRecord *const rr, mDNSu16 type)$/;"	f
RRAssertsNonexistence	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool RRAssertsNonexistence(const ResourceRecord *const rr, mDNSu16 type)$/;"	f
RRDisplayString	mDNSCore/mDNSEmbeddedAPI.h	2888;"	d
RREstimatedSize	mDNSCore/uDNS.c	/^mDNSlocal mDNSu32 RREstimatedSize(AuthRecord *rr, int zoneSize)$/;"	f
RRExpireTime	mDNSCore/mDNS.c	702;"	d	file:
RRLocalOnly	mDNSCore/mDNSEmbeddedAPI.h	1608;"	d
RRMergeFailure	mDNSCore/uDNS.c	/^mDNSlocal void RRMergeFailure(mDNS *const m)$/;"	f
RRSIG_FIXED_SIZE	Clients/dns-sd.c	218;"	d	file:
RRSIG_FIXED_SIZE	mDNSCore/mDNSEmbeddedAPI.h	819;"	d
RRSet	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord     *RRSet;              \/\/ This unique record is part of an RRSet$/;"	m	struct:AuthRecord_struct
RRTableElem	mDNSShared/dnsextd.h	/^typedef struct RRTableElem$/;"	s
RRTableElem	mDNSShared/dnsextd.h	/^} RRTableElem;$/;"	t	typeref:struct:RRTableElem
RRTypeAnswersQuestionType	mDNSCore/DNSCommon.h	161;"	d
RRTypeIsAddressType	mDNSCore/mDNS.c	658;"	d	file:
RRUnadjustedTTL	mDNSCore/mDNS.c	714;"	d	file:
RRVS_done	mDNSCore/dnssec.h	/^    RRVS_rr, RRVS_rrsig, RRVS_key, RRVS_rrsig_key, RRVS_ds, RRVS_done,$/;"	e	enum:__anon105
RRVS_ds	mDNSCore/dnssec.h	/^    RRVS_rr, RRVS_rrsig, RRVS_key, RRVS_rrsig_key, RRVS_ds, RRVS_done,$/;"	e	enum:__anon105
RRVS_key	mDNSCore/dnssec.h	/^    RRVS_rr, RRVS_rrsig, RRVS_key, RRVS_rrsig_key, RRVS_ds, RRVS_done,$/;"	e	enum:__anon105
RRVS_rr	mDNSCore/dnssec.h	/^    RRVS_rr, RRVS_rrsig, RRVS_key, RRVS_rrsig_key, RRVS_ds, RRVS_done,$/;"	e	enum:__anon105
RRVS_rrsig	mDNSCore/dnssec.h	/^    RRVS_rr, RRVS_rrsig, RRVS_key, RRVS_rrsig_key, RRVS_ds, RRVS_done,$/;"	e	enum:__anon105
RRVS_rrsig_key	mDNSCore/dnssec.h	/^    RRVS_rr, RRVS_rrsig, RRVS_key, RRVS_rrsig_key, RRVS_ds, RRVS_done,$/;"	e	enum:__anon105
RRVerifier	mDNSCore/dnssec.h	/^typedef struct RRVerifier_struct RRVerifier;$/;"	t	typeref:struct:RRVerifier_struct
RRVerifierSet	mDNSCore/dnssec.h	/^} RRVerifierSet;$/;"	t	typeref:enum:__anon105
RRVerifier_struct	mDNSCore/dnssec.h	/^struct RRVerifier_struct$/;"	s
RR_A	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord RR_A;                    \/\/ 'A' or 'AAAA' (address) record for our ".local" name$/;"	m	struct:NetworkInterfaceInfo_struct
RR_A	mDNSPosix/ProxyResponder.c	/^    AuthRecord RR_A;        \/\/ 'A' (address) record for our ".local" name$/;"	m	struct:__anon21	file:
RR_ADV	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord RR_ADV;              \/\/ e.g. _services._dns-sd._udp.local. PTR _printer._tcp.local.$/;"	m	struct:ServiceRecordSet_struct
RR_BOGUS_TTL	mDNSCore/dnssec.c	99;"	d	file:
RR_CACHE_SIZE	mDNSMacOS9/Mac OS Test Searcher.c	36;"	d	file:
RR_CACHE_SIZE	mDNSMacOS9/mDNSLibrary.c	26;"	d	file:
RR_CACHE_SIZE	mDNSMacOSX/daemon.c	75;"	d	file:
RR_CACHE_SIZE	mDNSPosix/Bonjour.c	56;"	d	file:
RR_CACHE_SIZE	mDNSPosix/Client.c	32;"	d	file:
RR_CACHE_SIZE	mDNSPosix/Identify.c	51;"	d	file:
RR_CACHE_SIZE	mDNSPosix/PosixDaemon.c	56;"	d	file:
RR_CACHE_SIZE	mDNSWindows/SystemService/Service.c	79;"	d	file:
RR_HINFO	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord RR_HINFO;$/;"	m	struct:NetworkInterfaceInfo_struct
RR_PTR	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord RR_PTR;                  \/\/ PTR (reverse lookup) record$/;"	m	struct:NetworkInterfaceInfo_struct
RR_PTR	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord RR_PTR;              \/\/ e.g. _printer._tcp.local.        PTR Name._printer._tcp.local.$/;"	m	struct:ServiceRecordSet_struct
RR_PTR	mDNSPosix/ProxyResponder.c	/^    AuthRecord RR_PTR;      \/\/ PTR (reverse lookup) record$/;"	m	struct:__anon21	file:
RR_SRV	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord RR_SRV;              \/\/ e.g. Name._printer._tcp.local.   SRV 0 0 port target$/;"	m	struct:ServiceRecordSet_struct
RR_TXT	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord RR_TXT;              \/\/ e.g. Name._printer._tcp.local.   TXT PrintQueueName$/;"	m	struct:ServiceRecordSet_struct
RR_TYPE_SIZE	Clients/dns-sd.c	232;"	d	file:
RTF_IFSCOPE	mDNSMacOSX/helper.c	65;"	d	file:
RUNLEVELSCRIPTSDIR	mDNSPosix/Makefile	/^RUNLEVELSCRIPTSDIR = \/etc$/;"	m
RUNLEVELSCRIPTSDIR	mDNSPosix/Makefile	/^RUNLEVELSCRIPTSDIR = \/etc\/init.d$/;"	m
RUNLEVELSCRIPTSDIR	mDNSPosix/Makefile	/^RUNLEVELSCRIPTSDIR = \/etc\/rc.d$/;"	m
RacoonSignal	mDNSMacOSX/helper.c	/^static int RacoonSignal()$/;"	f	file:
RandomQueryDelay	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 RandomQueryDelay;           \/\/ For de-synchronization of query packets on the wire$/;"	m	struct:mDNS_struct
RandomReconfirmDelay	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 RandomReconfirmDelay;       \/\/ For de-synchronization of reconfirmation queries on the wire$/;"	m	struct:mDNS_struct
ReInitAnonInfo	mDNSCore/anonymous.c	/^mDNSexport void ReInitAnonInfo(AnonymousInfo **AnonInfo, const domainname *name)$/;"	f
ReInitAnonInfo	mDNSCore/anonymous.c	/^mDNSexport void ReInitAnonInfo(AnonymousInfo **si, const domainname *name)$/;"	f
Read	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::Read( void * arg )$/;"	f	class:CDNSSDService
ReadALine	mDNSPosix/Responder.c	/^static mDNSBool ReadALine(char *buf, size_t bufSize, FILE *fp, mDNSBool skipBlankLines)$/;"	f	file:
ReadDDNSSettingsFromConfFile	mDNSShared/PlatformCommon.c	/^mDNSexport void ReadDDNSSettingsFromConfFile(mDNS *const m, const char *const filename, domainname *const hostname, domainname *const domain, mDNSBool *DomainDiscoveryDisabled)$/;"	f
ReadMessageCallback	Clients/SimpleChat.NET/SimpleChat.cs	/^        delegate void                           ReadMessageCallback(String data);$/;"	m	class:SimpleChat.NET.SimpleChat	file:
RecentAnswerPkts	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 RecentAnswerPkts;               \/\/ Number of answers since the last time we sent this query$/;"	m	struct:DNSQuestion_struct
Reconfigure	mDNSPosix/Bonjour.c	/^static void Reconfigure(mDNS *m)$/;"	f	file:
Reconfigure	mDNSPosix/PosixDaemon.c	/^static void Reconfigure(mDNS *m)$/;"	f	file:
ReconfirmAntecedents	mDNSCore/mDNS.c	/^mDNSlocal void ReconfirmAntecedents(mDNS *const m, const domainname *const name, const mDNSu32 namehash, const int depth)$/;"	f
ReconfirmRecord	mDNSShared/Java/DNSSD.java	/^	protected native void	ReconfirmRecord( int flags, int ifIndex, String fullName, int rrtype,$/;"	m	class:AppleDNSSD
ReconfirmRecord	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSService::ReconfirmRecord$/;"	f	class:DNSService
ReconfirmRecord	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::ReconfirmRecord(DNSSDFlags flags, ULONG ifIndex, BSTR fullName, DNSSDRRType rrtype, DNSSDRRClass rrclass, VARIANT rdata)$/;"	f	class:CDNSSDService
RecordCallback	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSRecordCallback *RecordCallback; \/\/ Callback function to call for state changes, and to free memory asynchronously on deregistration$/;"	m	struct:AuthRecord_struct
RecordContext	mDNSCore/mDNSEmbeddedAPI.h	/^    void           *RecordContext;      \/\/ Context parameter for the callback function$/;"	m	struct:AuthRecord_struct
RecordDupSuppressInfo	mDNSCore/mDNS.c	/^mDNSlocal int RecordDupSuppressInfo(DupSuppressInfo ds[DupSuppressInfoSize], mDNSs32 Time, mDNSInterfaceID InterfaceID, mDNSs32 Type)$/;"	f
RecordHostInfo	mDNSPosix/NetMonitor.c	/^mDNSlocal void RecordHostInfo(HostEntry *entry, const ResourceRecord *const pktrr)$/;"	f
RecordIsFirstOccurrenceOfOwner	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool RecordIsFirstOccurrenceOfOwner(mDNS *const m, const AuthRecord *const rr)$/;"	f
RecordIsLocalDuplicate	mDNSCore/mDNS.c	1056;"	d	file:
RecordLDT	mDNSCore/mDNS.c	1052;"	d	file:
RecordObj	mDNSShared/Java/JNISupport.c	/^    jobject RecordObj;$/;"	m	struct:RecordRegistrationRef	file:
RecordOrientedOp	mDNSShared/uds_daemon.c	4662;"	d	file:
RecordProbeFailure	mDNSCore/mDNS.c	/^mDNSlocal void RecordProbeFailure(mDNS *const m, const AuthRecord *const rr)$/;"	f
RecordReadyForSleep	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSBool RecordReadyForSleep(mDNS *const m, AuthRecord *rr)$/;"	f
RecordRef	mDNSWindows/DLL.NET/dnssd_NET.h	/^			RecordRef()$/;"	f	class:Apple::DNSSD::RecordRef
RecordRef	mDNSWindows/DLL.NET/dnssd_NET.h	/^		public __gc class RecordRef$/;"	c	namespace:Apple::DNSSD
RecordRefImpl	mDNSWindows/DLL.NET/dnssd_NET.h	/^			__nogc class RecordRefImpl$/;"	c	class:Apple::DNSSD::RecordRef
RecordRegistrationGotZoneData	mDNSCore/uDNS.c	/^mDNSexport void RecordRegistrationGotZoneData(mDNS *const m, mStatus err, const ZoneData *zoneData)$/;"	f
RecordRegistrationRef	mDNSShared/Java/JNISupport.c	/^struct RecordRegistrationRef$/;"	s	file:
RecordRegistrationRef	mDNSShared/Java/JNISupport.c	/^typedef struct RecordRegistrationRef RecordRegistrationRef;$/;"	t	typeref:struct:RecordRegistrationRef	file:
RecordType	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 RecordType;                  \/\/ See enum above$/;"	m	struct:ResourceRecord_struct
RecordTypeName	mDNSShared/uds_daemon.c	/^mDNSlocal char *RecordTypeName(mDNSu8 rtype)$/;"	f
RecordUpdatedNiceLabel	mDNSMacOSX/daemon.c	/^mDNSexport void RecordUpdatedNiceLabel(mDNS *const m, mDNSs32 delay)$/;"	f
RecordUpdatedNiceLabel	mDNSPosix/Bonjour.c	/^mDNSexport void RecordUpdatedNiceLabel(mDNS *const m, mDNSs32 delay)$/;"	f
RecordUpdatedNiceLabel	mDNSPosix/PosixDaemon.c	/^mDNSexport void RecordUpdatedNiceLabel(mDNS *const m, mDNSs32 delay)$/;"	f
RecordUpdatedNiceLabel	mDNSWindows/SystemService/Service.c	/^mDNSexport void RecordUpdatedNiceLabel(mDNS *const m, mDNSs32 delay)$/;"	f
RecreateNATMappings	mDNSCore/uDNS.c	/^mDNSexport void RecreateNATMappings(mDNS *const m, const mDNSu32 waitTicks)$/;"	f
RecvLLQ	mDNSShared/dnsextd.c	/^mDNSlocal int RecvLLQ( DaemonInfo *d, PktMsg *pkt, TCPSocket *sock )$/;"	f
RecvNotify	mDNSShared/dnsextd.c	/^RecvNotify$/;"	f
RecvPacket	mDNSShared/dnsextd.c	/^RecvPacket$/;"	f
RecvTCPMessage	mDNSShared/dnsextd.c	/^RecvTCPMessage$/;"	f
RecvUDPMessage	mDNSShared/dnsextd.c	/^RecvUDPMessage$/;"	f
RefreshCacheRecord	mDNSCore/mDNS.c	/^mDNSlocal void RefreshCacheRecord(mDNS *const m, CacheRecord *rr, mDNSu32 ttl)$/;"	f
RefreshSPSStatus	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void RefreshSPSStatus(const void *key, const void *value, void *context)$/;"	f
Refs	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^            public int      Refs;$/;"	f	class:DNSServiceBrowser_NET.Form1.BrowseData
RegCallback	mDNSMacOS9/Responder.c	/^static void RegCallback(DNSServiceRef sdRef, DNSServiceFlags flags, DNSServiceErrorType errorCode,$/;"	f	file:
RegCallback	mDNSMacOSX/daemon.c	/^mDNSlocal void RegCallback(mDNS *const m, ServiceRecordSet *const srs, mStatus result)$/;"	f
RegCallback	mDNSShared/dnssd_clientshim.c	/^mDNSlocal void RegCallback(mDNS *const m, ServiceRecordSet *const sr, mStatus result)$/;"	f
RegQueryString	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::RegQueryString( HKEY key, CString valueName, CString & value )$/;"	f	class:CSecondPage
RegQueryString	mDNSWindows/mDNSWin32.c	/^RegQueryString( HKEY key, LPCSTR valueName, LPSTR * string, DWORD * stringLen, DWORD * enabled )$/;"	f
RegTest	Clients/Java/DNSSDUnitTest.java	/^	public		RegTest() throws DNSSDException$/;"	m	class:RegTest
RegTest	Clients/Java/DNSSDUnitTest.java	/^class	RegTest extends TermReporter implements RegisterListener$/;"	c
Register	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^CCPApp::Register( LPCTSTR inClsidString, LPCTSTR inName, LPCTSTR inCanonicalName, LPCTSTR inCategory, LPCTSTR inLocalizedName, LPCTSTR inInfoTip, LPCTSTR inIconPath, LPCTSTR inExePath )$/;"	f	class:CCPApp
Register	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSService::Register$/;"	f	class:DNSService
Register	mDNSWindows/DLLX/DNSSD.cpp	/^STDMETHODIMP CDNSSD::Register(DNSSDFlags flags, ULONG ifIndex, BSTR serviceName, BSTR regType, BSTR domain, BSTR host, USHORT port, ITXTRecord *record, IRegisterListener *listener, IDNSSDService **service)$/;"	f	class:CDNSSD
Register	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::Register(DNSSDFlags flags, ULONG ifIndex, BSTR serviceName, BSTR regType, BSTR domain, BSTR host, USHORT port, ITXTRecord *record, IDNSSDEventManager *eventManager, IDNSSDService **service)$/;"	f	class:CDNSSDService
RegisterAllServiceRecords	mDNSCore/uDNS.c	/^mDNSlocal void RegisterAllServiceRecords(mDNS *const m, AuthRecord *rr)$/;"	f
RegisterCOMCategory	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^DEBUG_LOCAL OSStatus	RegisterCOMCategory( CLSID inCLSID, CATID inCategoryID, BOOL inRegister )$/;"	f
RegisterCallback	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRefImpl::RegisterCallback$/;"	f	class:ServiceRef::ServiceRefImpl
RegisterDispatch	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::RegisterDispatch$/;"	f	class:ServiceRef
RegisterFakeServiceForTesting	mDNSMacOS9/Mac OS Test Responder.c	/^mDNSlocal void RegisterFakeServiceForTesting(mDNS *m, ServiceRecordSet *recordset, const char txtinfo[],$/;"	f
RegisterFakeServiceForTesting	mDNSMacOS9/Responder.c	/^static DNSServiceErrorType RegisterFakeServiceForTesting(RegisteredService *rs,$/;"	f	file:
RegisterFakeServiceForTesting	mDNSMacOS9/SubTypeTester.c	/^mDNSlocal void RegisterFakeServiceForTesting(mDNS *m, ServiceRecordSet *recordset, const char txtinfo[],$/;"	f
RegisterListener	mDNSShared/Java/RegisterListener.java	/^public interface RegisterListener extends BaseListener$/;"	i
RegisterLocalOnlyDomainEnumPTR	mDNSShared/uds_daemon.c	/^mDNSlocal void RegisterLocalOnlyDomainEnumPTR(mDNS *m, const domainname *d, int type)$/;"	f
RegisterMachService	mDNSMacOSX/daemon.c	/^static mach_port_t RegisterMachService(const char *service_name) $/;"	f	file:
RegisterNoSuchService	mDNSPosix/ProxyResponder.c	/^mDNSlocal void RegisterNoSuchService(mDNS *m, AuthRecord *const rr, domainname *proxyhostname,$/;"	f
RegisterNotification	mDNSMacOSX/DNSSECSupport.c	/^mDNSlocal int RegisterNotification(mDNS *const m, unsigned int interval)$/;"	f
RegisterOneService	mDNSPosix/Responder.c	/^static mStatus RegisterOneService(const char *  richTextName,$/;"	f	file:
RegisterOurServices	mDNSPosix/Responder.c	/^static mStatus RegisterOurServices(void)$/;"	f	file:
RegisterProxyAddressRecord	Clients/dns-sd.c	/^static DNSServiceErrorType RegisterProxyAddressRecord(DNSServiceRef sdref, const char *host, const char *ip, DNSServiceFlags flags)$/;"	f	file:
RegisterQ	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion RegisterQ;$/;"	m	struct:SearchListElem
RegisterRecord	mDNSShared/Java/DNSSD.java	/^	protected native int	RegisterRecord( int flags, int ifIndex, String fullname, int rrtype,$/;"	m	class:AppleRecordRegistrar
RegisterRecord	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSService::RegisterRecord$/;"	f	class:DNSService
RegisterRecord	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::RegisterRecord(DNSSDFlags flags, ULONG ifIndex, BSTR fullName, DNSSDRRType rrtype, DNSSDRRClass rrclass, VARIANT rdata, ULONG ttl, IDNSSDEventManager* eventManager, IDNSSDRecord** record)$/;"	f	class:CDNSSDService
RegisterRecordCallback	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRefImpl::RegisterRecordCallback$/;"	f	class:ServiceRef::ServiceRefImpl
RegisterRecordDispatch	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::RegisterRecordDispatch$/;"	f	class:ServiceRef
RegisterRecordListener	mDNSShared/Java/RegisterRecordListener.java	/^public interface RegisterRecordListener extends BaseListener$/;"	i
RegisterRecordReply	mDNSShared/Java/JNISupport.c	/^static void DNSSD_API   RegisterRecordReply( DNSServiceRef sdRef _UNUSED,$/;"	f	file:
RegisterRecordReply	mDNSWindows/DLLX/DNSSDService.cpp	/^CDNSSDService::RegisterRecordReply$/;"	f	class:CDNSSDService
RegisterReply	mDNSWindows/DLLX/DNSSD.cpp	/^CDNSSD::RegisterReply$/;"	f	class:CDNSSD
RegisterReply	mDNSWindows/DLLX/DNSSDService.cpp	/^CDNSSDService::RegisterReply$/;"	f	class:CDNSSDService
RegisterServer	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^DEBUG_LOCAL OSStatus	RegisterServer( HINSTANCE inInstance, CLSID inCLSID, LPCTSTR inName )$/;"	f
RegisterService	Clients/dns-sd.c	/^static DNSServiceErrorType RegisterService(DNSServiceRef *sdref,$/;"	f	file:
RegisterService	mDNSMacOS9/Mac OS Test Responder.c	/^mDNSlocal void RegisterService(mDNS *m, ServiceRecordSet *recordset,$/;"	f
RegisterService	mDNSMacOS9/Responder.c	/^static DNSServiceErrorType RegisterService(RegisteredService *rs, mDNSOpaque16 OpaquePort,$/;"	f	file:
RegisterService	mDNSMacOS9/SubTypeTester.c	/^mDNSlocal void RegisterService(mDNS *m, ServiceRecordSet *recordset,$/;"	f
RegisterService	mDNSPosix/ProxyResponder.c	/^mDNSlocal void RegisterService(mDNS *m, ServiceRecordSet *recordset,$/;"	f
RegisterServicesInFile	mDNSPosix/Responder.c	/^static mStatus RegisterServicesInFile(const char *filePath)$/;"	f	file:
Registered	mDNSMacOSX/mDNSMacOSX.h	/^    NetworkInterfaceInfoOSX *Registered;        \/\/ non-NULL means registered with mDNS Core$/;"	m	struct:NetworkInterfaceInfoOSX_struct
RegisteredService	mDNSMacOS9/Responder.c	/^typedef struct RegisteredService_struct RegisteredService;$/;"	t	typeref:struct:RegisteredService_struct	file:
RegisteredService_struct	mDNSMacOS9/Responder.c	/^struct RegisteredService_struct$/;"	s	file:
RegistrarTest	Clients/Java/DNSSDUnitTest.java	/^	public		RegistrarTest()$/;"	m	class:RegistrarTest
RegistrarTest	Clients/Java/DNSSDUnitTest.java	/^class	RegistrarTest extends TermReporter implements RegisterRecordListener$/;"	c
RegistrationCallback	mDNSPosix/Responder.c	/^static void RegistrationCallback(mDNS *const m, ServiceRecordSet *const thisRegistration, mStatus status)$/;"	f	file:
RehashTable	mDNSShared/dnsextd.c	/^mDNSlocal void RehashTable(DaemonInfo *d)$/;"	f
ReissueBlockedQuestionWithType	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void ReissueBlockedQuestionWithType(mDNS *const m, domainname *d, mDNSBool success, mDNSu16 qtype)$/;"	f
ReissueBlockedQuestions	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void ReissueBlockedQuestions(mDNS *const m, domainname *d, mDNSBool success)$/;"	f
Release	Clients/ExplorerPlugin/ClassFactory.cpp	/^STDMETHODIMP_( DWORD )	ClassFactory::Release( void )$/;"	f	class:ClassFactory
Release	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP_( DWORD )	ExplorerBar::Release( void )$/;"	f	class:ExplorerBar
Release	mDNSMacOSX/BonjourEvents.c	/^static ULONG Release(void* instance)$/;"	f	file:
ReleaseAdditionalCacheRecords	mDNSCore/mDNS.c	/^mDNSlocal void ReleaseAdditionalCacheRecords(mDNS *const m, CacheRecord **rp)$/;"	f
ReleaseAuthEntity	mDNSCore/mDNS.c	/^mDNSlocal void ReleaseAuthEntity(AuthHash *r, AuthEntity *e)$/;"	f
ReleaseAuthGroup	mDNSCore/mDNS.c	/^mDNSlocal void ReleaseAuthGroup(AuthHash *r, AuthGroup **cp)$/;"	f
ReleaseAuthority	mDNSMacOSX/PreferencePane/ConfigurationAuthority.c	/^OSStatus ReleaseAuthority(void)$/;"	f
ReleaseCacheEntity	mDNSCore/mDNS.c	/^mDNSlocal void ReleaseCacheEntity(mDNS *const m, CacheEntity *e)$/;"	f
ReleaseCacheGroup	mDNSCore/mDNS.c	/^mDNSlocal void ReleaseCacheGroup(mDNS *const m, CacheGroup **cp)$/;"	f
ReleaseCacheRecord	mDNSCore/mDNS.c	/^mDNSexport void ReleaseCacheRecord(mDNS *const m, CacheRecord *r)$/;"	f
RemSpc	mDNSCore/DNSCommon.c	369;"	d	file:
RemoteSubnet	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 RemoteSubnet;               \/\/ Multicast packets received from outside our subnet.$/;"	m	struct:mDNS_struct
Remove	mDNSShared/Java/DNSSD.java	/^	protected native int	Remove();$/;"	m	class:AppleDNSRecord
Remove	mDNSWindows/DLLX/DNSSDRecord.cpp	/^STDMETHODIMP CDNSSDRecord::Remove(DNSSDFlags flags)$/;"	f	class:CDNSSDRecord
RemoveAuthRecord	mDNSCore/mDNS.c	/^mDNSexport AuthGroup *RemoveAuthRecord(mDNS *const m, AuthHash *r, AuthRecord *rr)$/;"	f
RemoveAutoTunnel6Record	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void RemoveAutoTunnel6Record(mDNS *const m)$/;"	f
RemoveEventFromArray	mDNSMacOSX/BonjourEvents.c	/^void RemoveEventFromArray(CFMutableArrayRef array, CFNumberRef launchdToken)$/;"	f
RemoveEventFromPlugin	mDNSMacOSX/BonjourEvents.c	/^void RemoveEventFromPlugin(BonjourUserEventsPlugin* plugin, CFNumberRef launchdToken)$/;"	f
RemoveFromList	mDNSShared/GenLinkedList.c	/^int     RemoveFromList( GenLinkedList *pList, void *elem)$/;"	f
RemoveLabelSuffix	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu32 RemoveLabelSuffix(domainlabel *name, mDNSBool RichText)$/;"	f
RemoveNSP	mDNSWindows/NSPTool/NSPTool.c	/^DEBUG_LOCAL OSStatus	RemoveNSP( const char *inGUID )$/;"	f
RemoveRecord	mDNSMacOSX/daemon.c	/^mDNSlocal mStatus RemoveRecord(ServiceRecordSet *srs, ExtraResourceRecord *extra, mach_port_t client)$/;"	f
RemoveRecord	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSService::RemoveRecord$/;"	f	class:DNSService
RemoveService	mDNSWindows/SystemService/Service.c	/^static OSStatus	RemoveService( LPCTSTR inName )$/;"	f	file:
RemoveSourceFromEventLoop	mDNSShared/dnsextd.c	/^mDNSlocal mStatus RemoveSourceFromEventLoop( DaemonInfo * self, TCPSocket *sock )$/;"	f
RemoveValue	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^TextRecord::RemoveValue$/;"	f	class:TextRecord
RemoveValue	mDNSWindows/DLLX/TXTRecord.cpp	/^STDMETHODIMP CTXTRecord::RemoveValue(BSTR key)$/;"	f	class:CTXTRecord
ReorderNameSpaces	mDNSWindows/NSPTool/NSPTool.c	/^DEBUG_LOCAL OSStatus	ReorderNameSpaces( void )$/;"	f
ReorderSPSByFeature	mDNSCore/mDNS.c	/^mDNSlocal void ReorderSPSByFeature(const CacheRecord *sps[3])$/;"	f
ReplaceElem	mDNSShared/GenLinkedList.c	/^int         ReplaceElem( GenLinkedList *pList, void *elemInList, void *newElem)$/;"	f
Reply	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8           *Reply;            \/\/ xml reply from router$/;"	m	struct:tcpLNTInfo_struct
ReportError	mDNSShared/Java/JNISupport.c	/^static void         ReportError( JNIEnv *pEnv, jobject target, jobject service, DNSServiceErrorType err)$/;"	f	file:
ReportStatus	mDNSWindows/SystemService/Service.c	/^static void	ReportStatus( int inType, const char *inFormat, ... )$/;"	f	file:
ReportStatusFunc	mDNSWindows/mDNSWin32.h	/^typedef void		(*ReportStatusFunc)(int inType, const char *inFormat, ...);$/;"	t
ReportTime	mDNSMacOSX/daemon.c	/^    mDNSs32 ReportTime;$/;"	m	struct:DNSServiceResolver_struct	file:
ReportTime	mDNSShared/uds_daemon.c	/^            mDNSs32 ReportTime;$/;"	m	struct:request_state::__anon124::__anon131	file:
ReqExt	mDNSShared/uds_daemon.c	/^            mDNSIPPort ReqExt;              \/\/ External port we originally requested, for logging purposes$/;"	m	struct:request_state::__anon124::__anon128	file:
ReqLease	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 ReqLease;                       \/\/ seconds (relative)$/;"	m	struct:DNSQuestion_struct
Request	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8           *Request;          \/\/ xml request to router$/;"	m	struct:tcpLNTInfo_struct
RequestReSleep	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSs32 RequestReSleep;$/;"	m	struct:mDNS_PlatformSupport_struct
RequestReceived	mDNSShared/dnsextd.h	/^    RequestReceived = 0,$/;"	e	enum:__anon115
RequestUnicast	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 RequestUnicast;                 \/\/ Non-zero if we want to send query with kDNSQClass_UnicastResponse bit set$/;"	m	struct:DNSQuestion_struct
RequestedPort	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort RequestedPort;                       \/\/ Requested external port; may be updated with actual value assigned by gateway$/;"	m	struct:NATTraversalInfo_struct
RequestedPortNum	mDNSMacOSX/LegacyNATTraversal.c	79;"	d	file:
RequireGoodbye	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 RequireGoodbye;              \/\/ Set if this RR has been announced on the wire and will require a goodbye packet$/;"	m	struct:AuthRecord_struct
RequiredCapLen	mDNSCore/mDNS.c	13979;"	d	file:
Reserved	Clients/PrinterSetupWizard/tcpxcv.h	/^    BYTE Reserved[128];$/;"	m	struct:_CONFIG_INFO_DATA_1
Reserved	Clients/PrinterSetupWizard/tcpxcv.h	/^    BYTE Reserved[514];$/;"	m	struct:_PORT_DATA_2
Reserved	Clients/PrinterSetupWizard/tcpxcv.h	/^    BYTE Reserved[540];$/;"	m	struct:_PORT_DATA_1
Reserved	Clients/PrinterSetupWizard/tcpxcv.h	/^    BYTE Reserved[98];$/;"	m	struct:_DELETE_PORT_DATA_1
ResetAnonInfoSRS	mDNSCore/mDNS.c	/^mDNSlocal void ResetAnonInfoSRS(ServiceRecordSet *sr, int NumSubTypes)$/;"	f
ResetAuthChain	mDNSCore/dnssec.h	57;"	d
ResetQuestionState	mDNSCore/mDNS.c	/^mDNSlocal void ResetQuestionState(mDNS *const m, DNSQuestion *q)$/;"	f
ResizeBorderDW	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::ResizeBorderDW( LPCRECT inBorder, IUnknown *inPunkSite, BOOL inReserved )$/;"	f	class:ExplorerBar
Resolve	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::Resolve(PRInt32 interfaceIndex, const nsAString & name, const nsAString & regtype, const nsAString & domain, IDNSSDResolveListener *listener, IDNSSDService **_retval NS_OUTPARAM)$/;"	f	class:CDNSSDService
Resolve	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSService::Resolve$/;"	f	class:DNSService
Resolve	mDNSWindows/DLLX/DNSSD.cpp	/^STDMETHODIMP CDNSSD::Resolve(DNSSDFlags flags, ULONG ifIndex, BSTR serviceName, BSTR regType, BSTR domain, IResolveListener* listener, IDNSSDService** service)$/;"	f	class:CDNSSD
Resolve	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::Resolve(DNSSDFlags flags, ULONG ifIndex, BSTR serviceName, BSTR regType, BSTR domain, IDNSSDEventManager* eventManager, IDNSSDService** service)$/;"	f	class:CDNSSDService
ResolveCallBack	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^	ExplorerBarWindow::ResolveCallBack($/;"	f	class:ExplorerBarWindow
ResolveCallback	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRefImpl::ResolveCallback$/;"	f	class:ServiceRef::ServiceRefImpl
ResolveData	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		public class ResolveData$/;"	c	class:DNSServiceBrowser_NET.Form1
ResolveDispatch	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ResolveDispatch$/;"	f	class:ServiceRef
ResolveInfo	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^struct  ResolveInfo$/;"	s
ResolveListener	mDNSShared/Java/ResolveListener.java	/^public interface ResolveListener extends BaseListener$/;"	i
ResolveReply	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::ResolveReply$/;"	f	class:CDNSSDService
ResolveReply	mDNSWindows/DLLX/DNSSD.cpp	/^CDNSSD::ResolveReply$/;"	f	class:CDNSSD
ResolveReply	mDNSWindows/DLLX/DNSSDService.cpp	/^CDNSSDService::ResolveReply$/;"	f	class:CDNSSDService
ResolveSimultaneousProbe	mDNSCore/mDNS.c	/^mDNSlocal void ResolveSimultaneousProbe(mDNS *const m, const DNSMessage *const query, const mDNSu8 *const end,$/;"	f
ResolveTest	Clients/Java/DNSSDUnitTest.java	/^	public		ResolveTest( int flags, int ifIndex, String serviceName, String regType, $/;"	m	class:ResolveTest
ResolveTest	Clients/Java/DNSSDUnitTest.java	/^class	ResolveTest extends TermReporter implements ResolveListener$/;"	c
ResourceRecord	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct ResourceRecord_struct ResourceRecord;$/;"	t	typeref:struct:ResourceRecord_struct
ResourceRecordAnswersQuestion	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool ResourceRecordAnswersQuestion(const ResourceRecord *const rr, const DNSQuestion *const q)$/;"	f
ResourceRecordAnswersUnicastResponse	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool ResourceRecordAnswersUnicastResponse(const ResourceRecord *const rr, const DNSQuestion *const q)$/;"	f
ResourceRecordIsValidAnswer	mDNSCore/mDNS.c	660;"	d	file:
ResourceRecordIsValidInterfaceAnswer	mDNSCore/mDNS.c	665;"	d	file:
ResourceRecord_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct ResourceRecord_struct$/;"	s
ResourceRecords	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord *ResourceRecords;$/;"	m	struct:mDNS_struct
ResponseFlags	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSOpaque16 ResponseFlags   = { { kDNSFlag0_QR_Response | kDNSFlag0_OP_StdQuery | kDNSFlag0_AA, 0 } };$/;"	v
Restart	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 Restart;                         \/\/ This question should be restarted soon$/;"	m	struct:DNSQuestion_struct
RestartARPProbing	mDNSCore/mDNS.c	/^mDNSlocal void RestartARPProbing(mDNS *const m, AuthRecord *const rr)$/;"	f
RestartQuestion	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion *RestartQuestion;       \/\/ Questions that are being restarted (stop followed by start)$/;"	m	struct:mDNS_struct
RestartRecordGetZoneData	mDNSCore/mDNS.c	/^mDNSlocal void RestartRecordGetZoneData(mDNS * const m)$/;"	f
RestartUnicastQuestions	mDNSCore/mDNS.c	/^mDNSlocal void RestartUnicastQuestions(mDNS *const m)$/;"	f
Result	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus Result;$/;"	m	struct:NATTraversalInfo_struct
RetryQuestionWithSearchDomains	mDNSShared/uds_daemon.c	/^mDNSlocal mDNSBool RetryQuestionWithSearchDomains(mDNS *const m, DNSQuestion *question, request_state *req, QC_result AddRecord)$/;"	f
RetrySPSRegistrations	mDNSCore/mDNS.c	/^mDNSlocal void RetrySPSRegistrations(mDNS *const m)$/;"	f
RetrySearchDomainQuestions	mDNSCore/uDNS.c	/^mDNSexport void RetrySearchDomainQuestions(mDNS *const m)$/;"	f
RetryWithSearchDomains	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 RetryWithSearchDomains;          \/\/ Retry with search domains if there is no entry in the cache or AuthRecords$/;"	m	struct:DNSQuestion_struct
ReturnIntermed	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool ReturnIntermed;                \/\/ Set by client to request callbacks for intermediate CNAME\/NXDOMAIN results$/;"	m	struct:DNSQuestion_struct
ReverseMap	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion ReverseMap;                 \/\/ Reverse-map query to find static hostname for service target$/;"	m	struct:mDNS_struct
ReverseMapDomainType	mDNSCore/mDNS.c	/^mDNSlocal mDNSs32 ReverseMapDomainType(const domainname *const name)$/;"	f
RmvAutoBrowseDomain	mDNSShared/uds_daemon.c	/^mDNSlocal void RmvAutoBrowseDomain(const mDNSu32 uid, const domainname *const name)$/;"	f
RoundUp	mDNSShared/CommonServices.h	614;"	d
Router	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr Router;$/;"	m	struct:mDNS_struct
Run	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::Run()$/;"	f	class:CDNSSDService
Run	mDNSShared/dnsextd.c	/^mDNSlocal int Run(DaemonInfo *d)$/;"	f
RunDirect	mDNSWindows/SystemService/Service.c	/^int	RunDirect( int argc, LPTSTR argv[] )$/;"	f
SAME_INADDR	mDNSShared/dnsextd.c	93;"	d	file:
SA_LEN	Clients/dns-sd.c	149;"	d	file:
SA_LEN	Clients/dns-sd.c	163;"	d	file:
SCPrefBrowseDomains	mDNSShared/uds_daemon.c	/^static DNameListElem *SCPrefBrowseDomains;          \/\/ List of automatic browsing domains read from SCPreferences for "empty string" browsing$/;"	v	file:
SC_DYNDNS_BROWSEDOMAINS_KEY	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	56;"	d
SC_DYNDNS_DOMAIN_KEY	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	58;"	d
SC_DYNDNS_ENABLED_KEY	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	61;"	d
SC_DYNDNS_HOSTNAMES_KEY	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	57;"	d
SC_DYNDNS_KEYNAME_KEY	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	59;"	d
SC_DYNDNS_REGDOMAINS_KEY	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	55;"	d
SC_DYNDNS_SECRET_KEY	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	60;"	d
SC_DYNDNS_SETUP_KEY	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	53;"	d
SC_DYNDNS_STATE_KEY	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	54;"	d
SC_DYNDNS_STATUS_KEY	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	62;"	d
SERVICENOTRUNNING	mDNSShared/Java/DNSSDException.java	/^    public static final int		SERVICENOTRUNNING         = -65563;$/;"	f	class:DNSSDException
SET_QU_IN_FIRST_FOUR_QUERIES	mDNSCore/mDNS.c	113;"	d	file:
SET_QU_IN_FIRST_QUERY	mDNSCore/mDNS.c	112;"	d	file:
SHA1_DIGEST_TYPE	mDNSCore/mDNSEmbeddedAPI.h	788;"	d
SHA1_HASH_LENGTH	mDNSCore/mDNSEmbeddedAPI.h	874;"	d
SHA256_DIGEST_TYPE	mDNSCore/mDNSEmbeddedAPI.h	789;"	d
SHARED	mDNSShared/Java/DNSSD.java	/^	public static final int		SHARED = ( 1 << 4 );$/;"	f	class:DNSSD
SHAREDDIR	mDNSPosix/Makefile	/^SHAREDDIR ?= ..\/mDNSShared$/;"	m
SHAREDDIR	mDNSWindows/Java/makefile	/^SHAREDDIR = ..\\..\\mDNSShared$/;"	m
SHMENUBAR	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	4;"	d
SIOCGIFWAKEFLAGS	mDNSMacOSX/mDNSMacOSX.c	3830;"	d	file:
SLE_DELETE	mDNSCore/mDNSEmbeddedAPI.h	2143;"	d
SLE_WAB_BROWSE_QUERY_STARTED	mDNSCore/mDNSEmbeddedAPI.h	2144;"	d
SLE_WAB_LBROWSE_QUERY_STARTED	mDNSCore/mDNSEmbeddedAPI.h	2145;"	d
SLE_WAB_REG_QUERY_STARTED	mDNSCore/mDNSEmbeddedAPI.h	2146;"	d
SMBPortAsNumber	mDNSWindows/mDNSWin32.c	85;"	d	file:
SMBRegistrationThread	mDNSWindows/mDNSWin32.c	/^SMBRegistrationThread( void * arg )$/;"	f
SOCKADDR_IS_IP_LINK_LOCAL	mDNSShared/CommonServices.h	518;"	d
SOCKADDR_IS_IP_LINK_LOCAL	mDNSShared/CommonServices.h	524;"	d
SOCKADDR_IS_IP_LOOPBACK	mDNSShared/CommonServices.h	498;"	d
SOCKADDR_IS_IP_LOOPBACK	mDNSShared/CommonServices.h	505;"	d
SPECIALOBJ	mDNSPosix/Makefile	/^SPECIALOBJ = $(OBJDIR)\/mDNSPosix.c.o $(OBJDIR)\/mDNSUNP.c.o $(OBJDIR)\/mDNSDebug.c.o $(OBJDIR)\/GenLinkedList.c.o \\$/;"	m
SPMetricFeatures	mDNSMacOSX/mDNSMacOSX.c	/^static mDNSu8 SPMetricFeatures      = 1; \/* The current version supports TCP Keep Alive Feature *\/$/;"	v	file:
SPMetricMarginalPower	mDNSMacOSX/mDNSMacOSX.c	/^static mDNSu8 SPMetricMarginalPower = 99;$/;"	v	file:
SPMetricPortability	mDNSMacOSX/mDNSMacOSX.c	/^static mDNSu8 SPMetricPortability   = 99;$/;"	v	file:
SPMetricTotalPower	mDNSMacOSX/mDNSMacOSX.c	/^static mDNSu8 SPMetricTotalPower    = 99;$/;"	v	file:
SPSAddr	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr SPSAddr[3];$/;"	m	struct:NetworkInterfaceInfo_struct
SPSBrowseCallback	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSQuestionCallback *SPSBrowseCallback;    \/\/ So the platform layer can do something useful with SPS browse results$/;"	m	struct:mDNS_struct
SPSCreateDict	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal CFMutableDictionaryRef SPSCreateDict(const mDNSu8* const ptr)$/;"	f
SPSFeatureFlags	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SPSFeatureFlags;                     \/\/ Features supported. Currently 1 = TCP KeepAlive supported.$/;"	m	struct:mDNS_struct
SPSFeatures	mDNSCore/mDNSEmbeddedAPI.h	3485;"	d
SPSInitRecordsBeforeUpdate	mDNSCore/mDNS.c	/^mDNSlocal void SPSInitRecordsBeforeUpdate(mDNS *const m, mDNSOpaque64 updateIntID, mDNSBool *WakeOnlyService)$/;"	f
SPSMarginalPower	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SPSMarginalPower;                    \/\/ 10-99$/;"	m	struct:mDNS_struct
SPSMetric	mDNSCore/mDNSEmbeddedAPI.h	3482;"	d
SPSPort	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort SPSPort[3];$/;"	m	struct:NetworkInterfaceInfo_struct
SPSPortability	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SPSPortability;                      \/\/ 10-99$/;"	m	struct:mDNS_struct
SPSProxyListChanged	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID SPSProxyListChanged;$/;"	m	struct:mDNS_struct
SPSRRSet	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord *SPSRRSet;                       \/\/ To help the client keep track of the records registered with the sleep proxy$/;"	m	struct:mDNS_struct
SPSRecordCallback	mDNSCore/mDNS.c	/^mDNSlocal void SPSRecordCallback(mDNS *const m, AuthRecord *const ar, mStatus result)$/;"	f
SPSRecords	mDNSCore/mDNSEmbeddedAPI.h	/^    ServiceRecordSet SPSRecords;$/;"	m	struct:mDNS_struct
SPSSleepNotification	mDNSWindows/SystemService/Service.c	/^SPSSleepNotification( HANDLE event, void *context )$/;"	f
SPSSocket	mDNSCore/mDNSEmbeddedAPI.h	/^    UDPSocket        *SPSSocket;$/;"	m	struct:mDNS_struct
SPSState	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SPSState;                            \/\/ 0 = off, 1 = running, 2 = shutting down, 3 = suspended during sleep$/;"	m	struct:mDNS_struct
SPSStatusPutNumber	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void SPSStatusPutNumber(CFMutableDictionaryRef dict, const mDNSu8* const ptr, CFStringRef key)$/;"	f
SPSTotalPower	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SPSTotalPower;                       \/\/ 10-99$/;"	m	struct:mDNS_struct
SPSType	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SPSType;                             \/\/ 0 = off, 10-99 encodes desirability metric$/;"	m	struct:mDNS_struct
SPSWakeupNotification	mDNSWindows/SystemService/Service.c	/^SPSWakeupNotification( HANDLE event, void *context )$/;"	f
SRSET	mDNSMacOS9/Mac OS Test Responder.c	144;"	d	file:
SRSET	mDNSMacOS9/Responder.c	152;"	d	file:
SRS_PORT	mDNSShared/uds_daemon.h	30;"	d
SRV	mDNSShared/dnssd_clientshim.c	/^    const ResourceRecord   *SRV;$/;"	m	struct:__anon120	file:
SRVChanged	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool SRVChanged;       \/\/ temporarily deregistered service because its SRV target or port changed$/;"	m	struct:AuthRecord_struct
SRV_TTL	mDNSShared/dnsextd.c	75;"	d	file:
SSDPPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort SSDPPort               = { { SSDPPortAsNumber               >> 8, SSDPPortAsNumber               & 0xFF } };$/;"	v
SSDPPortAsNumber	mDNSCore/DNSCommon.c	57;"	d	file:
SSDPSocket	mDNSCore/mDNSEmbeddedAPI.h	/^    UDPSocket        *SSDPSocket;               \/\/ For SSDP request\/response$/;"	m	struct:mDNS_struct
SSDPWANPPPConnection	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool SSDPWANPPPConnection;              \/\/ whether we should send the SSDP query for WANIPConnection or WANPPPConnection$/;"	m	struct:mDNS_struct
SSHPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort SSHPort                = { { SSHPortAsNumber                >> 8, SSHPortAsNumber                & 0xFF } };$/;"	v
SSHPortAsNumber	mDNSCore/DNSCommon.c	55;"	d	file:
SSLqueue	mDNSMacOSX/mDNSMacOSX.c	/^dispatch_queue_t SSLqueue;$/;"	v
STARTUPSCRIPTDIR	mDNSPosix/Makefile	/^STARTUPSCRIPTDIR = $(INSTBASE)\/etc\/rc.d$/;"	m
STARTUPSCRIPTDIR	mDNSPosix/Makefile	/^STARTUPSCRIPTDIR = \/etc\/init.d$/;"	m
STARTUPSCRIPTDIR	mDNSPosix/Makefile	/^STARTUPSCRIPTDIR = \/etc\/rc.d\/init.d$/;"	m
STARTUPSCRIPTNAME	mDNSPosix/Makefile	/^STARTUPSCRIPTNAME?=mdns$/;"	m
STRICT	mDNSWindows/DLLX/stdafx.h	26;"	d
STRINGIFY	Clients/dns-sd.c	1805;"	d	file:
STRINGIFY	mDNSCore/DNSCommon.h	34;"	d
STRINGIFY	mDNSMacOSX/helper-main.c	288;"	d	file:
STRINGIFY	mDNSShared/Java/JNISupport.c	1068;"	d	file:
STRINGIFY	mDNSShared/dnssd_clientlib.c	362;"	d	file:
STRINGIFY_ARGUMENT_WITHOUT_EXPANSION	Clients/dns-sd.c	1804;"	d	file:
STRINGIFY_ARGUMENT_WITHOUT_EXPANSION	mDNSCore/DNSCommon.h	33;"	d
STRINGIFY_ARGUMENT_WITHOUT_EXPANSION	mDNSMacOSX/helper-main.c	287;"	d	file:
STRINGIFY_ARGUMENT_WITHOUT_EXPANSION	mDNSShared/Java/JNISupport.c	1067;"	d	file:
STRINGIFY_ARGUMENT_WITHOUT_EXPANSION	mDNSShared/dnssd_clientlib.c	361;"	d	file:
STRIP	mDNSPosix/Makefile	/^STRIP = echo $/;"	m
STRIP	mDNSPosix/Makefile	/^STRIP = strip -S $/;"	m
STRIP	mDNSPosix/Makefile	/^STRIP = strip$/;"	m
SafeDebugStr	mDNSMacOS9/mDNSMacOS9.c	/^mDNSlocal void SafeDebugStr(unsigned char *buffer)$/;"	f
SafeGetUTFChars	mDNSShared/Java/JNISupport.c	/^static const char*  SafeGetUTFChars( JNIEnv *pEnv, jstring str)$/;"	f	file:
SafeReleaseUTFChars	mDNSShared/Java/JNISupport.c	/^static void         SafeReleaseUTFChars( JNIEnv *pEnv, jstring str, const char *buff)$/;"	f	file:
SameDomainLabel	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool SameDomainLabel(const mDNSu8 *a, const mDNSu8 *b)$/;"	f
SameDomainLabelCS	mDNSCore/mDNSEmbeddedAPI.h	2804;"	d
SameDomainName	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool SameDomainName(const domainname *const d1, const domainname *const d2)$/;"	f
SameDomainNameCS	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool SameDomainNameCS(const domainname *const d1, const domainname *const d2)$/;"	f
SameNameRecordAnswersQuestion	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool SameNameRecordAnswersQuestion(const ResourceRecord *const rr, const DNSQuestion *const q)$/;"	f
SameQTarget	mDNSCore/mDNS.c	10311;"	d	file:
SameRDataBody	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool SameRDataBody(const ResourceRecord *const r1, const RDataBody *const r2, DomainNameComparisonFn *samename)$/;"	f
SameResourceRecordNameClassInterface	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool SameResourceRecordNameClassInterface(const AuthRecord *const r1, const AuthRecord *const r2)$/;"	f
SameResourceRecordSignature	mDNSCore/mDNS.c	727;"	d	file:
SanityCheckBitMap	mDNSCore/DNSCommon.c	/^mDNSlocal mDNSu8 *SanityCheckBitMap(const mDNSu8 *bmap, const mDNSu8 *end, int len)$/;"	f
Save	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::Save( LPSTREAM inStream, BOOL inClearDirty )$/;"	f	class:ExplorerBar
ScheduleNextCacheCheckTime	mDNSCore/mDNS.c	/^mDNSexport void ScheduleNextCacheCheckTime(mDNS *const m, const mDNSu32 slot, const mDNSs32 event)$/;"	f
ScheduleNextTimerCallback	mDNSMacOS9/mDNSMacOS9.c	/^mDNSlocal void ScheduleNextTimerCallback(const mDNS *const m)$/;"	f
ScheduleWakeup	mDNSCore/mDNS.c	/^mDNSlocal void ScheduleWakeup(mDNS *const m, mDNSInterfaceID InterfaceID, mDNSEthAddr *e)$/;"	f
ScheduleWakeupForList	mDNSCore/mDNS.c	/^mDNSlocal void ScheduleWakeupForList(mDNS *const m, mDNSInterfaceID InterfaceID, mDNSEthAddr *e, AuthRecord *const thelist)$/;"	f
SearchDomainsHash	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SearchDomainsHash[MD5_LEN];$/;"	m	struct:mDNS_struct
SearchForInterfaceByName	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal NetworkInterfaceInfoOSX *SearchForInterfaceByName(mDNS *const m, const char *ifname, int type)$/;"	f
SearchForInterfaceByName	mDNSPosix/mDNSPosix.c	/^mDNSlocal PosixNetworkInterface *SearchForInterfaceByName(mDNS *const m, const char *intfName)$/;"	f
SearchList	mDNSCore/uDNS.c	/^mDNSexport SearchListElem *SearchList = mDNSNULL;$/;"	v
SearchListElem	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct SearchListElem$/;"	s
SearchListElem	mDNSCore/mDNSEmbeddedAPI.h	/^} SearchListElem;$/;"	t	typeref:struct:SearchListElem
SearchListIndex	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs8 SearchListIndex;                 \/\/ Index into SearchList; Used by the client layer but not touched by core$/;"	m	struct:DNSQuestion_struct
SearcherServices	mDNSMacOS9/Mac OS Test Searcher.c	/^	} SearcherServices;$/;"	t	typeref:struct:__anon181	file:
SearcherServices	mDNSMacOS9/Searcher.c	/^} SearcherServices;$/;"	t	typeref:struct:__anon186	file:
SecKeyCreateRSAPublicKey_OSX	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal SecKeyRef SecKeyCreateRSAPublicKey_OSX(unsigned char *asn1, int length)$/;"	f
SecondLabel	mDNSCore/mDNSEmbeddedAPI.h	2814;"	d
SecureStatus	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 SecureStatus;$/;"	m	struct:__anon91
SelectMatch	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::SelectMatch(Manufacturers & manufacturers, Printer * printer, Service * service, Manufacturer * manufacturer, Model * model)$/;"	f	class:CThirdPage
SelectMatch	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::SelectMatch(Printer * printer, Service * service, Manufacturer * manufacturer, Model * model)$/;"	f	class:CThirdPage
SelectedQueue	Clients/PrinterSetupWizard/UtilTypes.h	/^Service::SelectedQueue()$/;"	f	class:PrinterSetupWizard::Service
SendARP	mDNSCore/mDNS.c	/^mDNSlocal void SendARP(mDNS *const m, const mDNSu8 op, const AuthRecord *const rr,$/;"	f
SendAdditionalQuery	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus SendAdditionalQuery(DNSQuestion *q, request_state *request, mStatus err)$/;"	f
SendCommand	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mStatus   SendCommand( const mDNS * const inMDNS, MDNSPipeCommandCode inCommandCode )$/;"	f
SendCommand	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mStatus   SendCommand( const mDNS * const inMDNS, MDNSPipeCommandCode inCommandCode )$/;"	f
SendDelayedUnicastResponse	mDNSCore/mDNS.c	/^mDNSlocal void SendDelayedUnicastResponse(mDNS *const m, const mDNSAddr *const dest, const mDNSInterfaceID InterfaceID)$/;"	f
SendError	mDNSCore/dnsproxy.c	/^mDNSlocal void SendError(mDNS *const m, void *socket, void *const pkt, const mDNSu8 *const end, const mDNSAddr *dstaddr,$/;"	f
SendEvents	mDNSShared/dnsextd.c	/^mDNSlocal void SendEvents(DaemonInfo *d, LLQEntry *e)$/;"	f
SendGoodbyes	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SendGoodbyes;                \/\/ Send goodbyes on this interface while sleeping$/;"	m	struct:NetworkInterfaceInfo_struct
SendGoodbyesForWakeOnlyService	mDNSCore/mDNS.c	/^mDNSlocal void SendGoodbyesForWakeOnlyService(mDNS *const m, mDNSBool *WakeOnlyService)$/;"	f
SendGroupRRMessage	mDNSCore/uDNS.c	/^mDNSlocal void SendGroupRRMessage(mDNS *const m, AuthRecord *anchorRR, mDNSu8 *ptr, DomainAuthInfo *info)$/;"	f
SendGroupUpdates	mDNSCore/uDNS.c	/^mDNSlocal mDNSBool SendGroupUpdates(mDNS *const m)$/;"	f
SendLLQ	mDNSShared/dnsextd.c	/^mDNSlocal int SendLLQ(DaemonInfo *d, PktMsg *pkt, struct sockaddr_in dst, TCPSocket *sock)$/;"	f
SendMsgToServer	mDNSMacOSX/Private/dns_services.c	/^static DNSXErrorType SendMsgToServer(DNSXConnRef *connRef, xpc_object_t msg, bool old_conn)$/;"	f	file:
SendMulticastWakeupPacket	mDNSWindows/mDNSWin32.c	/^SendMulticastWakeupPacket( void *arg )$/;"	f
SendNDP	mDNSCore/mDNS.c	/^mDNSlocal void SendNDP(mDNS *const m, const mDNSu8 op, const mDNSu8 flags, const AuthRecord *const rr,$/;"	f
SendNSECNow	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID SendNSECNow;        \/\/ Set if we need to generate associated NSEC data for this rrname$/;"	m	struct:AuthRecord_struct
SendNow	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID SendNow;     \/\/ The interface ID that this record should be sent on$/;"	m	struct:__anon72
SendOnAll	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool SendOnAll;                     \/\/ Set if we're sending this question on all active interfaces$/;"	m	struct:DNSQuestion_struct
SendPacket	mDNSShared/dnsextd.c	/^mDNSlocal int SendPacket(TCPSocket *sock, PktMsg *pkt)$/;"	f
SendPortMapRequest	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal mStatus SendPortMapRequest(mDNS *m, NATTraversalInfo *n)$/;"	f
SendQNow	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID SendQNow;               \/\/ The interface this query is being sent on right now$/;"	m	struct:DNSQuestion_struct
SendQueries	mDNSCore/mDNS.c	/^mDNSlocal void SendQueries(mDNS *const m)$/;"	f
SendRNow	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID SendRNow;           \/\/ The interface this query is being sent on right now$/;"	m	struct:AuthRecord_struct
SendRecordDeregistration	mDNSCore/uDNS.c	/^mDNSlocal void SendRecordDeregistration(mDNS *m, AuthRecord *rr)$/;"	f
SendRecordRegistration	mDNSCore/uDNS.c	/^mDNSlocal void SendRecordRegistration(mDNS *const m, AuthRecord *rr)$/;"	f
SendResponses	mDNSCore/mDNS.c	/^mDNSlocal void SendResponses(mDNS *const m)$/;"	f
SendSOAPMsgControlAction	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal mStatus SendSOAPMsgControlAction(mDNS *m, tcpLNTInfo *info, const char *const Action, const int numArgs, const Property *const Arguments, const LNTOp_t op)$/;"	f
SendSPSRegistration	mDNSCore/mDNS.c	/^mDNSlocal void SendSPSRegistration(mDNS *const m, NetworkInterfaceInfo *const intf, const mDNSOpaque16 id)$/;"	f
SendSPSRegistrationForOwner	mDNSCore/mDNS.c	/^mDNSlocal void SendSPSRegistrationForOwner(mDNS *const m, NetworkInterfaceInfo *const intf, const mDNSOpaque16 id, const OwnerOptData *const owner)$/;"	f
SendServiceRemovalNotification	mDNSShared/uds_daemon.c	/^mDNSlocal void SendServiceRemovalNotification(ServiceRecordSet *const srs)$/;"	f
SendSleepGoodbyes	mDNSCore/mDNS.c	/^mDNSlocal void SendSleepGoodbyes(mDNS *const m, mDNSBool AllInterfaces, mDNSBool unicast)$/;"	f
SendUnicastQuery	mDNSPosix/NetMonitor.c	/^mDNSlocal void SendUnicastQuery(mDNS *const m, HostEntry *entry, domainname *name, mDNSu16 rrtype, mDNSInterfaceID InterfaceID)$/;"	f
SendWakeup	mDNSCore/mDNS.c	/^mDNSlocal void SendWakeup(mDNS *const m, mDNSInterfaceID InterfaceID, mDNSEthAddr *EthAddr, mDNSOpaque48 *password)$/;"	f
SendWakeupPacket	mDNSWindows/mDNSWin32.c	/^SendWakeupPacket( mDNS * const inMDNS, LPSOCKADDR addr, INT addrlen, const char * buf, INT buflen, INT numTries, INT msecSleep )$/;"	f
SentSleepProxyRegistration	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SentSleepProxyRegistration;  \/\/ Set if we registered (or tried to register) with a Sleep Proxy$/;"	m	struct:mDNS_struct
ServerCerts	mDNSMacOSX/mDNSMacOSX.c	/^static CFArrayRef ServerCerts;$/;"	v	file:
Service	Clients/PrinterSetupWizard/UtilTypes.h	/^Service::Service()$/;"	f	class:PrinterSetupWizard::Service
Service	Clients/PrinterSetupWizard/UtilTypes.h	/^struct Service$/;"	s	namespace:PrinterSetupWizard
ServiceBrowseReply	mDNSShared/Java/JNISupport.c	/^static void DNSSD_API   ServiceBrowseReply( DNSServiceRef sdRef _UNUSED, DNSServiceFlags flags, uint32_t interfaceIndex,$/;"	f	file:
ServiceBrowserCallback	mDNSMacOSX/BonjourEvents.c	/^void ServiceBrowserCallback (DNSServiceRef sdRef,$/;"	f
ServiceCallback	mDNSCore/mDNS.c	/^mDNSlocal void ServiceCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
ServiceCallback	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSServiceCallback *ServiceCallback;$/;"	m	struct:ServiceRecordSet_struct
ServiceCallback	mDNSPosix/ProxyResponder.c	/^mDNSlocal void ServiceCallback(mDNS *const m, ServiceRecordSet *const sr, mStatus result)$/;"	f
ServiceContext	mDNSCore/mDNSEmbeddedAPI.h	/^    void                *ServiceContext;$/;"	m	struct:ServiceRecordSet_struct
ServiceControlHandler	mDNSWindows/SystemService/Service.c	/^static DWORD WINAPI	ServiceControlHandler( DWORD inControl, DWORD inEventType, LPVOID inEventData, LPVOID inContext )$/;"	f	file:
ServiceEventInfo	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^struct	ServiceEventInfo$/;"	s	file:
ServiceFound	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^        public void ServiceFound$/;"	m	class:DNSServiceBrowser_NET.Form1
ServiceFound	Clients/SimpleChat.NET/SimpleChat.cs	/^        ServiceFound$/;"	m	class:SimpleChat.NET.SimpleChat
ServiceHandlerArray	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^typedef CArray < ServiceHandlerEntry *, ServiceHandlerEntry * >     ServiceHandlerArray;$/;"	t
ServiceHandlerEntry	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    ServiceHandlerEntry( void )$/;"	f	struct:ServiceHandlerEntry
ServiceHandlerEntry	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^struct  ServiceHandlerEntry$/;"	s
ServiceID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32      ServiceID;                 \/\/ Service identifier to match against the DNS server$/;"	m	struct:DNSQuestion_struct
ServiceInfo	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    ServiceInfo( void )$/;"	f	struct:ServiceInfo
ServiceInfo	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^struct  ServiceInfo$/;"	s
ServiceInfo	mDNSCore/mDNSEmbeddedAPI.h	/^} ServiceInfo;$/;"	t	typeref:struct:__anon86
ServiceInfoArray	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^typedef CArray < ServiceInfo *, ServiceInfo * >     ServiceInfoArray;$/;"	t
ServiceInfoQuery	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct ServiceInfoQuery_struct ServiceInfoQuery;$/;"	t	typeref:struct:ServiceInfoQuery_struct
ServiceInfoQueryCallback	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSServiceInfoQueryCallback *ServiceInfoQueryCallback;$/;"	m	struct:ServiceInfoQuery_struct
ServiceInfoQueryContext	mDNSCore/mDNSEmbeddedAPI.h	/^    void                         *ServiceInfoQueryContext;$/;"	m	struct:ServiceInfoQuery_struct
ServiceInfoQuery_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct ServiceInfoQuery_struct$/;"	s
ServiceInstance	mDNSMacOSX/daemon.c	/^typedef struct ServiceInstance$/;"	s	file:
ServiceInstance	mDNSMacOSX/daemon.c	/^} ServiceInstance;$/;"	t	typeref:struct:ServiceInstance	file:
ServiceInstanceInfo	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^struct	ServiceInstanceInfo$/;"	s
ServiceInstanceVector	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^		typedef std::vector < ServiceInstanceInfo >		ServiceInstanceVector;$/;"	t	class:ChooserDialog
ServiceLost	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^        public void ServiceLost$/;"	m	class:DNSServiceBrowser_NET.Form1
ServiceLost	Clients/SimpleChat.NET/SimpleChat.cs	/^        ServiceLost$/;"	m	class:SimpleChat.NET.SimpleChat
ServiceMain	mDNSWindows/SystemService/Service.c	/^static void WINAPI ServiceMain( DWORD argc, LPTSTR argv[] )$/;"	f	file:
ServiceQueryReply	mDNSShared/Java/JNISupport.c	/^static void DNSSD_API   ServiceQueryReply( DNSServiceRef sdRef _UNUSED, DNSServiceFlags flags, uint32_t interfaceIndex,$/;"	f	file:
ServiceRecordSet	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct ServiceRecordSet_struct ServiceRecordSet;$/;"	t	typeref:struct:ServiceRecordSet_struct
ServiceRecordSet_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct ServiceRecordSet_struct$/;"	s
ServiceRef	mDNSShared/Java/JNISupport.c	/^    DNSServiceRef ServiceRef;$/;"	m	struct:OpContext	file:
ServiceRef	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRef(Object * callback)$/;"	f	class:ServiceRef
ServiceRef	mDNSWindows/DLL.NET/dnssd_NET.h	/^		public __gc class ServiceRef : public IDisposable$/;"	c	namespace:Apple::DNSSD
ServiceRefImpl	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRefImpl::ServiceRefImpl(ServiceRef * outer)$/;"	f	class:ServiceRef::ServiceRefImpl
ServiceRefImpl	mDNSWindows/DLL.NET/dnssd_NET.h	/^			__nogc class ServiceRefImpl$/;"	c	class:Apple::DNSSD::ServiceRef
ServiceRefList	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^typedef std::list< DNSServiceRef >  ServiceRefList;$/;"	t	class:ExplorerBarWindow
ServiceRefList	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^typedef std::list<DNSServiceRef>    ServiceRefList;$/;"	t	class:CPrinterSetupWizardSheet
ServiceRegisterReply	mDNSShared/Java/JNISupport.c	/^static void DNSSD_API   ServiceRegisterReply( DNSServiceRef sdRef _UNUSED, DNSServiceFlags flags,$/;"	f	file:
ServiceRegistered	Clients/SimpleChat.NET/SimpleChat.cs	/^        ServiceRegistered$/;"	m	class:SimpleChat.NET.SimpleChat
ServiceResolveReply	mDNSShared/Java/JNISupport.c	/^static void DNSSD_API   ServiceResolveReply( DNSServiceRef sdRef _UNUSED, DNSServiceFlags flags, uint32_t interfaceIndex,$/;"	f	file:
ServiceResolved	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		public void ServiceResolved$/;"	m	class:DNSServiceBrowser_NET.Form1
ServiceResolved	Clients/SimpleChat.NET/SimpleChat.cs	/^        ServiceResolved$/;"	m	class:SimpleChat.NET.SimpleChat
ServiceRun	mDNSWindows/SystemService/Service.c	/^static OSStatus	ServiceRun( int argc, LPTSTR argv[] )$/;"	f	file:
ServiceSetupEventLogging	mDNSWindows/SystemService/Service.c	/^static OSStatus	ServiceSetupEventLogging( void )$/;"	f	file:
ServiceSpecificFinalize	mDNSWindows/SystemService/Service.c	/^static void	ServiceSpecificFinalize( int argc, LPTSTR argv[] )$/;"	f	file:
ServiceSpecificInitialize	mDNSWindows/SystemService/Service.c	/^static OSStatus	ServiceSpecificInitialize( int argc, LPTSTR argv[] )$/;"	f	file:
ServiceSpecificRun	mDNSWindows/SystemService/Service.c	/^static OSStatus	ServiceSpecificRun( int argc, LPTSTR argv[] )$/;"	f	file:
ServiceSpecificStop	mDNSWindows/SystemService/Service.c	/^static OSStatus	ServiceSpecificStop( void )$/;"	f	file:
ServiceStop	mDNSWindows/SystemService/Service.c	/^static void	ServiceStop( void )$/;"	f	file:
ServiceTypeInfo	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^struct	ServiceTypeInfo$/;"	s
ServiceTypeVector	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^		typedef std::vector < ServiceTypeInfo >			ServiceTypeVector;$/;"	t	class:ChooserDialog
Services	Clients/PrinterSetupWizard/UtilTypes.h	/^typedef std::list<Service*> Services;$/;"	t	namespace:PrinterSetupWizard
ServicesBrowserListModel	Clients/Java/BrowserApp.java	/^class	ServicesBrowserListModel extends BrowserListModel$/;"	c
ServicesCallback	mDNSPosix/Identify.c	/^mDNSlocal void ServicesCallback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
SetAnonData	mDNSCore/anonymous.c	/^mDNSexport void SetAnonData(DNSQuestion *q, ResourceRecord *rr, mDNSBool ForQuestion)$/;"	f
SetAnonInfoSRS	mDNSCore/mDNS.c	/^mDNSlocal void SetAnonInfoSRS(ServiceRecordSet *sr, int NumSubTypes)$/;"	f
SetAnswerList	mDNSShared/dnsextd.c	/^mDNSlocal void SetAnswerList(DaemonInfo *d, LLQEntry *e)$/;"	f
SetBytes	mDNSWindows/DLLX/TXTRecord.cpp	/^CTXTRecord::SetBytes$/;"	f	class:CTXTRecord
SetConfigState	mDNSCore/mDNS.c	/^mDNSlocal void SetConfigState(mDNS *const m, mDNSBool delete)$/;"	f
SetDNSServers	mDNSWindows/mDNSWin32.c	/^SetDNSServers( mDNS *const m )$/;"	f
SetData	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    OSStatus    SetData( const void *inData, uint16_t inSize )$/;"	f	struct:TextRecord
SetDomainFromDHCP	mDNSWindows/mDNSWin32.c	/^SetDomainFromDHCP( void )$/;"	f
SetDomainSecret	mDNSWindows/mDNSWin32.c	/^mDNSlocal void SetDomainSecret( mDNS * const m, const domainname * inDomain )$/;"	f
SetDomainSecrets	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void SetDomainSecrets(mDNS *m)$/;"	f
SetDomainSecrets	mDNSWindows/mDNSWin32.c	/^SetDomainSecrets( mDNS * const m )$/;"	f
SetEventManager	mDNSWindows/DLLX/DNSSDService.h	/^	SetEventManager( IDNSSDEventManager * eventManager )$/;"	f	class:CDNSSDService
SetKeyChainTimer	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void SetKeyChainTimer(mDNS *const m, mDNSs32 delay)$/;"	f
SetKeyForDomain	mDNSMacOSX/PreferencePane/PrivilegedOperations.c	/^SetKeyForDomain(CFDataRef secretData)$/;"	f
SetLLQTimer	mDNSCore/uDNS.c	/^mDNSlocal void SetLLQTimer(mDNS *const m, DNSQuestion *const q, const LLQOptData *const llq)$/;"	f
SetLLRoute	mDNSWindows/SystemService/Service.c	/^SetLLRoute( mDNS * const inMDNS )$/;"	f	file:
SetLastPage	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^CPrinterSetupWizardSheet::SetLastPage(CPropertyPage * lastPage)$/;"	f	class:CPrinterSetupWizardSheet
SetLocalDomains	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void SetLocalDomains(void)$/;"	f
SetModified	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^void CBrowsingPage::SetModified( BOOL bChanged )$/;"	f	class:CBrowsingPage
SetModified	mDNSWindows/ControlPanel/FourthPage.cpp	/^void CFourthPage::SetModified( BOOL bChanged )$/;"	f	class:CFourthPage
SetModified	mDNSWindows/ControlPanel/RegistrationPage.cpp	/^void CRegistrationPage::SetModified( BOOL bChanged )$/;"	f	class:CRegistrationPage
SetModified	mDNSWindows/ControlPanel/SecondPage.cpp	/^void CSecondPage::SetModified( BOOL bChanged )$/;"	f	class:CSecondPage
SetModified	mDNSWindows/ControlPanel/ServicesPage.cpp	/^void CServicesPage::SetModified( BOOL bChanged )$/;"	f	class:CServicesPage
SetNetworkChanged	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void SetNetworkChanged(mDNS *const m, mDNSs32 delay)$/;"	f
SetNewRData	mDNSCore/DNSCommon.c	/^mDNSexport void SetNewRData(ResourceRecord *const rr, RData *NewRData, mDNSu16 rdlength)$/;"	f
SetNextAnnounceProbeTime	mDNSCore/mDNS.c	/^mDNSlocal void SetNextAnnounceProbeTime(mDNS *const m, const AuthRecord *const rr)$/;"	f
SetNextCacheCheckTimeForRecord	mDNSCore/mDNS.c	/^mDNSexport void SetNextCacheCheckTimeForRecord(mDNS *const m, CacheRecord *const rr)$/;"	f
SetNextQueryStopTime	mDNSCore/mDNS.c	/^mDNSlocal void SetNextQueryStopTime(mDNS *const m, const DNSQuestion *const q)$/;"	f
SetNextQueryTime	mDNSCore/mDNS.c	/^mDNSexport void SetNextQueryTime(mDNS *const m, const DNSQuestion *const q)$/;"	f
SetNextuDNSEvent	mDNSCore/uDNS.c	55;"	d	file:
SetOwner	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^void            SetOwner( ExplorerBar *inOwner )    { mOwner = inOwner; }$/;"	f	class:ExplorerBarWindow
SetPrefsBrowseDomains	mDNSShared/uds_daemon.c	/^mDNSlocal void SetPrefsBrowseDomains(mDNS *m, DNameListElem *browseDomains, mDNSBool add)$/;"	f
SetPrimaryRef	mDNSWindows/DLLX/DNSSDService.h	/^	SetPrimaryRef( DNSServiceRef primary )$/;"	f	class:CDNSSDService
SetPrinterInformationState	Clients/PrinterSetupWizard/SecondPage.cpp	/^CSecondPage::SetPrinterInformationState( BOOL state )$/;"	f	class:CSecondPage
SetPublicSRV	mDNSShared/dnsextd.c	/^SetPublicSRV$/;"	f
SetQuestionPolicy	mDNSShared/uds_daemon.c	/^mDNSlocal void SetQuestionPolicy(DNSQuestion *q, request_state *req)$/;"	f
SetRData	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool SetRData(const DNSMessage *const msg, const mDNSu8 *ptr, const mDNSu8 *end,$/;"	f
SetRecordRef	mDNSWindows/DLLX/DNSSDRecord.h	/^	SetRecordRef( DNSRecordRef rref )$/;"	f	class:CDNSSDRecord
SetRecordRetry	mDNSCore/uDNS.c	/^mDNSlocal void SetRecordRetry(mDNS *const m, AuthRecord *rr, mDNSu32 random)$/;"	f
SetResponseFlags	mDNSCore/dnsproxy.c	/^mDNSlocal mDNSOpaque16 SetResponseFlags(DNSProxyClient *pc, const mDNSOpaque16 responseFlags)$/;"	f
SetReverseMapSearchDomainList	mDNSWindows/mDNSWin32.c	/^SetReverseMapSearchDomainList( void )$/;"	f
SetSPS	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void SetSPS(mDNS *const m)$/;"	f
SetSPSProxyListChanged	mDNSCore/mDNS.c	4889;"	d	file:
SetSearchDomainList	mDNSWindows/mDNSWin32.c	/^SetSearchDomainList( void )$/;"	f
SetSelectedPrinter	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::SetSelectedPrinter(Printer * printer)$/;"	f	class:CPrinterSetupWizardSheet
SetServiceInfo	mDNSWindows/SystemService/Service.c	/^static OSStatus	SetServiceInfo( SC_HANDLE inSCM, LPCTSTR inServiceName, LPCTSTR inDescription )$/;"	f	file:
SetServiceObject	mDNSWindows/DLLX/DNSSDRecord.h	/^	SetServiceObject( CDNSSDService * serviceObject )$/;"	f	class:CDNSSDRecord
SetServiceParameters	mDNSWindows/SystemService/Service.c	/^static OSStatus SetServiceParameters()$/;"	f	file:
SetSite	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::SetSite( IUnknown *inPunkSite )$/;"	f	class:ExplorerBar
SetSubordRef	mDNSWindows/DLLX/DNSSDService.h	/^	SetSubordRef( DNSServiceRef subord )$/;"	f	class:CDNSSDService
SetTTLRRSet	mDNSCore/dnssec.c	/^mDNSlocal void SetTTLRRSet(mDNS *const m, DNSSECVerifier *dv, DNSSECStatus status)$/;"	f
SetTargetToHostName	mDNSCore/mDNS.c	/^mDNSlocal void SetTargetToHostName(mDNS *const m, AuthRecord *const rr)$/;"	f
SetUnicastTargetToHostName	mDNSCore/mDNS.c	/^mDNSlocal const domainname *SetUnicastTargetToHostName(mDNS *const m, AuthRecord *rr)$/;"	f
SetUpdateSRV	mDNSShared/dnsextd.c	/^mDNSlocal int SetUpdateSRV(DaemonInfo *d)$/;"	f
SetValidDNSServers	mDNSCore/mDNS.c	/^mDNSexport mDNSu32 SetValidDNSServers(mDNS *m, DNSQuestion *question)$/;"	f
SetValue	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^TextRecord::SetValue$/;"	f	class:TextRecord
SetValue	mDNSWindows/DLLX/TXTRecord.cpp	/^STDMETHODIMP CTXTRecord::SetValue(BSTR key, VARIANT value)$/;"	f	class:CTXTRecord
SetZone	mDNSShared/dnsextd.c	/^SetZone$/;"	f
SetupActiveDirectoryDomain	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void SetupActiveDirectoryDomain(dns_config_t *config)$/;"	f
SetupActiveInterfaces	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal int SetupActiveInterfaces(mDNS *const m, mDNSs32 utc)$/;"	f
SetupActiveInterfaces	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal int   SetupActiveInterfaces( mDNS *const inMDNS, mDNSs32 inUTC )$/;"	f
SetupAddr	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus SetupAddr(mDNSAddr *ip, const struct sockaddr *const sa)$/;"	f
SetupAddr	mDNSWindows/mDNSWin32.c	/^mDNSlocal mStatus SetupAddr(mDNSAddr *ip, const struct sockaddr *const sa)$/;"	f
SetupBackToMyMacInnerAddresses	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void SetupBackToMyMacInnerAddresses(mDNS *const m, CFDictionaryRef BTMMDict)$/;"	f
SetupBrowsing	mDNSWindows/ControlPanel/ConfigPropertySheet.cpp	/^CConfigPropertySheet::SetupBrowsing()$/;"	f	class:CConfigPropertySheet
SetupCallbackState	mDNSShared/Java/JNISupport.c	/^static void SetupCallbackState( JNIEnv **ppEnv _UNUSED)$/;"	f	file:
SetupCallbackState	mDNSShared/Java/JNISupport.c	/^static void SetupCallbackState( JNIEnv **ppEnv)$/;"	f	file:
SetupCommandPipe	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mStatus   SetupCommandPipe( mDNS * const inMDNS )$/;"	f
SetupCommandPipe	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mStatus   SetupCommandPipe( mDNS * const inMDNS )$/;"	f
SetupDDNSDomains	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void SetupDDNSDomains(domainname *const fqdn, DNameListElem **RegDomains, DNameListElem **BrowseDomains)$/;"	f
SetupDNSProxySkts	mDNSMacOSX/DNSProxySupport.c	/^mDNSlocal void SetupDNSProxySkts(mDNS *const m, int fd[4])$/;"	f
SetupEvents	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRefImpl::SetupEvents()$/;"	f	class:ServiceRef::ServiceRefImpl
SetupHostName	mDNSWindows/mDNSWin32.c	/^mDNSlocal mStatus	SetupHostName( mDNS * const inMDNS )$/;"	f
SetupInterface	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mStatus   SetupInterface( mDNS * const inMDNS, const struct ifaddrs *inAddr, MDNSInterfaceItem **outItem )$/;"	f
SetupInterface	mDNSWindows/mDNSWin32.c	/^mDNSlocal mStatus	SetupInterface( mDNS * const inMDNS, const struct ifaddrs *inIFA, mDNSInterfaceData **outIFD )$/;"	f
SetupInterfaceList	mDNSPosix/mDNSPosix.c	/^mDNSlocal int SetupInterfaceList(mDNS *const m)$/;"	f
SetupInterfaceList	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mStatus   SetupInterfaceList( mDNS * const inMDNS )$/;"	f
SetupInterfaceList	mDNSWindows/mDNSWin32.c	/^mStatus	SetupInterfaceList( mDNS * const inMDNS )$/;"	f
SetupLocalHostRecords	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void SetupLocalHostRecords(mDNS *const m)$/;"	f
SetupName	mDNSWindows/mDNSWin32.c	/^mDNSlocal mStatus	SetupName( mDNS * const inMDNS )$/;"	f
SetupNames	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal void  SetupNames( mDNS * const inMDNS )$/;"	f
SetupNiceName	mDNSWindows/mDNSWin32.c	/^mStatus	SetupNiceName( mDNS * const inMDNS )$/;"	f
SetupNotifications	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::SetupNotifications()$/;"	f	class:CDNSSDService
SetupNotifications	mDNSWindows/SystemService/Service.c	/^mDNSlocal mStatus	SetupNotifications()$/;"	f
SetupOneInterface	mDNSPosix/mDNSPosix.c	/^mDNSlocal int SetupOneInterface(mDNS *const m, struct sockaddr *intfAddr, struct sockaddr *intfMask, const char *intfName, int intfIndex)$/;"	f
SetupOwnerOpt	mDNSCore/mDNS.c	/^mDNSlocal void SetupOwnerOpt(const mDNS *const m, const NetworkInterfaceInfo *const intf, rdataOPT *const owner)$/;"	f
SetupServiceEvents	mDNSWindows/SystemService/Service.c	/^mDNSlocal mStatus	SetupServiceEvents()$/;"	f
SetupSocket	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus SetupSocket(KQSocketSet *cp, const mDNSIPPort port, u_short sa_family, mDNSIPPort *const outport)$/;"	f
SetupSocket	mDNSPosix/mDNSPosix.c	/^mDNSlocal int SetupSocket(struct sockaddr *intfAddr, mDNSIPPort port, int interfaceIndex, int *sktPtr)$/;"	f
SetupSocket	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mStatus   SetupSocket( mDNS *const inMDNS, const mDNSAddr *inAddr, mDNSBool inMcast, int inFamily, SocketSet *inSS )$/;"	f
SetupSocket	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^SetupSocket($/;"	f
SetupSocket	mDNSWindows/mDNSWin32.c	/^mDNSlocal mStatus	SetupSocket( mDNS * const inMDNS, const struct sockaddr *inAddr, mDNSIPPort port, SocketRef *outSocketRef  )$/;"	f
SetupSockets	mDNSShared/dnsextd.c	/^SetupSockets$/;"	f
SetupTCPProxySocket	mDNSMacOSX/DNSProxySupport.c	/^mDNSlocal mStatus SetupTCPProxySocket(mDNS *const m, int skt, KQSocketSet *cp, u_short sa_family, mDNSBool useBackgroundTrafficClass)$/;"	f
SetupTCPSocket	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus SetupTCPSocket(TCPSocket *sock, u_short sa_family, mDNSIPPort *port, mDNSBool useBackgroundTrafficClass)$/;"	f
SetupTask	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mStatus   SetupTask( mDNS * const inMDNS )$/;"	f
SetupTracerOpt	mDNSCore/mDNS.c	/^mDNSlocal void SetupTracerOpt(const mDNS *const m, rdataOPT *const Trace)$/;"	f
SetupUDPProxySocket	mDNSMacOSX/DNSProxySupport.c	/^mDNSlocal mStatus SetupUDPProxySocket(mDNS *const m, int skt, KQSocketSet *cp, u_short sa_family, mDNSBool useBackgroundTrafficClass)$/;"	f
SetupWindow	Clients/ExplorerPlugin/ExplorerBar.cpp	/^OSStatus	ExplorerBar::SetupWindow( void )$/;"	f	class:ExplorerBar
ShiftDown	mDNSWindows/Poll.c	/^ShiftDown( void * arr, size_t arraySize, size_t itemSize, int index )$/;"	f	file:
ShouldDeliverNegativeResponse	mDNSShared/uds_daemon.c	/^mDNSlocal mDNSBool ShouldDeliverNegativeResponse(mDNS *const m, DNSQuestion *question)$/;"	f
ShouldHandleReply	mDNSWindows/DLLX/DNSSDService.cpp	/^CDNSSDService::ShouldHandleReply( DNSServiceErrorType errorCode, CDNSSDEventManager *& eventManager )$/;"	f	class:CDNSSDService
ShouldSendGoodbyesBeforeSleep	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool ShouldSendGoodbyesBeforeSleep(mDNS *const m, const NetworkInterfaceInfo *intf, AuthRecord *rr)$/;"	f
ShouldSuppressDotLocalQuery	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool ShouldSuppressDotLocalQuery(mDNS *const m, DNSQuestion *q)$/;"	f
ShouldSuppressKnownAnswer	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool ShouldSuppressKnownAnswer(const CacheRecord *const ka, const AuthRecord *const rr)$/;"	f
ShouldSuppressQuery	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool ShouldSuppressQuery(mDNS *const m, DNSQuestion *q)$/;"	f
ShouldSuppressUnicastQuery	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool ShouldSuppressUnicastQuery(mDNS *const m, DNSQuestion *q, DNSServer *d)$/;"	f
ShowDW	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::ShowDW( BOOL inShow )$/;"	f	class:ExplorerBar
ShowInitIcon	mDNSMacOS9/ShowInitIcon.c	/^pascal void ShowInitIcon (short iconFamilyID, Boolean advance)$/;"	f
ShowNameConflictNotification	mDNSMacOSX/helper.c	/^static void ShowNameConflictNotification(CFMutableArrayRef header, CFStringRef subtext)$/;"	f	file:
ShowSortedHostList	mDNSPosix/NetMonitor.c	/^mDNSlocal void ShowSortedHostList(HostList *list, int max)$/;"	f
ShowTXTRecord	Clients/dns-sd.c	/^static void ShowTXTRecord(uint16_t txtLen, const unsigned char *txtRecord)$/;"	f	file:
ShowTaskSchedulingError	mDNSCore/DNSCommon.c	/^mDNSexport void ShowTaskSchedulingError(mDNS *const m)$/;"	f
ShutdownTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 ShutdownTime;               \/\/ Set when we're shutting down; allows us to skip some unnecessary steps$/;"	m	struct:mDNS_struct
SignalCallback	mDNSMacOSX/daemon.c	/^mDNSlocal void SignalCallback(CFMachPortRef port, void *msg, CFIndex size, void *info)$/;"	f
SignalDispatch	mDNSMacOSX/daemon.c	/^mDNSlocal void SignalDispatch(dispatch_source_t source)$/;"	f
SimpleChat	Clients/Java/SimpleChat.java	/^	public		SimpleChat() throws Exception$/;"	m	class:SimpleChat
SimpleChat	Clients/Java/SimpleChat.java	/^class	SimpleChat implements	ResolveListener, RegisterListener, QueryListener, $/;"	c
SimpleChat	Clients/SimpleChat.NET/SimpleChat.cs	/^		public SimpleChat()$/;"	m	class:SimpleChat.NET.SimpleChat
SimpleChat	Clients/SimpleChat.NET/SimpleChat.cs	/^	public class SimpleChat : System.Windows.Forms.Form$/;"	c	namespace:SimpleChat.NET
SimpleChat.NET	Clients/SimpleChat.NET/SimpleChat.cs	/^namespace SimpleChat.NET$/;"	n
SkipLeadingLabels	mDNSCore/DNSCommon.c	/^mDNSexport const domainname *SkipLeadingLabels(const domainname *d, int skip)$/;"	f
SleepCookie	mDNSMacOSX/mDNSMacOSX.h	/^    long SleepCookie;                           \/\/ Cookie we need to pass to IOAllowPowerChange()$/;"	m	struct:mDNS_PlatformSupport_struct
SleepKAContext	mDNSShared/dnssd_clientstub.c	/^} SleepKAContext;$/;"	t	typeref:struct:__anon139	file:
SleepKeepaliveCallback	mDNSShared/dnssd_clientstub.c	/^static void DNSSD_API SleepKeepaliveCallback(DNSServiceRef sdRef, DNSRecordRef rec, const DNSServiceFlags flags,$/;"	f	file:
SleepLimit	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 SleepLimit;                 \/\/ Time window to allow deregistrations, etc.,$/;"	m	struct:mDNS_struct
SleepProxyServerCallback	mDNSCore/mDNS.c	/^mDNSlocal void SleepProxyServerCallback(mDNS *const m, ServiceRecordSet *const srs, mStatus result)$/;"	f
SleepProxyServiceType	mDNSCore/mDNSEmbeddedAPI.h	2530;"	d
SleepRecordRegistrations	mDNSCore/uDNS.c	/^mDNSexport void SleepRecordRegistrations(mDNS *m)$/;"	f
SleepSeqNum	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SleepSeqNum;                 \/\/ "Epoch number" of our current period of wakefulness$/;"	m	struct:mDNS_struct
SleepState	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SleepState;                  \/\/ Set if we're sleeping$/;"	m	struct:mDNS_struct
SleepState_Awake	mDNSCore/mDNSEmbeddedAPI.h	/^    SleepState_Awake = 0,$/;"	e	enum:__anon88
SleepState_Sleeping	mDNSCore/mDNSEmbeddedAPI.h	/^    SleepState_Sleeping = 2$/;"	e	enum:__anon88
SleepState_Transferring	mDNSCore/mDNSEmbeddedAPI.h	/^    SleepState_Transferring = 1,$/;"	e	enum:__anon88
Sleeps	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Sleeps;                         \/\/ Total sleeps$/;"	m	struct:__anon92
SmallRecordLimit	mDNSCore/mDNS.c	96;"	d	file:
SnowLeopardPowerChanged	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void SnowLeopardPowerChanged(void *refcon, IOPMConnection connection, IOPMConnectionMessageToken token, IOPMSystemPowerStateCapabilities eventDescriptor)$/;"	f
SockAddrToMDNSAddr	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mStatus   SockAddrToMDNSAddr( const struct sockaddr * const inSA, mDNSAddr *outIP )$/;"	f
SockAddrToMDNSAddr	mDNSWindows/mDNSWin32.c	/^mDNSlocal mStatus	SockAddrToMDNSAddr( const struct sockaddr * const inSA, mDNSAddr *outIP, mDNSIPPort *outPort )$/;"	f
SockAddrTomDNSAddr	mDNSPosix/mDNSPosix.c	/^mDNSlocal void SockAddrTomDNSAddr(const struct sockaddr *const sa, mDNSAddr *ipAddr, mDNSIPPort *ipPort)$/;"	f
SocketDataReady	mDNSPosix/mDNSPosix.c	/^mDNSlocal void SocketDataReady(mDNS *const m, PosixNetworkInterface *intf, int skt)$/;"	f
SocketMap	mDNSWindows/DLLX/DNSSDService.h	/^	typedef std::map< SOCKET, CDNSSDService* > SocketMap;$/;"	t	class:CDNSSDService
SocketRef	mDNSShared/CommonServices.h	/^typedef SOCKET SocketRef;$/;"	t
SocketRef	mDNSShared/CommonServices.h	/^typedef int SocketRef;$/;"	t
SocketSet	mDNSVxWorks/mDNSVxWorks.h	/^struct  SocketSet$/;"	s
SocketSet	mDNSVxWorks/mDNSVxWorks.h	/^typedef struct  SocketSet SocketSet;$/;"	t	typeref:struct:SocketSet
SortFunc	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CBrowsingPage::SortFunc(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort)$/;"	f	class:CBrowsingPage
Split	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::Split( const CString & string, TCHAR ch, CStringList & components )$/;"	f	class:CThirdPage
SrcPort	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort SrcPort;$/;"	m	struct:tcpInfo_t
StandardAuthRDSize	mDNSCore/mDNSEmbeddedAPI.h	1001;"	d
StartActivityIndicator	Clients/PrinterSetupWizard/FourthPage.cpp	/^CFourthPage::StartActivityIndicator()$/;"	f	class:CFourthPage
StartBrowse	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::StartBrowse()$/;"	f	class:CPrinterSetupWizardSheet
StartBrowsing	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::StartBrowsing( const char *inType, const char *inDomain )$/;"	f	class:ChooserDialog
StartDNSSECVerification	mDNSCore/dnssec.c	/^mDNSexport void StartDNSSECVerification(mDNS *const m, void *context)$/;"	f
StartGetZoneData	mDNSCore/uDNS.c	/^mDNSexport ZoneData *StartGetZoneData(mDNS *const m, const domainname *const name, const ZoneService target, ZoneDataCallback callback, void *ZoneDataContext)$/;"	f
StartInsecureProof	mDNSCore/nsec.c	/^mDNSlocal void StartInsecureProof(mDNS * const m, DNSSECVerifier *dv)$/;"	f
StartLLQPolling	mDNSCore/uDNS.c	/^mDNSlocal void StartLLQPolling(mDNS *const m, DNSQuestion *q)$/;"	f
StartOperation	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::StartOperation( DNSServiceRef ref )$/;"	f	class:CPrinterSetupWizardSheet
StartQuery	mDNSPosix/Identify.c	/^mDNSlocal mStatus StartQuery(DNSQuestion *q, char *qname, mDNSu16 qtype, const mDNSAddr *target, mDNSQuestionCallback callback)$/;"	f
StartRecordNatMap	mDNSCore/uDNS.c	/^mDNSlocal void StartRecordNatMap(mDNS *m, AuthRecord *rr)$/;"	f
StartResolve	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^OSStatus	ExplorerBarWindow::StartResolve( ServiceInfo *inService )$/;"	f	class:ExplorerBarWindow
StartResolve	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::StartResolve( Printer * printer )$/;"	f	class:CPrinterSetupWizardSheet
StartResolve	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::StartResolve( Service * service )$/;"	f	class:CPrinterSetupWizardSheet
StartServerTunnel	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void StartServerTunnel(mDNS *const m, DomainAuthInfo *const info)$/;"	f
StartThread	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::StartThread()$/;"	f	class:ServiceRef
StartTime	mDNSCore/dnssec.h	/^    mDNSs32 StartTime;              \/\/ Time the DNSSEC verification starts$/;"	m	struct:DNSSECVerifier_struct
StatStartTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 StatStartTime;              \/\/ Time we started gathering statistics during this interval.$/;"	m	struct:mDNS_struct
StaticHostname	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname StaticHostname;              \/\/ Current answer to reverse-map query$/;"	m	struct:mDNS_struct
StatusCallback	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSRecordCallback *StatusCallback;       \/\/ callback to deliver success or error code to client layer$/;"	m	struct:HostnameInfo
StatusContext	mDNSCore/mDNSEmbeddedAPI.h	/^    const void *StatusContext;                \/\/ Client Context$/;"	m	struct:HostnameInfo
Stop	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^void ExplorerBarWindow::Stop( DNSServiceRef ref )$/;"	f	class:ExplorerBarWindow
Stop	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::Stop()$/;"	f	class:CDNSSDService
Stop	mDNSWindows/DLLX/DNSSDService.cpp	/^STDMETHODIMP CDNSSDService::Stop(void)$/;"	f	class:CDNSSDService
StopActivityIndicator	Clients/PrinterSetupWizard/FourthPage.cpp	/^CFourthPage::StopActivityIndicator()$/;"	f	class:CFourthPage
StopBrowse	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::StopBrowse()$/;"	f	class:CPrinterSetupWizardSheet
StopBrowsing	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::StopBrowsing( void )$/;"	f	class:ChooserDialog
StopNotification	mDNSPosix/NetMonitor.c	/^static void CALLBACK StopNotification( HANDLE event, void *context ) { gRunning = mDNSfalse; }$/;"	f	file:
StopNotification	mDNSWindows/SystemService/Service.c	/^StopNotification( HANDLE event, void *context )$/;"	f
StopNow	mDNSPosix/ExampleClientApp.c	/^static volatile mDNSBool StopNow;$/;"	v	file:
StopNow	mDNSPosix/Identify.c	/^static volatile int StopNow;    \/\/ 0 means running, 1 means stop because we got an answer, 2 means stop because of Ctrl-C$/;"	v	file:
StopOperation	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::StopOperation( DNSServiceRef & ref )$/;"	f	class:CPrinterSetupWizardSheet
StopResolve	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^void	ExplorerBarWindow::StopResolve( void )$/;"	f	class:ExplorerBarWindow
StopResolve	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::StopResolve( Service * service )$/;"	f	class:CPrinterSetupWizardSheet
StopResolve	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::StopResolve(Printer * printer)$/;"	f	class:CPrinterSetupWizardSheet
StopTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 StopTime;                       \/\/ Time this question should be stopped by giving them a negative answer$/;"	m	struct:DNSQuestion_struct
Stopped	mDNSWindows/DLLX/DNSSDService.h	/^	Stopped()$/;"	f	class:CDNSSDService
Store	mDNSMacOSX/mDNSMacOSX.h	/^    SCDynamicStoreRef Store;$/;"	m	struct:mDNS_PlatformSupport_struct
StoreRLS	mDNSMacOSX/mDNSMacOSX.h	/^    CFRunLoopSourceRef StoreRLS;$/;"	m	struct:mDNS_PlatformSupport_struct
StrCmp	mDNSWindows/SystemService/Service.c	144;"	d	file:
StrCmp	mDNSWindows/SystemService/Service.c	147;"	d	file:
StrLen	mDNSWindows/SystemService/Service.c	143;"	d	file:
StrLen	mDNSWindows/SystemService/Service.c	146;"	d	file:
StrictUnicastOrdering	mDNSCore/uDNS.c	/^mDNSBool StrictUnicastOrdering = mDNSfalse;$/;"	v
StringList	mDNSWindows/ControlPanel/BrowsingPage.h	/^	typedef std::list<CString> StringList;$/;"	t	class:CBrowsingPage
StringList	mDNSWindows/ControlPanel/ConfigPropertySheet.h	/^	typedef std::list<CString> StringList;$/;"	t	class:CConfigPropertySheet
StringList	mDNSWindows/ControlPanel/FourthPage.h	/^	typedef std::list<CString> StringList;$/;"	t	class:CFourthPage
StringList	mDNSWindows/ControlPanel/SecondPage.h	/^	typedef std::list<CString> StringList;$/;"	t	class:CSecondPage
StringList	mDNSWindows/ControlPanel/ServicesPage.h	/^	typedef std::list<CString> StringList;$/;"	t	class:CServicesPage
StringObjectToUTF8String	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^static DWORD	StringObjectToUTF8String( CString &inObject, std::string &outUTF8 )$/;"	f	file:
StringObjectToUTF8String	mDNSWindows/WinServices.cpp	/^StringObjectToUTF8String( CString &inObject, char* outUTF8, size_t outUTF8Len )$/;"	f
StringToAddress	mDNSWindows/mDNSWin32.c	/^mDNSlocal mStatus StringToAddress( mDNSAddr * ip, LPSTR string )$/;"	f
StringToGUID	mDNSWindows/NSPTool/NSPTool.c	/^DEBUG_LOCAL OSStatus	StringToGUID( const char *inCharString, GUID *outGUID )$/;"	f
Stringify	mDNSShared/CommonServices.h	734;"	d
StringifyExpansion	mDNSShared/CommonServices.h	735;"	d
StripFirstLabel	mDNSCore/mDNSEmbeddedAPI.h	2811;"	d
SubTypes	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord          *SubTypes;$/;"	m	struct:ServiceRecordSet_struct
SuccessfulUpdateTransaction	mDNSShared/dnsextd.c	/^mDNSlocal mDNSBool SuccessfulUpdateTransaction(PktMsg *request, PktMsg *reply)$/;"	f
Super	mDNSWindows/DLLX/DNSSDService.h	/^	typedef CComObjectRootEx<CComSingleThreadModel> Super;$/;"	t	class:CDNSSDService
SupportsInNICProxy	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSBool SupportsInNICProxy(NetworkInterfaceInfo *const intf)$/;"	f
SupportsTCPKeepAlive	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool SupportsTCPKeepAlive()$/;"	f
SuppressOnThisInterface	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool SuppressOnThisInterface(const DupSuppressInfo ds[DupSuppressInfoSize], const NetworkInterfaceInfo * const intf)$/;"	f
SuppressProbes	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 SuppressProbes;$/;"	m	struct:mDNS_struct
SuppressQuery	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool SuppressQuery;                 \/\/ This query should be suppressed and not sent on the wire$/;"	m	struct:DNSQuestion_struct
SuppressSending	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 SuppressSending;            \/\/ Don't send local-link mDNS packets during this time$/;"	m	struct:mDNS_struct
SuppressStatusChanged	mDNSCore/mDNS.c	/^mDNSlocal void SuppressStatusChanged(mDNS *const m, DNSQuestion *q, DNSQuestion **restart)$/;"	f
SuppressUnusable	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool SuppressUnusable;              \/\/ Set by client to suppress unusable queries to be sent on the wire$/;"	m	struct:DNSQuestion_struct
SuspendLLQs	mDNSCore/mDNS.c	/^mDNSlocal void SuspendLLQs(mDNS *m)$/;"	f
SwapDNSHeaderBytes	mDNSCore/mDNSEmbeddedAPI.h	3018;"	d
SwingBrowseListener	Clients/Java/SwingBrowseListener.java	/^	public	SwingBrowseListener( BrowseListener listener)$/;"	m	class:SwingBrowseListener
SwingBrowseListener	Clients/Java/SwingBrowseListener.java	/^public class SwingBrowseListener implements Runnable, BrowseListener$/;"	c
SwingDomainListener	Clients/Java/SwingDomainListener.java	/^	public	SwingDomainListener( DomainListener listener)$/;"	m	class:SwingDomainListener
SwingDomainListener	Clients/Java/SwingDomainListener.java	/^public class SwingDomainListener implements Runnable, DomainListener$/;"	c
SwingQueryListener	Clients/Java/SwingQueryListener.java	/^	public	SwingQueryListener( QueryListener listener)$/;"	m	class:SwingQueryListener
SwingQueryListener	Clients/Java/SwingQueryListener.java	/^public class SwingQueryListener implements Runnable, QueryListener$/;"	c
SysEventCallBack	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void SysEventCallBack(int s1, short __unused filter, void *context)$/;"	f
SysEventKQueue	mDNSMacOSX/mDNSMacOSX.h	/^    KQueueEntry SysEventKQueue;$/;"	m	struct:mDNS_PlatformSupport_struct
SysEventNotifier	mDNSMacOSX/mDNSMacOSX.h	/^    int SysEventNotifier;$/;"	m	struct:mDNS_PlatformSupport_struct
SystemSleepOnlyIfWakeOnLAN	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SystemSleepOnlyIfWakeOnLAN;  \/\/ Set if we may only sleep if we managed to register with a Sleep Proxy$/;"	m	struct:mDNS_struct
SystemSleepOnlyIfWakeOnLAN	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool SystemSleepOnlyIfWakeOnLAN(void)$/;"	f
SystemUID	mDNSShared/uds_daemon.c	79;"	d	file:
SystemWakeForNetworkAccess	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSu8 SystemWakeForNetworkAccess(void)$/;"	f
SystemWakeForNetworkAccess	mDNSWindows/SystemService/Service.c	/^SystemWakeForNetworkAccess( LARGE_INTEGER * timeout )$/;"	f
SystemWakeOnLANEnabled	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 SystemWakeOnLANEnabled;      \/\/ Set if we want to register with a Sleep Proxy before going to sleep$/;"	m	struct:mDNS_struct
TAComplete	mDNSMacOSX/DNSSECSupport.c	/^mDNSlocal void TAComplete(mDNS *const m, void *context)$/;"	f
TARGETS	Clients/Makefile	/^TARGETS = build\/dns-sd build\/dns-sd64$/;"	m
TARGETS	Clients/Makefile	/^TARGETS = build\/dns-sd$/;"	m
TARGET_API_MAC_CARBON	mDNSMacOS9/mDNSPrefix.h	31;"	d
TARGET_API_MAC_CARBON	mDNSMacOS9/mDNSPrefix.h	37;"	d
TARGET_API_MAC_OSX_KERNEL	mDNSShared/CommonServices.h	51;"	d
TARGET_API_MAC_OSX_KERNEL	mDNSShared/CommonServices.h	53;"	d
TARGET_BUILD_MAIN	mDNSShared/CommonServices.h	279;"	d
TARGET_CPU_MIPS	mDNSShared/CommonServices.h	321;"	d
TARGET_CPU_MIPS	mDNSShared/CommonServices.h	323;"	d
TARGET_CPU_PPC	mDNSShared/CommonServices.h	301;"	d
TARGET_CPU_PPC	mDNSShared/CommonServices.h	303;"	d
TARGET_CPU_X86	mDNSShared/CommonServices.h	311;"	d
TARGET_CPU_X86	mDNSShared/CommonServices.h	313;"	d
TARGET_LANGUAGE_C_LIKE	mDNSShared/CommonServices.h	284;"	d
TARGET_LANGUAGE_C_LIKE	mDNSShared/CommonServices.h	286;"	d
TARGET_OS_FREEBSD	mDNSShared/CommonServices.h	61;"	d
TARGET_OS_FREEBSD	mDNSShared/CommonServices.h	63;"	d
TARGET_OS_LINUX	mDNSShared/CommonServices.h	71;"	d
TARGET_OS_LINUX	mDNSShared/CommonServices.h	73;"	d
TARGET_OS_MAC	mDNSShared/CommonServices.h	45;"	d
TARGET_OS_PALM	mDNSShared/CommonServices.h	91;"	d
TARGET_OS_PALM	mDNSShared/CommonServices.h	93;"	d
TARGET_OS_SOLARIS	mDNSShared/CommonServices.h	81;"	d
TARGET_OS_SOLARIS	mDNSShared/CommonServices.h	83;"	d
TARGET_OS_VXWORKS	mDNSShared/CommonServices.h	104;"	d
TARGET_OS_VXWORKS	mDNSShared/CommonServices.h	106;"	d
TARGET_OS_WIN32	mDNSShared/CommonServices.h	117;"	d
TARGET_OS_WIN32	mDNSShared/CommonServices.h	119;"	d
TARGET_OS_WINDOWS_CE	mDNSShared/CommonServices.h	128;"	d
TARGET_OS_WINDOWS_CE	mDNSShared/CommonServices.h	130;"	d
TARGET_RT_BIG_ENDIAN	mDNSShared/CommonServices.h	221;"	d
TARGET_RT_BIG_ENDIAN	mDNSShared/CommonServices.h	361;"	d
TARGET_RT_BIG_ENDIAN	mDNSShared/CommonServices.h	363;"	d
TARGET_RT_BIG_ENDIAN	mDNSShared/CommonServices.h	369;"	d
TARGET_RT_BIG_ENDIAN	mDNSShared/CommonServices.h	371;"	d
TARGET_RT_BYTE_ORDER	mDNSShared/CommonServices.h	399;"	d
TARGET_RT_BYTE_ORDER	mDNSShared/CommonServices.h	401;"	d
TARGET_RT_BYTE_ORDER_BIG_ENDIAN	mDNSShared/CommonServices.h	390;"	d
TARGET_RT_BYTE_ORDER_LITTLE_ENDIAN	mDNSShared/CommonServices.h	394;"	d
TARGET_RT_LITTLE_ENDIAN	mDNSShared/CommonServices.h	218;"	d
TARGET_RT_LITTLE_ENDIAN	mDNSShared/CommonServices.h	347;"	d
TARGET_RT_LITTLE_ENDIAN	mDNSShared/CommonServices.h	349;"	d
TARGET_RT_LITTLE_ENDIAN	mDNSShared/CommonServices.h	377;"	d
TARGET_RT_LITTLE_ENDIAN	mDNSShared/CommonServices.h	379;"	d
TCHARtoUTF8	mDNSWindows/mDNSWin32.c	/^TCHARtoUTF8( const TCHAR *inString, char *inBuffer, size_t inBufferSize )$/;"	f
TCPChangedNotification	mDNSWindows/SystemService/Service.c	/^TCPChangedNotification( HANDLE event, void *context )$/;"	f
TCPCheckSum	mDNSMacOSX/helper.c	/^void TCPCheckSum(int af, struct tcphdr *t, int tcplen, v6addr_t sadd6, v6addr_t dadd6)$/;"	f
TCPCloseSocket	mDNSWindows/mDNSWin32.c	/^TCPCloseSocket( TCPSocket * sock )$/;"	f
TCPConnectionCallback	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void (*TCPConnectionCallback)(TCPSocket *sock, void *context, mDNSBool ConnectionEstablished, mStatus err);$/;"	t
TCPContext	mDNSShared/dnsextd.c	/^} TCPContext;$/;"	t	typeref:struct:__anon112	file:
TCPIPConfigDidChange	mDNSWindows/mDNSWin32.c	/^void TCPIPConfigDidChange( mDNS * const inMDNS )$/;"	f
TCPMessageHandler	mDNSShared/dnsextd.c	/^TCPMessageHandler$/;"	f
TCPProxy	mDNSMacOSX/mDNSMacOSX.h	/^    TCPSocket TCPProxy;$/;"	m	struct:mDNS_PlatformSupport_struct
TCPProxyCallback	mDNSMacOSX/mDNSMacOSX.h	/^    ProxyCallback *TCPProxyCallback;$/;"	m	struct:mDNS_PlatformSupport_struct
TCPSocket	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct TCPSocket_struct TCPSocket;$/;"	t	typeref:struct:TCPSocket_struct
TCPSocketFlags	mDNSCore/mDNSEmbeddedAPI.h	/^} TCPSocketFlags;$/;"	t	typeref:enum:__anon97
TCPSocketNotification	mDNSWindows/mDNSWin32.c	/^TCPSocketNotification( SOCKET sock, LPWSANETWORKEVENTS event, void *context )$/;"	f
TCPSocket_struct	mDNSCore/DNSCommon.c	/^struct TCPSocket_struct { TCPSocketFlags flags; \/* ... *\/ };$/;"	s	file:
TCPSocket_struct	mDNSCore/uDNS.c	/^struct TCPSocket_struct { TCPSocketFlags flags; \/* ... *\/ };$/;"	s	file:
TCPSocket_struct	mDNSMacOSX/mDNSMacOSX.h	/^struct TCPSocket_struct$/;"	s
TCPSocket_struct	mDNSWindows/mDNSWin32.h	/^struct TCPSocket_struct$/;"	s
TCPUserCallback	mDNSWindows/mDNSWin32.h	/^typedef void ( *TCPUserCallback )();$/;"	t
TCP_SOCKET_FLAGS	mDNSShared/dnsextd.c	77;"	d	file:
TCS_BOTTOM	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	20;"	d
TCS_FLATBUTTONS	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	24;"	d
TCS_MULTISELECT	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	23;"	d
TCS_RIGHT	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	21;"	d
TCS_SCROLLOPPOSITE	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	19;"	d
TCS_VERTICAL	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	22;"	d
TC_STATE_AAAA_PEER	mDNSCore/mDNSEmbeddedAPI.h	2069;"	d
TC_STATE_AAAA_PEER_RELAY	mDNSCore/mDNSEmbeddedAPI.h	2070;"	d
TC_STATE_ADDR_PEER	mDNSCore/mDNSEmbeddedAPI.h	2072;"	d
TC_STATE_SRV_PEER	mDNSCore/mDNSEmbeddedAPI.h	2071;"	d
TEST_NEW_CLIENTSTUB	Clients/dns-sd.c	65;"	d	file:
TEST_PORT	Clients/Java/DNSSDUnitTest.java	/^	public static final int		TEST_PORT = 5678;$/;"	f	class:DupRegTest
TEST_PORT	Clients/Java/DNSSDUnitTest.java	/^	public static final int		TEST_PORT = 5678;$/;"	f	class:RegTest
TEST_TA_EXPIRE_INTERVAL	mDNSMacOSX/DNSSECSupport.c	42;"	d	file:
TEST_TYPE	Clients/Java/DNSSDUnitTest.java	/^	public static final String	TEST_TYPE = "_unittest._udp";$/;"	f	class:DNSSDUnitTest
THIS_FILE	Clients/ExplorerPlugin/ClassFactory.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	Clients/ExplorerPlugin/ClassFactory.cpp	31;"	d	file:
THIS_FILE	Clients/ExplorerPlugin/ExplorerBar.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	Clients/ExplorerPlugin/ExplorerBar.cpp	34;"	d	file:
THIS_FILE	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	36;"	d	file:
THIS_FILE	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	Clients/ExplorerPlugin/ExplorerPlugin.cpp	44;"	d	file:
THIS_FILE	Clients/ExplorerPlugin/LoginDialog.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	Clients/ExplorerPlugin/LoginDialog.cpp	29;"	d	file:
THIS_FILE	mDNSWindows/ControlPanel/ConfigDialog.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	mDNSWindows/ControlPanel/ConfigDialog.cpp	26;"	d	file:
THIS_FILE	mDNSWindows/ControlPanel/ControlPanel.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	mDNSWindows/ControlPanel/ControlPanel.cpp	29;"	d	file:
THIS_FILE	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	mDNSWindows/ControlPanel/ControlPanelExe.cpp	30;"	d	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/Windows/Sources/AboutDialog.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/Windows/Sources/AboutDialog.cpp	26;"	d	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/Windows/Sources/Application.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/Windows/Sources/Application.cpp	32;"	d	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	40;"	d	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.cpp	27;"	d	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/Application.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/Application.cpp	28;"	d	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	28;"	d	file:
TH_ACK	mDNSCore/mDNS.c	13801;"	d	file:
TH_FIN	mDNSCore/mDNS.c	13798;"	d	file:
TH_RST	mDNSCore/mDNS.c	13800;"	d	file:
TH_SYN	mDNSCore/mDNS.c	13799;"	d	file:
TIME_ADJUST	mDNSMacOS9/mDNSMacOS9.c	682;"	d	file:
TIPAddMulticastOption	mDNSMacOS9/mDNSMacOS9.h	/^typedef struct { TOptionHeader h; mDNSv4Addr multicastGroupAddress; mDNSv4Addr InterfaceAddress; } TIPAddMulticastOption;$/;"	t	typeref:struct:__anon177
TMP_BUF_SIZE	mDNSWindows/loclibrary.c	180;"	d	file:
TOptionBlock	mDNSMacOS9/mDNSMacOS9.h	/^typedef union  { TOptionHeader h; TIPAddMulticastOption m; TSetByteOption i; TSetBooleanOption b; } TOptionBlock;$/;"	t	typeref:union:__anon180
TRANSIENT	mDNSShared/Java/DNSSDException.java	/^    public static final int		TRANSIENT                 = -65562;$/;"	f	class:DNSSDException
TSIG_ErrBadKey	mDNSCore/DNSCommon.h	/^    TSIG_ErrBadKey  = 17,$/;"	e	enum:__anon107
TSIG_ErrBadSig	mDNSCore/DNSCommon.h	/^    TSIG_ErrBadSig  = 16,$/;"	e	enum:__anon107
TSIG_ErrBadTime	mDNSCore/DNSCommon.h	/^    TSIG_ErrBadTime = 18$/;"	e	enum:__anon107
TSIG_ErrorCode	mDNSCore/DNSCommon.h	/^} TSIG_ErrorCode;$/;"	t	typeref:enum:__anon107
TSetBooleanOption	mDNSMacOS9/mDNSMacOS9.h	/^typedef struct { TOptionHeader h; UInt32 flag; } TSetBooleanOption;$/;"	t	typeref:struct:__anon179
TSetByteOption	mDNSMacOS9/mDNSMacOS9.h	/^typedef struct { TOptionHeader h; UInt8 val; } TSetByteOption;$/;"	t	typeref:struct:__anon178
TXT	mDNSShared/dnssd_clientshim.c	/^    const ResourceRecord   *TXT;$/;"	m	struct:__anon120	file:
TXTRecord	mDNSShared/Java/TXTRecord.java	/^	public		TXTRecord( byte[] initBytes) $/;"	m	class:TXTRecord
TXTRecord	mDNSShared/Java/TXTRecord.java	/^	public		TXTRecord() $/;"	m	class:TXTRecord
TXTRecord	mDNSShared/Java/TXTRecord.java	/^public class	TXTRecord$/;"	c
TXTRecordContainsKey	mDNSShared/dnssd_clientlib.c	/^int DNSSD_API TXTRecordContainsKey$/;"	f
TXTRecordContainsKey	mDNSWindows/DLLStub/DLLStub.cpp	/^TXTRecordContainsKey$/;"	f
TXTRecordCreate	mDNSShared/dnssd_clientlib.c	/^void DNSSD_API TXTRecordCreate$/;"	f
TXTRecordCreate	mDNSWindows/DLLStub/DLLStub.cpp	/^TXTRecordCreate$/;"	f
TXTRecordDeallocate	mDNSShared/dnssd_clientlib.c	/^void DNSSD_API TXTRecordDeallocate(TXTRecordRef *txtRecord)$/;"	f
TXTRecordDeallocate	mDNSWindows/DLLStub/DLLStub.cpp	/^TXTRecordDeallocate$/;"	f
TXTRecordGetBytesPtr	mDNSShared/dnssd_clientlib.c	/^const void * DNSSD_API TXTRecordGetBytesPtr(const TXTRecordRef *txtRecord) { return(txtRec->buffer); }$/;"	f
TXTRecordGetBytesPtr	mDNSWindows/DLLStub/DLLStub.cpp	/^TXTRecordGetBytesPtr$/;"	f
TXTRecordGetCount	mDNSShared/dnssd_clientlib.c	/^uint16_t DNSSD_API TXTRecordGetCount$/;"	f
TXTRecordGetCount	mDNSWindows/DLLStub/DLLStub.cpp	/^TXTRecordGetCount$/;"	f
TXTRecordGetItemAtIndex	mDNSShared/dnssd_clientlib.c	/^DNSServiceErrorType DNSSD_API TXTRecordGetItemAtIndex$/;"	f
TXTRecordGetItemAtIndex	mDNSWindows/DLLStub/DLLStub.cpp	/^TXTRecordGetItemAtIndex$/;"	f
TXTRecordGetLength	mDNSShared/dnssd_clientlib.c	/^uint16_t DNSSD_API TXTRecordGetLength  (const TXTRecordRef *txtRecord) { return(txtRec->datalen); }$/;"	f
TXTRecordGetLength	mDNSWindows/DLLStub/DLLStub.cpp	/^TXTRecordGetLength$/;"	f
TXTRecordGetValuePtr	mDNSShared/dnssd_clientlib.c	/^const void * DNSSD_API TXTRecordGetValuePtr$/;"	f
TXTRecordGetValuePtr	mDNSWindows/DLLStub/DLLStub.cpp	/^TXTRecordGetValuePtr$/;"	f
TXTRecordRef	mDNSShared/dns_sd.h	/^typedef union _TXTRecordRef_t { char PrivateData[16]; char *ForceNaturalAlignment; } TXTRecordRef;$/;"	t	typeref:union:_TXTRecordRef_t
TXTRecordRefRealType	mDNSShared/dnssd_clientlib.c	/^} TXTRecordRefRealType;$/;"	t	typeref:struct:_TXTRecordRefRealType	file:
TXTRecordRemoveValue	mDNSShared/dnssd_clientlib.c	/^DNSServiceErrorType DNSSD_API TXTRecordRemoveValue$/;"	f
TXTRecordRemoveValue	mDNSWindows/DLLStub/DLLStub.cpp	/^TXTRecordRemoveValue$/;"	f
TXTRecordSetValue	mDNSShared/dnssd_clientlib.c	/^DNSServiceErrorType DNSSD_API TXTRecordSetValue$/;"	f
TXTRecordSetValue	mDNSWindows/DLLStub/DLLStub.cpp	/^TXTRecordSetValue$/;"	f
TXT_RECORD_INDEX	mDNSShared/dnssd_ipc.h	100;"	d
TXTinfo	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 TXTinfo[2048];               \/\/ Additional demultiplexing information (e.g. LPR queue name)$/;"	m	struct:__anon86
TXTlen	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 TXTlen;$/;"	m	struct:__anon86
TYPE_BOOL	mDNSShared/CommonServices.h	896;"	d
TYPE_LONGLONG_NATIVE	mDNSShared/CommonServices.h	919;"	d
TYPE_LONGLONG_NATIVE	mDNSShared/CommonServices.h	921;"	d
Tail	mDNSShared/GenLinkedList.h	/^           Tail;$/;"	m	struct:GenLinkedOffsetList
Tail	mDNSShared/GenLinkedList.h	/^    *Tail;$/;"	m	struct:GenDoubleLinkedList
Tail	mDNSShared/GenLinkedList.h	/^    *Tail;$/;"	m	struct:GenLinkedList
Target	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr Target;                        \/\/ Non-zero if you want to direct queries to a specific unicast target address$/;"	m	struct:DNSQuestion_struct
TargetListElem	Clients/Java/SimpleChat.java	/^	public	TargetListElem( String serviceName, String domain, String type, int ifIndex)$/;"	m	class:TargetListElem
TargetListElem	Clients/Java/SimpleChat.java	/^class	TargetListElem$/;"	c
TargetListModel	Clients/Java/SimpleChat.java	/^class		TargetListModel extends DefaultComboBoxModel implements BrowseListener$/;"	c
TargetPort	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort TargetPort;                  \/\/ Must be set if Target is set$/;"	m	struct:DNSQuestion_struct
TargetQID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSOpaque16 TargetQID;                 \/\/ Must be set if Target is set$/;"	m	struct:DNSQuestion_struct
Target_AutoHost	mDNSCore/mDNSEmbeddedAPI.h	/^    Target_AutoHost = 1,$/;"	e	enum:__anon74
Target_AutoHostAndNATMAP	mDNSCore/mDNSEmbeddedAPI.h	/^    Target_AutoHostAndNATMAP = 2$/;"	e	enum:__anon74
Target_Manual	mDNSCore/mDNSEmbeddedAPI.h	/^    Target_Manual = 0,$/;"	e	enum:__anon74
Task	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal void  Task( mDNS *inMDNS )$/;"	f
Task	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal void  Task( mDNS *inMDNS )$/;"	f
TaskInit	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mStatus   TaskInit( mDNS *inMDNS )$/;"	f
TaskInit	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mStatus   TaskInit( mDNS *inMDNS )$/;"	f
TaskProcessPacket	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal void  TaskProcessPacket( mDNS *inMDNS, MDNSInterfaceItem *inItem, MDNSSocketRef inSocketRef )$/;"	f
TaskProcessPackets	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal void  TaskProcessPackets( mDNS *inMDNS, SocketSet *inSS, SocketRef inSock )$/;"	f
TaskSetupReadSet	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal void  TaskSetupReadSet( mDNS *inMDNS, fd_set *outReadSet, int *outMaxSocket )$/;"	f
TaskSetupSelect	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal void  TaskSetupSelect( mDNS *inMDNS, fd_set *outSet, int *outMaxFd, mDNSs32 inNextEvent, struct timeval *outTimeout )$/;"	f
TaskSetupTimeout	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal void  TaskSetupTimeout( mDNS *inMDNS, mDNSs32 inNextTaskTime, struct timeval *outTimeout )$/;"	f
TaskTerm	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal void  TaskTerm( mDNS *inMDNS )$/;"	f
TearDownBrowsing	mDNSWindows/ControlPanel/ConfigPropertySheet.cpp	/^CConfigPropertySheet::TearDownBrowsing()$/;"	f	class:CConfigPropertySheet
TearDownCommandPipe	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mStatus   TearDownCommandPipe( mDNS * const inMDNS )$/;"	f
TearDownCommandPipe	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mStatus   TearDownCommandPipe( mDNS * const inMDNS )$/;"	f
TearDownInterface	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mStatus   TearDownInterface( mDNS * const inMDNS, MDNSInterfaceItem *inItem )$/;"	f
TearDownInterface	mDNSWindows/mDNSWin32.c	/^mDNSlocal mStatus	TearDownInterface( mDNS * const inMDNS, mDNSInterfaceData *inIFD )$/;"	f
TearDownInterfaceList	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mStatus   TearDownInterfaceList( mDNS * const inMDNS )$/;"	f
TearDownInterfaceList	mDNSWindows/mDNSWin32.c	/^mStatus	TearDownInterfaceList( mDNS * const inMDNS )$/;"	f
TearDownNotifications	mDNSWindows/SystemService/Service.c	/^mDNSlocal mStatus	TearDownNotifications()$/;"	f
TearDownServiceEvents	mDNSWindows/SystemService/Service.c	/^mDNSlocal mStatus	TearDownServiceEvents()$/;"	f
TearDownTask	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mStatus   TearDownTask( mDNS * const inMDNS )$/;"	f
TeardownCallbackState	mDNSShared/Java/JNISupport.c	/^static void TeardownCallbackState( void )$/;"	f	file:
TermReporter	Clients/Java/DNSSDUnitTest.java	/^class	TermReporter implements BaseListener$/;"	c
TextRecord	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    TextRecord( void )$/;"	f	struct:TextRecord
TextRecord	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^struct  TextRecord$/;"	s
TextRecord	mDNSWindows/DLL.NET/dnssd_NET.h	/^			TextRecord()$/;"	f	class:Apple::DNSSD::TextRecord
TextRecord	mDNSWindows/DLL.NET/dnssd_NET.h	/^		public __gc class TextRecord$/;"	c	namespace:Apple::DNSSD
TextRecordImpl	mDNSWindows/DLL.NET/dnssd_NET.h	/^			__nogc class TextRecordImpl$/;"	c	class:Apple::DNSSD::TextRecord
TfrRecordToNIC	mDNSMacOSX/mDNSMacOSX.c	7202;"	d	file:
ThirdLabel	mDNSCore/mDNSEmbeddedAPI.h	2815;"	d
ThisAPInterval	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 ThisAPInterval;             \/\/ In platform time units: Current interval for announce\/probe$/;"	m	struct:AuthRecord_struct
ThisLocationGMTdelta	mDNSMacOS9/mDNSMacOS9.c	683;"	d	file:
ThisQInterval	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 ThisQInterval;                  \/\/ LastQTime + ThisQInterval is the next scheduled transmission of this Q$/;"	m	struct:DNSQuestion_struct
ThrowOnErr	mDNSShared/Java/DNSSD.java	/^	protected void			ThrowOnErr( int rc) throws DNSSDException$/;"	m	class:AppleDNSRecord
ThrowOnErr	mDNSShared/Java/DNSSD.java	/^	protected void			ThrowOnErr( int rc) throws DNSSDException$/;"	m	class:AppleService
TicksTTL	mDNSCore/mDNS.c	701;"	d	file:
Time	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 Time;$/;"	m	struct:__anon80
TimeExpire	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 TimeExpire;                 \/\/ In platform time units$/;"	m	struct:AuthRecord_struct
TimeRcvd	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 TimeRcvd;                   \/\/ In platform time units$/;"	m	struct:AuthRecord_struct
TimeRcvd	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 TimeRcvd;                   \/\/ In platform time units$/;"	m	struct:CacheRecord_struct
TimeSlept	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 TimeSlept;                  \/\/ Time we went to sleep.$/;"	m	struct:mDNS_struct
TimeToAnnounceThisRecord	mDNSCore/mDNS.c	699;"	d	file:
TimeToSendThisQuestion	mDNSCore/mDNSEmbeddedAPI.h	1852;"	d
TimeToSendThisRecord	mDNSCore/mDNS.c	700;"	d	file:
TimeoutQuestion	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 TimeoutQuestion;                 \/\/ Timeout this question if there is no reply in configured time$/;"	m	struct:DNSQuestion_struct
TimeoutQuestions	mDNSCore/mDNS.c	/^mDNSlocal void TimeoutQuestions(mDNS *const m)$/;"	f
ToString	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^				ToString()$/;"	m	class:DNSServiceBrowser_NET.Form1.ResolveData
ToString	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			ToString()$/;"	m	class:DNSServiceBrowser_NET.Form1.BrowseData
ToString	Clients/SimpleChat.NET/SimpleChat.cs	/^        ToString()$/;"	m	class:SimpleChat.NET.PeerData
TotalMemUsed	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 TotalMemUsed;$/;"	m	struct:__anon91
TracerOptData	mDNSCore/mDNSEmbeddedAPI.h	/^} TracerOptData;$/;"	t	typeref:struct:__anon55
TranslateAcceleratorIO	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::TranslateAcceleratorIO( LPMSG inMsg )$/;"	f	class:ExplorerBar
TransportLayerPacket	mDNSCore/mDNSEmbeddedAPI.h	/^} TransportLayerPacket;$/;"	t	typeref:union:__anon49
TriggerEventCompletion	mDNSMacOSX/daemon.c	/^mDNSexport void TriggerEventCompletion()$/;"	f
TriggerEventCompletion	mDNSShared/dnsextd.c	/^void TriggerEventCompletion() {}$/;"	f
TruncateUTF8ToLength	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu32 TruncateUTF8ToLength(mDNSu8 *string, mDNSu32 length, mDNSu32 max)$/;"	f
TrustAnchor	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct TrustAnchor$/;"	s
TrustAnchor	mDNSCore/mDNSEmbeddedAPI.h	/^} TrustAnchor;$/;"	t	typeref:struct:TrustAnchor
TrustAnchors	mDNSCore/mDNSEmbeddedAPI.h	/^    TrustAnchor     *TrustAnchors;$/;"	m	struct:mDNS_struct
TrustedKey	mDNSCore/dnssec.c	/^mDNSlocal mStatus TrustedKey(mDNS *const m, DNSSECVerifier *dv)$/;"	f
TrustedKeyPresent	mDNSCore/dnssec.c	/^mDNSlocal mDNSBool TrustedKeyPresent(mDNS *const m, DNSSECVerifier *dv)$/;"	f
TunnelClientDeleteAny	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void TunnelClientDeleteAny(mDNS *const m, ClientTunnel *tun, mDNSBool v6Tunnel)$/;"	f
TunnelClientDeleteMatching	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool TunnelClientDeleteMatching(mDNS *const m, ClientTunnel *tun, mDNSBool v6Tunnel)$/;"	f
TunnelClientFinish	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void TunnelClientFinish(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer)$/;"	f
TunnelClients	mDNSCore/mDNSEmbeddedAPI.h	/^    ClientTunnel     *TunnelClients;$/;"	m	struct:mDNS_struct
TxtRecord	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			public TXTRecord	TxtRecord;$/;"	f	class:DNSServiceBrowser_NET.Form1.ResolveData
Type	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^			public String	Type;$/;"	f	class:DNSServiceBrowser_NET.Form1.BrowseData
Type	Clients/SimpleChat.NET/SimpleChat.cs	/^        public String Type;$/;"	f	class:SimpleChat.NET.PeerData
Type	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 Type;                           \/\/ v4 or v6?$/;"	m	struct:__anon80
TypeBufferSize	Clients/dns-sd.c	1423;"	d	file:
UDNS_WAB_BROWSE_QUERY	mDNSCore/uDNS.h	120;"	d
UDNS_WAB_LBROWSE_QUERY	mDNSCore/uDNS.h	121;"	d
UDNS_WAB_REG_QUERY	mDNSCore/uDNS.h	122;"	d
UDPCloseSocket	mDNSWindows/mDNSWin32.c	/^UDPCloseSocket( UDPSocket * sock )$/;"	f
UDPContext	mDNSShared/dnsextd.c	/^} UDPContext;$/;"	t	typeref:struct:__anon111	file:
UDPMessageHandler	mDNSShared/dnsextd.c	/^UDPMessageHandler$/;"	f
UDPProxy	mDNSMacOSX/mDNSMacOSX.h	/^    UDPSocket UDPProxy;$/;"	m	struct:mDNS_PlatformSupport_struct
UDPProxyCallback	mDNSMacOSX/mDNSMacOSX.h	/^    ProxyCallback *UDPProxyCallback;$/;"	m	struct:mDNS_PlatformSupport_struct
UDPServerTransaction	mDNSShared/dnsextd.c	/^UDPServerTransaction(const DaemonInfo *d, const PktMsg *request, PktMsg *reply, mDNSBool *trunc)$/;"	f
UDPSocket	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct UDPSocket_struct UDPSocket;$/;"	t	typeref:struct:UDPSocket_struct
UDPSocketNotification	mDNSWindows/mDNSWin32.c	/^UDPSocketNotification( SOCKET sock, LPWSANETWORKEVENTS event, void *context )$/;"	f
UDPSocket_struct	mDNSCore/DNSCommon.c	/^struct UDPSocket_struct$/;"	s	file:
UDPSocket_struct	mDNSCore/mDNS.c	/^struct UDPSocket_struct$/;"	s	file:
UDPSocket_struct	mDNSMacOSX/mDNSMacOSX.h	/^struct UDPSocket_struct$/;"	s
UDPSocket_struct	mDNSPosix/NetMonitor.c	39;"	d	file:
UDPSocket_struct	mDNSWindows/mDNSWin32.h	/^struct UDPSocket_struct$/;"	s
UDSAcceptNotification	mDNSWindows/SystemService/Service.c	/^UDSAcceptNotification( SOCKET sock, LPWSANETWORKEVENTS event, void *context )$/;"	f
UDSReadNotification	mDNSWindows/SystemService/Service.c	/^UDSReadNotification( SOCKET sock, LPWSANETWORKEVENTS event, void *context )$/;"	f
UIActivateIO	Clients/ExplorerPlugin/ExplorerBar.cpp	/^STDMETHODIMP	ExplorerBar::UIActivateIO( BOOL inActivate, LPMSG inMsg )$/;"	f	class:ExplorerBar
UINT16_C	mDNSShared/CommonServices.h	822;"	d
UINT32_C	mDNSShared/CommonServices.h	826;"	d
UINT64_C	mDNSShared/CommonServices.h	831;"	d
UINT64_C	mDNSShared/CommonServices.h	833;"	d
UINT8_C	mDNSShared/CommonServices.h	818;"	d
UNICAST_NSEC	mDNSCore/DNSCommon.h	163;"	d
UNIQUE	mDNSShared/Java/DNSSD.java	/^	public static final int		UNIQUE = ( 1 << 5 );$/;"	f	class:DNSSD
UNKNOWN	mDNSShared/Java/DNSSDException.java	/^    public static final int		UNKNOWN                   = -65537;$/;"	f	class:DNSSDException
UNKNOWN_PROTOCOL	Clients/PrinterSetupWizard/tcpxcv.h	20;"	d
UNSUPPORTED	mDNSShared/Java/DNSSDException.java	/^    public static final int		UNSUPPORTED               = -65544;$/;"	f	class:DNSSDException
UPDATE_SC_RIGHT	mDNSMacOSX/PreferencePane/ConfigurationRights.h	48;"	d
UPnPInterfaceID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID UPnPInterfaceID;$/;"	m	struct:mDNS_struct
UPnPRouterAddressString	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8           *UPnPRouterAddressString;  \/\/ holds both the router's address and port$/;"	m	struct:mDNS_struct
UPnPRouterPort	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort UPnPRouterPort;                  \/\/ port we send discovery messages to$/;"	m	struct:mDNS_struct
UPnPRouterURL	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8           *UPnPRouterURL;            \/\/ router's URL string$/;"	m	struct:mDNS_struct
UPnPSOAPAddressString	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8           *UPnPSOAPAddressString;    \/\/ holds both address and port for SOAP messages$/;"	m	struct:mDNS_struct
UPnPSOAPPort	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort UPnPSOAPPort;                    \/\/ port we send SOAP messages to$/;"	m	struct:mDNS_struct
UPnPSOAPURL	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8           *UPnPSOAPURL;              \/\/ router's SOAP control URL string$/;"	m	struct:mDNS_struct
UPnPWANPPPConnection	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool UPnPWANPPPConnection;              \/\/ whether we're using WANIPConnection or WANPPPConnection$/;"	m	struct:mDNS_struct
USE_STUBLESS_PROXY	mDNSWindows/DLLX/dlldatax.c	30;"	d	file:
UTF8StringToStringObject	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^static DWORD	UTF8StringToStringObject( const char *inUTF8, CString &inObject )$/;"	f	file:
UTF8StringToStringObject	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	/^static DWORD	UTF8StringToStringObject( const char *inUTF8, CString &inObject )$/;"	f	file:
UTF8StringToStringObject	mDNSWindows/WinServices.cpp	/^OSStatus	UTF8StringToStringObject( const char *inUTF8, CString &inObject )$/;"	f
UTF8ToBSTR	mDNSWindows/DLLX/StringServices.cpp	/^UTF8ToBSTR$/;"	f
UTF8str255	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct { mDNSu8 c[256]; } UTF8str255;       \/\/ Null-terminated C string$/;"	t	typeref:struct:__anon45
UUID_SIZE	mDNSCore/mDNSEmbeddedAPI.h	1885;"	d
UnansweredQueries	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8  UnansweredQueries;          \/\/ Number of times we've issued a query for this record without getting an answer$/;"	m	struct:CacheRecord_struct
UnicastBitInQueries	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 UnicastBitInQueries;            \/\/ Queries with QU bit set$/;"	m	struct:__anon92
UnicastDNSPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort UnicastDNSPort         = { { UnicastDNSPortAsNumber         >> 8, UnicastDNSPortAsNumber         & 0xFF } };$/;"	v
UnicastDNSPortAsNumber	mDNSCore/DNSCommon.c	56;"	d	file:
UnicastDemotedToMulticast	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 UnicastDemotedToMulticast;      \/\/ Number of times unicast demoted to multicast$/;"	m	struct:__anon92
UnicastPacketsSent	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 UnicastPacketsSent;         \/\/ Number of unicast packets sent.$/;"	m	struct:mDNS_struct
UnicastPort4	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort UnicastPort4;$/;"	m	struct:mDNS_struct
UnicastPort6	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort UnicastPort6;$/;"	m	struct:mDNS_struct
UnicastResponses	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 UnicastResponses;               \/\/ Unicast responses to queries$/;"	m	struct:__anon92
UniqueAnswers	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 UniqueAnswers;                  \/\/ Number of answers received with kDNSClass_UniqueRRSet bit set$/;"	m	struct:DNSQuestion_struct
UniqueLocalOnlyRecord	mDNSCore/mDNS.c	139;"	d	file:
UnlinkAndReissueBlockedQuestions	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void UnlinkAndReissueBlockedQuestions(mDNS *const m, ClientTunnel *tun, mDNSBool success)$/;"	f
UnlinkRRVerifier	mDNSCore/dnssec.c	/^mDNSlocal mDNSBool UnlinkRRVerifier(DNSSECVerifier *dv, RRVerifier *elem, RRVerifierSet set)$/;"	f
UnlinkResourceRecord	mDNSCore/uDNS.c	/^mDNSlocal mStatus UnlinkResourceRecord(mDNS *const m, AuthRecord *const rr)$/;"	f
Unregister	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^CCPApp::Unregister( LPCTSTR clsidString )$/;"	f	class:CCPApp
UnregisterServer	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^DEBUG_LOCAL OSStatus	UnregisterServer( CLSID inCLSID )$/;"	f
Update	mDNSShared/Java/DNSSD.java	/^	protected native int	Update( int flags, byte[] rData, int ttl);$/;"	m	class:AppleDNSRecord
Update	mDNSWindows/DLLX/DNSSDRecord.cpp	/^STDMETHODIMP CDNSSDRecord::Update(DNSSDFlags flags, VARIANT rdata, ULONG ttl)$/;"	f	class:CDNSSDRecord
UpdateAllSRVRecords	mDNSCore/uDNS.c	/^mDNSexport void UpdateAllSRVRecords(mDNS *m)$/;"	f
UpdateAllServiceRecords	mDNSCore/uDNS.c	/^mDNSlocal void UpdateAllServiceRecords(mDNS *const m, AuthRecord *rr, mDNSBool reg)$/;"	f
UpdateAnonymousRacoonConfig	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void UpdateAnonymousRacoonConfig(mDNS *m)     \/\/ Determine whether we need racoon to accept incoming connections$/;"	f
UpdateAnswerList	mDNSShared/dnsextd.c	/^mDNSlocal void *UpdateAnswerList(void *args)$/;"	f
UpdateAnswerListArgs	mDNSShared/dnsextd.c	/^} UpdateAnswerListArgs;$/;"	t	typeref:struct:__anon113	file:
UpdateAutoTunnel6Record	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void UpdateAutoTunnel6Record(mDNS *m, DomainAuthInfo *info)$/;"	f
UpdateAutoTunnelDeviceInfoRecord	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void UpdateAutoTunnelDeviceInfoRecord(mDNS *m, DomainAuthInfo *info)$/;"	f
UpdateAutoTunnelDomainStatus	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void UpdateAutoTunnelDomainStatus(const mDNS *const m, const DomainAuthInfo *const info)$/;"	f
UpdateAutoTunnelDomainStatuses	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void UpdateAutoTunnelDomainStatuses(const mDNS *const m)$/;"	f
UpdateAutoTunnelHostRecord	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void UpdateAutoTunnelHostRecord(mDNS *m, DomainAuthInfo *info)$/;"	f
UpdateAutoTunnelServiceRecords	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void UpdateAutoTunnelServiceRecords(mDNS *m, DomainAuthInfo *info)$/;"	f
UpdateBTMMRelayConnection	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void UpdateBTMMRelayConnection(mDNS *const m)$/;"	f
UpdateBlocked	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 UpdateBlocked;              \/\/ Set if update delaying is in effect$/;"	m	struct:AuthRecord_struct
UpdateCallback	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSRecordUpdateCallback *UpdateCallback;$/;"	m	struct:AuthRecord_struct
UpdateCallback	mDNSMacOSX/daemon.c	/^mDNSlocal void UpdateCallback(mDNS *const m, AuthRecord *const rr, RData *OldRData, mDNSu16 OldRDLen)$/;"	f
UpdateContext	mDNSCore/mDNSEmbeddedAPI.h	/^    void *UpdateContext;    \/\/ Context parameter for the update callback function$/;"	m	struct:AuthRecord_struct
UpdateCredits	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 UpdateCredits;              \/\/ Token-bucket rate limiting of excessive updates$/;"	m	struct:AuthRecord_struct
UpdateDebugState	mDNSMacOSX/daemon.c	/^mDNSexport void UpdateDebugState()$/;"	f
UpdateDeviceInfoRecord	mDNSShared/uds_daemon.c	/^mDNSlocal void UpdateDeviceInfoRecord(mDNS *const m)$/;"	f
UpdateEtcHosts	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void UpdateEtcHosts(mDNS *const m, void *context)$/;"	f
UpdateInfoDisplay	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^void	ChooserDialog::UpdateInfoDisplay( void )$/;"	f	class:ChooserDialog
UpdateInterfaceList	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus UpdateInterfaceList(mDNS *const m, mDNSs32 utc)$/;"	f
UpdateInterfaceList	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mStatus   UpdateInterfaceList( mDNS *const inMDNS, mDNSs32 inUTC )$/;"	f
UpdateInterfaceProtocols	mDNSCore/mDNS.c	/^mDNSlocal void UpdateInterfaceProtocols(mDNS *const m, NetworkInterfaceInfo *active)$/;"	f
UpdateKeepaliveRData	mDNSCore/mDNS.c	/^mDNSexport mStatus UpdateKeepaliveRData(mDNS *const m, AuthRecord *rr, NetworkInterfaceInfo *const intf, mDNSBool updateMac, char *ethAddr)$/;"	f
UpdateLLQ	mDNSShared/dnsextd.c	/^mDNSlocal void UpdateLLQ(DaemonInfo *d, LLQEntry *e, LLQOptData *llq, mDNSOpaque16 msgID, TCPSocket *sock )$/;"	f
UpdateLLQStatus	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus UpdateLLQStatus(const mDNS *const m, char *buffer, int bufsz, const DomainAuthInfo *const info)$/;"	f
UpdateLeaseTable	mDNSShared/dnsextd.c	/^mDNSlocal void UpdateLeaseTable(PktMsg *pkt, DaemonInfo *d, mDNSs32 lease)$/;"	f
UpdateOneSRVRecord	mDNSCore/uDNS.c	/^mDNSlocal void UpdateOneSRVRecord(mDNS *m, AuthRecord *rr)$/;"	f
UpdateParent	mDNSCore/nsec.c	/^mDNSlocal void UpdateParent(DNSSECVerifier *dv)$/;"	f
UpdateQuestionDuplicates	mDNSCore/mDNS.c	/^mDNSlocal void UpdateQuestionDuplicates(mDNS *const m, DNSQuestion *const question)$/;"	f
UpdateRMACCallback	mDNSCore/mDNS.c	/^mDNSexport void UpdateRMACCallback(mDNS *const m, void *context)$/;"	f
UpdateRRStatus	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus UpdateRRStatus(const mDNS *const m, char *buffer, int bufsz, const DomainAuthInfo *const info)$/;"	f
UpdateRecord	mDNSMacOSX/daemon.c	/^mDNSlocal mStatus UpdateRecord(ServiceRecordSet *srs, mach_port_t client, AuthRecord *rr, const char *data, mach_msg_type_number_t data_len, uint32_t ttl)$/;"	f
UpdateRecord	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^DNSService::UpdateRecord$/;"	f	class:DNSService
UpdateReqFlags	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSOpaque16 UpdateReqFlags  = { { kDNSFlag0_QR_Query    | kDNSFlag0_OP_Update,                  0 } };$/;"	v
UpdateRespFlags	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSOpaque16 UpdateRespFlags = { { kDNSFlag0_QR_Response | kDNSFlag0_OP_Update,                  0 } };$/;"	v
UpdateSPSStatus	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void UpdateSPSStatus(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
UpdateSRV	mDNSShared/dnsextd.c	/^mDNSlocal int UpdateSRV(DaemonInfo *d, mDNSBool registration)$/;"	f
UpdateSearchDomainHash	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void UpdateSearchDomainHash(mDNS *const m, MD5_CTX *sdc, char *domain, mDNSInterfaceID InterfaceID)$/;"	f
UpdateTrustAnchors	mDNSMacOSX/DNSSECSupport.c	/^mDNSexport void UpdateTrustAnchors(mDNS *const m)$/;"	f
Usage	mDNSWindows/NSPTool/NSPTool.c	/^DEBUG_LOCAL void	Usage( void )$/;"	f
Usage	mDNSWindows/SystemService/Service.c	/^static void	Usage( void )$/;"	f	file:
UseBackgroundTrafficClass	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 UseBackgroundTrafficClass;       \/\/ Use background traffic class for request$/;"	m	struct:DNSQuestion_struct
UseInternalSleepProxy	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int UseInternalSleepProxy = 1;       \/\/ Set to non-zero to use internal (in-NIC) Sleep Proxy$/;"	v
UseOldRacoon	mDNSMacOSX/helper.c	/^static int UseOldRacoon()$/;"	f	file:
UseTCP	mDNSShared/dnsextd.h	/^    mDNSBool UseTCP;            \/\/ Use TCP if UDP would cause truncation$/;"	m	struct:AnswerListElem
UserEventAgentFactory	mDNSMacOSX/BonjourEvents.c	/^void * UserEventAgentFactory(CFAllocatorRef allocator, CFUUIDRef typeID)$/;"	f
UserEventAgentInterfaceFtbl	mDNSMacOSX/BonjourEvents.c	/^static UserEventAgentInterfaceStruct UserEventAgentInterfaceFtbl = {$/;"	v	file:
VALID_MSAD_SRV	mDNSShared/uds_daemon.c	3012;"	d	file:
VALID_MSAD_SRV_TRANSPORT	mDNSShared/uds_daemon.c	3011;"	d	file:
VC_EXTRALEAN	Clients/ExplorerPlugin/StdAfx.h	24;"	d
VC_EXTRALEAN	Clients/PrinterSetupWizard/stdafx.h	21;"	d
VC_EXTRALEAN	mDNSWindows/ControlPanel/stdafx.h	21;"	d
VC_EXTRALEAN	mDNSWindows/DNSServiceBrowser/Windows/Sources/StdAfx.h	25;"	d
VC_EXTRALEAN	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/StdAfx.h	27;"	d
VER	Makefile	/^	VER = -- GCC_VERSION=$(GCC_VERSION)$/;"	m
VER	Makefile	/^VER = $/;"	m
VER	Makefile	/^echo "VER = $(VER)"$/;"	m
VERSION	mDNSShared/dnssd_ipc.h	103;"	d
VER_NUM_LEN	mDNSMacOSX/mDNSMacOSX.c	10370;"	d	file:
VER_PLATFORM_WIN32_CE	mDNSWindows/mDNSWin32.c	4287;"	d	file:
VLog	mDNSShared/dnsextd.c	/^mDNSlocal void VLog(const char *format, ...)$/;"	f
VPNCTL_CMD_PING	mDNSMacOSX/helper.c	1443;"	d	file:
ValidOwnerLength	mDNSCore/mDNSEmbeddedAPI.h	966;"	d
ValidQuestionTarget	mDNSCore/mDNS.c	10871;"	d	file:
ValidSPSName	mDNSCore/mDNSEmbeddedAPI.h	3481;"	d
ValidSocket	mDNSMacOSX/DNSProxySupport.c	24;"	d	file:
ValidTransportProtocol	mDNSCore/DNSCommon.c	967;"	d	file:
ValidateDS	mDNSCore/dnssec.c	/^mDNSlocal mStatus ValidateDS(DNSSECVerifier *dv)$/;"	f
ValidateDomainName	mDNSCore/DNSCommon.h	121;"	d
ValidateParameters	mDNSCore/mDNS.c	/^mDNSlocal mStatus ValidateParameters(mDNS *const m, DNSQuestion *const question)$/;"	f
ValidateRData	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool ValidateRData(const mDNSu16 rrtype, const mDNSu16 rdlength, const RData *const rd)$/;"	f
ValidateRRSIG	mDNSCore/dnssec.c	/^mDNSexport void ValidateRRSIG(DNSSECVerifier *dv, RRVerifierSet type, const ResourceRecord *const rr)$/;"	f
ValidateSignature	mDNSCore/dnssec.c	/^mDNSlocal mStatus ValidateSignature(DNSSECVerifier *dv, RRVerifier **resultKey, RRVerifier **resultRRSIG)$/;"	f
ValidateSignatureWithKey	mDNSCore/dnssec.c	/^mDNSlocal mDNSBool ValidateSignatureWithKey(DNSSECVerifier *dv, RRVerifier *rrset, RRVerifier *keyv, RRVerifier *sig)$/;"	f
ValidateSignatureWithKeyForAllRRSigs	mDNSCore/dnssec.c	/^mDNSlocal mDNSBool ValidateSignatureWithKeyForAllRRSigs(DNSSECVerifier *dv, RRVerifier *rrset, RRVerifier *keyv, RRVerifier *sig)$/;"	f
ValidateTrustAnchor	mDNSMacOSX/DNSSECSupport.c	/^mDNSlocal mDNSBool ValidateTrustAnchor(TrustAnchor *ta)$/;"	f
ValidateWithNSECS	mDNSCore/nsec.c	/^mDNSexport void ValidateWithNSECS(mDNS *const m, DNSSECVerifier *dv, CacheRecord *cr)$/;"	f
ValidatingQuestion	mDNSCore/mDNSEmbeddedAPI.h	1875;"	d
ValidatingResponse	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 ValidatingResponse;                 \/\/ Question trying to validate a response (dnssec) on behalf of$/;"	m	struct:DNSQuestion_struct
ValidationQuestion	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion *ValidationQuestion;    \/\/ Questions that are being validated (dnssec)$/;"	m	struct:mDNS_struct
ValidationRequired	mDNSCore/dnssec.h	/^    mDNSu8 ValidationRequired;      \/\/ Copy of the question's ValidationRequired status$/;"	m	struct:DNSSECVerifier_struct
ValidationRequired	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 ValidationRequired;              \/\/ Requires DNSSEC validation.$/;"	m	struct:DNSQuestion_struct
ValidationState	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSSECValState ValidationState;            \/\/ Current state of the Validation process$/;"	m	struct:DNSQuestion_struct
ValidationStatus	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSSECStatus ValidationStatus;             \/\/ Validation status for "ValidationRequired" questions (dnssec)$/;"	m	struct:DNSQuestion_struct
ValidatorBits	mDNSShared/dnssd_clientstub.c	133;"	d	file:
VariantToByteArray	mDNSWindows/DLLX/StringServices.cpp	/^VariantToByteArray$/;"	f
Verify	mDNSCore/CryptoAlg.h	/^    mStatus (*Verify)(AlgContext *ctx, mDNSu8 *key, mDNSu32 keylen, mDNSu8 *signature, mDNSu32 siglen);$/;"	m	struct:__anon103
VerifyData	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal Boolean VerifyData(SecKeyRef key, CFStringRef digestStr, mDNSu8 *digest, int dlen, int digestlenAttr, mDNSu8 *sig, int siglen, CFStringRef digest_type)$/;"	f
VerifyNSEC	mDNSCore/nsec.c	/^mDNSexport void VerifyNSEC(mDNS *const m, ResourceRecord *rr, RRVerifier *rv, DNSSECVerifier *pdv, CacheRecord *ncr, DNSSECVerifierCallback callback)$/;"	f
VerifyNSEC3	mDNSCore/nsec3.c	/^mDNSlocal mDNSBool VerifyNSEC3(mDNS *const m, DNSSECVerifier *dv, CacheRecord *ncr, CacheRecord *closestEncloser,$/;"	f
VerifyNSECCallback	mDNSCore/nsec.c	/^mDNSlocal void VerifyNSECCallback(mDNS *const m, DNSSECVerifier *dv, DNSSECStatus status)$/;"	f
VerifySigCallback	mDNSCore/dnssec.c	/^mDNSlocal void VerifySigCallback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
VerifySignature	mDNSCore/dnssec.c	/^mDNSexport void VerifySignature(mDNS *const m, DNSSECVerifier *dv, DNSQuestion *q)$/;"	f
VerifySignature	mDNSPosix/mDNSPosix.c	/^mDNSexport void VerifySignature(mDNS *const m, DNSSECVerifier *dv, DNSQuestion *q)$/;"	f
VerifySignature	mDNSWindows/mDNSWin32.c	/^mDNSexport void VerifySignature(mDNS *const m, DNSSECVerifier *dv, DNSQuestion *q)$/;"	f
VersionString_SCCS	Clients/dns-sd.c	/^const char VersionString_SCCS[] = "@(#) dns-sd " STRINGIFY(mDNSResponderVersion) " (" __DATE__ " " __TIME__ ")";$/;"	v
VersionString_SCCS	mDNSMacOSX/helper-main.c	/^const char VersionString_SCCS[] = "@(#) mDNSResponderHelper " STRINGIFY(mDNSResponderVersion) " (" __DATE__ " " __TIME__ ")";$/;"	v
VersionString_SCCS	mDNSShared/Java/JNISupport.c	/^const char VersionString_SCCS[] = "@(#) libjdns_sd " STRINGIFY(mDNSResponderVersion) " (" __DATE__ " " __TIME__ ")";$/;"	v
VersionString_SCCS_libdnssd	mDNSShared/dnssd_clientlib.c	/^const char VersionString_SCCS_libdnssd[] = "@(#) libdns_sd " STRINGIFY(mDNSResponderVersion) " (" __DATE__ " " __TIME__ ")";$/;"	v
WABBrowseQueriesCount	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 WABBrowseQueriesCount;          \/\/ Number of WAB Browse domain enumeration queries (b, db) callers$/;"	m	struct:mDNS_struct
WABLBrowseQueriesCount	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 WABLBrowseQueriesCount;         \/\/ Number of legacy WAB Browse domain enumeration queries (lb) callers$/;"	m	struct:mDNS_struct
WABRegQueriesCount	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 WABRegQueriesCount;             \/\/ Number of WAB Registration domain enumeration queries (r, dr) callers$/;"	m	struct:mDNS_struct
WCF	mDNSCore/mDNSEmbeddedAPI.h	/^    void            *WCF;$/;"	m	struct:mDNS_struct
WILDCARD_PROVES_ANSWER_EXPANDED	mDNSCore/dnssec.h	85;"	d
WILDCARD_PROVES_NONAME_EXISTS	mDNSCore/dnssec.h	86;"	d
WIN32_LEAN_AND_MEAN	Clients/BonjourExample/stdafx.h	22;"	d
WIN32_LEAN_AND_MEAN	mDNSShared/CommonServices.h	247;"	d
WIN32_WINDOWS	mDNSShared/CommonServices.h	239;"	d
WINRESVERS_H	mDNSWindows/WinVersRes.h	19;"	d
WINVER	Clients/PrinterSetupWizard/stdafx.h	27;"	d
WINVER	mDNSWindows/ControlPanel/stdafx.h	27;"	d
WINVER	mDNSWindows/DLLX/stdafx.h	38;"	d
WINVER	mDNSWindows/DNSServiceBrowser/Windows/Sources/StdAfx.h	28;"	d
WIRE_CHAR_SET	Clients/Java/DNSSDUnitTest.java	/^	public static final String	WIRE_CHAR_SET = "ISO-8859-1";$/;"	f	class:DNSSDUnitTest
WM_DATAREADY	mDNSWindows/ControlPanel/ConfigPropertySheet.cpp	28;"	d	file:
WM_PRIVATE_SERVICE_EVENT	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	54;"	d	file:
WM_PROCESS_EVENT	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	62;"	d	file:
WM_SOCKET	mDNSWindows/DLLX/DNSSDService.cpp	44;"	d	file:
WM_SOCKET_EVENT	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	61;"	d	file:
WM_USER_DOMAIN_ADD	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	76;"	d	file:
WM_USER_DOMAIN_REMOVE	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	77;"	d	file:
WM_USER_RESOLVE	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	80;"	d	file:
WM_USER_SERVICE_ADD	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	78;"	d	file:
WM_USER_SERVICE_ADD	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	36;"	d	file:
WM_USER_SERVICE_REMOVE	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	79;"	d	file:
WM_USER_SERVICE_REMOVE	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	37;"	d	file:
WaitForAnswer	mDNSPosix/Identify.c	/^mDNSlocal void WaitForAnswer(mDNS *const m, int seconds)$/;"	f
WakeAtUTC	mDNSMacOSX/mDNSMacOSX.h	/^    long WakeAtUTC;$/;"	m	struct:mDNS_PlatformSupport_struct
WakeKQueueLoopFD	mDNSMacOSX/mDNSMacOSX.h	/^    int WakeKQueueLoopFD;$/;"	m	struct:mDNS_PlatformSupport_struct
WakeOnResolve	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 WakeOnResolve;                   \/\/ Send wakeup on resolve$/;"	m	struct:DNSQuestion_struct
WakeOnResolveCount	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 WakeOnResolveCount;              \/\/ Number of wakes that should be sent on resolve$/;"	m	struct:DNSQuestion_struct
WakeOnResolves	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 WakeOnResolves;                 \/\/ Number of times we did a wake on resolve$/;"	m	struct:__anon92
WakeUp	mDNSCore/mDNSEmbeddedAPI.h	/^    OwnerOptData WakeUp;                \/\/ WakeUp.HMAC.l[0] nonzero indicates that this is a Sleep Proxy record$/;"	m	struct:AuthRecord_struct
Wakes	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 Wakes;                          \/\/ Total wakes$/;"	m	struct:__anon92
WakeupCount	mDNSCore/mDNS.c	681;"	d	file:
WatchDogReportingThreshold	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int WatchDogReportingThreshold = 250;$/;"	v
WatchForInterfaceChange	mDNSPosix/mDNSPosix.c	/^mDNSlocal mStatus WatchForInterfaceChange(mDNS *const m)$/;"	f
WatchForNetworkChanges	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus WatchForNetworkChanges(mDNS *const m)$/;"	f
WatchForSysEvents	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus WatchForSysEvents(mDNS *const m)$/;"	f
WildcardAnswerProof	mDNSCore/nsec.c	/^mDNSexport void WildcardAnswerProof(mDNS *const m, DNSSECVerifier *dv)$/;"	f
WindowsLatin1toUTF8	mDNSWindows/mDNSWin32.c	/^WindowsLatin1toUTF8( const char *inString, char *inBuffer, size_t inBufferSize )$/;"	f
WizardException	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^struct WizardException$/;"	s	class:CPrinterSetupWizardSheet
WndProc	Clients/BonjourExample/BonjourExample.cpp	/^static LRESULT CALLBACK WndProc( HWND inWindow, UINT inMsg, WPARAM inWParam, LPARAM inLParam )$/;"	f	file:
WndProc	mDNSWindows/DLLX/DNSSDService.cpp	/^CDNSSDService::WndProc( HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDNSSDService
Worker	mDNSWindows/Poll.c	/^} Worker;$/;"	t	typeref:struct:Worker_struct	file:
WorkerDispatch	mDNSWindows/Poll.c	/^WorkerDispatch( Worker *worker )$/;"	f
WorkerFree	mDNSWindows/Poll.c	/^WorkerFree( Worker *worker )$/;"	f
WorkerInit	mDNSWindows/Poll.c	/^WorkerInit( Worker *worker )$/;"	f
WorkerMain	mDNSWindows/Poll.c	/^WorkerMain( LPVOID inParam )$/;"	f
WorkerRegisterSource	mDNSWindows/Poll.c	/^WorkerRegisterSource( Worker *worker, PollSource *source )$/;"	f
WorkerSourceToIndex	mDNSWindows/Poll.c	/^WorkerSourceToIndex( Worker *worker, PollSource *source )$/;"	f
WorkerUnregisterSource	mDNSWindows/Poll.c	/^WorkerUnregisterSource( Worker *worker, PollSource *source )$/;"	f
WorkerWakeupNotification	mDNSWindows/Poll.c	/^WorkerWakeupNotification( HANDLE event, void *context )$/;"	f
Worker_struct	mDNSWindows/Poll.c	/^typedef struct Worker_struct$/;"	s	file:
WriteBrowseDomain	mDNSMacOSX/PreferencePane/PrivilegedOperations.c	/^WriteBrowseDomain(CFDataRef domainArrayData)$/;"	f
WriteHostname	mDNSMacOSX/PreferencePane/PrivilegedOperations.c	/^WriteHostname(CFDataRef domainArrayData)$/;"	f
WriteRegistrationDomain	mDNSMacOSX/PreferencePane/PrivilegedOperations.c	/^WriteRegistrationDomain(CFDataRef domainArrayData)$/;"	f
X	mDNSCore/DNSDigest.c	1023;"	d	file:
X	mDNSCore/DNSDigest.c	1033;"	d	file:
XPC_SERVICES_H	mDNSMacOSX/Private/xpc_services.h	14;"	d
XX	mDNSCore/mDNS.c	13791;"	d	file:
YieldSomeTime	mDNSMacOS9/Mac OS Test Responder.c	/^mDNSlocal Boolean YieldSomeTime(UInt32 milliseconds)$/;"	f
YieldSomeTime	mDNSMacOS9/Mac OS Test Searcher.c	/^static Boolean YieldSomeTime(UInt32 milliseconds)$/;"	f	file:
YieldSomeTime	mDNSMacOS9/Responder.c	/^static Boolean YieldSomeTime(UInt32 milliseconds)$/;"	f	file:
YieldSomeTime	mDNSMacOS9/Searcher.c	/^static Boolean YieldSomeTime(UInt32 milliseconds)$/;"	f	file:
YieldSomeTime	mDNSMacOS9/SubTypeTester.c	/^mDNSlocal Boolean YieldSomeTime(UInt32 milliseconds)$/;"	f
ZoneClass	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 ZoneClass;                  \/\/ Discovered result: DNS Class from SOA record$/;"	m	struct:ZoneData_struct
ZoneData	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct ZoneData_struct ZoneData;$/;"	t	typeref:struct:ZoneData_struct
ZoneDataCallback	mDNSCore/mDNSEmbeddedAPI.h	/^    ZoneDataCallback *ZoneDataCallback; \/\/ Caller-specified function to be called upon completion$/;"	m	struct:ZoneData_struct
ZoneDataCallback	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void ZoneDataCallback (mDNS *const m, mStatus err, const ZoneData *result);$/;"	t
ZoneDataContext	mDNSCore/mDNSEmbeddedAPI.h	/^    void             *ZoneDataContext;$/;"	m	struct:ZoneData_struct
ZoneDataSRV	mDNSCore/uDNS.c	1738;"	d	file:
ZoneData_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct ZoneData_struct$/;"	s
ZoneHandlesName	mDNSShared/dnsextd.c	/^ZoneHandlesName$/;"	f
ZoneName	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname ZoneName;                \/\/ Discovered result: Left-hand-side of SOA record$/;"	m	struct:ZoneData_struct
ZonePrivate	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool ZonePrivate;               \/\/ Discovered result: Does zone require encrypted queries?$/;"	m	struct:ZoneData_struct
ZoneService	mDNSCore/mDNSEmbeddedAPI.h	/^    ZoneService ZoneService;            \/\/ Which service we're seeking for this zone (update, query, or LLQ)$/;"	m	struct:ZoneData_struct
ZoneService	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { ZoneServiceUpdate, ZoneServiceQuery, ZoneServiceLLQ } ZoneService;$/;"	t	typeref:enum:__anon87
ZoneServiceLLQ	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { ZoneServiceUpdate, ZoneServiceQuery, ZoneServiceLLQ } ZoneService;$/;"	e	enum:__anon87
ZoneServiceQuery	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { ZoneServiceUpdate, ZoneServiceQuery, ZoneServiceLLQ } ZoneService;$/;"	e	enum:__anon87
ZoneServiceUpdate	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { ZoneServiceUpdate, ZoneServiceQuery, ZoneServiceLLQ } ZoneService;$/;"	e	enum:__anon87
_AFX_ALL_WARNINGS	Clients/PrinterSetupWizard/stdafx.h	46;"	d
_AFX_ALL_WARNINGS	mDNSWindows/ControlPanel/stdafx.h	46;"	d
_APS_NEXT_COMMAND_VALUE	Clients/DNS-SD.VisualStudio/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	Clients/ExplorerPlugin/resource_dll.h	22;"	d
_APS_NEXT_COMMAND_VALUE	Clients/ExplorerPlugin/resource_loc_res.h	28;"	d
_APS_NEXT_COMMAND_VALUE	Clients/ExplorerPlugin/resource_res.h	26;"	d
_APS_NEXT_COMMAND_VALUE	Clients/FirefoxExtension/resource.h	23;"	d
_APS_NEXT_COMMAND_VALUE	Clients/PrinterSetupWizard/resource_exe.h	90;"	d
_APS_NEXT_COMMAND_VALUE	Clients/PrinterSetupWizard/resource_loc_res.h	91;"	d
_APS_NEXT_COMMAND_VALUE	Clients/PrinterSetupWizard/resource_res.h	90;"	d
_APS_NEXT_COMMAND_VALUE	Clients/mDNSNetMonitor.VisualStudio/resource.h	10;"	d
_APS_NEXT_COMMAND_VALUE	mDNSWindows/ControlPanel/resource.h	52;"	d
_APS_NEXT_COMMAND_VALUE	mDNSWindows/DLL/resource.h	23;"	d
_APS_NEXT_COMMAND_VALUE	mDNSWindows/DLLX/resource.h	26;"	d
_APS_NEXT_COMMAND_VALUE	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	49;"	d
_APS_NEXT_COMMAND_VALUE	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/resource.h	18;"	d
_APS_NEXT_COMMAND_VALUE	mDNSWindows/NSPTool/resource.h	23;"	d
_APS_NEXT_COMMAND_VALUE	mDNSWindows/SystemService/resource.h	13;"	d
_APS_NEXT_COMMAND_VALUE	mDNSWindows/SystemService/resrc1.h	11;"	d
_APS_NEXT_COMMAND_VALUE	mDNSWindows/mdnsNSP/resource.h	23;"	d
_APS_NEXT_CONTROL_VALUE	Clients/DNS-SD.VisualStudio/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	Clients/ExplorerPlugin/resource_dll.h	23;"	d
_APS_NEXT_CONTROL_VALUE	Clients/ExplorerPlugin/resource_loc_res.h	29;"	d
_APS_NEXT_CONTROL_VALUE	Clients/ExplorerPlugin/resource_res.h	27;"	d
_APS_NEXT_CONTROL_VALUE	Clients/FirefoxExtension/resource.h	24;"	d
_APS_NEXT_CONTROL_VALUE	Clients/PrinterSetupWizard/resource_exe.h	91;"	d
_APS_NEXT_CONTROL_VALUE	Clients/PrinterSetupWizard/resource_loc_res.h	92;"	d
_APS_NEXT_CONTROL_VALUE	Clients/PrinterSetupWizard/resource_res.h	91;"	d
_APS_NEXT_CONTROL_VALUE	Clients/mDNSNetMonitor.VisualStudio/resource.h	11;"	d
_APS_NEXT_CONTROL_VALUE	mDNSWindows/ControlPanel/resource.h	53;"	d
_APS_NEXT_CONTROL_VALUE	mDNSWindows/DLL/resource.h	24;"	d
_APS_NEXT_CONTROL_VALUE	mDNSWindows/DLLX/resource.h	27;"	d
_APS_NEXT_CONTROL_VALUE	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	50;"	d
_APS_NEXT_CONTROL_VALUE	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/resource.h	19;"	d
_APS_NEXT_CONTROL_VALUE	mDNSWindows/NSPTool/resource.h	24;"	d
_APS_NEXT_CONTROL_VALUE	mDNSWindows/SystemService/resource.h	14;"	d
_APS_NEXT_CONTROL_VALUE	mDNSWindows/SystemService/resrc1.h	12;"	d
_APS_NEXT_CONTROL_VALUE	mDNSWindows/mdnsNSP/resource.h	24;"	d
_APS_NEXT_RESOURCE_VALUE	Clients/DNS-SD.VisualStudio/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	Clients/ExplorerPlugin/resource_dll.h	21;"	d
_APS_NEXT_RESOURCE_VALUE	Clients/ExplorerPlugin/resource_loc_res.h	27;"	d
_APS_NEXT_RESOURCE_VALUE	Clients/ExplorerPlugin/resource_res.h	25;"	d
_APS_NEXT_RESOURCE_VALUE	Clients/FirefoxExtension/resource.h	22;"	d
_APS_NEXT_RESOURCE_VALUE	Clients/PrinterSetupWizard/resource_exe.h	89;"	d
_APS_NEXT_RESOURCE_VALUE	Clients/PrinterSetupWizard/resource_loc_res.h	90;"	d
_APS_NEXT_RESOURCE_VALUE	Clients/PrinterSetupWizard/resource_res.h	89;"	d
_APS_NEXT_RESOURCE_VALUE	Clients/mDNSNetMonitor.VisualStudio/resource.h	9;"	d
_APS_NEXT_RESOURCE_VALUE	mDNSWindows/ControlPanel/resource.h	51;"	d
_APS_NEXT_RESOURCE_VALUE	mDNSWindows/DLL/resource.h	22;"	d
_APS_NEXT_RESOURCE_VALUE	mDNSWindows/DLLX/resource.h	25;"	d
_APS_NEXT_RESOURCE_VALUE	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	48;"	d
_APS_NEXT_RESOURCE_VALUE	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/resource.h	17;"	d
_APS_NEXT_RESOURCE_VALUE	mDNSWindows/NSPTool/resource.h	22;"	d
_APS_NEXT_RESOURCE_VALUE	mDNSWindows/SystemService/resource.h	12;"	d
_APS_NEXT_RESOURCE_VALUE	mDNSWindows/SystemService/resrc1.h	10;"	d
_APS_NEXT_RESOURCE_VALUE	mDNSWindows/mdnsNSP/resource.h	22;"	d
_APS_NEXT_SYMED_VALUE	Clients/DNS-SD.VisualStudio/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	Clients/ExplorerPlugin/resource_dll.h	24;"	d
_APS_NEXT_SYMED_VALUE	Clients/ExplorerPlugin/resource_loc_res.h	30;"	d
_APS_NEXT_SYMED_VALUE	Clients/ExplorerPlugin/resource_res.h	28;"	d
_APS_NEXT_SYMED_VALUE	Clients/FirefoxExtension/resource.h	25;"	d
_APS_NEXT_SYMED_VALUE	Clients/PrinterSetupWizard/resource_exe.h	92;"	d
_APS_NEXT_SYMED_VALUE	Clients/PrinterSetupWizard/resource_loc_res.h	93;"	d
_APS_NEXT_SYMED_VALUE	Clients/PrinterSetupWizard/resource_res.h	92;"	d
_APS_NEXT_SYMED_VALUE	Clients/mDNSNetMonitor.VisualStudio/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	mDNSWindows/ControlPanel/resource.h	54;"	d
_APS_NEXT_SYMED_VALUE	mDNSWindows/DLL/resource.h	25;"	d
_APS_NEXT_SYMED_VALUE	mDNSWindows/DLLX/resource.h	28;"	d
_APS_NEXT_SYMED_VALUE	mDNSWindows/DNSServiceBrowser/Windows/Resources/Resource.h	51;"	d
_APS_NEXT_SYMED_VALUE	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/resource.h	20;"	d
_APS_NEXT_SYMED_VALUE	mDNSWindows/NSPTool/resource.h	25;"	d
_APS_NEXT_SYMED_VALUE	mDNSWindows/SystemService/resource.h	15;"	d
_APS_NEXT_SYMED_VALUE	mDNSWindows/SystemService/resrc1.h	13;"	d
_APS_NEXT_SYMED_VALUE	mDNSWindows/mdnsNSP/resource.h	25;"	d
_ATL_APARTMENT_THREADED	mDNSWindows/DLLX/stdafx.h	68;"	d
_ATL_CSTRING_EXPLICIT_CONSTRUCTORS	Clients/PrinterSetupWizard/stdafx.h	43;"	d
_ATL_CSTRING_EXPLICIT_CONSTRUCTORS	mDNSWindows/ControlPanel/stdafx.h	43;"	d
_ATL_CSTRING_EXPLICIT_CONSTRUCTORS	mDNSWindows/DLLX/stdafx.h	74;"	d
_ATL_NO_AUTOMATIC_NAMESPACE	mDNSWindows/DLLX/stdafx.h	70;"	d
_AtlModule	mDNSWindows/DLLX/DLLX.cpp	/^CDLLComponentModule _AtlModule;$/;"	v
_Bool	mDNSShared/CommonServices.h	865;"	d
_CDNSSDSERVICE_H	Clients/FirefoxExtension/CDNSSDService.h	20;"	d
_CONFIG_INFO_DATA_1	Clients/PrinterSetupWizard/tcpxcv.h	/^typedef struct _CONFIG_INFO_DATA_1$/;"	s
_CRT_RAND_S	mDNSWindows/mDNSWin32.c	26;"	d	file:
_ConfigPropertySheet_h	mDNSWindows/ControlPanel/ConfigPropertySheet.h	19;"	d
_DELETE_PORT_DATA_1	Clients/PrinterSetupWizard/tcpxcv.h	/^typedef struct _DELETE_PORT_DATA_1$/;"	s
_DLLStub_h	mDNSWindows/DLLStub/DLLStub.h	30;"	d
_DNSRecordRef_t	mDNSShared/dnssd_clientstub.c	/^struct _DNSRecordRef_t$/;"	s	file:
_DNSRecordRef_t	mDNSWindows/DLL.NET/Stdafx.h	/^struct _DNSRecordRef_t {};$/;"	s
_DNSServiceRef_t	mDNSShared/dnssd_clientstub.c	/^struct _DNSServiceRef_t$/;"	s	file:
_DNSServiceRef_t	mDNSWindows/DLL.NET/Stdafx.h	/^struct _DNSServiceRef_t {};$/;"	s
_DNSXConnRef_t	mDNSMacOSX/Private/dns_services.c	/^struct _DNSXConnRef_t$/;"	s	file:
_DNS_SD_H	mDNSShared/dns_sd.h	80;"	d
_DNS_SD_LIBDISPATCH	Clients/dns-sd.c	173;"	d	file:
_DNS_SD_LIBDISPATCH	mDNSShared/dns_sd.h	90;"	d
_DNS_SERVICES_H	mDNSMacOSX/Private/dns_services.h	13;"	d
_FORTIFY_SOURCE	mDNSMacOSX/helper-main.c	18;"	d	file:
_Firewall_h	mDNSWindows/SystemService/Firewall.h	22;"	d
_HOST_c2l	mDNSCore/DNSDigest.c	569;"	d	file:
_HOST_c2l	mDNSCore/DNSDigest.c	605;"	d	file:
_HOST_l2c	mDNSCore/DNSDigest.c	597;"	d	file:
_HOST_l2c	mDNSCore/DNSDigest.c	633;"	d	file:
_Logger_h	Clients/PrinterSetupWizard/Logger.h	19;"	d
_P2P_PACKET_FILTER_H_	mDNSMacOSX/P2PPacketFilter.h	19;"	d
_PLATFORM_HAS_STRONG_PRNG_	mDNSCore/mDNSEmbeddedAPI.h	3097;"	d
_PORT_DATA_1	Clients/PrinterSetupWizard/tcpxcv.h	/^typedef struct _PORT_DATA_1$/;"	s
_PORT_DATA_2	Clients/PrinterSetupWizard/tcpxcv.h	/^typedef struct _PORT_DATA_2$/;"	s
_PORT_DATA_LIST_1	Clients/PrinterSetupWizard/tcpxcv.h	/^typedef struct _PORT_DATA_LIST_1$/;"	s
_Poll_h	mDNSWindows/Poll.h	19;"	d
_SSIZE_T	mDNSShared/dnssd_clientstub.c	44;"	d	file:
_Secret_h	mDNSWindows/Secret.h	19;"	d
_StringServices_h	mDNSWindows/DLLX/StringServices.h	22;"	d
_TCPXCV_	Clients/PrinterSetupWizard/tcpxcv.h	17;"	d
_TXTRecordRefRealType	mDNSShared/dnssd_clientlib.c	/^typedef struct _TXTRecordRefRealType$/;"	s	file:
_TXTRecordRef_t	mDNSShared/dns_sd.h	/^typedef union _TXTRecordRef_t { char PrivateData[16]; char *ForceNaturalAlignment; } TXTRecordRef;$/;"	u
_UNUSED	mDNSShared/Java/JNISupport.c	71;"	d	file:
_UNUSED	mDNSShared/Java/JNISupport.c	73;"	d	file:
_UNUSED	mDNSShared/dns_sd.h	124;"	d
_UserEventAgentInterface	mDNSMacOSX/BonjourEvents.c	/^    UserEventAgentInterfaceStruct*      _UserEventAgentInterface;$/;"	m	struct:__anon149	file:
_WIN32_DCOM	mDNSWindows/SystemService/Firewall.cpp	21;"	d	file:
_WIN32_DCOM	mDNSWindows/VPCDetect.cpp	18;"	d	file:
_WIN32_IE	Clients/PrinterSetupWizard/stdafx.h	40;"	d
_WIN32_IE	mDNSWindows/ControlPanel/stdafx.h	40;"	d
_WIN32_IE	mDNSWindows/DLLX/stdafx.h	62;"	d
_WIN32_WINDOWS	Clients/PrinterSetupWizard/stdafx.h	35;"	d
_WIN32_WINDOWS	mDNSShared/CommonServices.h	243;"	d
_WIN32_WINDOWS	mDNSWindows/ControlPanel/stdafx.h	35;"	d
_WIN32_WINDOWS	mDNSWindows/DLLX/stdafx.h	54;"	d
_WIN32_WINNT	Clients/PrinterSetupWizard/stdafx.h	31;"	d
_WIN32_WINNT	mDNSWindows/ControlPanel/stdafx.h	31;"	d
_WIN32_WINNT	mDNSWindows/DLLX/dlldatax.c	28;"	d	file:
_WIN32_WINNT	mDNSWindows/DLLX/stdafx.h	46;"	d
_WSPIAPI_COUNTOF	Clients/ExplorerPlugin/StdAfx.h	28;"	d
_WSPIAPI_COUNTOF	Clients/PrinterSetupWizard/stdafx.h	49;"	d
_WSPIAPI_COUNTOF	mDNSShared/CommonServices.h	144;"	d
_WSPIAPI_COUNTOF	mDNSWindows/ControlPanel/stdafx.h	49;"	d
_WSPIAPI_COUNTOF	mDNSWindows/DLL.NET/Stdafx.h	25;"	d
__ANONYMOUS_H_	mDNSCore/anonymous.h	19;"	d
__APPLE_API_PRIVATE	Clients/dns-sd.c	168;"	d	file:
__BONJOUR_H__	mDNSPosix/Bonjour.h	16;"	d
__CLASS_FACTORY__	Clients/ExplorerPlugin/ClassFactory.h	19;"	d
__COMMON_SERVICES__	mDNSShared/CommonServices.h	25;"	d
__CRYPTO_ALG_H	mDNSCore/CryptoAlg.h	18;"	d
__CRYPTO_SUPPORT_H	mDNSMacOSX/CryptoSupport.h	18;"	d
__DEBUG_SERVICES__	mDNSShared/DebugServices.h	25;"	d
__DNSCOMMON_H_	mDNSCore/DNSCommon.h	19;"	d
__DNSSEC_H	mDNSCore/dnssec.h	18;"	d
__DNSSEC_SUPPORT_H	mDNSMacOSX/DNSSECSupport.h	19;"	d
__DNS_PROXY_H	mDNSCore/dnsproxy.h	18;"	d
__DNS_SERVICE_DISCOVERY_DEFINES_H	mDNSMacOSX/DNSServiceDiscoveryDefines.h	19;"	d
__DNS_SERVICE_DISCOVERY_H	mDNSMacOSX/DNSServiceDiscovery.h	49;"	d
__EXPLORER_BAR_WINDOW__	Clients/ExplorerPlugin/ExplorerBarWindow.h	19;"	d
__EXPLORER_BAR__	Clients/ExplorerPlugin/ExplorerBar.h	19;"	d
__GenLinkedList__	mDNSShared/GenLinkedList.h	19;"	d
__LOGIN_DIALOG__	Clients/ExplorerPlugin/LoginDialog.h	19;"	d
__LOGIN_DIALOG__	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.h	19;"	d
__MDNS_SERVICE_H__	mDNSWindows/SystemService/Service.h	19;"	d
__MDNS_VXWORKS_H__	mDNSVxWorks/mDNSVxWorks.h	19;"	d
__MDNS_VXWORKS__	mDNSVxWorks/mDNSVxWorksIPv4Only.h	24;"	d
__MDNS_WIN32__	mDNSWindows/mDNSWin32.h	19;"	d
__NEWRES_H__	mDNSWindows/DNSServiceBrowser/WindowsCE/Resources/newres.h	2;"	d
__NSEC3_H	mDNSCore/nsec3.h	19;"	d
__NSEC_H	mDNSCore/nsec.h	18;"	d
__PREFIX__	mDNSWindows/NSPTool/Prefix.h	19;"	d
__PREFIX__	mDNSWindows/SystemService/Prefix.h	19;"	d
__ROUTINE__	mDNSShared/DebugServices.h	62;"	d
__ROUTINE__	mDNSShared/DebugServices.h	64;"	d
__ROUTINE__	mDNSShared/DebugServices.h	66;"	d
__ROUTINE__	mDNSShared/DebugServices.h	68;"	d
__STDAFX__	Clients/ExplorerPlugin/StdAfx.h	19;"	d
__ShowInitIcon__	mDNSMacOS9/ShowInitIcon.h	2;"	d
__UDNS_H_	mDNSCore/uDNS.h	19;"	d
__bool_true_false_are_defined	mDNSShared/CommonServices.h	890;"	d
__crashreporter_info__	Clients/dns-sd.c	/^const char *__crashreporter_info__ = VersionString_SCCS + 5;$/;"	v
__crashreporter_info__	mDNSMacOSX/daemon.c	/^const char *__crashreporter_info__ = mDNSResponderVersionString;$/;"	v
__crashreporter_info__	mDNSMacOSX/helper-main.c	/^const char *__crashreporter_info__ = VersionString_SCCS + 5;$/;"	v
__crashreporter_info__	mDNSPosix/Bonjour.c	/^const char *__crashreporter_info__ = mDNSResponderVersionString_SCCS + 5;$/;"	v
__crashreporter_info__	mDNSPosix/PosixDaemon.c	/^const char *__crashreporter_info__ = mDNSResponderVersionString_SCCS + 5;$/;"	v
__crashreporter_info__	mDNSShared/dnsextd.c	/^const char *__crashreporter_info__ = mDNSResponderVersionString_SCCS + 5;$/;"	v
__func__	mDNSCore/DNSCommon.h	293;"	d
__gc	mDNSWindows/DLL.NET/dnssd_NET.h	/^				) __gc[];$/;"	m	class:Apple::DNSSD::TextRecord
__gen_IDNSSDService_h__	Clients/FirefoxExtension/IDNSSDService.h	6;"	d
__mDNSDebug_h	mDNSCore/mDNSDebug.h	19;"	d
__mDNSEmbeddedAPI_h	mDNSCore/mDNSEmbeddedAPI.h	55;"	d
__mDNSMacOSX_h	mDNSMacOSX/mDNSMacOSX.h	19;"	d
__mDNSPlatformPosix_h	mDNSPosix/mDNSPosix.h	19;"	d
__mDNSUNP_h	mDNSPosix/mDNSUNP.h	19;"	d
_beginthreadex_compat	mDNSShared/CommonServices.h	536;"	d
_beginthreadex_compat	mDNSShared/CommonServices.h	542;"	d
_browsers	mDNSMacOSX/BonjourEvents.c	/^    CFMutableDictionaryRef _browsers;                           \/\/ A Dictionary of Browser Dictionaries where the resposible browser is the key.$/;"	m	struct:__anon149	file:
_constructFullName	mDNSShared/Java/DNSSD.java	/^	abstract protected String		_constructFullName( String serviceName, String regType, String domain)$/;"	m	class:DNSSD
_constructFullName	mDNSShared/Java/DNSSD.java	/^	protected String			_constructFullName( String serviceName, String regType, String domain)$/;"	m	class:AppleDNSSD
_createRecordRegistrar	mDNSShared/Java/DNSSD.java	/^	abstract protected DNSSDRecordRegistrar	_createRecordRegistrar( RegisterRecordListener listener)$/;"	m	class:DNSSD
_createRecordRegistrar	mDNSShared/Java/DNSSD.java	/^	protected DNSSDRecordRegistrar	_createRecordRegistrar( RegisterRecordListener listener)$/;"	m	class:AppleDNSSD
_dns_service_discovery_t	mDNSMacOSX/DNSServiceDiscovery.c	/^typedef struct _dns_service_discovery_t {$/;"	s	file:
_dnsextd_h	mDNSShared/dnsextd.h	20;"	d
_endthreadex_compat	mDNSShared/CommonServices.h	540;"	d
_endthreadex_compat	mDNSShared/CommonServices.h	543;"	d
_enumerateDomains	mDNSShared/Java/DNSSD.java	/^	abstract protected DNSSDService	_enumerateDomains( int flags, int ifIndex, DomainListener listener)$/;"	m	class:DNSSD
_enumerateDomains	mDNSShared/Java/DNSSD.java	/^	protected DNSSDService		_enumerateDomains( int flags, int ifIndex, DomainListener listener)$/;"	m	class:AppleDNSSD
_extradata	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 _extradata[MaximumRDSize-InlineCacheRDSize];     \/\/ Glue on the necessary number of extra bytes$/;"	m	struct:__anon79
_factoryID	mDNSMacOSX/BonjourEvents.c	/^    CFUUIDRef _factoryID;$/;"	m	struct:__anon149	file:
_getISOCode	mDNSWindows/loclibrary.c	/^static int _getISOCode(LANGID wLangID, char *isoLangCode, int codeLen) {$/;"	f	file:
_getIfIndexForName	mDNSShared/Java/DNSSD.java	/^	abstract protected int			_getIfIndexForName( String ifName);$/;"	m	class:DNSSD
_getIfIndexForName	mDNSShared/Java/DNSSD.java	/^	protected int				_getIfIndexForName( String ifName)$/;"	m	class:AppleDNSSD
_getNameForIfIndex	mDNSShared/Java/DNSSD.java	/^	abstract protected String		_getNameForIfIndex( int ifIndex);$/;"	m	class:DNSSD
_getNameForIfIndex	mDNSShared/Java/DNSSD.java	/^	protected String			_getNameForIfIndex( int ifIndex)$/;"	m	class:AppleDNSSD
_getUserLanguage	mDNSWindows/loclibrary.c	/^static LANGID _getUserLanguage( void ) {$/;"	f	file:
_increaseQueueLengthOnPort	mDNSMacOSX/DNSServiceDiscovery.c	/^static void _increaseQueueLengthOnPort(mach_port_t port)$/;"	f	file:
_kCFSystemVersionBuildVersionKey	mDNSMacOSX/helper.c	/^CF_EXPORT const CFStringRef _kCFSystemVersionBuildVersionKey;$/;"	v
_kCFSystemVersionBuildVersionKey	mDNSMacOSX/mDNSMacOSX.c	/^CF_EXPORT const CFStringRef _kCFSystemVersionBuildVersionKey;$/;"	v
_kCFSystemVersionProductNameKey	mDNSMacOSX/mDNSMacOSX.c	/^CF_EXPORT const CFStringRef _kCFSystemVersionProductNameKey;$/;"	v
_kCFSystemVersionProductVersionKey	mDNSMacOSX/mDNSMacOSX.c	/^CF_EXPORT const CFStringRef _kCFSystemVersionProductVersionKey;$/;"	v
_loclibrary_h_	mDNSWindows/loclibrary.h	26;"	d
_mDNSTunnelPolicyWhich	mDNSMacOSX/helper.c	/^typedef enum _mDNSTunnelPolicyWhich$/;"	g	file:
_mDNSTunnelType	mDNSMacOSX/helper.c	/^typedef enum _mDNSTunnelType$/;"	g	file:
_makeBrowser	mDNSShared/Java/DNSSD.java	/^	abstract protected DNSSDService	_makeBrowser( int flags, int ifIndex, String regType, String domain, BrowseListener listener)$/;"	m	class:DNSSD
_makeBrowser	mDNSShared/Java/DNSSD.java	/^	protected DNSSDService	_makeBrowser( int flags, int ifIndex, String regType, String domain, BrowseListener client)$/;"	m	class:AppleDNSSD
_malloc_options	mDNSMacOSX/daemon.c	/^char _malloc_options[] = "AXZ";$/;"	v
_nss_mdns_gethostbyaddr_r	mDNSPosix/nss_mdns.c	/^_nss_mdns_gethostbyaddr_r ($/;"	f
_nss_mdns_gethostbyname2_r	mDNSPosix/nss_mdns.c	/^_nss_mdns_gethostbyname2_r ($/;"	f
_nss_mdns_gethostbyname_r	mDNSPosix/nss_mdns.c	/^_nss_mdns_gethostbyname_r ($/;"	f
_onAddEvents	mDNSMacOSX/BonjourEvents.c	/^    CFMutableDictionaryRef _onAddEvents;                        \/\/ A Dictionary of Event Dictionaries that describe events to trigger on a service appearing.$/;"	m	struct:__anon149	file:
_onRemoveEvents	mDNSMacOSX/BonjourEvents.c	/^    CFMutableDictionaryRef _onRemoveEvents;                     \/\/ A Dictionary of Event Dictionaries that describe events to trigger on a service disappearing.$/;"	m	struct:__anon149	file:
_pluginContext	mDNSMacOSX/BonjourEvents.c	/^    void*                               _pluginContext;$/;"	m	struct:__anon149	file:
_queryRecord	mDNSShared/Java/DNSSD.java	/^	abstract protected DNSSDService	_queryRecord( int flags, int ifIndex, String serviceName, int rrtype,$/;"	m	class:DNSSD
_queryRecord	mDNSShared/Java/DNSSD.java	/^	protected DNSSDService		_queryRecord( int flags, int ifIndex, String serviceName, int rrtype,$/;"	m	class:AppleDNSSD
_reconfirmRecord	mDNSShared/Java/DNSSD.java	/^	abstract protected void			_reconfirmRecord( int flags, int ifIndex, String fullName, int rrtype,$/;"	m	class:DNSSD
_reconfirmRecord	mDNSShared/Java/DNSSD.java	/^	protected void				_reconfirmRecord( int flags, int ifIndex, String fullName, int rrtype,$/;"	m	class:AppleDNSSD
_refCount	mDNSMacOSX/BonjourEvents.c	/^    UInt32 _refCount;$/;"	m	struct:__anon149	file:
_register	mDNSShared/Java/DNSSD.java	/^	abstract protected DNSSDRegistration	_register( int flags, int ifIndex, String serviceName, String regType,$/;"	m	class:DNSSD
_register	mDNSShared/Java/DNSSD.java	/^	protected DNSSDRegistration	_register( int flags, int ifIndex, String serviceName, String regType,$/;"	m	class:AppleDNSSD
_resolve	mDNSShared/Java/DNSSD.java	/^	abstract protected DNSSDService	_resolve( int flags, int ifIndex, String serviceName, String regType,$/;"	m	class:DNSSD
_resolve	mDNSShared/Java/DNSSD.java	/^	protected DNSSDService	_resolve( int flags, int ifIndex, String serviceName, String regType,$/;"	m	class:AppleDNSSD
_sa_len	Clients/dns-sd.c	/^static size_t _sa_len(const struct sockaddr *addr)$/;"	f	file:
_setLanguageIfNeeded	mDNSWindows/loclibrary.c	/^static void _setLanguageIfNeeded(void) {$/;"	f	file:
_tmain	Clients/BonjourExample/BonjourExample.cpp	/^int _tmain( int argc, _TCHAR *argv[] )$/;"	f
_tokenToBrowserMap	mDNSMacOSX/BonjourEvents.c	/^    CFMutableDictionaryRef _tokenToBrowserMap;                  \/\/ Maps a token to a browser that can be used to scan the remaining dictionaries.$/;"	m	struct:__anon149	file:
a	mDNSShared/dnsextd.c	/^    AnswerListElem *a;$/;"	m	struct:__anon113	file:
a_requests	mDNSMacOSX/DNSServiceDiscovery.c	/^static struct a_requests    *a_requests = NULL;$/;"	v	typeref:struct:a_requests	file:
a_requests	mDNSMacOSX/DNSServiceDiscovery.c	/^struct a_requests {$/;"	s	file:
a_requests_lock	mDNSMacOSX/DNSServiceDiscovery.c	/^static pthread_mutex_t a_requests_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
abort_request	mDNSShared/uds_daemon.c	/^mDNSlocal void abort_request(request_state *req)$/;"	f
ac	mDNSCore/dnssec.h	/^    AuthChain *ac;$/;"	m	struct:DNSSECVerifier_struct
accept_dps_client	mDNSMacOSX/Private/xpc_services.c	/^mDNSlocal void accept_dps_client(xpc_connection_t conn)$/;"	f
ack	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 ack;$/;"	m	struct:__anon47
actail	mDNSCore/dnssec.h	/^    AuthChain **actail;$/;"	m	struct:DNSSECVerifier_struct
actionPerformed	Clients/Java/SimpleChat.java	/^	public void		actionPerformed( ActionEvent e) 	\/\/ invoked when Send button is hit$/;"	m	class:SimpleChat
actualName	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString actualName;$/;"	m	struct:PrinterSetupWizard::Printer
actualidle	mDNSMacOSX/helper-main.c	/^unsigned long actualidle = 3600;$/;"	v
add	mDNSMacOS9/Mac OS Test Searcher.c	/^typedef struct { ServiceInfo i; mDNSBool add; mDNSBool dom; OTLink link; } linkedServiceInfo;$/;"	m	struct:__anon182	file:
add	mDNSMacOS9/Searcher.c	/^    Boolean add;$/;"	m	struct:__anon187	file:
addCache	Clients/Java/BrowserApp.java	/^	protected Vector	addCache;		\/\/ list of BrowserListElem's to add$/;"	f	class:BrowserListModel
addInSortOrder	Clients/Java/BrowserApp.java	/^	protected void	addInSortOrder( Object obj)$/;"	m	class:BrowserListModel
addRecord	mDNSShared/Java/DNSSD.java	/^	public DNSRecord	addRecord( int flags, int rrType, byte[] rData, int ttl)$/;"	m	class:AppleRegistration
addRecord	mDNSShared/Java/DNSSDRegistration.java	/^	DNSRecord		addRecord( int flags, int rrType, byte[] rData, int ttl)$/;"	m	interface:DNSSDRegistration
addRule	mDNSMacOSX/P2PPacketFilter.c	/^static int addRule( int devFD, struct pfioc_rule * pr )$/;"	f	file:
add_address_to_buffer	mDNSPosix/nss_mdns.c	/^add_address_to_buffer (result_map_t * result, const void * data, int len)$/;"	f	file:
add_alias_to_buffer	mDNSPosix/nss_mdns.c	/^add_alias_to_buffer (result_map_t * result, const char * data, int len)$/;"	f	file:
add_domain	mDNSPosix/nss_mdns.c	/^add_domain (config_t * conf, const char * domain)$/;"	f	file:
add_domain_to_browser	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus add_domain_to_browser(request_state *info, const domainname *d)$/;"	f
add_hostname_len	mDNSPosix/nss_mdns.c	/^add_hostname_len (result_map_t * result, const char * fullname, int len)$/;"	f	file:
add_hostname_or_alias	mDNSPosix/nss_mdns.c	/^add_hostname_or_alias (result_map_t * result, const char * data, int len)$/;"	f	file:
add_record_request	mDNSShared/dnssd_ipc.h	/^    add_record_request,$/;"	e	enum:__anon109
add_record_to_service	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus add_record_to_service(request_state *request, service_instance *instance, mDNSu16 rrtype, mDNSu16 rdlen, const char *rdata, mDNSu32 ttl)$/;"	f
addr	mDNSCore/dnsproxy.c	/^    mDNSAddr    addr;               \/\/ Client's IP address $/;"	m	struct:DNSProxyClient_struct	file:
addr	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr addr;$/;"	m	struct:DNSServer
addr	mDNSPosix/NetMonitor.c	/^    mDNSAddr addr;$/;"	m	struct:__anon19	file:
addr	mDNSShared/dnsextd.h	/^    struct sockaddr_in addr;            \/\/ the address we will bind to$/;"	m	struct:__anon116	typeref:struct:__anon116::sockaddr_in
addr	mDNSWindows/mDNSWin32.c	/^	struct sockaddr_in		addr;$/;"	m	struct:MulticastWakeupStruct	typeref:struct:MulticastWakeupStruct::sockaddr_in	file:
addr	mDNSWindows/mDNSWin32.h	/^	mDNSAddr					addr;		\/\/ This is initialized by our code. If we don't get the $/;"	m	struct:UDPSocket_struct
addr4	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	uint32_t			addr4;$/;"	m	struct:Query	file:
addr4Valid	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	bool				addr4Valid;$/;"	m	struct:Query	file:
addr6	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	uint8_t				addr6[16];$/;"	m	struct:Query	file:
addr6ScopeId	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	u_long				addr6ScopeId;$/;"	m	struct:Query	file:
addr6Valid	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	bool				addr6Valid;$/;"	m	struct:Query	file:
addrLen	mDNSWindows/mDNSWin32.c	/^	INT						addrLen;$/;"	m	struct:MulticastWakeupStruct	file:
addr_idx	mDNSPosix/nss_mdns.c	/^    int addr_idx;$/;"	m	struct:result_map	file:
address	mDNSMacOS9/Searcher.c	/^    InetHost address;$/;"	m	struct:__anon187	file:
addresscontent	mDNSShared/dnsextd_parser.y	/^addresscontent:$/;"	l
addressstatement	mDNSShared/dnsextd_parser.y	/^addressstatement:$/;"	l
addressstatements	mDNSShared/dnsextd_parser.y	/^addressstatements:$/;"	l
addrinfo	mDNSShared/uds_daemon.c	/^        } addrinfo;$/;"	m	union:request_state::__anon124	typeref:struct:request_state::__anon124::__anon127	file:
addrinfo_reply	Clients/dns-sd.c	/^static void DNSSD_API addrinfo_reply(DNSServiceRef sdref, const DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceErrorType errorCode, const char *hostname, const struct sockaddr *address, uint32_t ttl, void *context)$/;"	f	file:
addrinfo_reply_op	mDNSShared/dnssd_ipc.h	/^    addrinfo_reply_op$/;"	e	enum:__anon110
addrinfo_request	mDNSShared/dnssd_ipc.h	/^    addrinfo_request,$/;"	e	enum:__anon109
addrinfo_termination_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void addrinfo_termination_callback(request_state *request)$/;"	f
addrs	mDNSPosix/nss_mdns.c	/^    char * addrs [k_addrs_max + 1];$/;"	m	struct:buf_header	file:
addrs_count	mDNSPosix/nss_mdns.c	/^    int addrs_count;$/;"	m	struct:result_map	file:
addtest	Clients/dns-sd.c	/^static char addtest = 0;$/;"	v	file:
advertise	mDNSMacOSX/daemon.c	/^static mDNSBool advertise = mDNS_Init_AdvertiseLocalAddresses; \/\/ By default, advertise addresses (& other records) via multicast$/;"	v	file:
af_to_rr	mDNSPosix/nss_mdns.c	/^af_to_rr (int af)$/;"	f
af_to_str	mDNSPosix/nss_mdns.c	/^af_to_str (int in)$/;"	f
afp	mDNSMacOS9/Mac OS Test Responder.c	/^static ServiceRecordSet p1, p2, afp, http, njp;$/;"	v	file:
afp	mDNSMacOS9/Responder.c	/^static RegisteredService p1, p2, afp, http, njp;$/;"	v	file:
ag	mDNSCore/mDNSEmbeddedAPI.h	/^union AuthEntity_union { AuthEntity *next; AuthGroup ag; };$/;"	m	union:AuthEntity_union
alg	Clients/dns-sd.c	/^    unsigned char alg; $/;"	m	struct:__anon168	file:
alg	Clients/dns-sd.c	/^    unsigned char alg; $/;"	m	struct:__anon170	file:
alg	Clients/dns-sd.c	/^    unsigned char alg;$/;"	m	struct:__anon169	file:
alg	mDNSCore/CryptoAlg.h	/^    mDNSu8 alg;$/;"	m	struct:__anon102
aliasIntf	mDNSPosix/mDNSPosix.h	/^    PosixNetworkInterface * aliasIntf;$/;"	m	struct:PosixNetworkInterface
alias_idx	mDNSPosix/nss_mdns.c	/^    int alias_idx;$/;"	m	struct:result_map	file:
aliases	mDNSPosix/nss_mdns.c	/^    char * aliases [k_aliases_max + 1];$/;"	m	struct:buf_header	file:
aliases_count	mDNSPosix/nss_mdns.c	/^    int aliases_count;$/;"	m	struct:result_map	file:
allZeroSSTH	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool allZeroSSTH(struct opaque_presence_indication *op)$/;"	f
all_requests	mDNSShared/uds_daemon.c	/^static request_state *all_requests = NULL;$/;"	v	file:
allowremotequery	mDNSShared/uds_daemon.c	/^            mDNSBool allowremotequery;      \/\/ Respond to unicast queries from outside the local link?$/;"	m	struct:request_state::__anon124::__anon126	file:
altForm	mDNSCore/DNSCommon.c	/^    char altForm;$/;"	m	struct:mDNSprintf_format	file:
ans	mDNSShared/uds_daemon.c	/^            mDNSu8 ans;$/;"	m	struct:request_state::__anon124::__anon130	file:
app	Clients/Java/BrowserApp.java	/^	static BrowserApp	app;$/;"	f	class:BrowserApp
appPathNameA	mDNSWindows/loclibrary.c	/^static char appPathNameA[MAX_PATH] = "";$/;"	v	file:
appPathNameW	mDNSWindows/loclibrary.c	/^static wchar_t appPathNameW[MAX_PATH] = L"";$/;"	v	file:
append_reply	mDNSShared/uds_daemon.c	/^mDNSlocal void append_reply(request_state *req, reply_state *rep)$/;"	f
ar	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord ar;          \/\/ Note: Must be last element of structure, to accomodate oversized AuthRecords$/;"	m	struct:ARListElem
ar	mDNSMacOSX/mDNSMacOSX.c	/^    AuthRecord               ar;    \/\/ must be last in the structure to accomodate extra space$/;"	m	struct:D2DRecordListElem	file:
arp	mDNSCore/mDNSEmbeddedAPI.h	/^    ARP_EthIP arp;$/;"	m	union:__anon46
array	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    ServiceInfoArray array;$/;"	m	struct:ServiceHandlerEntry
arv4	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord arv4;                          \/\/ registered IPv4 address record$/;"	m	struct:HostnameInfo
arv6	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord arv6;                          \/\/ registered IPv6 address record$/;"	m	struct:HostnameInfo
asl_uuid	mDNSCore/mDNSEmbeddedAPI.h	/^    uuid_t asl_uuid;                            \/\/ uuid for ASL logging$/;"	m	struct:mDNS_struct
assert0	mDNSCore/mDNSEmbeddedAPI.h	/^    char assert0[(sizeof(rdataSRV)         == 262                          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assert0	mDNSShared/dns_sd.h	/^    char assert0[(sizeof(union _TXTRecordRef_t) == 16) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_DNS_SD
assert0	mDNSShared/dnssd_clientlib.c	/^    char assert0[(sizeof(TXTRecordRefRealType) <= 16) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionCheck_dnssd_clientlib	file:
assert0	mDNSShared/dnssd_ipc.h	/^    char assert0[(sizeof(client_context_t) ==  8) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_dnssd_ipc
assert1	mDNSCore/mDNSEmbeddedAPI.h	/^    char assert1[(sizeof(DNSMessageHeader) ==  12                          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assert1	mDNSShared/dnssd_ipc.h	/^    char assert1[(sizeof(ipc_msg_hdr)      == 28) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_dnssd_ipc
assert2	mDNSCore/mDNSEmbeddedAPI.h	/^    char assert2[(sizeof(DNSMessage)       ==  12+AbsoluteMaxDNSMessageData) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assert3	mDNSCore/mDNSEmbeddedAPI.h	/^    char assert3[(sizeof(mDNSs8)           ==   1                          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assert4	mDNSCore/mDNSEmbeddedAPI.h	/^    char assert4[(sizeof(mDNSu8)           ==   1                          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assert5	mDNSCore/mDNSEmbeddedAPI.h	/^    char assert5[(sizeof(mDNSs16)          ==   2                          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assert6	mDNSCore/mDNSEmbeddedAPI.h	/^    char assert6[(sizeof(mDNSu16)          ==   2                          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assert7	mDNSCore/mDNSEmbeddedAPI.h	/^    char assert7[(sizeof(mDNSs32)          ==   4                          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assert8	mDNSCore/mDNSEmbeddedAPI.h	/^    char assert8[(sizeof(mDNSu32)          ==   4                          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assert9	mDNSCore/mDNSEmbeddedAPI.h	/^    char assert9[(sizeof(mDNSOpaque16)     ==   2                          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertA	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertA[(sizeof(mDNSOpaque32)     ==   4                          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertB	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertB[(sizeof(mDNSOpaque128)    ==  16                          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertC	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertC[(sizeof(CacheRecord  )    ==  sizeof(CacheGroup)          ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertD	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertD[(sizeof(int)              >=  4                           ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertE	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertE[(StandardAuthRDSize       >=  256                         ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertF	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertF[(sizeof(EthernetHeader)   ==   14                         ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertG	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertG[(sizeof(ARP_EthIP     )   ==   28                         ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertH	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertH[(sizeof(IPv4Header    )   ==   20                         ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertI	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertI[(sizeof(IPv6Header    )   ==   40                         ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertJ	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertJ[(sizeof(IPv6NDP       )   ==   24                         ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertK	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertK[(sizeof(UDPHeader     )   ==    8                         ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertL	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertL[(sizeof(IKEHeader     )   ==   28                         ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
assertM	mDNSCore/mDNSEmbeddedAPI.h	/^    char assertM[(sizeof(TCPHeader     )   ==   20                         ) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
authorized	mDNSMacOSX/helper.c	/^authorized(audit_token_t *token)$/;"	f	file:
autoname	mDNSMacOSX/daemon.c	/^    mDNSBool autoname;          \/\/ Set if this name is tied to the Computer Name$/;"	m	struct:ServiceInstance	file:
autoname	mDNSMacOSX/daemon.c	/^    mDNSBool autoname;$/;"	m	struct:DNSServiceRegistration	file:
autoname	mDNSShared/dnssd_clientshim.c	/^    mDNSBool autoname;                      \/\/ Set if this name is tied to the Computer Name$/;"	m	struct:__anon118	file:
autoname	mDNSShared/uds_daemon.c	/^            mDNSBool autoname;              \/\/ Set if this name is tied to the Computer Name$/;"	m	struct:request_state::__anon124::__anon126	file:
autorename	mDNSShared/dnssd_clientshim.c	/^    mDNSBool autorename;                    \/\/ Set if we just got a name conflict and now need to automatically pick a new name$/;"	m	struct:__anon118	file:
autorename	mDNSShared/uds_daemon.c	/^            mDNSBool autorename;            \/\/ Set if this client wants us to automatically rename on conflict$/;"	m	struct:request_state::__anon124::__anon126	file:
availRec1	mDNSMacOS9/SubTypeTester.c	/^static AuthRecord availRec1, availRec2;$/;"	v	file:
availRec2	mDNSMacOS9/SubTypeTester.c	/^static AuthRecord availRec1, availRec2;$/;"	v	file:
availRec2Active	mDNSMacOS9/SubTypeTester.c	/^static Boolean availRec2Active;$/;"	v	file:
b	Clients/dns-sd.c	/^typedef union { unsigned char b[2]; unsigned short NotAnInteger; } Opaque16;$/;"	m	union:__anon171	file:
b	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[ 2]; mDNSu16 NotAnInteger; } mDNSOpaque16;$/;"	m	union:__anon31
b	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[ 4]; mDNSu32 NotAnInteger; } mDNSOpaque32;$/;"	m	union:__anon32
b	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[ 8]; mDNSu16 w[4]; mDNSu32 l[2]; } mDNSOpaque64;$/;"	m	union:__anon33
b	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[16]; mDNSu16 w[8]; mDNSu32 l[4]; } mDNSOpaque128;$/;"	m	union:__anon34
b	mDNSMacOS9/Responder.c	/^typedef union { UInt8 b[2]; UInt16 NotAnInteger; } mDNSOpaque16;$/;"	m	union:__anon183	file:
b	mDNSMacOS9/Searcher.c	/^typedef union { UInt8 b[2]; UInt16 NotAnInteger; } mDNSOpaque16;$/;"	m	union:__anon185	file:
b	mDNSMacOS9/mDNSMacOS9.h	/^typedef union  { TOptionHeader h; TIPAddMulticastOption m; TSetByteOption i; TSetBooleanOption b; } TOptionBlock;$/;"	m	union:__anon180
b64keydata	mDNSCore/mDNSEmbeddedAPI.h	/^    char b64keydata[32];$/;"	m	struct:DomainAuthInfo
base64Encode	Clients/dns-sd.c	/^static void base64Encode(char *buffer, int buflen, void *rdata, unsigned int rdlen)$/;"	f	file:
baseEncode	mDNSCore/DNSCommon.c	/^mDNSexport int baseEncode(char *buffer, int blen, const mDNSu8 *data, int len, int encAlg)$/;"	f
bigNULL	Clients/dns-sd.c	/^static char bigNULL[8192];  \/\/ 8K is maximum rdata we support$/;"	v	file:
binary_16	mDNSShared/CommonServices.h	1240;"	d
binary_16_hex	mDNSShared/CommonServices.h	1242;"	d
binary_16_hex_wrap	mDNSShared/CommonServices.h	1241;"	d
binary_32	mDNSShared/CommonServices.h	1251;"	d
binary_32_hex	mDNSShared/CommonServices.h	1253;"	d
binary_32_hex_wrap	mDNSShared/CommonServices.h	1252;"	d
binary_4	mDNSShared/CommonServices.h	1220;"	d
binary_4_hex	mDNSShared/CommonServices.h	1222;"	d
binary_4_hex_wrap	mDNSShared/CommonServices.h	1221;"	d
binary_8	mDNSShared/CommonServices.h	1230;"	d
binary_8_hex	mDNSShared/CommonServices.h	1232;"	d
binary_8_hex_wrap	mDNSShared/CommonServices.h	1231;"	d
bit_clr_opaque64	mDNSCore/mDNSEmbeddedAPI.h	299;"	d
bit_get_opaque64	mDNSCore/mDNSEmbeddedAPI.h	300;"	d
bit_set_opaque64	mDNSCore/mDNSEmbeddedAPI.h	298;"	d
bitmap	mDNSCore/mDNSEmbeddedAPI.h	/^    char bitmap[32];$/;"	m	struct:__anon56
block	mDNSShared/dnsextd_parser.y	/^block: $/;"	l
bonjour4firefox.onLoad	Clients/FirefoxExtension/extension/content/overlay.js	/^{$/;"	m
bonjour4firefox.onMenuItemCommand	Clients/FirefoxExtension/extension/content/overlay.js	/^  	},$/;"	m
bonjour4firefox.onToolbarButtonCommand	Clients/FirefoxExtension/extension/content/overlay.js	/^	},$/;"	m
bool	mDNSShared/CommonServices.h	/^typedef int bool;$/;"	t
bool	mDNSShared/CommonServices.h	883;"	d
bpf_callback	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void bpf_callback(const CFSocketRef cfs, const CFSocketCallBackType CallBackType, const CFDataRef address, const void *const data, void *const context)$/;"	f
bpf_callback_common	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void bpf_callback_common(NetworkInterfaceInfoOSX *info)$/;"	f
bpf_callback_dispatch	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void bpf_callback_dispatch(NetworkInterfaceInfoOSX *const info)$/;"	f
browse	mDNSShared/Java/DNSSD.java	/^	public static DNSSDService	browse( String regType, BrowseListener listener)$/;"	m	class:DNSSD
browse	mDNSShared/Java/DNSSD.java	/^	public static DNSSDService	browse( int flags, int ifIndex, String regType, String domain, BrowseListener listener)$/;"	m	class:DNSSD
browseList	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.ListBox browseList;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
browse_reply	Clients/dns-sd.c	/^static void DNSSD_API browse_reply(DNSServiceRef sdref, const DNSServiceFlags flags, uint32_t ifIndex, DNSServiceErrorType errorCode,$/;"	f	file:
browse_reply_op	mDNSShared/dnssd_ipc.h	/^    browse_reply_op,$/;"	e	enum:__anon110
browse_request	mDNSShared/dnssd_ipc.h	/^    browse_request,$/;"	e	enum:__anon109
browse_termination_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void browse_termination_callback(request_state *info)$/;"	f
browsedomain1	mDNSMacOS9/Mac OS Test Responder.c	/^static AuthRecord browsedomain1, browsedomain2;$/;"	v	file:
browsedomain2	mDNSMacOS9/Mac OS Test Responder.c	/^static AuthRecord browsedomain1, browsedomain2;$/;"	v	file:
browsequestion	mDNSMacOS9/Mac OS Test Searcher.c	/^static DNSQuestion browsequestion, domainquestion;$/;"	v	file:
browser	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private Bonjour.DNSSDService        browser = null;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
browser	Clients/Java/SimpleChat.java	/^	DNSSDService		browser;			\/\/ object that actively browses for other chat clients$/;"	f	class:SimpleChat
browser	mDNSShared/uds_daemon.c	/^        } browser;$/;"	m	union:request_state::__anon124	typeref:struct:request_state::__anon124::__anon125	file:
browserCallback	mDNSMacOSX/DNSServiceDiscovery.c	/^        DNSServiceBrowserReply browserCallback;$/;"	m	union:a_requests::__anon151	file:
browserRef	mDNSMacOSX/BonjourEvents.c	/^    DNSServiceRef browserRef;$/;"	m	struct:__anon150	file:
browser_t	mDNSShared/uds_daemon.c	/^typedef struct browser_t$/;"	s	file:
browser_t	mDNSShared/uds_daemon.c	/^} browser_t;$/;"	t	typeref:struct:browser_t	file:
browsers	mDNSShared/uds_daemon.c	/^            browser_t *browsers;$/;"	m	struct:request_state::__anon124::__anon125	file:
btmmprefix	mDNSMacOSX/helper.c	/^static const char btmmprefix[] = "btmmdns:";$/;"	v	file:
btmmprefix	mDNSMacOSX/mDNSMacOSX.c	/^const char btmmprefix[] = "btmmdns:";$/;"	v
buddyAddr	Clients/Java/SimpleChat.java	/^	InetAddress			buddyAddr;			\/\/ and address$/;"	f	class:SimpleChat
buddyPort	Clients/Java/SimpleChat.java	/^	int					buddyPort;			\/\/ and port$/;"	f	class:SimpleChat
buf_header	mDNSPosix/nss_mdns.c	/^typedef struct buf_header$/;"	s	file:
buf_header_t	mDNSPosix/nss_mdns.c	/^} buf_header_t;$/;"	t	typeref:struct:buf_header	file:
buffer	mDNSPosix/nss_mdns.c	/^    char * buffer;$/;"	m	struct:result_map	file:
buffer	mDNSShared/dnssd_clientlib.c	/^    uint8_t  *buffer;       \/\/ Pointer to data$/;"	m	struct:_TXTRecordRefRealType	file:
buflen	mDNSShared/dnssd_clientlib.c	/^    uint16_t buflen;        \/\/ Length of buffer$/;"	m	struct:_TXTRecordRefRealType	file:
build_domainname_from_strings	mDNSShared/uds_daemon.c	/^mDNSlocal int build_domainname_from_strings(domainname *srv, char *name, char *regtype, char *domain)$/;"	f
bumpStage	Clients/Java/DNSSDUnitTest.java	/^	public synchronized void bumpStage()$/;"	m	class:DNSSDUnitTest
button1	Clients/SimpleChat.NET/SimpleChat.cs	/^		private System.Windows.Forms.Button     button1;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
button1_Click	Clients/SimpleChat.NET/SimpleChat.cs	/^		private void button1_Click(object sender, System.EventArgs e)$/;"	m	class:SimpleChat.NET.SimpleChat	file:
bytes	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 bytes[20];$/;"	m	union:__anon46
bytes	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 bytes[20];$/;"	m	union:__anon49
bytes	mDNSMacOSX/DNSServiceDiscoveryDefines.h	/^typedef struct { char bytes[4]; } IPPort;$/;"	m	struct:__anon148
c	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct { mDNSu8 c[ 64]; } domainlabel;      \/\/ One label: length byte and up to 63 characters$/;"	m	struct:__anon43
c	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct { mDNSu8 c[256]; } UTF8str255;       \/\/ Null-terminated C string$/;"	m	struct:__anon45
c	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct { mDNSu8 c[256]; } domainname;       \/\/ Up to 256 bytes of length-prefixed domainlabels$/;"	m	struct:__anon44
cPortData	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD cPortData;$/;"	m	struct:_PORT_DATA_LIST_1
c_str	mDNSWindows/DLL.NET/PString.h	/^		c_str()$/;"	f	class:Apple::PString
callExternalHelpers	mDNSShared/uds_daemon.c	/^mDNSlocal mDNSBool callExternalHelpers(mDNSInterfaceID InterfaceID, const domainname *const domain, DNSServiceFlags flags)$/;"	f
callback	mDNSMacOSX/mDNSMacOSX.h	/^    TCPConnectionCallback callback;$/;"	m	struct:TCPSocket_struct
callback	mDNSShared/dnsextd.h	/^    EventCallback callback;$/;"	m	struct:EventSource
callback	mDNSShared/dnssd_clientshim.c	/^    DNSServiceBrowseReply callback;$/;"	m	struct:__anon119	file:
callback	mDNSShared/dnssd_clientshim.c	/^    DNSServiceQueryRecordReply callback;$/;"	m	struct:__anon121	file:
callback	mDNSShared/dnssd_clientshim.c	/^    DNSServiceRegisterReply callback;$/;"	m	struct:__anon118	file:
callback	mDNSShared/dnssd_clientshim.c	/^    DNSServiceResolveReply callback;$/;"	m	struct:__anon120	file:
callback	mDNSWindows/Poll.c	/^	} callback;$/;"	m	struct:PollSource_struct	typeref:union:PollSource_struct::__anon11	file:
callback_body_ptr	mDNSPosix/nss_mdns.c	/^callback_body_ptr ($/;"	f	file:
callout	mDNSMacOSX/DNSServiceDiscovery.c	/^    } callout;$/;"	m	struct:a_requests	typeref:union:a_requests::__anon151	file:
cancelEvent	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	HANDLE				cancelEvent;$/;"	m	struct:Query	file:
cancel_request	mDNSShared/dnssd_ipc.h	/^    cancel_request = 63$/;"	e	enum:__anon109
caption	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^    CString caption;$/;"	m	struct:CPrinterSetupWizardSheet::WizardException
cbSize	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD cbSize;$/;"	m	struct:_PORT_DATA_1
cbSize	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD cbSize;$/;"	m	struct:_PORT_DATA_2
cb_err	mDNSShared/dnssd_clientstub.c	/^    DNSServiceErrorType cb_err;$/;"	m	struct:__anon138	file:
cb_flags	mDNSShared/dnssd_clientstub.c	/^    DNSServiceFlags cb_flags;$/;"	m	struct:__anon138	file:
cb_interface	mDNSShared/dnssd_clientstub.c	/^    uint32_t cb_interface;$/;"	m	struct:__anon138	file:
cellIntf	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool cellIntf;          \/\/ Resolver from Cellular Interface ?$/;"	m	struct:DNSServer
cfgfile	mDNSShared/dnsextd.c	/^static char *   cfgfile   = NULL;$/;"	v	file:
cg	mDNSCore/mDNSEmbeddedAPI.h	/^union CacheEntity_union { CacheEntity *next; CacheGroup cg; CacheRecord cr; };$/;"	m	union:CacheEntity_union
check	mDNSShared/DebugServices.h	550;"	d
check	mDNSShared/DebugServices.h	554;"	d
check	mDNSShared/DebugServices.h	563;"	d
check	mDNSVxWorks/mDNSVxWorksIPv4Only.c	158;"	d	file:
checkFileSharesTimeout	mDNSWindows/mDNSWin32.h	/^	mDNSs32						checkFileSharesTimeout;$/;"	m	struct:mDNS_PlatformSupport_struct
checkFileSharesTimer	mDNSWindows/mDNSWin32.h	/^	HANDLE						checkFileSharesTimer;$/;"	m	struct:mDNS_PlatformSupport_struct
checkUpdateResult	mDNSCore/uDNS.c	/^mDNSlocal mStatus checkUpdateResult(mDNS *const m, const domainname *const displayname, const mDNSu8 rcode, const DNSMessage *const msg, const mDNSu8 *const end)$/;"	f
check_compile_time	mDNSShared/DebugServices.h	503;"	d
check_compile_time_code	mDNSShared/DebugServices.h	530;"	d
check_errno	mDNSVxWorks/mDNSVxWorksIPv4Only.c	162;"	d	file:
check_noerr	mDNSShared/DebugServices.h	613;"	d
check_noerr	mDNSShared/DebugServices.h	617;"	d
check_noerr	mDNSShared/DebugServices.h	630;"	d
check_noerr	mDNSVxWorks/mDNSVxWorksIPv4Only.c	160;"	d	file:
check_noerr_string	mDNSShared/DebugServices.h	648;"	d
check_noerr_string	mDNSShared/DebugServices.h	652;"	d
check_noerr_string	mDNSShared/DebugServices.h	665;"	d
check_noerr_string	mDNSVxWorks/mDNSVxWorksIPv4Only.c	161;"	d	file:
check_ptr_overlap	mDNSShared/DebugServices.h	705;"	d
check_string	mDNSShared/DebugServices.h	581;"	d
check_string	mDNSShared/DebugServices.h	585;"	d
check_string	mDNSShared/DebugServices.h	595;"	d
check_string	mDNSVxWorks/mDNSVxWorksIPv4Only.c	159;"	d	file:
check_translated_errno	mDNSShared/DebugServices.h	681;"	d
check_translated_errno	mDNSShared/DebugServices.h	695;"	d
cleanup	mDNSMacOSX/PreferencePane/installtool	/^sub cleanup {$/;"	s
cleanup_dir	mDNSMacOSX/PreferencePane/installtool	/^sub cleanup_dir {$/;"	s
cli	mDNSShared/dnsextd.h	/^    struct sockaddr_in cli;   \/\/ clien'ts source address$/;"	m	struct:LLQEntry	typeref:struct:LLQEntry::sockaddr_in
cli	mDNSShared/dnsextd.h	/^    struct sockaddr_in cli;   \/\/ client's source address$/;"	m	struct:RRTableElem	typeref:struct:RRTableElem::sockaddr_in
cliaddr	mDNSShared/dnsextd.c	/^    struct sockaddr_in cliaddr;$/;"	m	struct:__anon111	typeref:struct:__anon111::sockaddr_in	file:
cliaddr	mDNSShared/dnsextd.c	/^    struct sockaddr_in cliaddr;$/;"	m	struct:__anon112	typeref:struct:__anon112::sockaddr_in	file:
client	Clients/dns-sd.c	/^static DNSServiceRef client    = NULL;$/;"	v	file:
clientCallback	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTraversalClientCallback clientCallback;$/;"	m	struct:NATTraversalInfo_struct
clientContext	mDNSCore/mDNSEmbeddedAPI.h	/^    void                       *clientContext;$/;"	m	struct:NATTraversalInfo_struct
client_death_port	mDNSMacOSX/daemon.c	/^static mach_port_t client_death_port = MACH_PORT_NULL;$/;"	v	file:
client_pa	Clients/dns-sd.c	/^static DNSServiceRef client_pa = NULL;  \/\/ DNSServiceRef for RegisterProxyAddressRecord$/;"	v	file:
client_port	mDNSMacOSX/DNSServiceDiscovery.c	/^    mach_port_t client_port;$/;"	m	struct:a_requests	file:
client_q	mDNSMacOSX/Private/dns_services.c	/^    dispatch_queue_t  client_q;      \/\/ Queue specified by client for scheduling its Callback$/;"	m	struct:_DNSXConnRef_t	file:
clientnotified	mDNSShared/uds_daemon.c	/^    mDNSBool clientnotified;        \/\/ Has client been notified of successful registration yet?$/;"	m	struct:service_instance	file:
closeFlag	mDNSMacOSX/mDNSMacOSX.h	/^    int                     *closeFlag;$/;"	m	struct:__anon145
close_compat	mDNSShared/CommonServices.h	434;"	d
close_compat	mDNSShared/CommonServices.h	446;"	d
closed	mDNSWindows/mDNSWin32.h	/^	BOOL						closed;$/;"	m	struct:TCPSocket_struct
closefds	mDNSMacOSX/helper.c	/^closefds(int from)$/;"	f	file:
cmd_mDNSOffloadRR	mDNSMacOSX/mDNSMacOSX.c	/^    cmd_mDNSOffloadRR = 21,     \/\/ give the mdns update buffer to the driver$/;"	e	enum:__anon152	file:
cmp_dns_suffix	mDNSPosix/nss_mdns.c	/^cmp_dns_suffix (const char * name, const char * domain)$/;"	f
com.apple.dnssd	mDNSShared/Java/BaseListener.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/BrowseListener.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/DNSRecord.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/DNSSD.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/DNSSDException.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/DNSSDRecordRegistrar.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/DNSSDRegistration.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/DNSSDService.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/DomainListener.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/QueryListener.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/RegisterListener.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/RegisterRecordListener.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/ResolveListener.java	/^package	com.apple.dnssd;$/;"	p
com.apple.dnssd	mDNSShared/Java/TXTRecord.java	/^package	com.apple.dnssd;$/;"	p
comboBox1	Clients/SimpleChat.NET/SimpleChat.cs	/^		private System.Windows.Forms.ComboBox   comboBox1;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
comboBox1_SelectedIndexChanged	Clients/SimpleChat.NET/SimpleChat.cs	/^		private void comboBox1_SelectedIndexChanged(object sender, System.EventArgs e)$/;"	m	class:SimpleChat.NET.SimpleChat	file:
command	mDNSMacOSX/mDNSMacOSX.c	/^    uint32_t command;                 \/\/ set to OffloadRR$/;"	m	struct:__anon154	file:
command	mDNSShared/dnsextd_parser.y	/^command:$/;"	l
commandPipe	mDNSVxWorks/mDNSVxWorks.h	/^    int commandPipe;$/;"	m	struct:mDNS_PlatformSupport_struct
commandPipe	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    int commandPipe;$/;"	m	struct:mDNS_PlatformSupport_struct
commands	mDNSShared/dnsextd_parser.y	/^commands:$/;"	l
comment	mDNSPosix/nss_mdns.c	/^    const char * comment;$/;"	m	struct:__anon27	file:
commitChange	mDNSMacOSX/P2PPacketFilter.c	/^static int commitChange( int devFD, u_int32_t ticket, char * anchorPath )$/;"	f	file:
compare_dns_configs	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal int compare_dns_configs(const void *aa, const void *bb)$/;"	f
compare_func	Clients/PrinterSetupWizard/ThirdPage.h	/^struct compare_func$/;"	s	class:CThirdPage
components	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.ComponentModel.Container components = null;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
components	Clients/FirefoxExtension/CDNSSDServiceModule.cpp	/^static nsModuleComponentInfo components[] =$/;"	v	file:
components	Clients/SimpleChat.NET/SimpleChat.cs	/^		private System.ComponentModel.Container components = null;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
compression	mDNSMacOSX/mDNSMacOSX.c	/^    uint32_t compression;             \/\/ rrRecords - compression is base for compressed strings$/;"	m	struct:__anon154	file:
compression_base_msg	mDNSMacOSX/mDNSMacOSX.c	/^static DNSMessage compression_base_msg = { { {{0}}, {{0}}, 2, 0, 0, 0 }, "\\x04_tcp\\x05local\\x00\\x00\\x0C\\x00\\x01\\x04_udp\\xC0\\x11\\x00\\x0C\\x00\\x01" };$/;"	v	file:
compression_lhs	mDNSMacOSX/mDNSMacOSX.c	/^static mDNSu8 *const compression_lhs = (mDNSu8 *const) compression_base_msg.data + 27;$/;"	v	file:
compression_limit	mDNSMacOSX/mDNSMacOSX.c	/^static mDNSu8 *const compression_limit = (mDNSu8 *) &compression_base_msg + sizeof(DNSMessage);$/;"	v	file:
compression_packet_v1	mDNSMacOSX/mDNSMacOSX.c	/^static const mDNSu8 compression_packet_v1 = 0x01;$/;"	v	file:
configHeader	mDNSMacOSX/helper.c	/^static const char configHeader[] = "# BackToMyMac\\n";$/;"	v	file:
configID	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    long configID;$/;"	m	struct:mDNS_PlatformSupport_struct
config_file_context_t	mDNSPosix/nss_mdns.c	/^} config_file_context_t;$/;"	t	typeref:struct:__anon26	file:
config_is_mdns_suffix	mDNSPosix/nss_mdns.c	/^config_is_mdns_suffix (const char * name)$/;"	f
config_t	mDNSPosix/nss_mdns.c	/^} config_t;$/;"	t	typeref:struct:__anon25	file:
conn_ref	mDNSMacOSX/Private/dns_services.c	/^    connection_t      conn_ref;      \/\/ xpc_connection between client and daemon$/;"	m	struct:_DNSXConnRef_t	file:
connect_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void connect_callback(int fd, short filter, void *info)$/;"	f
connected	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSBool connected;$/;"	m	struct:TCPSocket_struct
connected	mDNSWindows/mDNSWin32.h	/^	BOOL						connected;$/;"	m	struct:TCPSocket_struct
connection_delegate_request	mDNSShared/dnssd_ipc.h	/^    connection_delegate_request,$/;"	e	enum:__anon109
connection_request	mDNSShared/dnssd_ipc.h	/^    connection_request = 1, \/\/ connected socket via DNSServiceConnect()$/;"	e	enum:__anon109
connection_t	mDNSMacOSX/Private/dns_services.c	20;"	d	file:
connection_termination	mDNSShared/uds_daemon.c	/^mDNSlocal void connection_termination(request_state *request)$/;"	f
constructFullName	mDNSShared/Java/DNSSD.java	/^	public static String		constructFullName( String serviceName, String regType, String domain)$/;"	m	class:DNSSD
contains	mDNSShared/Java/TXTRecord.java	/^	public boolean	contains( String key)$/;"	m	class:TXTRecord
contains_address	mDNSPosix/nss_mdns.c	/^contains_address (result_map_t * result, const void * data, int len)$/;"	f	file:
contains_alias	mDNSPosix/nss_mdns.c	/^contains_alias (result_map_t * result, const char * alias)$/;"	f	file:
contains_domain	mDNSPosix/nss_mdns.c	/^contains_domain (const config_t * conf, const char * domain)$/;"	f	file:
contains_domain_suffix	mDNSPosix/nss_mdns.c	/^contains_domain_suffix (const config_t * conf, const char * addr)$/;"	f	file:
context	mDNSCore/CryptoAlg.h	/^    void *context;$/;"	m	struct:__anon102
context	mDNSCore/dnsproxy.c	/^    void *context;                  \/\/ Platform context to be disposed if non-NULL$/;"	m	struct:DNSProxyClient_struct	file:
context	mDNSMacOSX/DNSServiceDiscovery.c	/^    void                    *context;$/;"	m	struct:a_requests	file:
context	mDNSMacOSX/mDNSMacOSX.h	/^    void *context;$/;"	m	struct:TCPSocket_struct
context	mDNSShared/dnsextd.h	/^    void                *   context;$/;"	m	struct:EventSource
context	mDNSShared/dnssd_clientshim.c	/^    void                       *context;$/;"	m	struct:__anon121	file:
context	mDNSShared/dnssd_clientshim.c	/^    void                   *context;$/;"	m	struct:__anon118	file:
context	mDNSShared/dnssd_clientshim.c	/^    void                   *context;$/;"	m	struct:__anon119	file:
context	mDNSShared/dnssd_clientshim.c	/^    void                   *context;$/;"	m	struct:__anon120	file:
context	mDNSWindows/Poll.c	/^	void   *context;$/;"	m	struct:PollSource_struct	file:
cookie	mDNSMacOSX/helper.c	/^    u_int32_t cookie;$/;"	m	struct:vpnctl_hdr_struct	file:
coreFlagIncludeAWDL	mDNSCore/mDNSEmbeddedAPI.h	/^    coreFlagIncludeAWDL  = 0x2,     \/\/ include AWDL interface when using mDNSInterface_Any$/;"	e	enum:__anon95
coreFlagIncludeP2P	mDNSCore/mDNSEmbeddedAPI.h	/^    coreFlagIncludeP2P   = 0x1,     \/\/ include P2P interfaces when using mDNSInterface_Any$/;"	e	enum:__anon95
coreFlagKnownUnique	mDNSCore/mDNSEmbeddedAPI.h	/^    coreFlagKnownUnique  = 0x4,     \/\/ client guarantees that SRV and TXT record names are unique$/;"	e	enum:__anon95
coreFlagWakeOnly	mDNSCore/mDNSEmbeddedAPI.h	/^    coreFlagWakeOnly     = 0x8      \/\/ Service won't be registered with sleep proxy$/;"	e	enum:__anon95
coreIntf	mDNSPosix/mDNSPosix.h	/^    NetworkInterfaceInfo coreIntf;$/;"	m	struct:PosixNetworkInterface
coreServ	mDNSPosix/Responder.c	/^    ServiceRecordSet coreServ;$/;"	m	struct:PosixService	file:
count_dots	mDNSPosix/nss_mdns.c	/^count_dots (const char * name)$/;"	f
cr	mDNSCore/mDNSEmbeddedAPI.h	/^union CacheEntity_union { CacheEntity *next; CacheGroup cg; CacheRecord cr; };$/;"	m	union:CacheEntity_union
createAnonymousRacoonConfiguration	mDNSMacOSX/helper.c	/^createAnonymousRacoonConfiguration(const char *fqdn)$/;"	f	file:
createRecordRegistrar	mDNSShared/Java/DNSSD.java	/^	public static DNSSDRecordRegistrar	createRecordRegistrar( RegisterRecordListener listener)$/;"	m	class:DNSSD
create_hdr	mDNSShared/dnssd_clientstub.c	/^static ipc_msg_hdr *create_hdr(uint32_t op, size_t *len, char **data_start, int SeparateReturnSocket, DNSServiceOp *ref)$/;"	f	file:
create_reply	mDNSShared/uds_daemon.c	/^mDNSlocal reply_state *create_reply(const reply_op_t op, const size_t datalen, request_state *const request)$/;"	f
ctx	mDNSCore/dnssec.h	/^    AlgContext *ctx;$/;"	m	struct:DNSSECVerifier_struct
cupsAdminCreateWindowsPPD	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^cupsAdminCreateWindowsPPDFunc cupsAdminCreateWindowsPPD;$/;"	m	class:CPrinterSetupWizardSheet::CUPSLibrary
cupsAdminCreateWindowsPPDFunc	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^typedef char*               ( *cupsAdminCreateWindowsPPDFunc )( void * http, const char *dest, char *buffer, int bufsize );$/;"	t	class:CPrinterSetupWizardSheet
cupsEncryption	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^cupsEncryptionFunc cupsEncryption;$/;"	m	class:CPrinterSetupWizardSheet::CUPSLibrary
cupsEncryptionFunc	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^typedef http_encryption_t ( *cupsEncryptionFunc )( void );$/;"	t	class:CPrinterSetupWizardSheet
cupsSetEncryption	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^cupsSetEncryptionFunc cupsSetEncryption;$/;"	m	class:CPrinterSetupWizardSheet::CUPSLibrary
cupsSetEncryptionFunc	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^typedef void ( *cupsSetEncryptionFunc )( http_encryption_t e );$/;"	t	class:CPrinterSetupWizardSheet
currQtype	mDNSCore/dnssec.h	/^    mDNSu16 currQtype;              \/\/ Current question type that is being verified$/;"	m	struct:DNSSECVerifier_struct
currentTime	Clients/PrinterSetupWizard/Logger.cpp	/^Logger::currentTime()$/;"	f	class:Logger
custom	mDNSMacOSX/mDNSMacOSX.h	/^    dispatch_source_t custom;$/;"	m	struct:mDNS_PlatformSupport_struct
d	mDNSShared/dnsextd.c	/^    DaemonInfo *d;$/;"	m	struct:__anon111	file:
d	mDNSShared/dnsextd.c	/^    DaemonInfo *d;$/;"	m	struct:__anon112	file:
d	mDNSShared/dnsextd.c	/^    DaemonInfo *d;$/;"	m	struct:__anon113	file:
daemon	mDNSPosix/Bonjour.c	28;"	d	file:
daemon	mDNSPosix/Bonjour.c	42;"	d	file:
daemon	mDNSPosix/PosixDaemon.c	28;"	d	file:
daemon	mDNSPosix/PosixDaemon.c	42;"	d	file:
daemon	mDNSPosix/Responder.c	23;"	d	file:
daemon	mDNSPosix/Responder.c	36;"	d	file:
daemon	mDNSPosix/mDNSUNP.c	/^int daemon(int nochdir, int noclose)$/;"	f
daemon	mDNSShared/dnsextd.c	23;"	d	file:
daemon	mDNSShared/dnsextd.c	43;"	d	file:
data	Clients/dns-sd.c	/^    unsigned char *data;$/;"	m	struct:__anon169	file:
data	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 data[MD5_BLOCK_LONG];$/;"	m	struct:MD5state_st
data	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 data[InlineCacheRDSize];$/;"	m	struct:__anon60
data	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 data[StandardAuthRDSize];$/;"	m	union:__anon57
data	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 data[StandardAuthRDSize];$/;"	m	union:__anon58
data	mDNSWindows/mDNSWin32.c	/^	unsigned char			data[ 102 ];$/;"	m	struct:MulticastWakeupStruct	file:
data4Event	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	HANDLE				data4Event;$/;"	m	struct:Query	file:
data6Event	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	HANDLE				data6Event;$/;"	m	struct:Query	file:
dataLen	mDNSWindows/mDNSWin32.c	/^	INT						dataLen;$/;"	m	struct:MulticastWakeupStruct	file:
dataPacket	Clients/Java/SimpleChat.java	/^	DatagramPacket		dataPacket;			\/\/ Inbound data packet$/;"	f	class:SimpleChat
data_bytes	mDNSShared/uds_daemon.c	/^    mDNSu32 data_bytes;             \/\/ bytes of message data already read$/;"	m	struct:request_state	file:
datalen	mDNSShared/dnssd_clientlib.c	/^    uint16_t datalen;       \/\/ Length currently in use$/;"	m	struct:_TXTRecordRefRealType	file:
ddns	mDNSMacOSX/helper.c	/^static const char ddns[] = "ddns";$/;"	v	file:
ddnsrev	mDNSMacOSX/helper.c	/^static const char ddnsrev[] = "sndd";$/;"	v	file:
debug	mDNSMacOSX/helper-server.h	28;"	d
debug_	mDNSMacOSX/helper.c	/^debug_(const char *func, const char *fmt, ...)$/;"	f
debug_add	mDNSShared/DebugServices.h	448;"	d
debug_add	mDNSShared/DebugServices.h	450;"	d
debug_get_property	mDNSShared/DebugServices.h	1341;"	d
debug_get_property	mDNSShared/DebugServices.h	1343;"	d
debug_get_property	mDNSShared/DebugServices.h	1345;"	d
debug_get_property	mDNSShared/DebugServices.h	1349;"	d
debug_get_property	mDNSShared/DebugServices.h	1351;"	d
debug_get_property	mDNSShared/DebugServices.h	1353;"	d
debug_initialize	mDNSShared/DebugServices.h	1297;"	d
debug_initialize	mDNSShared/DebugServices.h	1299;"	d
debug_initialize	mDNSShared/DebugServices.h	1301;"	d
debug_initialize	mDNSShared/DebugServices.h	1305;"	d
debug_initialize	mDNSShared/DebugServices.h	1307;"	d
debug_initialize	mDNSShared/DebugServices.h	1309;"	d
debug_noop	mDNSCore/mDNSDebug.h	103;"	d
debug_noop	mDNSCore/mDNSDebug.h	114;"	d
debug_noop	mDNSCore/mDNSDebug.h	97;"	d
debug_perform	mDNSShared/DebugServices.h	460;"	d
debug_perform	mDNSShared/DebugServices.h	462;"	d
debug_print_assert	mDNSShared/DebugServices.h	1171;"	d
debug_print_assert	mDNSShared/DebugServices.h	1174;"	d
debug_set_property	mDNSShared/DebugServices.h	1369;"	d
debug_set_property	mDNSShared/DebugServices.h	1371;"	d
debug_set_property	mDNSShared/DebugServices.h	1373;"	d
debug_set_property	mDNSShared/DebugServices.h	1377;"	d
debug_set_property	mDNSShared/DebugServices.h	1379;"	d
debug_set_property	mDNSShared/DebugServices.h	1381;"	d
debug_string	mDNSShared/DebugServices.h	1149;"	d
debug_string	mDNSShared/DebugServices.h	1153;"	d
debug_string	mDNSShared/DebugServices.h	1160;"	d
debug_string	mDNSVxWorks/mDNSVxWorksIPv4Only.c	163;"	d	file:
debug_terminate	mDNSShared/DebugServices.h	1324;"	d
debug_terminate	mDNSShared/DebugServices.h	1326;"	d
debugdnssec	mDNSCore/dnssec.c	33;"	d	file:
debugdnssec	mDNSCore/dnssec.c	35;"	d	file:
debugf	mDNSCore/mDNSDebug.h	126;"	d
debugf	mDNSCore/mDNSDebug.h	129;"	d
debugf_	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void debugf_(const char *format, ...)$/;"	f
debugf_	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport void debugf_( const char *inFormat, ... )$/;"	f
debugf_	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSexport void debugf_( const char *format, ... )$/;"	f
debugf_	mDNSWindows/mDNSWin32.c	/^mDNSexport void	debugf_( const char *inFormat, ... )$/;"	f
def	mDNSMacOSX/daemon.c	/^    DNSQuestion def;    \/\/ Question asking for default domain$/;"	m	struct:DNSServiceDomainEnumeration_struct	file:
default_config	mDNSPosix/nss_mdns.c	/^default_config (config_t * conf)$/;"	f	file:
default_domain	mDNSShared/uds_daemon.c	/^            mDNSBool default_domain;$/;"	m	struct:request_state::__anon124::__anon125	file:
default_domain	mDNSShared/uds_daemon.c	/^            mDNSBool default_domain;$/;"	m	struct:request_state::__anon124::__anon126	file:
default_local	mDNSShared/uds_daemon.c	/^    mDNSBool default_local;         \/\/ is this the "local." from an empty-string registration?$/;"	m	struct:service_instance	file:
deflt	Clients/PrinterSetupWizard/UtilTypes.h	/^    bool deflt;$/;"	m	struct:PrinterSetupWizard::Printer
deliver_request	mDNSShared/dnssd_clientstub.c	/^static DNSServiceErrorType deliver_request(ipc_msg_hdr *hdr, DNSServiceOp *sdr)$/;"	f	file:
deliver_request_bailout	mDNSShared/dnssd_clientstub.c	590;"	d	file:
deltime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 deltime;                        \/\/ If we're planning to delete this DomainAuthInfo, the time we want it deleted$/;"	m	struct:DomainAuthInfo
description	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString description;$/;"	m	struct:PrinterSetupWizard::Queue
description	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	const char *		description;$/;"	m	struct:KnownServiceEntry	file:
description	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^	std::string		description;$/;"	m	struct:ServiceTypeInfo
diediedie	mDNSMacOSX/helper-main.c	/^static void diediedie(CFRunLoopTimerRef timer, void *context)$/;"	f	file:
digest	Clients/dns-sd.c	/^    unsigned char  *digest;$/;"	m	struct:__anon168	file:
digestLen	mDNSCore/mDNSEmbeddedAPI.h	/^    int digestLen;$/;"	m	struct:TrustAnchor
digestType	Clients/dns-sd.c	/^    unsigned char digestType;$/;"	m	struct:__anon168	file:
disp_queue	mDNSShared/dnssd_clientstub.c	/^    dispatch_queue_t disp_queue;$/;"	m	struct:_DNSServiceRef_t	file:
disp_source	mDNSShared/dnssd_clientstub.c	/^    dispatch_source_t disp_source;$/;"	m	struct:_DNSServiceRef_t	file:
displayModelName	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString displayModelName;$/;"	m	struct:PrinterSetupWizard::Printer
displayName	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    CString displayName;$/;"	m	struct:ServiceInfo
displayName	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString displayName;$/;"	m	struct:PrinterSetupWizard::Model
displayName	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString displayName;$/;"	m	struct:PrinterSetupWizard::Printer
disposefn	mDNSShared/dnssd_clientshim.c	/^    mDNS_DirectOP_Dispose      *disposefn;$/;"	m	struct:__anon121	file:
disposefn	mDNSShared/dnssd_clientshim.c	/^    mDNS_DirectOP_Dispose  *disposefn;$/;"	m	struct:__anon118	file:
disposefn	mDNSShared/dnssd_clientshim.c	/^    mDNS_DirectOP_Dispose  *disposefn;$/;"	m	struct:__anon119	file:
disposefn	mDNSShared/dnssd_clientshim.c	/^    mDNS_DirectOP_Dispose  *disposefn;$/;"	m	struct:__anon120	file:
disposefn	mDNSShared/dnssd_clientshim.c	/^    mDNS_DirectOP_Dispose  *disposefn;$/;"	m	struct:mDNS_DirectOP_struct	file:
dlog	mDNSShared/DebugServices.h	1185;"	d
dlog	mDNSShared/DebugServices.h	1187;"	d
dlog	mDNSShared/DebugServices.h	1189;"	d
dlog	mDNSShared/DebugServices.h	1193;"	d
dlog	mDNSShared/DebugServices.h	1195;"	d
dlog	mDNSShared/DebugServices.h	1197;"	d
dlog	mDNSVxWorks/mDNSVxWorksIPv4Only.c	177;"	d	file:
dlog_query_set	mDNSWindows/mdnsNSP/mdnsNSP.c	202;"	d	file:
dlog_query_set	mDNSWindows/mdnsNSP/mdnsNSP.c	204;"	d	file:
dloghex	mDNSShared/DebugServices.h	1556;"	d
dloghex	mDNSShared/DebugServices.h	1560;"	d
dlogmem	mDNSShared/DebugServices.h	1220;"	d
dlogmem	mDNSShared/DebugServices.h	1223;"	d
dlogv	mDNSShared/DebugServices.h	1208;"	d
dlogv	mDNSShared/DebugServices.h	1210;"	d
dmsg	mDNSVxWorks/mDNSVxWorks.c	102;"	d	file:
dmsg	mDNSVxWorks/mDNSVxWorks.c	104;"	d	file:
dns_rdata_to_name	mDNSPosix/nss_mdns.c	/^dns_rdata_to_name (const unsigned char * rdata, int rdlen, char * name, unsigned int name_len)$/;"	f	file:
dns_service_discovery_ref	mDNSMacOSX/DNSServiceDiscovery.h	/^typedef struct _dns_service_discovery_t * dns_service_discovery_ref;$/;"	t	typeref:struct:_dns_service_discovery_t
dns_service_discovery_t	mDNSMacOSX/DNSServiceDiscovery.c	/^} dns_service_discovery_t;$/;"	t	typeref:struct:_dns_service_discovery_t	file:
dnsprefix	mDNSMacOSX/helper.c	/^static const char dnsprefix[] = "dns:";$/;"	v	file:
dnsprefix	mDNSMacOSX/mDNSMacOSX.c	/^const char dnsprefix[] = "dns:";$/;"	v
dnsproxy_reply	Clients/dnsctl.c	/^static void dnsproxy_reply(DNSXConnRef connRef, DNSXErrorType errCode)$/;"	f	file:
dnssd_ECONNRESET	mDNSShared/dnssd_ipc.h	43;"	d
dnssd_ECONNRESET	mDNSShared/dnssd_ipc.h	68;"	d
dnssd_EINTR	mDNSShared/dnssd_ipc.h	42;"	d
dnssd_EINTR	mDNSShared/dnssd_ipc.h	67;"	d
dnssd_EPIPE	mDNSShared/dnssd_ipc.h	69;"	d
dnssd_EWOULDBLOCK	mDNSShared/dnssd_ipc.h	41;"	d
dnssd_EWOULDBLOCK	mDNSShared/dnssd_ipc.h	66;"	d
dnssd_InvalidSocket	mDNSShared/dnssd_ipc.h	39;"	d
dnssd_InvalidSocket	mDNSShared/dnssd_ipc.h	64;"	d
dnssd_SocketValid	mDNSShared/dnssd_ipc.h	40;"	d
dnssd_SocketValid	mDNSShared/dnssd_ipc.h	65;"	d
dnssd_close	mDNSShared/dnssd_ipc.h	46;"	d
dnssd_close	mDNSShared/dnssd_ipc.h	72;"	d
dnssd_errno	mDNSShared/dnssd_ipc.h	47;"	d
dnssd_errno	mDNSShared/dnssd_ipc.h	73;"	d
dnssd_htonl	mDNSShared/uds_daemon.c	/^mDNSlocal mDNSu32 dnssd_htonl(mDNSu32 l)$/;"	f
dnssd_sock_t	mDNSShared/dnssd_ipc.h	44;"	d
dnssd_sock_t	mDNSShared/dnssd_ipc.h	70;"	d
dnssd_sockaddr_t	mDNSShared/dnssd_ipc.h	82;"	d
dnssd_sockaddr_t	mDNSShared/dnssd_ipc.h	91;"	d
dnssd_socklen_t	mDNSShared/dnssd_ipc.h	45;"	d
dnssd_socklen_t	mDNSShared/dnssd_ipc.h	71;"	d
dnssd_strerror	mDNSShared/dnssd_ipc.h	48;"	d
dnssd_strerror	mDNSShared/dnssd_ipc.h	74;"	d
doSSLHandshake	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void *doSSLHandshake(TCPSocket *sock)$/;"	f
doSSLHandshake	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void doSSLHandshake(TCPSocket *sock)$/;"	f
doTcpSocketCallback	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void doTcpSocketCallback(TCPSocket *sock)$/;"	f
doTunnelPolicy	mDNSMacOSX/helper.c	/^doTunnelPolicy(mDNSTunnelPolicyWhich which, mDNSTunnelType type,$/;"	f	file:
do_mDNSAutoTunnelSetKeys	mDNSMacOSX/helper.c	/^do_mDNSAutoTunnelSetKeys(__unused mach_port_t port, int replacedelete,$/;"	f
do_mDNSConfigureServer	mDNSMacOSX/helper.c	/^do_mDNSConfigureServer(__unused mach_port_t port, int updown, const char *fqdn, audit_token_t token)$/;"	f
do_mDNSExit	mDNSMacOSX/helper.c	/^do_mDNSExit(__unused mach_port_t port, audit_token_t token)$/;"	f
do_mDNSGetRemoteMAC	mDNSMacOSX/helper.c	/^kern_return_t do_mDNSGetRemoteMAC(__unused mach_port_t port, int family, v6addr_t raddr, ethaddr_t eth, audit_token_t token)$/;"	f
do_mDNSKeychainGetSecrets	mDNSMacOSX/helper.c	/^do_mDNSKeychainGetSecrets(__unused mach_port_t port, __unused unsigned int *numsecrets,$/;"	f
do_mDNSNotify	mDNSMacOSX/helper.c	/^kern_return_t do_mDNSNotify(__unused mach_port_t port, const char *title, const char *msg, audit_token_t token)$/;"	f
do_mDNSPacketFilterControl	mDNSMacOSX/helper.c	/^do_mDNSPacketFilterControl(__unused mach_port_t port, uint32_t command, const char * ifname, uint32_t count, pfArray_t portArray, pfArray_t protocolArray, audit_token_t token)$/;"	f
do_mDNSPowerRequest	mDNSMacOSX/helper.c	/^kern_return_t do_mDNSPowerRequest(__unused mach_port_t port, int key, int interval, int *err, audit_token_t token)$/;"	f
do_mDNSPreferencesSetName	mDNSMacOSX/helper.c	/^do_mDNSPreferencesSetName(__unused mach_port_t port, int key, const char* old, const char* new, audit_token_t token)$/;"	f
do_mDNSRequestBPF	mDNSMacOSX/helper.c	/^kern_return_t do_mDNSRequestBPF(__unused mach_port_t port, audit_token_t token)$/;"	f
do_mDNSRetrieveTCPInfo	mDNSMacOSX/helper.c	/^kern_return_t do_mDNSRetrieveTCPInfo(__unused mach_port_t port, int family, v6addr_t laddr, uint16_t lport, v6addr_t raddr, uint16_t  rport,$/;"	f
do_mDNSSendKeepalive	mDNSMacOSX/helper.c	/^kern_return_t do_mDNSSendKeepalive(__unused mach_port_t port, v6addr_t sadd6, v6addr_t dadd6, uint16_t lport, uint16_t rport, unsigned seq, unsigned ack, uint16_t win, audit_token_t token)$/;"	f
do_mDNSSendWakeupPacket	mDNSMacOSX/helper.c	/^do_mDNSSendWakeupPacket(__unused mach_port_t port, unsigned ifid, const char *eth_addr, const char *ip_addr, int iteration, audit_token_t token)$/;"	f
do_mDNSSetLocalAddressCacheEntry	mDNSMacOSX/helper.c	/^kern_return_t do_mDNSSetLocalAddressCacheEntry(__unused mach_port_t port, int ifindex, int family, v6addr_t ip, ethaddr_t eth, int *err, audit_token_t token)$/;"	f
do_mDNSStoreSPSMACAddress	mDNSMacOSX/helper.c	/^kern_return_t do_mDNSStoreSPSMACAddress(__unused mach_port_t port, int family, v6addr_t spsaddr, const char *ifname, audit_token_t token)$/;"	f
dom	mDNSMacOS9/Mac OS Test Searcher.c	/^typedef struct { ServiceInfo i; mDNSBool add; mDNSBool dom; OTLink link; } linkedServiceInfo;$/;"	m	struct:__anon182	file:
dom	mDNSMacOS9/Searcher.c	/^    Boolean dom;$/;"	m	struct:__anon187	file:
dom	mDNSMacOSX/daemon.c	/^    DNSQuestion dom;    \/\/ Question asking for domains$/;"	m	struct:DNSServiceDomainEnumeration_struct	file:
dom2_compare	mDNSCore/dnssec.c	/^mDNSlocal int dom2_compare(mDNSu8 *d1, mDNSu8 *d2, int length1, int length2)$/;"	f
domain	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    char *                      domain;$/;"	m	struct:ServiceInfo
domain	Clients/PrinterSetupWizard/UtilTypes.h	/^    std::string domain;$/;"	m	struct:PrinterSetupWizard::Service
domain	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname domain;          \/\/ name->server matching for "split dns"$/;"	m	struct:DNSServer
domain	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname domain;$/;"	m	struct:DomainAuthInfo
domain	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname domain;$/;"	m	struct:McastResolver
domain	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname domain;$/;"	m	struct:SearchListElem
domain	mDNSMacOSX/daemon.c	/^    domainname domain;$/;"	m	struct:DNSServiceBrowserQuestion	file:
domain	mDNSMacOSX/daemon.c	/^    domainname domain;$/;"	m	struct:ServiceInstance	file:
domain	mDNSPosix/nss_mdns.c	/^    char * domain;$/;"	m	struct:domain_entry	file:
domain	mDNSShared/uds_daemon.c	/^    domainname domain;$/;"	m	struct:browser_t	file:
domain	mDNSShared/uds_daemon.c	/^    domainname domain;$/;"	m	struct:service_instance	file:
domain	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	CString					domain;$/;"	m	struct:DomainEventInfo	file:
domain	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	std::string				domain;$/;"	m	struct:ServiceEventInfo	file:
domain	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^	std::string		domain;$/;"	m	struct:ServiceInstanceInfo
domainBrowser	Clients/Java/BrowserApp.java	/^	DNSSDService		servicesBrowser, serviceBrowser, domainBrowser;$/;"	f	class:BrowserApp
domainField	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.TextBox domainField;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
domainFound	Clients/Java/BrowserApp.java	/^	public void	domainFound( DNSSDService domainEnum, int flags, int ifIndex, String domain)$/;"	m	class:DomainListModel
domainFound	Clients/Java/DNSSDUnitTest.java	/^	public void	domainFound( DNSSDService enumerator, int flags, int ifIndex, String domain)$/;"	m	class:DomainTest
domainFound	Clients/Java/SwingDomainListener.java	/^	public void		domainFound( DNSSDService domainEnum, int flags, int ifIndex, String domain)$/;"	m	class:SwingDomainListener
domainFound	mDNSShared/Java/DomainListener.java	/^	void	domainFound( DNSSDService domainEnum, int flags, int ifIndex, String domain);$/;"	m	interface:DomainListener
domainList	Clients/Java/BrowserApp.java	/^	DomainListModel		domainList;$/;"	f	class:BrowserApp
domainLost	Clients/Java/BrowserApp.java	/^	public void	domainLost( DNSSDService domainEnum, int flags, int ifIndex, String domain)$/;"	m	class:DomainListModel
domainLost	Clients/Java/DNSSDUnitTest.java	/^	public void	domainLost( DNSSDService enumerator, int flags, int ifIndex, String domain)$/;"	m	class:DomainTest
domainLost	Clients/Java/SwingDomainListener.java	/^	public void		domainLost( DNSSDService domainEnum, int flags, int ifIndex, String domain)$/;"	m	class:SwingDomainListener
domainLost	mDNSShared/Java/DomainListener.java	/^	void	domainLost( DNSSDService domainEnum, int flags, int ifIndex, String domain);$/;"	m	interface:DomainListener
domainPane	Clients/Java/BrowserApp.java	/^	JList				domainPane, servicesPane, servicePane;$/;"	f	class:BrowserApp
domainStatusDict	mDNSMacOSX/mDNSMacOSX.c	/^static CFMutableDictionaryRef domainStatusDict = NULL;$/;"	v	file:
domain_entry	mDNSPosix/nss_mdns.c	/^typedef struct domain_entry$/;"	s	file:
domain_entry_t	mDNSPosix/nss_mdns.c	/^} domain_entry_t;$/;"	t	typeref:struct:domain_entry	file:
domainlabel	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct { mDNSu8 c[ 64]; } domainlabel;      \/\/ One label: length byte and up to 63 characters$/;"	t	typeref:struct:__anon43
domainname	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct { mDNSu8 c[256]; } domainname;       \/\/ Up to 256 bytes of length-prefixed domainlabels$/;"	t	typeref:struct:__anon44
domainquestion	mDNSMacOS9/Mac OS Test Searcher.c	/^static DNSQuestion browsequestion, domainquestion;$/;"	v	file:
domains	mDNSPosix/nss_mdns.c	/^    domain_entry_t * domains;$/;"	m	struct:__anon25	file:
domn	mDNSMacOS9/Searcher.c	/^    char domn[kDNSServiceMaxDomainName];$/;"	m	struct:__anon187	file:
domstr	mDNSMacOS9/Responder.c	/^    char domstr [kDNSServiceMaxDomainName];$/;"	m	struct:RegisteredService_struct	file:
done	mDNSPosix/nss_mdns.c	/^    int done;$/;"	m	struct:result_map	file:
done	mDNSWindows/Poll.c	/^	BOOL					done;		\/\/ Not used for main worker$/;"	m	struct:Worker_struct	file:
dp_ipintf	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 dp_ipintf[MaxIp];                   \/\/ input interface index list from the DNS Proxy Client$/;"	m	struct:mDNS_struct
dp_listener	mDNSMacOSX/DNSProxySupport.c	/^static int dp_listener[4];$/;"	v	file:
dp_opintf	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 dp_opintf;                          \/\/ output interface index from the DNS Proxy Client$/;"	m	struct:mDNS_struct
dpkt	mDNSVxWorks/mDNSVxWorks.c	108;"	d	file:
dpkt	mDNSVxWorks/mDNSVxWorks.c	110;"	d	file:
dps_client_pid	mDNSMacOSX/Private/xpc_services.c	/^static int dps_client_pid; \/\/ To track current active client using DNS Proxy Service$/;"	v	file:
dps_queue	mDNSMacOSX/Private/xpc_services.c	/^static dispatch_queue_t dps_queue = NULL;$/;"	v	file:
driverInstalled	Clients/PrinterSetupWizard/UtilTypes.h	/^    bool driverInstalled;$/;"	m	struct:PrinterSetupWizard::Model
driverInstalled	Clients/PrinterSetupWizard/UtilTypes.h	/^    bool driverInstalled;$/;"	m	struct:PrinterSetupWizard::Printer
ds	mDNSCore/dnssec.h	/^    RRVerifier *ds;                 \/\/ DS for DNSKEY set in parent zone$/;"	m	struct:DNSSECVerifier_struct
ds	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataDS ds;$/;"	m	union:__anon58
dstname	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname dstname;$/;"	m	struct:ClientTunnel
dummy	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct mDNSInterfaceID_dummystruct { void *dummy; } *mDNSInterfaceID;$/;"	m	struct:mDNSInterfaceID_dummystruct
dumptable	mDNSShared/dnsextd.c	/^static mDNSBool dumptable = 0;$/;"	v	file:
dv	mDNSCore/dnssec.h	/^    DNSSECVerifier *dv;             \/\/ dv for which we are doing the insecure proof$/;"	m	struct:InsecureContext_struct
dwDoubleSpool	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwDoubleSpool;$/;"	m	struct:_PORT_DATA_1
dwDoubleSpool	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwDoubleSpool;$/;"	m	struct:_PORT_DATA_2
dwPortMonitorMibIndex	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwPortMonitorMibIndex;$/;"	m	struct:_PORT_DATA_2
dwPortNumber	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwPortNumber;$/;"	m	struct:_PORT_DATA_1
dwPortNumber	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwPortNumber;$/;"	m	struct:_PORT_DATA_2
dwProtocol	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwProtocol;$/;"	m	struct:_PORT_DATA_1
dwProtocol	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwProtocol;$/;"	m	struct:_PORT_DATA_2
dwReserved	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwReserved;$/;"	m	struct:_DELETE_PORT_DATA_1
dwReserved	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwReserved;$/;"	m	struct:_PORT_DATA_1
dwReserved	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwReserved;$/;"	m	struct:_PORT_DATA_2
dwSNMPDevIndex	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwSNMPDevIndex;$/;"	m	struct:_PORT_DATA_1
dwSNMPDevIndex	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwSNMPDevIndex;$/;"	m	struct:_PORT_DATA_2
dwSNMPEnabled	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwSNMPEnabled;$/;"	m	struct:_PORT_DATA_1
dwSNMPEnabled	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwSNMPEnabled;$/;"	m	struct:_PORT_DATA_2
dwVersion	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwVersion;$/;"	m	struct:_CONFIG_INFO_DATA_1
dwVersion	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwVersion;$/;"	m	struct:_DELETE_PORT_DATA_1
dwVersion	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwVersion;$/;"	m	struct:_PORT_DATA_1
dwVersion	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwVersion;$/;"	m	struct:_PORT_DATA_2
dwVersion	Clients/PrinterSetupWizard/tcpxcv.h	/^    DWORD dwVersion;$/;"	m	struct:_PORT_DATA_LIST_1
encContext	mDNSMacOSX/CryptoSupport.c	/^}encContext;$/;"	t	typeref:struct:__anon141	file:
encData	mDNSMacOSX/CryptoSupport.c	/^    dispatch_data_t encData;$/;"	m	struct:__anon141	file:
encMap	mDNSMacOSX/CryptoSupport.c	/^    dispatch_data_t encMap;$/;"	m	struct:__anon141	file:
encNULL	mDNSMacOSX/CryptoSupport.c	/^    dispatch_data_t encNULL;$/;"	m	struct:__anon141	file:
enc_add	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus enc_add(AlgContext *ctx, const void *data, mDNSu32 len)$/;"	f
enc_create	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus enc_create(AlgContext *ctx)$/;"	f
enc_destroy	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus enc_destroy(AlgContext *ctx)$/;"	f
enc_encode	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mDNSu8* enc_encode(AlgContext *ctx)$/;"	f
enc_funcs	mDNSMacOSX/CryptoSupport.c	/^AlgFuncs enc_funcs = {enc_create, enc_destroy, mDNSNULL, enc_add, mDNSNULL, enc_encode, mDNSNULL};$/;"	v
ensure	mDNSShared/DebugServices.h	1089;"	d
ensureExistenceOfRacoonConfigDir	mDNSMacOSX/helper.c	/^ensureExistenceOfRacoonConfigDir(const char* const racoon_config_dir)$/;"	f	file:
ensure_noerr	mDNSShared/DebugServices.h	1091;"	d
ensure_noerr_string	mDNSShared/DebugServices.h	1092;"	d
ensure_string	mDNSShared/DebugServices.h	1090;"	d
ensure_translated_errno	mDNSShared/DebugServices.h	1093;"	d
enumCallback	mDNSMacOSX/DNSServiceDiscovery.c	/^        DNSServiceDomainEnumerationReply enumCallback;$/;"	m	union:a_requests::__anon151	file:
enum_reply	Clients/dns-sd.c	/^static void DNSSD_API enum_reply(DNSServiceRef sdref, const DNSServiceFlags flags, uint32_t ifIndex,$/;"	f	file:
enum_result_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void enum_result_callback(mDNS *const m,$/;"	f
enum_termination_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void enum_termination_callback(request_state *request)$/;"	f
enumerateDomains	mDNSShared/Java/DNSSD.java	/^	public static DNSSDService	enumerateDomains( int flags, int ifIndex, DomainListener listener)$/;"	m	class:DNSSD
enumeration	mDNSShared/uds_daemon.c	/^        } enumeration;$/;"	m	union:request_state::__anon124	typeref:struct:request_state::__anon124::__anon129	file:
enumeration_reply_op	mDNSShared/dnssd_ipc.h	/^    enumeration_reply_op = 64,$/;"	e	enum:__anon110
enumeration_request	mDNSShared/dnssd_ipc.h	/^    enumeration_request,$/;"	e	enum:__anon109
ep	mDNSMacOS9/mDNSMacOS9.h	/^    EndpointRef ep;$/;"	m	struct:mDNS_PlatformSupport_struct
err	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 err;        \/\/ Or UDP reply port, in setup request$/;"	m	struct:__anon53
err	mDNSMacOSX/mDNSMacOSX.h	/^    mStatus err;$/;"	m	struct:TCPSocket_struct
err	mDNSWindows/DLL.NET/dnssd_NET.h	/^			int err;$/;"	m	class:Apple::DNSSD::DNSServiceException
errcode_t	mDNSPosix/nss_mdns.c	/^typedef int errcode_t;$/;"	t	file:
errno_compat	mDNSShared/CommonServices.h	435;"	d
errno_compat	mDNSShared/CommonServices.h	447;"	d
error	mDNSShared/uds_daemon.c	/^    DNSServiceErrorType error;      \/\/ Note: This field is in NETWORK byte order$/;"	m	struct:__anon132	file:
errorCode	mDNSMacOS9/Responder.c	/^    DNSServiceErrorType errorCode;$/;"	m	struct:RegisteredService_struct	file:
errorstring	mDNSMacOSX/helper-stubs.c	/^static const char *errorstring[] =$/;"	v	file:
errsd	mDNSShared/uds_daemon.c	/^    dnssd_sock_t errsd;$/;"	m	struct:request_state	file:
ethaddr	mDNSCore/mDNSEmbeddedAPI.h	/^    char        ethaddr[18];$/;"	m	struct:__anon48
ethaddr_t	mDNSMacOSX/helpermsg-types.h	/^typedef uint8_t ethaddr_t[ 6];$/;"	t
event	mDNSWindows/Poll.c	/^		mDNSPollEventCallback event;$/;"	m	union:PollSource_struct::__anon11	file:
eventManager	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^        private Bonjour.DNSSDEventManager   eventManager = null;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
eventSources	mDNSShared/dnsextd.h	/^    GenLinkedList eventSources;     \/\/ linked list of EventSource's$/;"	m	struct:__anon116
eventType	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	DNSBrowserEventType		eventType;$/;"	m	struct:DomainEventInfo	file:
eventType	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	DNSBrowserEventType		eventType;$/;"	m	struct:ServiceEventInfo	file:
execTool	mDNSMacOSX/PreferencePane/PrivilegedOperations.c	/^static pid_t    execTool(const char *args[])$/;"	f	file:
exists	mDNSVxWorks/mDNSVxWorks.h	/^    mDNSu32 exists;                                 \/\/ 1 = currently exists in getifaddrs list; 0 = doesn't.$/;"	m	struct:NetworkInterfaceInfoVxWorks
exit	mDNSShared/dnsextd_parser.y	/^exit:$/;"	l
expire	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 expire;                         \/\/ ticks (absolute)$/;"	m	struct:DNSQuestion_struct
expire	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 expire;             \/\/ In platform time units: expiration of lease (-1 for static)$/;"	m	struct:AuthRecord_struct
expire	mDNSShared/dnsextd.h	/^    long expire;              \/\/ expiration time, in seconds since epoch$/;"	m	struct:RRTableElem
expire	mDNSShared/dnsextd.h	/^    mDNSs32 expire;           \/\/ expiration, absolute, in seconds since epoch$/;"	m	struct:LLQEntry
external_advertise	mDNSShared/uds_daemon.c	/^            mDNSBool external_advertise;$/;"	m	struct:request_state::__anon124::__anon131	file:
external_advertise	mDNSShared/uds_daemon.c	/^    mDNSBool external_advertise;    \/\/ is this is being advertised externally?$/;"	m	struct:service_instance	file:
external_advertise	mDNSShared/uds_daemon.c	/^    mDNSBool external_advertise;$/;"	m	struct:registered_record_entry	file:
external_connection_release	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_connection_release(const domainname *instance)$/;"	f
external_connection_release	mDNSShared/uds_daemon.h	85;"	d
external_start_advertising_helper	mDNSShared/uds_daemon.c	/^mDNSlocal void external_start_advertising_helper(service_instance *const instance)$/;"	f
external_start_advertising_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_start_advertising_service(const ResourceRecord *const resourceRecord, DNSServiceFlags flags) { (void)resourceRecord; (void)flags;}$/;"	f
external_start_advertising_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_start_advertising_service(const ResourceRecord *const resourceRecord, DNSServiceFlags flags)$/;"	f
external_start_advertising_service	mDNSShared/uds_daemon.h	81;"	d
external_start_browsing_for_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_start_browsing_for_service(mDNS *const m, const domainname *const type, DNS_TypeValues qtype, DNSServiceFlags flags) { (void)m; (void)type; (void)qtype; (void)flags;}$/;"	f
external_start_browsing_for_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_start_browsing_for_service(mDNSInterfaceID InterfaceID, const domainname *const typeDomain, DNS_TypeValues qtype, DNSServiceFlags flags)$/;"	f
external_start_browsing_for_service	mDNSShared/uds_daemon.h	79;"	d
external_start_resolving_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_start_resolving_service(const domainname *const fqdn, DNSServiceFlags flags)  { (void)fqdn; (void)flags;}$/;"	f
external_start_resolving_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_start_resolving_service(mDNSInterfaceID InterfaceID, const domainname *const fqdn, DNSServiceFlags flags)$/;"	f
external_start_resolving_service	mDNSShared/uds_daemon.h	83;"	d
external_stop_advertising_helper	mDNSShared/uds_daemon.c	/^mDNSlocal void external_stop_advertising_helper(service_instance *const instance)$/;"	f
external_stop_advertising_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_stop_advertising_service(const ResourceRecord *const resourceRecord, DNSServiceFlags flags) { (void)resourceRecord; (void)flags;}$/;"	f
external_stop_advertising_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_stop_advertising_service(const ResourceRecord *const resourceRecord, DNSServiceFlags flags)$/;"	f
external_stop_advertising_service	mDNSShared/uds_daemon.h	82;"	d
external_stop_browsing_for_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_stop_browsing_for_service(mDNS *const m, const domainname *const type, DNS_TypeValues qtype, DNSServiceFlags flags) { (void)m; (void)type; (void)qtype; (void)flags;}$/;"	f
external_stop_browsing_for_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_stop_browsing_for_service(mDNSInterfaceID InterfaceID, const domainname *const typeDomain, DNS_TypeValues qtype, DNSServiceFlags flags)$/;"	f
external_stop_browsing_for_service	mDNSShared/uds_daemon.h	80;"	d
external_stop_resolving_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_stop_resolving_service(const domainname *const fqdn, DNSServiceFlags flags)  { (void)fqdn; (void)flags;}$/;"	f
external_stop_resolving_service	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void external_stop_resolving_service(mDNSInterfaceID InterfaceID, const domainname *const fqdn, DNSServiceFlags flags)$/;"	f
external_stop_resolving_service	mDNSShared/uds_daemon.h	84;"	d
fAddressType	mDNSMacOS9/mDNSMacOS9.c	/^typedef struct { OTAddressType fAddressType; mDNSIPPort fPort; mDNSv4Addr fHost; UInt8 fUnused[8]; } mDNSInetAddress;$/;"	m	struct:__anon174	file:
fBrowser	Clients/Java/SwingBrowseListener.java	/^	protected DNSSDService		fBrowser;$/;"	f	class:SwingBrowseListener
fBytes	mDNSShared/Java/TXTRecord.java	/^	protected byte[]		fBytes;$/;"	f	class:TXTRecord
fClass	Clients/Java/SwingQueryListener.java	/^	protected int				fClass;$/;"	f	class:SwingQueryListener
fData	Clients/Java/SwingQueryListener.java	/^	protected byte[]			fData;$/;"	f	class:SwingQueryListener
fDomain	Clients/Java/BrowserApp.java	/^		public String	fServiceName, fDomain, fType;$/;"	f	class:BrowserListModel.BrowserListElem
fDomain	Clients/Java/SimpleChat.java	/^	public String	fServiceName, fDomain, fType;$/;"	f	class:TargetListElem
fDomain	Clients/Java/SwingBrowseListener.java	/^	protected String			fDomain;$/;"	f	class:SwingBrowseListener
fDomain	Clients/Java/SwingDomainListener.java	/^	protected String			fDomain;$/;"	f	class:SwingDomainListener
fEnumerator	Clients/Java/SwingDomainListener.java	/^	protected DNSSDService		fEnumerator;$/;"	f	class:SwingDomainListener
fErrorCode	Clients/Java/SwingBrowseListener.java	/^	protected int				fErrorCode;$/;"	f	class:SwingBrowseListener
fErrorCode	Clients/Java/SwingDomainListener.java	/^	protected int				fErrorCode;$/;"	f	class:SwingDomainListener
fErrorCode	Clients/Java/SwingQueryListener.java	/^	protected int				fErrorCode;$/;"	f	class:SwingQueryListener
fErrorCode	mDNSShared/Java/DNSSD.java	/^	protected int			fErrorCode;$/;"	f	class:AppleDNSSDException
fFlags	Clients/Java/SwingBrowseListener.java	/^	protected int				fFlags;$/;"	f	class:SwingBrowseListener
fFlags	Clients/Java/SwingDomainListener.java	/^	protected int				fFlags;$/;"	f	class:SwingDomainListener
fFlags	Clients/Java/SwingQueryListener.java	/^	protected int				fFlags;$/;"	f	class:SwingQueryListener
fFullName	Clients/Java/SwingQueryListener.java	/^	protected String			fFullName;$/;"	f	class:SwingQueryListener
fHost	mDNSMacOS9/mDNSMacOS9.c	/^typedef struct { OTAddressType fAddressType; mDNSIPPort fPort; mDNSv4Addr fHost; UInt8 fUnused[8]; } mDNSInetAddress;$/;"	m	struct:__anon174	file:
fIndex	Clients/Java/SwingBrowseListener.java	/^	protected int				fIndex;$/;"	f	class:SwingBrowseListener
fIndex	Clients/Java/SwingDomainListener.java	/^	protected int				fIndex;$/;"	f	class:SwingDomainListener
fIndex	Clients/Java/SwingQueryListener.java	/^	protected int				fIndex;$/;"	f	class:SwingQueryListener
fInstance	Clients/Java/DNSSDUnitTest.java	/^	public DNSSDUnitTest	fInstance = null;$/;"	f	class:DNSSDUnitTest
fInstance	mDNSShared/Java/DNSSD.java	/^	protected static DNSSD			fInstance;$/;"	f	class:DNSSD
fInt	Clients/Java/BrowserApp.java	/^		public int		fInt;$/;"	f	class:BrowserListModel.BrowserListElem
fInt	Clients/Java/SimpleChat.java	/^	public int		fInt;$/;"	f	class:TargetListElem
fIsAdd	Clients/Java/SwingBrowseListener.java	/^	protected boolean			fIsAdd;$/;"	f	class:SwingBrowseListener
fIsAdd	Clients/Java/SwingDomainListener.java	/^	protected boolean			fIsAdd;$/;"	f	class:SwingDomainListener
fListener	Clients/Java/SwingBrowseListener.java	/^	protected BrowseListener	fListener;$/;"	f	class:SwingBrowseListener
fListener	Clients/Java/SwingDomainListener.java	/^	protected DomainListener	fListener;$/;"	f	class:SwingDomainListener
fListener	Clients/Java/SwingQueryListener.java	/^	protected QueryListener		fListener;$/;"	f	class:SwingQueryListener
fListener	mDNSShared/Java/DNSSD.java	/^	protected BaseListener fListener;$/;"	f	class:AppleService
fNativeContext	mDNSShared/Java/DNSSD.java	/^	protected long	\/* warning *\/	fNativeContext;		\/\/ Private storage for native side$/;"	f	class:AppleService
fOwner	Clients/Java/SimpleChat.java	/^	protected Runnable			fOwner;$/;"	f	class:ListenerThread
fOwner	mDNSShared/Java/DNSSD.java	/^	protected AppleService	fOwner;$/;"	f	class:AppleDNSRecord
fPacket	Clients/Java/SimpleChat.java	/^	protected DatagramPacket	fPacket;$/;"	f	class:ListenerThread
fPort	mDNSMacOS9/mDNSMacOS9.c	/^typedef struct { OTAddressType fAddressType; mDNSIPPort fPort; mDNSv4Addr fHost; UInt8 fUnused[8]; } mDNSInetAddress;$/;"	m	struct:__anon174	file:
fQuery	Clients/Java/SwingQueryListener.java	/^	protected DNSSDService		fQuery;$/;"	f	class:SwingQueryListener
fRecord	mDNSShared/Java/DNSSD.java	/^	protected long			fRecord;		\/\/ Really a DNSRecord; sizeof(long) == sizeof(void*) ?$/;"	f	class:AppleDNSRecord
fReg	Clients/Java/DNSSDUnitTest.java	/^	protected DNSSDRegistration	fReg;$/;"	f	class:RegTest
fRegTest	Clients/Java/DNSSDUnitTest.java	/^	protected RegTest	fRegTest;$/;"	f	class:DNSSDUnitTest
fRegType	Clients/Java/SwingBrowseListener.java	/^	protected String			fRegType;$/;"	f	class:SwingBrowseListener
fRegistrar	Clients/Java/DNSSDUnitTest.java	/^	protected DNSSDRecordRegistrar	fRegistrar;$/;"	f	class:RegistrarTest
fService	Clients/Java/SwingBrowseListener.java	/^	protected String			fService;$/;"	f	class:SwingBrowseListener
fServiceName	Clients/Java/BrowserApp.java	/^		public String	fServiceName, fDomain, fType;$/;"	f	class:BrowserListModel.BrowserListElem
fServiceName	Clients/Java/SimpleChat.java	/^	public String	fServiceName, fDomain, fType;$/;"	f	class:TargetListElem
fSocket	Clients/Java/SimpleChat.java	/^	protected DatagramSocket	fSocket;$/;"	f	class:ListenerThread
fStage	Clients/Java/DNSSDUnitTest.java	/^	protected int		fStage;$/;"	f	class:DNSSDUnitTest
fTTL	Clients/Java/SwingQueryListener.java	/^	protected int				fTTL;$/;"	f	class:SwingQueryListener
fType	Clients/Java/BrowserApp.java	/^		public String	fServiceName, fDomain, fType;$/;"	f	class:BrowserListModel.BrowserListElem
fType	Clients/Java/SimpleChat.java	/^	public String	fServiceName, fDomain, fType;$/;"	f	class:TargetListElem
fType	Clients/Java/SwingQueryListener.java	/^	protected int				fType;$/;"	f	class:SwingQueryListener
fUnused	mDNSMacOS9/mDNSMacOS9.c	/^typedef struct { OTAddressType fAddressType; mDNSIPPort fPort; mDNSv4Addr fHost; UInt8 fUnused[8]; } mDNSInetAddress;$/;"	m	struct:__anon174	file:
false	mDNSShared/CommonServices.h	873;"	d
false	mDNSShared/CommonServices.h	887;"	d
family	mDNSVxWorks/mDNSVxWorks.h	/^    int family;                                     \/\/ Socket address family of the primary socket.$/;"	m	struct:NetworkInterfaceInfoVxWorks
fd	mDNSMacOSX/daemon.c	/^    int fd;$/;"	m	struct:KQSocketEventSource	file:
fd	mDNSMacOSX/mDNSMacOSX.h	/^    int fd;$/;"	m	struct:TCPSocket_struct
fd	mDNSPosix/mDNSPosix.c	/^    int fd;$/;"	m	struct:PosixEventSource	file:
fd	mDNSShared/dnsextd.h	/^    int fd;$/;"	m	struct:EventSource
fd	mDNSWindows/mDNSWin32.h	/^	SOCKET						fd;$/;"	m	struct:TCPSocket_struct
fd	mDNSWindows/mDNSWin32.h	/^	SOCKET						fd;$/;"	m	struct:UDPSocket_struct
fdClosed	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSBool fdClosed;$/;"	m	struct:__anon144
fieldWidth	mDNSCore/DNSCommon.c	/^    unsigned int fieldWidth;$/;"	m	struct:mDNSprintf_format	file:
filename	mDNSPosix/nss_mdns.c	/^    const char * filename;$/;"	m	struct:__anon26	file:
finalize	Clients/Java/DNSSDUnitTest.java	/^	protected void finalize() throws Throwable$/;"	m	class:TermReporter
find	Clients/PrinterSetupWizard/UtilTypes.h	/^Manufacturer::find( const CString & name )$/;"	f	class:PrinterSetupWizard::Manufacturer
findMatching	Clients/Java/BrowserApp.java	/^	protected int	findMatching( String match)$/;"	m	class:BrowserListModel
findMatching	Clients/Java/SimpleChat.java	/^	protected TargetListElem	findMatching( String match)$/;"	m	class:TargetListModel
findsupportedalg	mDNSMacOSX/pfkey.c	/^findsupportedalg(satype, alg_id)$/;"	f	file:
findsupportedmap	mDNSMacOSX/pfkey.c	/^findsupportedmap(satype)$/;"	f	file:
flag	mDNSCore/mDNSEmbeddedAPI.h	/^    int flag;$/;"	m	struct:SearchListElem
flag	mDNSMacOS9/mDNSMacOS9.h	/^typedef struct { TOptionHeader h; UInt32 flag; } TSetBooleanOption;$/;"	m	struct:__anon179
flags	Clients/dns-sd.c	/^    unsigned short flags;$/;"	m	struct:__anon169	file:
flags	mDNSCore/DNSCommon.c	/^struct TCPSocket_struct { TCPSocketFlags flags; \/* ... *\/ };$/;"	m	struct:TCPSocket_struct	file:
flags	mDNSCore/dnssec.h	/^    mDNSu32 flags;$/;"	m	struct:DNSSECVerifier_struct
flags	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32             flags;      \/\/ saved for subsequent calls to mDNS_RegisterService() if records $/;"	m	struct:ServiceRecordSet_struct
flags	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32  flags;                         \/\/ flags from original DNSService*() API request.$/;"	m	struct:DNSQuestion_struct
flags	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 flags;              \/\/ Set when we're planning to delete this from the list$/;"	m	struct:DNSServer
flags	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 flags;              \/\/ Set when we're planning to delete this from the list$/;"	m	struct:McastResolver
flags	mDNSCore/uDNS.c	/^struct TCPSocket_struct { TCPSocketFlags flags; \/* ... *\/ };$/;"	m	struct:TCPSocket_struct	file:
flags	mDNSMacOSX/helper.c	/^    u_int16_t flags;$/;"	m	struct:vpnctl_hdr_struct	file:
flags	mDNSMacOSX/mDNSMacOSX.h	/^    TCPSocketFlags flags;       \/\/ MUST BE FIRST FIELD -- mDNSCore expects every TCPSocket_struct to begin with TCPSocketFlags flags$/;"	m	struct:TCPSocket_struct
flags	mDNSShared/uds_daemon.c	/^            DNSServiceFlags flags;$/;"	m	struct:request_state::__anon124::__anon129	file:
flags	mDNSShared/uds_daemon.c	/^            mDNSu32 flags;$/;"	m	struct:request_state::__anon124::__anon127	file:
flags	mDNSShared/uds_daemon.c	/^    DNSServiceFlags flags;          \/\/ Note: This field is in NETWORK byte order$/;"	m	struct:__anon132	file:
flags	mDNSShared/uds_daemon.c	/^    DNSServiceFlags flags;$/;"	m	struct:request_state	file:
flags	mDNSWindows/mDNSWin32.h	/^	TCPSocketFlags				flags;		\/\/ MUST BE FIRST FIELD -- mDNSCore expects every TCPSocket_struct to begin with TCPSocketFlags flags$/;"	m	struct:TCPSocket_struct
fnCryptAcquireContext	mDNSWindows/mDNSWin32.c	/^typedef BOOL (__stdcall *fnCryptAcquireContext)( HCRYPTPROV*, LPCTSTR, LPCTSTR, DWORD, DWORD);$/;"	t	file:
fnCryptGenRandom	mDNSWindows/mDNSWin32.c	/^typedef BOOL (__stdcall *fnCryptGenRandom)( HCRYPTPROV, DWORD, BYTE* ); $/;"	t	file:
fnCryptReleaseContext	mDNSWindows/mDNSWin32.c	/^typedef BOOL (__stdcall *fnCryptReleaseContext)(HCRYPTPROV, DWORD);$/;"	t	file:
forceSign	mDNSCore/DNSCommon.c	/^    unsigned forceSign : 1;$/;"	m	struct:mDNSprintf_format	file:
foreground	mDNSShared/dnsextd.c	/^static mDNSBool foreground = 0;$/;"	v	file:
formatBtmmPrefixedServiceItem	mDNSMacOSX/helper.c	/^    formatNotDNSKey, formatDdnsTypeItem, formatDnsPrefixedServiceItem, formatBtmmPrefixedServiceItem$/;"	e	enum:DNSKeyFormat	file:
formatDdnsTypeItem	mDNSMacOSX/helper.c	/^    formatNotDNSKey, formatDdnsTypeItem, formatDnsPrefixedServiceItem, formatBtmmPrefixedServiceItem$/;"	e	enum:DNSKeyFormat	file:
formatDnsPrefixedServiceItem	mDNSMacOSX/helper.c	/^    formatNotDNSKey, formatDdnsTypeItem, formatDnsPrefixedServiceItem, formatBtmmPrefixedServiceItem$/;"	e	enum:DNSKeyFormat	file:
formatNotDNSKey	mDNSMacOSX/helper.c	/^    formatNotDNSKey, formatDdnsTypeItem, formatDnsPrefixedServiceItem, formatBtmmPrefixedServiceItem$/;"	e	enum:DNSKeyFormat	file:
format_enumeration_reply	mDNSShared/uds_daemon.c	/^mDNSlocal reply_state *format_enumeration_reply(request_state *request,$/;"	f
format_reverse_addr	mDNSPosix/nss_mdns.c	/^format_reverse_addr ($/;"	f
format_reverse_addr_in	mDNSPosix/nss_mdns.c	/^format_reverse_addr_in ($/;"	f
format_reverse_addr_in6	mDNSPosix/nss_mdns.c	/^format_reverse_addr_in6 ($/;"	f
found	mDNSCore/dnssec.h	/^    mDNSu16 found;$/;"	m	struct:RRVerifier_struct
fqdn	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname fqdn;$/;"	m	struct:HostnameInfo
frame	Clients/Java/BrowserApp.java	/^	JFrame				frame;$/;"	f	class:BrowserApp
free	mDNSMacOS9/mDNSPrefix.h	63;"	d
freeL	mDNSCore/mDNSDebug.h	159;"	d
freeL	mDNSMacOSX/daemon.c	/^mDNSexport void freeL(char *msg, void *x)$/;"	f
free_ifi_info	mDNSPosix/mDNSUNP.c	/^free_ifi_info(struct ifi_info *ifihead)$/;"	f
freeifaddrs	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void    freeifaddrs( struct ifaddrs *inAddrs )$/;"	f
freeifaddrs	mDNSWindows/mDNSWin32.c	/^mDNSlocal void	freeifaddrs( struct ifaddrs *inIFAs )$/;"	f
gAdvertisedServicesChangedEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gAdvertisedServicesChangedEvent	= NULL; \/\/ Advertised services changed$/;"	v
gAdvertisedServicesKey	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HKEY						gAdvertisedServicesKey		= NULL;$/;"	v
gApp	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^CExplorerPluginApp	gApp;$/;"	v
gApp	mDNSWindows/DNSServiceBrowser/Windows/Sources/Application.cpp	/^Application		gApp;$/;"	v
gApp	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/Application.cpp	/^Application		gApp;$/;"	v
gAuthRef	mDNSMacOSX/PreferencePane/ConfigurationAuthority.c	/^static AuthorizationRef gAuthRef = 0;$/;"	v	file:
gAuthSet	mDNSMacOSX/PreferencePane/ConfigurationAuthority.c	/^static AuthorizationRights gAuthSet = { sizeof gAuthorizations \/ sizeof gAuthorizations[0], gAuthorizations };$/;"	v	file:
gAuthorizations	mDNSMacOSX/PreferencePane/ConfigurationAuthority.c	/^static AuthorizationItem gAuthorizations[] = {   { UPDATE_SC_RIGHT, 0, NULL, 0 },$/;"	v	file:
gAvoidPort53	mDNSPosix/Responder.c	/^static mDNSBool gAvoidPort53      = mDNStrue;$/;"	v	file:
gDLLRefCount	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^int					gDLLRefCount	= 0;$/;"	v
gDNSSDLibrary	mDNSWindows/mDNSWin32.c	/^mDNSlocal HMODULE					gDNSSDLibrary				= NULL;$/;"	v
gDNSServiceRefDeallocate	mDNSWindows/mDNSWin32.c	/^mDNSlocal DNSServiceRefDeallocateFunc gDNSServiceRefDeallocate	= NULL;$/;"	v
gDNSServiceRegister	mDNSWindows/mDNSWin32.c	/^mDNSlocal DNSServiceRegisterFunc	gDNSServiceRegister			= NULL;$/;"	v
gDaemon	mDNSPosix/Responder.c	/^static mDNSBool gDaemon           = mDNSfalse;$/;"	v	file:
gDaemonErr	mDNSShared/dnssd_clientstub.c	/^static int gDaemonErr = kDNSServiceErr_NoError;$/;"	v	file:
gDdnsChangedEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gDdnsChangedEvent			= NULL;	\/\/ DynDNS config changed$/;"	v
gDdnsKey	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HKEY						gDdnsKey					= NULL;$/;"	v
gDebugAssertOutputHandlerUPP	mDNSShared/DebugServices.c	/^static DebugAssertOutputHandlerUPP gDebugAssertOutputHandlerUPP    = NULL;$/;"	v	file:
gDebugBreakLevel	mDNSShared/DebugServices.c	/^static DebugLevel gDebugBreakLevel                = kDebugLevelAssert;$/;"	v	file:
gDebugCustomOutputContext	mDNSShared/DebugServices.c	/^static void *                               gDebugCustomOutputContext       = NULL;$/;"	v	file:
gDebugCustomOutputFunction	mDNSShared/DebugServices.c	/^static DebugOutputFunctionPtr gDebugCustomOutputFunction      = NULL;$/;"	v	file:
gDebugFPrintFFile	mDNSShared/DebugServices.c	/^static FILE *                           gDebugFPrintFFile               = NULL;$/;"	v	file:
gDebugInitialized	mDNSShared/DebugServices.c	/^static bool gDebugInitialized               = false;$/;"	v	file:
gDebugMacOSXLogFunction	mDNSShared/DebugServices.c	/^static DebugMacOSXLogFunctionPtr gDebugMacOSXLogFunction         = NULL;$/;"	v	file:
gDebugOutputType	mDNSShared/DebugServices.c	/^static DebugOutputType gDebugOutputType                = kDebugOutputTypeNone;$/;"	v	file:
gDebugPrintLevelMax	mDNSShared/DebugServices.c	/^static DebugLevel gDebugPrintLevelMax             = kDebugLevelMax;$/;"	v	file:
gDebugPrintLevelMin	mDNSShared/DebugServices.c	/^static DebugLevel gDebugPrintLevelMin             = kDebugLevelInfo;$/;"	v	file:
gDebugWindowsEventLogEventSource	mDNSShared/DebugServices.c	/^static HANDLE gDebugWindowsEventLogEventSource = NULL;$/;"	v	file:
gDescChangedEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gDescChangedEvent			= NULL;	\/\/ Computer description changed event$/;"	v
gDescKey	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HKEY						gDescKey					= NULL;$/;"	v
gEnableIPv6	mDNSWindows/mDNSWin32.c	/^mDNSlocal BOOL					gEnableIPv6				= TRUE;$/;"	v
gEventFDs	mDNSPosix/mDNSPosix.c	/^static fd_set gEventFDs;$/;"	v	file:
gEventSignalSet	mDNSPosix/mDNSPosix.c	/^static sigset_t gEventSignalSet;                \/\/ Signals which event loop listens for$/;"	v	file:
gEventSignals	mDNSPosix/mDNSPosix.c	/^static sigset_t gEventSignals;                  \/\/ Signals which were received while inside loop$/;"	v	file:
gEventSources	mDNSMacOSX/daemon.c	/^static KQSocketEventSource *gEventSources;$/;"	v	file:
gEventSources	mDNSPosix/mDNSPosix.c	/^static GenLinkedList gEventSources;             \/\/ linked list of PosixEventSource's$/;"	v	file:
gFileSharingChangedEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gFileSharingChangedEvent	= NULL;	\/\/ File Sharing changed$/;"	v
gFileSharingKey	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HKEY						gFileSharingKey				= NULL;$/;"	v
gFirewallChangedEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gFirewallChangedEvent		= NULL;	\/\/ Firewall changed$/;"	v
gFirewallKey	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HKEY						gFirewallKey				= NULL;$/;"	v
gGetAdaptersAddressesFunctionPtr	mDNSWindows/mDNSWin32.c	/^	mDNSlocal GetAdaptersAddressesFunctionPtr		gGetAdaptersAddressesFunctionPtr	= NULL;$/;"	v
gGetAdaptersAddressesFunctionPtr	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL GetAdaptersAddressesFunctionPtr		gGetAdaptersAddressesFunctionPtr	= NULL;$/;"	v
gGetIpInterfaceEntryFunctionPtr	mDNSWindows/SystemService/Service.c	/^mDNSlocal GetIpInterfaceEntryFunctionPtr		gGetIpInterfaceEntryFunctionPtr	= NULL;$/;"	v
gHostsFileInfo	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL HostsFileInfo		*	gHostsFileInfo		= NULL;$/;"	v
gIPHelperLibraryInstance	mDNSWindows/SystemService/Service.c	/^mDNSlocal HMODULE								gIPHelperLibraryInstance		= NULL;$/;"	v
gIPHelperLibraryInstance	mDNSWindows/mDNSWin32.c	/^	mDNSlocal HMODULE								gIPHelperLibraryInstance			= NULL;$/;"	v
gIPHelperLibraryInstance	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL HMODULE								gIPHelperLibraryInstance			= NULL;$/;"	v
gInstance	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^HINSTANCE			gInstance		= NULL;$/;"	v
gInstance	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL HINSTANCE				gInstance			= NULL;$/;"	v
gInterfaceListChangedSocket	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL SOCKET						gInterfaceListChangedSocket	= INVALID_SOCKET;$/;"	v
gJavaVM	mDNSShared/Java/JNISupport.c	/^JavaVM      *gJavaVM = NULL;$/;"	v
gLock	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL CRITICAL_SECTION		gLock;$/;"	v
gLockInitialized	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL bool					gLockInitialized 	= false;$/;"	v
gMDNSDebugOverrideLevel	mDNSVxWorks/mDNSVxWorks.c	/^DebugLevel gMDNSDebugOverrideLevel = kDebugLevelMax;$/;"	v
gMDNSDeferIPv4	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mDNSBool gMDNSDeferIPv4          = mDNSfalse;$/;"	v
gMDNSPlatformPosixVerboseLevel	mDNSPosix/mDNSPosix.c	/^int gMDNSPlatformPosixVerboseLevel = 0;$/;"	v
gMDNSPlatformSupport	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mDNS_PlatformSupport gMDNSPlatformSupport;$/;"	v
gMDNSPlatformSupport	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mDNS_PlatformSupport gMDNSPlatformSupport;$/;"	v
gMDNSPlatformSupport	mDNSWindows/mDNSWin32.c	/^mDNSlocal mDNS_PlatformSupport	gMDNSPlatformSupport;$/;"	v
gMDNSPtr	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mDNS *                    gMDNSPtr                = NULL;$/;"	v
gMDNSPtr	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mDNS *                    gMDNSPtr                            = NULL;$/;"	v
gMDNSRecord	mDNSWindows/Poll.c	115;"	d	file:
gMDNSRecord	mDNSWindows/SystemService/Service.c	164;"	d	file:
gMDNSTicksToMicro	mDNSVxWorks/mDNSVxWorks.c	/^mDNSlocal mDNSs32 gMDNSTicksToMicro       = 0;$/;"	v
gMDNSTicksToMicrosecondsMultiplier	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSlocal mDNSs32 gMDNSTicksToMicrosecondsMultiplier  = 0;$/;"	v
gMaxFD	mDNSPosix/mDNSPosix.c	/^static int gMaxFD;                              \/\/ largest fd in gEventFDs$/;"	v	file:
gNSPGUID	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL GUID					gNSPGUID			= { 0xb600e6e9, 0x553b, 0x4a19, { 0x86, 0x96, 0x33, 0x5e, 0x5c, 0x89, 0x61, 0x53 } };$/;"	v
gNSPName	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL wchar_t				*	gNSPName			= L"mdnsNSP";$/;"	v
gNotification	mDNSMacOSX/helper.c	/^static CFUserNotificationRef gNotification    = NULL;$/;"	v	file:
gNotificationRLS	mDNSMacOSX/helper.c	/^static CFRunLoopSourceRef gNotificationRLS = NULL;$/;"	v	file:
gPIDFile	mDNSPosix/Responder.c	/^static const char *gPIDFile          = kDefaultPIDFile;$/;"	v	file:
gPlatformStorage	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL	mDNS_PlatformSupport		gPlatformStorage;$/;"	v
gPoll	mDNSWindows/Poll.c	/^mDNSlocal Poll gPoll = { mDNSfalse, NULL };$/;"	v
gPort	mDNSMacOSX/helper-main.c	/^mach_port_t gPort = MACH_PORT_NULL;$/;"	v
gPortNumber	mDNSPosix/Responder.c	/^static int gPortNumber       = kDefaultPortNumber;$/;"	v	file:
gPowerResumeEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gPowerResumeEvent			= NULL;$/;"	v
gPowerSuspendAckEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gPowerSuspendAckEvent		= NULL;$/;"	v
gPowerSuspendEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gPowerSuspendEvent			= NULL;$/;"	v
gProgramName	mDNSPosix/Client.c	/^static const char *gProgramName = ProgramName;$/;"	v	file:
gProgramName	mDNSPosix/Responder.c	/^static const char *gProgramName = ProgramName;$/;"	v	file:
gQueryList	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL QueryRef				gQueryList	 		= NULL;$/;"	v
gRRCache	mDNSPosix/Bonjour.c	/^static CacheEntity gRRCache[RR_CACHE_SIZE];$/;"	v	file:
gRRCache	mDNSPosix/Client.c	/^static CacheEntity gRRCache[RR_CACHE_SIZE];$/;"	v	file:
gRRCache	mDNSPosix/Identify.c	/^static CacheEntity gRRCache[RR_CACHE_SIZE];$/;"	v	file:
gRRCache	mDNSPosix/PosixDaemon.c	/^static CacheEntity gRRCache[RR_CACHE_SIZE];$/;"	v	file:
gRRCache	mDNSWindows/SystemService/Service.c	/^static CacheEntity gRRCache[RR_CACHE_SIZE];$/;"	v	file:
gReceivedSigHup	mDNSPosix/Responder.c	/^static volatile mDNSBool gReceivedSigHup;$/;"	v	file:
gReceivedSigUsr1	mDNSPosix/Responder.c	/^static volatile mDNSBool gReceivedSigUsr1;$/;"	v	file:
gRefCount	mDNSWindows/mdnsNSP/mdnsNSP.c	/^DEBUG_LOCAL LONG					gRefCount			= 0;$/;"	v
gRetryFirewall	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL BOOL						gRetryFirewall			= FALSE;$/;"	v
gRunLoop	mDNSMacOSX/helper-main.c	/^CFRunLoopRef gRunLoop = NULL;$/;"	v
gRunning	mDNSPosix/NetMonitor.c	/^static mDNSBool gRunning;$/;"	v	file:
gSMBThread	mDNSWindows/mDNSWin32.c	/^mDNSlocal HANDLE					gSMBThread					= NULL;$/;"	v
gSMBThreadDeregisterEvent	mDNSWindows/mDNSWin32.c	/^mDNSlocal HANDLE					gSMBThreadDeregisterEvent	= NULL;$/;"	v
gSMBThreadQuitEvent	mDNSWindows/mDNSWin32.c	/^mDNSlocal HANDLE					gSMBThreadQuitEvent			= NULL;$/;"	v
gSMBThreadRegisterEvent	mDNSWindows/mDNSWin32.c	/^mDNSlocal HANDLE					gSMBThreadRegisterEvent		= NULL;$/;"	v
gSMBThreadStopEvent	mDNSWindows/mDNSWin32.c	/^mDNSlocal HANDLE					gSMBThreadStopEvent			= NULL;$/;"	v
gSPSSleepEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gSPSSleepEvent			= NULL;$/;"	v
gSPSWakeupEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gSPSWakeupEvent			= NULL;$/;"	v
gServiceAllowRemote	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL bool						gServiceAllowRemote		= false;$/;"	v
gServiceCacheEntryCount	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL int							gServiceCacheEntryCount	= 0;	\/\/ 0 means to use the DNS-SD default.$/;"	v
gServiceDispatchTable	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL SERVICE_TABLE_ENTRY			gServiceDispatchTable[] = $/;"	v
gServiceDomain	mDNSPosix/Client.c	/^static const char *gServiceDomain    = kDefaultDomain;$/;"	v	file:
gServiceDomain	mDNSPosix/Responder.c	/^static const char *gServiceDomain    = kDefaultServiceDomain;$/;"	v	file:
gServiceEventSource	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gServiceEventSource		= NULL;$/;"	v
gServiceFile	mDNSPosix/Responder.c	/^static const char *gServiceFile      = "";$/;"	v	file:
gServiceID	mDNSPosix/Responder.c	/^static int gServiceID = 0;$/;"	v	file:
gServiceList	mDNSPosix/Responder.c	/^static PosixService *gServiceList = NULL;$/;"	v	file:
gServiceManageLLRouting	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL bool						gServiceManageLLRouting = true;$/;"	v
gServiceName	mDNSPosix/Responder.c	/^static const char *gServiceName      = "";$/;"	v	file:
gServiceQuietMode	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL BOOL						gServiceQuietMode		= FALSE;$/;"	v
gServiceRef	Clients/BonjourExample/BonjourExample.cpp	/^DNSServiceRef		gServiceRef = NULL;$/;"	v
gServiceStatus	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL SERVICE_STATUS				gServiceStatus;$/;"	v
gServiceStatusHandle	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL SERVICE_STATUS_HANDLE		gServiceStatusHandle 	= NULL;$/;"	v
gServiceText	mDNSPosix/Responder.c	/^static mDNSu8 gServiceText[sizeof(RDataBody)];$/;"	v	file:
gServiceTextLen	mDNSPosix/Responder.c	/^static mDNSu16 gServiceTextLen   = 0;$/;"	v	file:
gServiceType	mDNSPosix/Client.c	/^static const char *gServiceType      = kDefaultServiceType;$/;"	v	file:
gServiceType	mDNSPosix/Responder.c	/^static const char *gServiceType      = kDefaultServiceType;$/;"	v	file:
gStopEvent	mDNSPosix/NetMonitor.c	/^static HANDLE gStopEvent = INVALID_HANDLE_VALUE;$/;"	v	file:
gStopEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gStopEvent					= NULL;$/;"	v
gStopNow	mDNSPosix/Responder.c	/^static volatile mDNSBool gStopNow;$/;"	v	file:
gTcpipChangedEvent	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HANDLE						gTcpipChangedEvent			= NULL;	\/\/ TCP\/IP config changed$/;"	v
gTcpipKey	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL HKEY						gTcpipKey					= NULL;$/;"	v
gTimer	mDNSMacOSX/helper-main.c	/^CFRunLoopTimerRef gTimer = NULL;$/;"	v
gToolApproved	mDNSMacOSX/PreferencePane/PrivilegedOperations.c	/^Boolean gToolApproved = false;$/;"	v
gToolQuietMode	mDNSWindows/NSPTool/NSPTool.c	/^DEBUG_LOCAL BOOL gToolQuietMode = FALSE;$/;"	v
gUDPNumSockets	mDNSWindows/mDNSWin32.c	/^mDNSlocal int					gUDPNumSockets			= 0;$/;"	v
gUDPSockets	mDNSWindows/mDNSWin32.c	/^mDNSlocal UDPSocket		*		gUDPSockets				= NULL;$/;"	v
gUDSCallback	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL udsEventCallback			gUDSCallback			= NULL;$/;"	v
gUDSSocket	mDNSWindows/SystemService/Service.c	/^DEBUG_LOCAL SocketRef					gUDSSocket				= 0;$/;"	v
g_config	mDNSPosix/nss_mdns.c	/^static config_t * g_config = NULL;$/;"	v	file:
g_config_mutex	mDNSPosix/nss_mdns.c	/^pthread_mutex_t g_config_mutex =$/;"	v
g_controlPanelCanonicalName	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^static LPCTSTR g_controlPanelCanonicalName	=	TEXT( "Apple.Bonjour" );$/;"	v	file:
g_controlPanelCategory	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^static LPCTSTR g_controlPanelCategory		=	TEXT( "3,8" );$/;"	v	file:
g_controlPanelGUID	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^static LPCTSTR g_controlPanelGUID			=	TEXT( "{1207552C-0E59-4d9f-8554-F1F806CD7FA9}" );$/;"	v	file:
g_controlPanelName	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^static LPCTSTR g_controlPanelName			=	TEXT( "Bonjour" );$/;"	v	file:
g_defaultErrorCode	mDNSWindows/DLLStub/DLLStub.cpp	/^static int		g_defaultErrorCode = kDNSServiceErr_ServiceNotRunning;$/;"	v	file:
g_doneCheck	mDNSWindows/VPCDetect.cpp	/^static BOOL g_doneCheck = FALSE;$/;"	v	file:
g_glueLayer	mDNSWindows/DLLStub/DLLStub.cpp	/^static DLLStub	g_glueLayer;$/;"	v	file:
g_hAAPI32	mDNSWindows/mDNSWin32.c	/^static HINSTANCE			 g_hAAPI32 					= NULL;$/;"	v	file:
g_hProvider	mDNSWindows/mDNSWin32.c	/^static HCRYPTPROV			 g_hProvider 				= ( ULONG_PTR ) NULL;$/;"	v	file:
g_initWinsock	mDNSShared/dnssd_clientstub.c	/^static int g_initWinsock = 0;$/;"	v	file:
g_isVPC	mDNSWindows/VPCDetect.cpp	/^static BOOL g_isVPC		= FALSE;$/;"	v	file:
g_localizedResources	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^static HINSTANCE g_localizedResources		= NULL;$/;"	v	file:
g_localizedResources	Clients/PrinterSetupWizard/PrinterSetupWizardApp.cpp	/^static HINSTANCE g_localizedResources		= NULL;$/;"	v	file:
g_localizedResources	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^static HINSTANCE g_localizedResources		= NULL;$/;"	v	file:
g_loop	mDNSPosix/Bonjour.c	/^int g_loop = 0;$/;"	v
g_lpCryptAcquireContext	mDNSWindows/mDNSWin32.c	/^static fnCryptAcquireContext g_lpCryptAcquireContext 	= NULL;$/;"	v	file:
g_lpCryptGenRandom	mDNSWindows/mDNSWin32.c	/^static fnCryptGenRandom		 g_lpCryptGenRandom 		= NULL;$/;"	v	file:
g_lpCryptReleaseContext	mDNSWindows/mDNSWin32.c	/^static fnCryptReleaseContext g_lpCryptReleaseContext 	= NULL;$/;"	v	file:
g_nonLocalizedResources	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^static HINSTANCE g_nonLocalizedResources	= NULL;$/;"	v	file:
g_nonLocalizedResources	Clients/PrinterSetupWizard/PrinterSetupWizardApp.cpp	/^static HINSTANCE g_nonLocalizedResources	= NULL;$/;"	v	file:
g_nonLocalizedResources	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^static HINSTANCE g_nonLocalizedResources	= NULL;$/;"	v	file:
g_nonLocalizedResourcesName	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^static CString	 g_nonLocalizedResourcesName;$/;"	v	file:
g_printerDriverFiles	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^g_printerDriverFiles[] =		\/\/ Printer driver files$/;"	v	file:
g_racoon_config_dir	mDNSMacOSX/helper.c	/^static const char g_racoon_config_dir[] = "\/var\/run\/racoon\/";$/;"	v	file:
g_racoon_config_dir_old	mDNSMacOSX/helper.c	/^static const char g_racoon_config_dir_old[] = "\/etc\/racoon\/remote\/";$/;"	v	file:
generateTunnelPolicy	mDNSMacOSX/helper.c	/^generateTunnelPolicy(mDNSTunnelPolicyWhich which, mDNSTunnelType type, int in,$/;"	f	file:
getColorFor	Clients/Java/SimpleChat.java	/^	protected Color		getColorFor( byte[] chars, int length)$/;"	m	class:SimpleChat
getDNSKeyFormat	mDNSMacOSX/helper.c	/^getDNSKeyFormat(SecKeychainItemRef item, SecKeychainAttributeList **attributesp)$/;"	f	file:
getDomainName	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *getDomainName(const DNSMessage *const msg, const mDNSu8 *ptr, const mDNSu8 *const end,$/;"	f
getErrorCode	mDNSShared/Java/DNSSD.java	/^	public int					getErrorCode() { return fErrorCode; }$/;"	m	class:AppleDNSSDException
getErrorCode	mDNSShared/Java/DNSSDException.java	/^	abstract public int			getErrorCode();$/;"	m	class:DNSSDException
getExtendedFlags	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal u_int64_t getExtendedFlags(char * ifa_name)$/;"	f
getHelperPort	mDNSMacOSX/helper-stubs.c	/^static mach_port_t getHelperPort(int retry)$/;"	f	file:
getIfIndexForName	mDNSShared/Java/DNSSD.java	/^	public static int		getIfIndexForName( String ifName)$/;"	m	class:DNSSD
getInstance	mDNSShared/Java/DNSSD.java	/^	static protected final DNSSD	getInstance()$/;"	m	class:DNSSD
getKeepaliveRaddr	mDNSCore/mDNS.c	/^mDNSlocal void getKeepaliveRaddr(mDNS *const m, AuthRecord *rr, mDNSAddr *raddr)$/;"	f
getKey	mDNSShared/Java/TXTRecord.java	/^	public String	getKey( int index)$/;"	m	class:TXTRecord
getKeychainItemInfo	mDNSMacOSX/helper.c	/^getKeychainItemInfo(SecKeychainItemRef item,$/;"	f	file:
getMACAddress	mDNSMacOSX/helper.c	/^static int getMACAddress(int family, v6addr_t raddr, v6addr_t gaddr, int *gfamily, ethaddr_t eth)$/;"	f	file:
getMessage	mDNSShared/Java/DNSSD.java	/^	public String				getMessage()$/;"	m	class:AppleDNSSDException
getNameForIfIndex	mDNSShared/Java/DNSSD.java	/^	public static String	getNameForIfIndex( int ifIndex)$/;"	m	class:DNSSD
getNthDomain	Clients/Java/BrowserApp.java	/^	public String	getNthDomain( int n)$/;"	m	class:BrowserListModel
getNthInterface	Clients/Java/BrowserApp.java	/^	public int		getNthInterface( int n)$/;"	m	class:BrowserListModel
getNthRegType	Clients/Java/BrowserApp.java	/^	public String	getNthRegType( int n)$/;"	m	class:BrowserListModel
getNthServiceName	Clients/Java/BrowserApp.java	/^	public String	getNthServiceName( int n)$/;"	m	class:BrowserListModel
getPoolTicket	mDNSMacOSX/P2PPacketFilter.c	/^static int getPoolTicket( int devFD, u_int32_t * outPoolTicket )$/;"	f	file:
getPrimaryServiceName	mDNSCore/mDNS.c	/^mDNSlocal const domainname *getPrimaryServiceName(const domainname *domainName)$/;"	f
getQuestion	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *getQuestion(const DNSMessage *msg, const mDNSu8 *ptr, const mDNSu8 *end, const mDNSInterfaceID InterfaceID,$/;"	f
getRawBytes	mDNSShared/Java/TXTRecord.java	/^	public byte[]	getRawBytes() { return (byte[]) fBytes.clone(); }$/;"	m	class:TXTRecord
getTXTRecord	mDNSShared/Java/DNSSD.java	/^	public DNSRecord	getTXTRecord()$/;"	m	class:AppleRegistration
getTXTRecord	mDNSShared/Java/DNSSDRegistration.java	/^	DNSRecord		getTXTRecord()$/;"	m	interface:DNSSDRegistration
getTicket	mDNSMacOSX/P2PPacketFilter.c	/^static int getTicket( int devFD, u_int32_t * outTicket, char * anchorPath )$/;"	f	file:
getValue	mDNSShared/Java/TXTRecord.java	/^	public byte[]	getValue( String forKey)$/;"	m	class:TXTRecord
getValue	mDNSShared/Java/TXTRecord.java	/^	public byte[]	getValue( int index)$/;"	m	class:TXTRecord
getValueAsString	mDNSShared/Java/TXTRecord.java	/^	public String	getValueAsString( String forKey)$/;"	m	class:TXTRecord
getValueAsString	mDNSShared/Java/TXTRecord.java	/^	public String	getValueAsString( int index)$/;"	m	class:TXTRecord
get_error_code	mDNSShared/dnssd_ipc.h	202;"	d
get_flags	mDNSShared/dnssd_ipc.h	199;"	d
get_ifi_info	mDNSPosix/mDNSUNP.c	/^struct ifi_info *get_ifi_info(int family, int doaliases)$/;"	f
get_ifi_info_linuxv6	mDNSPosix/mDNSUNP.c	/^struct ifi_info *get_ifi_info_linuxv6(int family, int doaliases)$/;"	f
get_next_word	mDNSPosix/nss_mdns.c	/^get_next_word (char * input, char **next)$/;"	f	file:
get_rdata	mDNSShared/dnssd_ipc.c	/^const char *get_rdata(const char **ptr, const char *end, int rdlen)$/;"	f
get_string	mDNSShared/dnssd_ipc.c	/^int get_string(const char **ptr, const char *const end, char *buffer, int buflen)$/;"	f
get_uint16	mDNSShared/dnssd_ipc.c	/^uint16_t get_uint16(const char **ptr, const char *end)$/;"	f
get_uint32	mDNSShared/dnssd_ipc.c	/^uint32_t get_uint32(const char **ptr, const char *end)$/;"	f
getfirstoption	Clients/dns-sd.c	/^static int getfirstoption(int argc, char **argv, const char *optstr, int *pOptInd)$/;"	f	file:
getifaddrs	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^int getifaddrs( struct ifaddrs **outAddrs )$/;"	f
getifaddrs	mDNSWindows/mDNSWin32.c	/^mDNSlocal int	getifaddrs( struct ifaddrs **outAddrs )$/;"	f
getifaddrs_ipv4	mDNSWindows/mDNSWin32.c	/^mDNSlocal int	getifaddrs_ipv4( struct ifaddrs **outAddrs )$/;"	f
getifaddrs_ipv6	mDNSWindows/mDNSWin32.c	/^mDNSlocal int	getifaddrs_ipv6( struct ifaddrs **outAddrs )$/;"	f
getip	Clients/dns-sd.c	/^static void getip(const char *const name, struct sockaddr_storage *result)$/;"	f	file:
getpid	Clients/dns-sd.c	82;"	d	file:
getpid	mDNSShared/dnssd_ipc.h	50;"	d
getpid	mDNSWindows/PosixCompat.h	30;"	d
getpid_request	mDNSShared/dnssd_ipc.h	/^    getpid_request,$/;"	e	enum:__anon109
getproperty_reply_op	mDNSShared/dnssd_ipc.h	/^    getproperty_reply_op,   \/\/ New in B4W 1.0.4$/;"	e	enum:__anon110
getproperty_request	mDNSShared/dnssd_ipc.h	/^    getproperty_request,    \/\/ New in B4W 1.0.4$/;"	e	enum:__anon109
gettimeofday	mDNSWindows/PosixCompat.c	/^gettimeofday( struct timeval * tv, struct timezone * tz )$/;"	f
gettype	Clients/dns-sd.c	/^static char *gettype(char *buffer, char *typ)$/;"	f	file:
gotresult	mDNSMacOS9/Responder.c	/^    Boolean gotresult;$/;"	m	struct:RegisteredService_struct	file:
h	mDNSMacOS9/mDNSMacOS9.h	/^typedef struct { TOptionHeader h; UInt32 flag; } TSetBooleanOption;$/;"	m	struct:__anon179
h	mDNSMacOS9/mDNSMacOS9.h	/^typedef struct { TOptionHeader h; UInt8 val; } TSetByteOption;$/;"	m	struct:__anon178
h	mDNSMacOS9/mDNSMacOS9.h	/^typedef struct { TOptionHeader h; mDNSv4Addr multicastGroupAddress; mDNSv4Addr InterfaceAddress; } TIPAddMulticastOption;$/;"	m	struct:__anon177
h	mDNSMacOS9/mDNSMacOS9.h	/^typedef union  { TOptionHeader h; TIPAddMulticastOption m; TSetByteOption i; TSetBooleanOption b; } TOptionBlock;$/;"	m	union:__anon180
hSize	mDNSCore/DNSCommon.c	/^    unsigned hSize : 1;$/;"	m	struct:mDNSprintf_format	file:
handle	mDNSMacOSX/mDNSMacOSX.h	/^    cellular_usage_policy_client_t handle;$/;"	m	struct:mDNS_PlatformSupport_struct
handle	mDNSWindows/Poll.c	/^	HANDLE handle;$/;"	m	struct:PollSource_struct	file:
handleLNTDeviceDescriptionResponse	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal void handleLNTDeviceDescriptionResponse(tcpLNTInfo *tcpInfo)$/;"	f
handleLNTGetExternalAddressResponse	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal void handleLNTGetExternalAddressResponse(tcpLNTInfo *tcpInfo)$/;"	f
handleLNTPortMappingResponse	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal void handleLNTPortMappingResponse(tcpLNTInfo *tcpInfo)$/;"	f
handle_add_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_add_request(request_state *request)$/;"	f
handle_addrinfo_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_addrinfo_request(request_state *request)$/;"	f
handle_addrinfo_response	mDNSShared/dnssd_clientstub.c	/^static void handle_addrinfo_response(DNSServiceOp *const sdr, const CallbackHeader *const cbh, const char *data, const char *const end)$/;"	f	file:
handle_browse_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_browse_request(request_state *request)$/;"	f
handle_browse_response	mDNSShared/dnssd_clientstub.c	/^static void handle_browse_response(DNSServiceOp *const sdr, const CallbackHeader *const cbh, const char *data, const char *const end)$/;"	f	file:
handle_cancel_request	mDNSShared/uds_daemon.c	/^mDNSlocal void handle_cancel_request(request_state *request)$/;"	f
handle_connection_delegate_request	mDNSShared/uds_daemon.c	/^mDNSlocal void handle_connection_delegate_request(request_state *request)$/;"	f
handle_dps_request	mDNSMacOSX/Private/xpc_services.c	/^mDNSlocal void handle_dps_request(xpc_object_t req)$/;"	f
handle_dps_terminate	mDNSMacOSX/Private/xpc_services.c	/^mDNSlocal void handle_dps_terminate()$/;"	f
handle_enum_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_enum_request(request_state *request)$/;"	f
handle_enumeration_response	mDNSShared/dnssd_clientstub.c	/^static void handle_enumeration_response(DNSServiceOp *const sdr, const CallbackHeader *const cbh, const char *data, const char *const end)$/;"	f	file:
handle_events	mDNSPosix/nss_mdns.c	/^handle_events (DNSServiceRef sdref, result_map_t * result, const char * str)$/;"	f	file:
handle_getpid_request	mDNSShared/uds_daemon.c	/^mDNSlocal void handle_getpid_request(request_state *request)$/;"	f
handle_getproperty_request	mDNSShared/uds_daemon.c	/^mDNSlocal void handle_getproperty_request(request_state *request)$/;"	f
handle_port_mapping_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_port_mapping_request(request_state *request)$/;"	f
handle_port_mapping_response	mDNSShared/dnssd_clientstub.c	/^static void handle_port_mapping_response(DNSServiceOp *const sdr, const CallbackHeader *const cbh, const char *data, const char *const end)$/;"	f	file:
handle_query_response	mDNSShared/dnssd_clientstub.c	/^static void handle_query_response(DNSServiceOp *const sdr, const CallbackHeader *const cbh, const char *data, const char *const end)$/;"	f	file:
handle_queryrecord_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_queryrecord_request(request_state *request)$/;"	f
handle_reconfirm_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_reconfirm_request(request_state *request)$/;"	f
handle_regrecord_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_regrecord_request(request_state *request)$/;"	f
handle_regservice_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_regservice_request(request_state *request)$/;"	f
handle_regservice_response	mDNSShared/dnssd_clientstub.c	/^static void handle_regservice_response(DNSServiceOp *const sdr, const CallbackHeader *const cbh, const char *data, const char *const end)$/;"	f	file:
handle_release_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_release_request(request_state *request)$/;"	f
handle_removerecord_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_removerecord_request(request_state *request)$/;"	f
handle_resolve_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_resolve_request(request_state *request)$/;"	f
handle_resolve_response	mDNSShared/dnssd_clientstub.c	/^static void handle_resolve_response(DNSServiceOp *const sdr, const CallbackHeader *const cbh, const char *data, const char *end)$/;"	f	file:
handle_setdomain_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_setdomain_request(request_state *request)$/;"	f
handle_sigterm	mDNSMacOSX/helper-main.c	/^static void handle_sigterm(int sig)$/;"	f	file:
handle_unanswered_query	mDNSCore/uDNS.c	/^mDNSlocal void handle_unanswered_query(mDNS *const m)$/;"	f
handle_update_request	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus handle_update_request(request_state *request)$/;"	f
handler	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    ServiceHandlerEntry *       handler;$/;"	m	struct:ResolveInfo
handler	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    ServiceHandlerEntry *       handler;$/;"	m	struct:ServiceInfo
handles	mDNSWindows/Poll.c	/^	HANDLE					handles[ MAXIMUM_WAIT_OBJECTS ];$/;"	m	struct:Worker_struct	file:
handshake	mDNSMacOSX/mDNSMacOSX.h	/^    handshakeStatus handshake;$/;"	m	struct:TCPSocket_struct
handshakeStatus	mDNSMacOSX/mDNSMacOSX.h	/^} handshakeStatus;$/;"	t	typeref:enum:__anon146
handshake_completed	mDNSMacOSX/mDNSMacOSX.h	/^    handshake_completed,$/;"	e	enum:__anon146
handshake_in_progress	mDNSMacOSX/mDNSMacOSX.h	/^    handshake_in_progress,$/;"	e	enum:__anon146
handshake_required	mDNSMacOSX/mDNSMacOSX.h	/^    handshake_required,$/;"	e	enum:__anon146
handshake_thread	mDNSMacOSX/mDNSMacOSX.h	/^    pthread_t handshake_thread;$/;"	m	struct:TCPSocket_struct
handshake_to_be_closed	mDNSMacOSX/mDNSMacOSX.h	/^    handshake_to_be_closed$/;"	e	enum:__anon146
hangup	mDNSShared/dnsextd.c	/^static mDNSBool hangup    = 0;$/;"	v	file:
hardware	mDNSPosix/Identify.c	/^static char hostname[MAX_ESCAPED_DOMAIN_NAME], hardware[256], software[256];$/;"	v	file:
hasAutoCallbacks	mDNSShared/Java/DNSSD.java	/^	static public boolean	hasAutoCallbacks;	\/\/ Set by InitLibrary() to value of AUTO_CALLBACKS$/;"	f	class:AppleDNSSD
havePrecision	mDNSCore/DNSCommon.c	/^    unsigned havePrecision : 1;$/;"	m	struct:mDNSprintf_format	file:
hdr	mDNSShared/uds_daemon.c	/^    ipc_msg_hdr hdr;$/;"	m	struct:request_state	file:
hdr_bytes	mDNSShared/uds_daemon.c	/^    mDNSu32 hdr_bytes;              \/\/ bytes of header already read$/;"	m	struct:request_state	file:
header	mDNSPosix/nss_mdns.c	/^    buf_header_t * header;$/;"	m	struct:result_map	file:
headerPrinted	mDNSMacOS9/Mac OS Test Searcher.c	/^	Boolean headerPrinted;$/;"	m	struct:__anon181	file:
headerPrinted	mDNSMacOS9/Searcher.c	/^    Boolean headerPrinted;$/;"	m	struct:__anon186	file:
helplog	mDNSMacOSX/helper-main.c	/^void helplog(int level, const char *fmt, ...)$/;"	f
helplogv	mDNSMacOSX/helper-main.c	/^static void helplogv(int level, const char *fmt, va_list ap)$/;"	f	file:
hex_digit4	mDNSShared/CommonServices.h	1258;"	d
hex_digit8	mDNSShared/CommonServices.h	1257;"	d
hndlRecordUpdateReply	mDNSCore/uDNS.c	/^mDNSlocal void hndlRecordUpdateReply(mDNS *m, AuthRecord *rr, mStatus err, mDNSu32 random)$/;"	f
hndlSRVChanged	mDNSCore/uDNS.c	/^mDNSlocal void hndlSRVChanged(mDNS *const m, AuthRecord *rr)$/;"	f
host	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    CString host;$/;"	m	struct:ResolveInfo
host	mDNSMacOS9/Searcher.c	/^    char host[kDNSServiceMaxDomainName];$/;"	m	struct:__anon187	file:
host	mDNSShared/dnssd_clientshim.c	/^    domainname host;$/;"	m	struct:__anon118	file:
host	mDNSShared/uds_daemon.c	/^            domainname host;$/;"	m	struct:request_state::__anon124::__anon126	file:
hostField	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.TextBox hostField;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
hostLabel	Clients/Java/BrowserApp.java	/^	JLabel				hostLabel, portLabel;$/;"	f	class:BrowserApp
hostName	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^	std::string		hostName;$/;"	m	struct:ServiceInstanceInfo
hostNameForUpdate	Clients/Java/BrowserApp.java	/^	String				hostNameForUpdate;$/;"	f	class:BrowserApp
hostRegistered	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    mDNSBool hostRegistered;$/;"	m	struct:MDNSInterfaceItem	file:
hostRegistered	mDNSWindows/mDNSWin32.h	/^	mDNSBool					hostRegistered;$/;"	m	struct:mDNSInterfaceData
hostSet	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    NetworkInterfaceInfo hostSet;$/;"	m	struct:MDNSInterfaceItem	file:
hostaddr	mDNSPosix/Identify.c	/^static mDNSAddr lastsrc, hostaddr, target;$/;"	v	file:
hostent	mDNSPosix/nss_mdns.c	/^    hostent * hostent;$/;"	m	struct:result_map	file:
hostent	mDNSPosix/nss_mdns.c	/^typedef struct hostent hostent;$/;"	t	typeref:struct:hostent	file:
hostlabel	mDNSCore/mDNSEmbeddedAPI.h	/^    domainlabel hostlabel;              \/\/ Conforms to RFC 1034 "letter-digit-hyphen" ARPANET host name rules$/;"	m	struct:mDNS_struct
hostlabel	mDNSPosix/ProxyResponder.c	/^    domainlabel hostlabel;      \/\/ Conforms to standard DNS letter-digit-hyphen host name rules$/;"	m	struct:__anon21	file:
hostname	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString hostname;$/;"	m	struct:PrinterSetupWizard::Service
hostname	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname hostname;$/;"	m	struct:DomainAuthInfo
hostname	mDNSMacOSX/mDNSMacOSX.h	/^    domainname hostname;$/;"	m	struct:TCPSocket_struct
hostname	mDNSPosix/Identify.c	/^static char hostname[MAX_ESCAPED_DOMAIN_NAME], hardware[256], software[256];$/;"	v	file:
hostname	mDNSPosix/NetMonitor.c	/^    domainname hostname;$/;"	m	struct:__anon19	file:
hostname	mDNSPosix/nss_mdns.c	/^    char hostname [k_hostname_maxlen + 1];$/;"	m	struct:buf_header	file:
hostnameGetPublicAddressCallback	mDNSCore/uDNS.c	/^mDNSlocal void hostnameGetPublicAddressCallback(mDNS *m, NATTraversalInfo *n)$/;"	f
hosts	mDNSPosix/NetMonitor.c	/^    HostEntry   *hosts;$/;"	m	struct:__anon20	file:
http	mDNSMacOS9/Mac OS Test Responder.c	/^static ServiceRecordSet p1, p2, afp, http, njp;$/;"	v	file:
http	mDNSMacOS9/Responder.c	/^static RegisteredService p1, p2, afp, http, njp;$/;"	v	file:
httpConnectEncrypt	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^httpConnectEncryptFunc httpConnectEncrypt;$/;"	m	class:CPrinterSetupWizardSheet::CUPSLibrary
httpConnectEncryptFunc	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^typedef void*               ( *httpConnectEncryptFunc )( const char* host, int port, http_encryption_t encryption );$/;"	t	class:CPrinterSetupWizardSheet
http_encryption_e	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^typedef enum http_encryption_e          \/**** HTTP encryption values ****\/$/;"	g	class:CPrinterSetupWizardSheet
http_encryption_t	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^} http_encryption_t;$/;"	t	class:CPrinterSetupWizardSheet	typeref:enum:CPrinterSetupWizardSheet::http_encryption_e
i	mDNSMacOS9/Mac OS Test Searcher.c	/^typedef struct { ServiceInfo i; mDNSBool add; mDNSBool dom; OTLink link; } linkedServiceInfo;$/;"	m	struct:__anon182	file:
i	mDNSMacOS9/mDNSMacOS9.h	/^typedef union  { TOptionHeader h; TIPAddMulticastOption m; TSetByteOption i; TSetBooleanOption b; } TOptionBlock;$/;"	m	union:__anon180
i	mDNSMacOSX/daemon.c	/^    ServiceInfo i;$/;"	m	struct:DNSServiceResolver_struct	file:
iOSVers	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int OSXVers, iOSVers;$/;"	v
i_mcount	mDNSShared/uds_daemon.c	/^static mDNSu32 i_mcount;   \/\/ sets mcount when McastLogging is enabled(PROF signal is sent)$/;"	v	file:
id	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSOpaque64 id;$/;"	m	struct:DNSQuestion_struct
id	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSOpaque64 id;$/;"	m	struct:__anon53
id	mDNSPosix/Identify.c	/^static mDNSOpaque16 lastid, id;$/;"	v	file:
id	mDNSShared/dnsextd.h	/^    mDNSOpaque64 id;$/;"	m	struct:LLQEntry
id	mDNSWindows/Poll.c	/^	unsigned				id;			\/\/ 0 for main worker$/;"	m	struct:Worker_struct	file:
idletimer	mDNSMacOSX/helper-main.c	/^static void *idletimer(void *context)$/;"	f	file:
idletimer_thread	mDNSMacOSX/helper-main.c	/^static pthread_t idletimer_thread;$/;"	v	file:
ifIP	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	DNSNetworkAddress		ifIP;$/;"	m	struct:DomainEventInfo	file:
ifIP	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	DNSNetworkAddress		ifIP;$/;"	m	struct:ServiceEventInfo	file:
ifIP	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^	std::string		ifIP;$/;"	m	struct:ServiceInstanceInfo
if_indextoname	Clients/dns-sd.c	93;"	d	file:
if_indextoname	mDNSShared/Java/JNISupport.c	51;"	d	file:
if_indextoname	mDNSWindows/PosixCompat.c	/^if_indextoname( unsigned ifindex, char * ifname )$/;"	f
if_indextoname_funcptr_t	Clients/dns-sd.c	/^typedef PCHAR (WINAPI * if_indextoname_funcptr_t)(ULONG index, PCHAR name);$/;"	t	file:
if_indextoname_funcptr_t	mDNSWindows/PosixCompat.c	/^typedef PCHAR (WINAPI * if_indextoname_funcptr_t)(ULONG index, PCHAR name);$/;"	t	file:
if_indextoname_win	Clients/dns-sd.c	/^char * if_indextoname_win( unsigned ifindex, char *ifname)$/;"	f
if_nametoindex	Clients/dns-sd.c	92;"	d	file:
if_nametoindex	mDNSShared/Java/JNISupport.c	52;"	d	file:
if_nametoindex	mDNSWindows/PosixCompat.c	/^if_nametoindex( const char * ifname )$/;"	f
if_nametoindex_funcptr_t	Clients/dns-sd.c	/^typedef ULONG (WINAPI * if_nametoindex_funcptr_t)(PCSTR name);$/;"	t	file:
if_nametoindex_funcptr_t	mDNSWindows/PosixCompat.c	/^typedef ULONG (WINAPI * if_nametoindex_funcptr_t)(PCSTR name);$/;"	t	file:
if_nametoindex_win	Clients/dns-sd.c	/^unsigned if_nametoindex_win(const char *ifname)$/;"	f
ifa_addr	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    struct sockaddr *   ifa_addr;$/;"	m	struct:ifaddrs	typeref:struct:ifaddrs::sockaddr
ifa_addr	mDNSWindows/mDNSWin32.h	/^	struct sockaddr	*	ifa_addr;$/;"	m	struct:ifaddrs	typeref:struct:ifaddrs::sockaddr
ifa_broadaddr	mDNSWindows/mDNSWin32.h	/^	struct sockaddr	*	ifa_broadaddr;$/;"	m	struct:ifaddrs	typeref:struct:ifaddrs::sockaddr
ifa_data	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    void *              ifa_data;$/;"	m	struct:ifaddrs
ifa_data	mDNSWindows/mDNSWin32.h	/^	void *				ifa_data;$/;"	m	struct:ifaddrs
ifa_dhcpEnabled	mDNSWindows/mDNSWin32.h	/^	BOOL				ifa_dhcpEnabled;$/;"	m	struct:ifaddrs
ifa_dhcpLeaseExpires	mDNSWindows/mDNSWin32.h	/^	time_t				ifa_dhcpLeaseExpires;$/;"	m	struct:ifaddrs
ifa_dstaddr	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    struct sockaddr *   ifa_dstaddr;$/;"	m	struct:ifaddrs	typeref:struct:ifaddrs::sockaddr
ifa_dstaddr	mDNSWindows/mDNSWin32.h	/^	struct sockaddr	*	ifa_dstaddr;$/;"	m	struct:ifaddrs	typeref:struct:ifaddrs::sockaddr
ifa_extra	mDNSWindows/mDNSWin32.h	/^	}	ifa_extra;$/;"	m	struct:ifaddrs	typeref:struct:ifaddrs::__anon10
ifa_flags	mDNSMacOSX/mDNSMacOSX.h	/^    unsigned int ifa_flags;$/;"	m	struct:NetworkInterfaceInfoOSX_struct
ifa_flags	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    u_int ifa_flags;$/;"	m	struct:ifaddrs
ifa_flags	mDNSWindows/mDNSWin32.h	/^	u_int				ifa_flags;$/;"	m	struct:ifaddrs
ifa_name	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    char *              ifa_name;$/;"	m	struct:ifaddrs
ifa_name	mDNSWindows/mDNSWin32.h	/^	char *				ifa_name;$/;"	m	struct:ifaddrs
ifa_netmask	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    struct sockaddr *   ifa_netmask;$/;"	m	struct:ifaddrs	typeref:struct:ifaddrs::sockaddr
ifa_netmask	mDNSWindows/mDNSWin32.h	/^	struct sockaddr	*	ifa_netmask;$/;"	m	struct:ifaddrs	typeref:struct:ifaddrs::sockaddr
ifa_next	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    struct ifaddrs *    ifa_next;$/;"	m	struct:ifaddrs	typeref:struct:ifaddrs::ifaddrs
ifa_next	mDNSWindows/mDNSWin32.h	/^	struct ifaddrs *	ifa_next;$/;"	m	struct:ifaddrs	typeref:struct:ifaddrs::ifaddrs
ifa_physaddr	mDNSWindows/mDNSWin32.h	/^	BYTE				ifa_physaddr[6];$/;"	m	struct:ifaddrs
ifa_v4addr	mDNSMacOSX/mDNSMacOSX.h	/^    struct in_addr ifa_v4addr;$/;"	m	struct:NetworkInterfaceInfoOSX_struct	typeref:struct:NetworkInterfaceInfoOSX_struct::in_addr
ifa_womp	mDNSWindows/mDNSWin32.h	/^	mDNSu8				ifa_womp;$/;"	m	struct:ifaddrs
ifaddrs	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^struct ifaddrs$/;"	s
ifaddrs	mDNSWindows/mDNSWin32.h	/^struct ifaddrs$/;"	s
ifd	mDNSWindows/mDNSWin32.h	/^	struct mDNSInterfaceData	*ifd;$/;"	m	struct:UDPSocket_struct	typeref:struct:UDPSocket_struct::mDNSInterfaceData
ifi	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    uint32_t ifi;$/;"	m	struct:ResolveInfo
ifi	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    uint32_t ifi;$/;"	m	struct:ServiceInfo
ifi	Clients/PrinterSetupWizard/UtilTypes.h	/^    uint32_t ifi;$/;"	m	struct:PrinterSetupWizard::Service
ifi	mDNSShared/uds_daemon.c	/^    mDNSu32 ifi;                    \/\/ Note: This field is in NETWORK byte order$/;"	m	struct:__anon132	file:
ifi_addr	mDNSPosix/mDNSUNP.h	/^    struct sockaddr  *ifi_addr; \/* primary address *\/$/;"	m	struct:ifi_info	typeref:struct:ifi_info::sockaddr
ifi_brdaddr	mDNSPosix/mDNSUNP.h	/^    struct sockaddr  *ifi_brdaddr; \/* broadcast address *\/$/;"	m	struct:ifi_info	typeref:struct:ifi_info::sockaddr
ifi_dstaddr	mDNSPosix/mDNSUNP.h	/^    struct sockaddr  *ifi_dstaddr; \/* destination address *\/$/;"	m	struct:ifi_info	typeref:struct:ifi_info::sockaddr
ifi_flags	mDNSPosix/mDNSUNP.h	/^    short ifi_flags;            \/* IFF_xxx constants from <net\/if.h> *\/$/;"	m	struct:ifi_info
ifi_haddr	mDNSPosix/mDNSUNP.h	/^    u_char ifi_haddr[IFI_HADDR]; \/* hardware address *\/$/;"	m	struct:ifi_info
ifi_hlen	mDNSPosix/mDNSUNP.h	/^    u_short ifi_hlen;           \/* #bytes in hardware address: 0, 6, 8 *\/$/;"	m	struct:ifi_info
ifi_index	mDNSPosix/mDNSUNP.h	/^    int ifi_index;              \/* interface index *\/$/;"	m	struct:ifi_info
ifi_info	mDNSPosix/mDNSUNP.h	/^struct ifi_info {$/;"	s
ifi_myflags	mDNSPosix/mDNSUNP.h	/^    short ifi_myflags;          \/* our own IFI_xxx flags *\/$/;"	m	struct:ifi_info
ifi_name	mDNSPosix/mDNSUNP.h	/^    char ifi_name[IFI_NAME];    \/* interface name, null terminated *\/$/;"	m	struct:ifi_info
ifi_netmask	mDNSPosix/mDNSUNP.h	/^    struct sockaddr  *ifi_netmask;$/;"	m	struct:ifi_info	typeref:struct:ifi_info::sockaddr
ifi_next	mDNSPosix/mDNSUNP.h	/^    struct ifi_info  *ifi_next; \/* next of these structures *\/$/;"	m	struct:ifi_info	typeref:struct:ifi_info::ifi_info
ifinfo	mDNSMacOSX/mDNSMacOSX.h	/^    NetworkInterfaceInfo ifinfo;                \/\/ MUST be the first element in this structure$/;"	m	struct:NetworkInterfaceInfoOSX_struct
ifinfo	mDNSVxWorks/mDNSVxWorks.h	/^    NetworkInterfaceInfo ifinfo;                    \/\/ MUST be the first element in this structure.$/;"	m	struct:NetworkInterfaceInfoVxWorks
ifname	mDNSCore/mDNSEmbeddedAPI.h	/^    char ifname[64];                    \/\/ Windows uses a GUID string for the interface name, which doesn't fit in 16 bytes$/;"	m	struct:NetworkInterfaceInfo_struct
ifr_wake_flags	mDNSMacOSX/mDNSMacOSX.c	3838;"	d	file:
imsg	mDNSCore/mDNSEmbeddedAPI.h	/^    union { DNSMessage m; void *p; } imsg;  \/\/ Incoming message received from wire$/;"	m	struct:mDNS_struct	typeref:union:mDNS_struct::__anon93
inMDNS	mDNSWindows/mDNSWin32.c	/^	mDNS					*inMDNS;$/;"	m	struct:MulticastWakeupStruct	file:
in_cksum	mDNSMacOSX/helper.c	/^in_cksum(unsigned short *ptr,int nbytes)$/;"	f
inactiveInterfaceList	mDNSWindows/mDNSWin32.h	/^	mDNSInterfaceData *			inactiveInterfaceList;$/;"	m	struct:mDNS_PlatformSupport_struct
includeP2PWithIndexAny	mDNSShared/dnssd_clientstub.c	/^static int includeP2PWithIndexAny()$/;"	f	file:
index	mDNSPosix/mDNSPosix.h	/^    int index;$/;"	m	struct:PosixNetworkInterface
index	mDNSShared/Java/JNISupport.c	63;"	d	file:
index	mDNSShared/Java/JNISupport.c	65;"	d	file:
index	mDNSWindows/mDNSWin32.h	/^		uint32_t		index;$/;"	m	struct:ifaddrs::__anon10
index	mDNSWindows/mDNSWin32.h	/^	uint32_t					index;$/;"	m	struct:mDNSInterfaceData
inet_pton	mDNSMacOSX/LegacyNATTraversal.c	/^inet_pton( int family, const char * addr, void * dst )$/;"	f	file:
inet_pton	mDNSWindows/PosixCompat.c	/^inet_pton( int family, const char * addr, void * dst )$/;"	f
infFileName	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString infFileName;$/;"	m	struct:PrinterSetupWizard::Model
infFileName	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString infFileName;$/;"	m	struct:PrinterSetupWizard::Printer
info	mDNSCore/mDNSEmbeddedAPI.h	/^    ServiceInfo                  *info;$/;"	m	struct:ServiceInfoQuery_struct
info	mDNSVxWorks/mDNSVxWorks.h	/^    NetworkInterfaceInfoVxWorks *       info;$/;"	m	struct:SocketSet
initBonjourRule	mDNSMacOSX/P2PPacketFilter.c	/^static void initBonjourRule( struct pfioc_rule * pr,$/;"	f	file:
initErr	mDNSVxWorks/mDNSVxWorks.h	/^    mStatus initErr;$/;"	m	struct:mDNS_PlatformSupport_struct
initEvent	mDNSVxWorks/mDNSVxWorks.h	/^    SEM_ID initEvent;$/;"	m	struct:mDNS_PlatformSupport_struct
initOutboundTCPRule	mDNSMacOSX/P2PPacketFilter.c	/^static void initOutboundTCPRule( struct pfioc_rule * pr,$/;"	f	file:
initPortRule	mDNSMacOSX/P2PPacketFilter.c	/^static void initPortRule( struct pfioc_rule * pr,$/;"	f	file:
initRuleHeader	mDNSMacOSX/P2PPacketFilter.c	/^static void initRuleHeader( struct pfioc_rule * pr,$/;"	f	file:
init_config	mDNSPosix/nss_mdns.c	/^init_config ()$/;"	f
init_dnsproxy_service	mDNSMacOSX/Private/xpc_services.c	/^mDNSlocal void init_dnsproxy_service(void)$/;"	f
init_result	mDNSPosix/nss_mdns.c	/^init_result ($/;"	f	file:
initializeDeviceInfoTXT	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSu32 initializeDeviceInfoTXT(mDNS *m, mDNSu8 *ptr)$/;"	f
initialize_id	mDNSMacOSX/helper-main.c	/^static void initialize_id(void)$/;"	f	file:
initialize_logging	mDNSMacOSX/helper-main.c	/^static void initialize_logging(void)$/;"	f	file:
initialize_timer	mDNSMacOSX/helper-main.c	/^static int initialize_timer()$/;"	f	file:
inline_compat	mDNSShared/CommonServices.h	549;"	d
inline_compat	mDNSShared/CommonServices.h	551;"	d
inputField	Clients/Java/SimpleChat.java	/^	JTextField			inputField;			\/\/ Holds a pending chat response$/;"	f	class:SimpleChat
insert	mDNSShared/Java/TXTRecord.java	/^	protected void	insert( byte[] keyBytes, byte[] value, int index)$/;"	m	class:TXTRecord
installed	Clients/PrinterSetupWizard/UtilTypes.h	/^    bool installed;$/;"	m	struct:PrinterSetupWizard::Printer
instanceHandle	mDNSMacOSX/mDNSMacOSX.c	/^    D2DServiceInstance       instanceHandle;$/;"	m	struct:D2DRecordListElem	file:
instances	mDNSShared/uds_daemon.c	/^            service_instance *instances;$/;"	m	struct:request_state::__anon124::__anon126	file:
int16_t	mDNSShared/CommonServices.h	/^typedef INT16 int16_t;$/;"	t
int16_t	mDNSShared/dns_sd.h	/^typedef INT16 int16_t;$/;"	t
int32_t	mDNSShared/CommonServices.h	/^typedef INT32 int32_t;$/;"	t
int32_t	mDNSShared/dns_sd.h	/^typedef INT32 int32_t;$/;"	t
int64_t	mDNSShared/CommonServices.h	/^typedef __int64 int64_t;$/;"	t
int64_t	mDNSShared/CommonServices.h	/^typedef long long int64_t;$/;"	t
int8_t	mDNSShared/CommonServices.h	/^typedef INT8 int8_t;$/;"	t
int8_t	mDNSShared/dns_sd.h	/^typedef INT8 int8_t;$/;"	t
int_fast16_t	mDNSShared/CommonServices.h	/^typedef int16_t int_fast16_t;$/;"	t
int_fast32_t	mDNSShared/CommonServices.h	/^typedef int32_t int_fast32_t;$/;"	t
int_fast64_t	mDNSShared/CommonServices.h	/^typedef int64_t int_fast64_t;$/;"	t
int_fast8_t	mDNSShared/CommonServices.h	/^typedef int8_t int_fast8_t;$/;"	t
int_least16_t	mDNSShared/CommonServices.h	/^typedef int16_t int_least16_t;$/;"	t
int_least32_t	mDNSShared/CommonServices.h	/^typedef int32_t int_least32_t;$/;"	t
int_least64_t	mDNSShared/CommonServices.h	/^typedef int64_t int_least64_t;$/;"	t
int_least8_t	mDNSShared/CommonServices.h	/^typedef int8_t int_least8_t;$/;"	t
interface	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID interface;  \/\/ DNS requests should be sent on this interface$/;"	m	struct:DNSServer
interface	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSInterfaceID interface;$/;"	m	struct:McastResolver
interface	mDNSMacOS9/mDNSMacOS9.h	/^    NetworkInterfaceInfo interface;$/;"	m	struct:mDNS_PlatformSupport_struct
interfaceCount	mDNSWindows/mDNSWin32.h	/^	int							interfaceCount;$/;"	m	struct:mDNS_PlatformSupport_struct
interfaceID	mDNSCore/dnsproxy.c	/^    mDNSInterfaceID interfaceID;    \/\/ Interface on which we received the request$/;"	m	struct:DNSProxyClient_struct	file:
interfaceInfo	mDNSWindows/mDNSWin32.h	/^	NetworkInterfaceInfo		interfaceInfo;$/;"	m	struct:mDNSInterfaceData
interfaceList	mDNSVxWorks/mDNSVxWorks.h	/^    NetworkInterfaceInfoVxWorks *       interfaceList;$/;"	m	struct:mDNS_PlatformSupport_struct
interfaceList	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    MDNSInterfaceItem *     interfaceList;$/;"	m	struct:mDNS_PlatformSupport_struct
interfaceList	mDNSWindows/mDNSWin32.h	/^	mDNSInterfaceData *			interfaceList;$/;"	m	struct:mDNS_PlatformSupport_struct
interface_id	mDNSShared/uds_daemon.c	/^            mDNSInterfaceID interface_id;$/;"	m	struct:request_state::__anon124::__anon125	file:
interface_id	mDNSShared/uds_daemon.c	/^            mDNSInterfaceID interface_id;$/;"	m	struct:request_state::__anon124::__anon127	file:
internal_DNSServiceBrowserReply_rpc	mDNSMacOSX/DNSServiceDiscovery.c	/^kern_return_t internal_DNSServiceBrowserReply_rpc$/;"	f
internal_DNSServiceDomainEnumerationReply_rpc	mDNSMacOSX/DNSServiceDiscovery.c	/^kern_return_t internal_DNSServiceDomainEnumerationReply_rpc$/;"	f
internal_DNSServiceRegistrationReply_rpc	mDNSMacOSX/DNSServiceDiscovery.c	/^kern_return_t internal_DNSServiceRegistrationReply_rpc$/;"	f
internal_DNSServiceResolverReply_rpc	mDNSMacOSX/DNSServiceDiscovery.c	/^kern_return_t internal_DNSServiceResolverReply_rpc$/;"	f
intfName	mDNSPosix/mDNSPosix.h	/^    const char *            intfName;$/;"	m	struct:PosixNetworkInterface
intptr_t	mDNSShared/CommonServices.h	/^typedef long int intptr_t;$/;"	t
ip	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr ip;                        \/\/ Remote (destination) IP address where this service can be accessed$/;"	m	struct:__anon86
ip	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr ip;                        \/\/ The IPv4 or IPv6 address to advertise$/;"	m	struct:NetworkInterfaceInfo_struct
ip	mDNSCore/mDNSEmbeddedAPI.h	/^    union { mDNSv6Addr v6; mDNSv4Addr v4; } ip;$/;"	m	struct:__anon37	typeref:union:__anon37::__anon38
ip	mDNSPosix/ProxyResponder.c	/^    mDNSv4Addr ip;$/;"	m	struct:__anon21	file:
ip	mDNSVxWorks/mDNSVxWorks.c	/^    mDNSAddr ip;$/;"	m	struct:mDNSPlatformInterfaceInfo	file:
ip	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    mDNSAddr ip;$/;"	m	struct:mDNSPlatformInterfaceInfo	file:
ip	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^	std::string		ip;$/;"	m	struct:ServiceInstanceInfo
ip	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.h	/^			CString		ip;$/;"	m	struct:BrowserDialog::BrowserEntry
ip	mDNSWindows/mDNSWin32.c	/^	mDNSAddr			ip;$/;"	m	struct:mDNSPlatformInterfaceInfo	file:
ipaddr	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr    ipaddr;$/;"	m	struct:__anon48
ipc_hdr	mDNSShared/dnssd_clientstub.c	/^    ipc_msg_hdr ipc_hdr;$/;"	m	struct:__anon138	file:
ipi_addr	mDNSPosix/mDNSUNP.h	/^    struct sockaddr_storage ipi_addr;$/;"	m	struct:my_in_pktinfo	typeref:struct:my_in_pktinfo::sockaddr_storage
ipi_ifindex	mDNSPosix/mDNSUNP.h	/^    int ipi_ifindex;                                \/* received interface index *\/$/;"	m	struct:my_in_pktinfo
ipi_ifname	mDNSPosix/mDNSUNP.h	/^    char ipi_ifname[IFI_NAME];                      \/* received interface name  *\/$/;"	m	struct:my_in_pktinfo
ipsec_check_keylen	mDNSMacOSX/pfkey.c	/^ipsec_check_keylen(supported, alg_id, keylen)$/;"	f
ipsec_check_keylen2	mDNSMacOSX/pfkey.c	/^ipsec_check_keylen2(satype, alg_id, keylen)$/;"	f
ipsec_get_keylen	mDNSMacOSX/pfkey.c	/^ipsec_get_keylen(supported, alg_id, alg0)$/;"	f
ipsec_policy_t	mDNSMacOSX/helper.c	/^typedef struct sadb_x_policy *ipsec_policy_t;$/;"	t	typeref:struct:sadb_x_policy	file:
ipsec_supported	mDNSMacOSX/pfkey.c	/^static struct sadb_supported *ipsec_supported[] = { NULL, NULL, NULL, };$/;"	v	typeref:struct:sadb_supported	file:
ipv4	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv4Addr ipv4;        \/\/ For 'A' record$/;"	m	union:__anon57
ipv4	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv4Addr ipv4;        \/\/ For 'A' record$/;"	m	union:__anon58
ipv6	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv6Addr ipv6;        \/\/ For 'AAAA' record$/;"	m	union:__anon57
ipv6	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv6Addr ipv6;        \/\/ For 'AAAA' record$/;"	m	union:__anon58
isCUPSPrinter	Clients/PrinterSetupWizard/UtilTypes.h	/^    bool isCUPSPrinter;$/;"	m	struct:PrinterSetupWizard::Printer
isZonePublic	mDNSShared/dnsextd.h	/^    mDNSBool isZonePublic;$/;"	m	struct:__anon114
is_applicable_addr	mDNSPosix/nss_mdns.c	/^is_applicable_addr ($/;"	f	file:
is_applicable_name	mDNSPosix/nss_mdns.c	/^is_applicable_name ($/;"	f	file:
islocal	mDNSPosix/nss_mdns.c	/^islocal (const char * name)$/;"	f
isoLangCode	mDNSWindows/loclibrary.c	/^static char isoLangCode[LANG_CODE_LEN + 1] = "";$/;"	v	file:
item	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    HTREEITEM item;$/;"	m	struct:ServiceInfo
item	Clients/PrinterSetupWizard/UtilTypes.h	/^    HTREEITEM item;$/;"	m	struct:PrinterSetupWizard::Printer
itemStateChanged	Clients/Java/SimpleChat.java	/^	public void		itemStateChanged( ItemEvent e) 	\/\/ invoked when Target selection changes$/;"	m	class:SimpleChat
kAWDLReconfirmTime	mDNSMacOSX/mDNSMacOSX.c	8417;"	d	file:
kAddLinkMulticastOption	mDNSMacOS9/mDNSMacOS9.c	/^static const TIPAddMulticastOption kAddLinkMulticastOption  =$/;"	v	file:
kAlreadyCanceledErr	mDNSShared/CommonServices.h	1060;"	d
kAlreadyInitializedErr	mDNSShared/CommonServices.h	1055;"	d
kAttrSep	mDNSShared/Java/TXTRecord.java	/^	static final protected byte		kAttrSep = '=';$/;"	f	class:TXTRecord
kAuthenticationErr	mDNSShared/CommonServices.h	1090;"	d
kBackoffErr	mDNSShared/CommonServices.h	1096;"	d
kBadReferenceErr	mDNSShared/CommonServices.h	1076;"	d
kBusyErr	mDNSShared/CommonServices.h	1098;"	d
kCanceledErr	mDNSShared/CommonServices.h	1059;"	d
kCannotCancelErr	mDNSShared/CommonServices.h	1061;"	d
kChatExampleRegType	Clients/Java/SimpleChat.java	/^	static final String	kChatExampleRegType = "_p2pchat._udp";$/;"	f	class:SimpleChat
kChecksumErr	mDNSShared/CommonServices.h	1049;"	d
kChooserListDefaultIPColumnWidth	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	72;"	d	file:
kChooserListDefaultNameColumnWidth	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	71;"	d	file:
kChooserMenuIndexFile	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	kChooserMenuIndexFile	= 0, $/;"	e	enum:__anon13	file:
kChooserMenuIndexHelp	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	kChooserMenuIndexHelp	= 1 $/;"	e	enum:__anon13	file:
kCollisionErr	mDNSShared/CommonServices.h	1095;"	d
kCommandErr	mDNSShared/CommonServices.h	1043;"	d
kConnectionErr	mDNSShared/CommonServices.h	1089;"	d
kDNSClass_CH	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSClass_CH               = 3,     \/\/ CHAOS$/;"	e	enum:__anon29
kDNSClass_CS	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSClass_CS               = 2,     \/\/ CSNET$/;"	e	enum:__anon29
kDNSClass_HS	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSClass_HS               = 4,     \/\/ Hesiod$/;"	e	enum:__anon29
kDNSClass_IN	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSClass_IN               = 1,     \/\/ Internet$/;"	e	enum:__anon29
kDNSClass_Mask	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSClass_Mask             = 0x7FFF, \/\/ Multicast DNS uses the bottom 15 bits to identify the record class...$/;"	e	enum:__anon29
kDNSClass_NONE	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSClass_NONE             = 254,   \/\/ Used in DNS UPDATE [RFC 2136]$/;"	e	enum:__anon29
kDNSClass_UniqueRRSet	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSClass_UniqueRRSet      = 0x8000, \/\/ ... and the top bit indicates that all other cached records are now invalid$/;"	e	enum:__anon29
kDNSDaemonEngaged	mDNSMacOSX/Private/dns_xpc.h	/^    kDNSDaemonEngaged $/;"	e	enum:__anon162
kDNSDaemonReply	mDNSMacOSX/Private/dns_xpc.h	25;"	d
kDNSFlag0_AA	mDNSCore/DNSCommon.h	/^    kDNSFlag0_AA          = 0x04,       \/\/ Authoritative Answer?$/;"	e	enum:__anon106
kDNSFlag0_OP_Iquery	mDNSCore/DNSCommon.h	/^    kDNSFlag0_OP_Iquery   = 0x08,$/;"	e	enum:__anon106
kDNSFlag0_OP_Mask	mDNSCore/DNSCommon.h	/^    kDNSFlag0_OP_Mask     = 0x78,       \/\/ Operation type$/;"	e	enum:__anon106
kDNSFlag0_OP_Notify	mDNSCore/DNSCommon.h	/^    kDNSFlag0_OP_Notify   = 0x20,$/;"	e	enum:__anon106
kDNSFlag0_OP_Status	mDNSCore/DNSCommon.h	/^    kDNSFlag0_OP_Status   = 0x10,$/;"	e	enum:__anon106
kDNSFlag0_OP_StdQuery	mDNSCore/DNSCommon.h	/^    kDNSFlag0_OP_StdQuery = 0x00,$/;"	e	enum:__anon106
kDNSFlag0_OP_Unused3	mDNSCore/DNSCommon.h	/^    kDNSFlag0_OP_Unused3  = 0x18,$/;"	e	enum:__anon106
kDNSFlag0_OP_Update	mDNSCore/DNSCommon.h	/^    kDNSFlag0_OP_Update   = 0x28,$/;"	e	enum:__anon106
kDNSFlag0_QROP_Mask	mDNSCore/DNSCommon.h	/^    kDNSFlag0_QROP_Mask   = kDNSFlag0_QR_Mask | kDNSFlag0_OP_Mask,$/;"	e	enum:__anon106
kDNSFlag0_QR_Mask	mDNSCore/DNSCommon.h	/^    kDNSFlag0_QR_Mask     = 0x80,       \/\/ Query or response?$/;"	e	enum:__anon106
kDNSFlag0_QR_Query	mDNSCore/DNSCommon.h	/^    kDNSFlag0_QR_Query    = 0x00,$/;"	e	enum:__anon106
kDNSFlag0_QR_Response	mDNSCore/DNSCommon.h	/^    kDNSFlag0_QR_Response = 0x80,$/;"	e	enum:__anon106
kDNSFlag0_RD	mDNSCore/DNSCommon.h	/^    kDNSFlag0_RD          = 0x01,       \/\/ Recursion Desired?$/;"	e	enum:__anon106
kDNSFlag0_TC	mDNSCore/DNSCommon.h	/^    kDNSFlag0_TC          = 0x02,       \/\/ Truncated?$/;"	e	enum:__anon106
kDNSFlag1_AD	mDNSCore/DNSCommon.h	/^    kDNSFlag1_AD          = 0x20,       \/\/ Authentic Data [RFC 2535]$/;"	e	enum:__anon106
kDNSFlag1_CD	mDNSCore/DNSCommon.h	/^    kDNSFlag1_CD          = 0x10,       \/\/ Checking Disabled [RFC 2535]$/;"	e	enum:__anon106
kDNSFlag1_RA	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RA          = 0x80,       \/\/ Recursion Available?$/;"	e	enum:__anon106
kDNSFlag1_RC_FormErr	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_FormErr  = 0x01,$/;"	e	enum:__anon106
kDNSFlag1_RC_Mask	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_Mask     = 0x0F,       \/\/ Response code$/;"	e	enum:__anon106
kDNSFlag1_RC_NXDomain	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_NXDomain = 0x03,$/;"	e	enum:__anon106
kDNSFlag1_RC_NXRRSet	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_NXRRSet  = 0x08,$/;"	e	enum:__anon106
kDNSFlag1_RC_NoErr	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_NoErr    = 0x00,$/;"	e	enum:__anon106
kDNSFlag1_RC_NotAuth	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_NotAuth  = 0x09,$/;"	e	enum:__anon106
kDNSFlag1_RC_NotImpl	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_NotImpl  = 0x04,$/;"	e	enum:__anon106
kDNSFlag1_RC_NotZone	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_NotZone  = 0x0A$/;"	e	enum:__anon106
kDNSFlag1_RC_Refused	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_Refused  = 0x05,$/;"	e	enum:__anon106
kDNSFlag1_RC_ServFail	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_ServFail = 0x02,$/;"	e	enum:__anon106
kDNSFlag1_RC_YXDomain	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_YXDomain = 0x06,$/;"	e	enum:__anon106
kDNSFlag1_RC_YXRRSet	mDNSCore/DNSCommon.h	/^    kDNSFlag1_RC_YXRRSet  = 0x07,$/;"	e	enum:__anon106
kDNSFlag1_Zero	mDNSCore/DNSCommon.h	/^    kDNSFlag1_Zero        = 0x40,       \/\/ Reserved; must be zero$/;"	e	enum:__anon106
kDNSIfindexAny	mDNSMacOSX/Private/dns_services.h	35;"	d
kDNSInIfindex0	mDNSMacOSX/Private/dns_xpc.h	17;"	d
kDNSInIfindex1	mDNSMacOSX/Private/dns_xpc.h	18;"	d
kDNSInIfindex2	mDNSMacOSX/Private/dns_xpc.h	19;"	d
kDNSInIfindex3	mDNSMacOSX/Private/dns_xpc.h	20;"	d
kDNSInIfindex4	mDNSMacOSX/Private/dns_xpc.h	21;"	d
kDNSMsgReceived	mDNSMacOSX/Private/dns_xpc.h	/^    kDNSMsgReceived       =  0,$/;"	e	enum:__anon162
kDNSOpt_LLQ	mDNSCore/mDNSEmbeddedAPI.h	910;"	d
kDNSOpt_Lease	mDNSCore/mDNSEmbeddedAPI.h	911;"	d
kDNSOpt_NSID	mDNSCore/mDNSEmbeddedAPI.h	912;"	d
kDNSOpt_Owner	mDNSCore/mDNSEmbeddedAPI.h	913;"	d
kDNSOpt_Trace	mDNSCore/mDNSEmbeddedAPI.h	914;"	d
kDNSOutIfindex	mDNSMacOSX/Private/dns_xpc.h	23;"	d
kDNSProxyEnable	mDNSMacOSX/Private/dns_services.h	/^    kDNSProxyEnable = 1$/;"	e	enum:__anon161
kDNSProxyParameters	mDNSMacOSX/Private/dns_xpc.h	15;"	d
kDNSProxyService	mDNSMacOSX/Private/dns_xpc.h	13;"	d
kDNSQClass_ANY	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSQClass_ANY             = 255,   \/\/ Not a DNS class, but a DNS query class, meaning "all classes"$/;"	e	enum:__anon29
kDNSQClass_UnicastResponse	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSQClass_UnicastResponse = 0x8000 \/\/ Top bit set in a question means "unicast response acceptable"$/;"	e	enum:__anon29
kDNSQType_ANY	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSQType_ANY           \/\/ Not a DNS type, but a DNS query type, meaning "all types"$/;"	e	enum:__anon30
kDNSRecordTypeActiveMask	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypeActiveMask       = (kDNSRecordTypeActiveSharedMask | kDNSRecordTypeActiveUniqueMask),$/;"	e	enum:__anon50
kDNSRecordTypeActiveSharedMask	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypeActiveSharedMask = (kDNSRecordTypeAdvisory         | kDNSRecordTypeShared),$/;"	e	enum:__anon50
kDNSRecordTypeActiveUniqueMask	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypeActiveUniqueMask = (kDNSRecordTypeVerified         | kDNSRecordTypeKnownUnique),$/;"	e	enum:__anon50
kDNSRecordTypeAdvisory	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypeAdvisory         = 0x04,  \/\/ Like Shared, but no goodbye packet$/;"	e	enum:__anon50
kDNSRecordTypeDeregistering	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypeDeregistering    = 0x01,  \/\/ Shared record about to announce its departure and leave the list$/;"	e	enum:__anon50
kDNSRecordTypeKnownUnique	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypeKnownUnique      = 0x20,  \/\/ Known Unique means mDNS can assume name is unique without checking$/;"	e	enum:__anon50
kDNSRecordTypePacketAdd	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypePacketAdd        = 0x80,  \/\/ Received in the Additional  Section of a DNS Response$/;"	e	enum:__anon50
kDNSRecordTypePacketAddUnique	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypePacketAddUnique  = 0x90,  \/\/ Received in the Additional  Section of a DNS Response with kDNSClass_UniqueRRSet set$/;"	e	enum:__anon50
kDNSRecordTypePacketAns	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypePacketAns        = 0xC0,  \/\/ Received in the Answer      Section of a DNS Response$/;"	e	enum:__anon50
kDNSRecordTypePacketAnsUnique	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypePacketAnsUnique  = 0xD0,  \/\/ Received in the Answer      Section of a DNS Response with kDNSClass_UniqueRRSet set$/;"	e	enum:__anon50
kDNSRecordTypePacketAuth	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypePacketAuth       = 0xA0,  \/\/ Received in the Authorities Section of a DNS Response$/;"	e	enum:__anon50
kDNSRecordTypePacketAuthUnique	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypePacketAuthUnique = 0xB0,  \/\/ Received in the Authorities Section of a DNS Response with kDNSClass_UniqueRRSet set$/;"	e	enum:__anon50
kDNSRecordTypePacketNegative	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypePacketNegative   = 0xF0,  \/\/ Pseudo-RR generated to cache non-existence results like NXDomain$/;"	e	enum:__anon50
kDNSRecordTypePacketUniqueMask	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypePacketUniqueMask = 0x10   \/\/ True for PacketAddUnique, PacketAnsUnique, PacketAuthUnique, kDNSRecordTypePacketNegative$/;"	e	enum:__anon50
kDNSRecordTypeShared	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypeShared           = 0x08,  \/\/ Shared means record name does not have to be unique -- use random delay on responses$/;"	e	enum:__anon50
kDNSRecordTypeUnique	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypeUnique           = 0x02,  \/\/ Will become a kDNSRecordTypeVerified when probing is complete$/;"	e	enum:__anon50
kDNSRecordTypeUniqueMask	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypeUniqueMask       = (kDNSRecordTypeUnique | kDNSRecordTypeVerified | kDNSRecordTypeKnownUnique),$/;"	e	enum:__anon50
kDNSRecordTypeUnregistered	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypeUnregistered     = 0x00,  \/\/ Not currently in any list$/;"	e	enum:__anon50
kDNSRecordTypeVerified	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSRecordTypeVerified         = 0x10,  \/\/ Unique means mDNS should check that name is unique (and then send immediate responses)$/;"	e	enum:__anon50
kDNSServiceCacheEntryCountDefault	mDNSWindows/SystemService/Service.c	70;"	d	file:
kDNSServiceClass_IN	mDNSShared/dns_sd.h	/^    kDNSServiceClass_IN       = 1       \/* Internet *\/$/;"	e	enum:__anon135
kDNSServiceCompMulticastDNS	mDNSShared/dns_sd.h	2637;"	d
kDNSServiceCompPrivateDNS	mDNSShared/dns_sd.h	2636;"	d
kDNSServiceDiscoveryAlreadyRegistered	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryAlreadyRegistered = -65547,$/;"	e	enum:__anon156
kDNSServiceDiscoveryBadFlagsErr	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryBadFlagsErr       = -65543,$/;"	e	enum:__anon156
kDNSServiceDiscoveryBadParamErr	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryBadParamErr       = -65540,$/;"	e	enum:__anon156
kDNSServiceDiscoveryBadReferenceErr	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryBadReferenceErr   = -65541,$/;"	e	enum:__anon156
kDNSServiceDiscoveryBadStateErr	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryBadStateErr       = -65542,$/;"	e	enum:__anon156
kDNSServiceDiscoveryInvalid	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryInvalid           = -65549,$/;"	e	enum:__anon156
kDNSServiceDiscoveryMemFree	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryMemFree           = -65792        \/\/ 0xFFFE FF00$/;"	e	enum:__anon156
kDNSServiceDiscoveryMoreRepliesImmediately	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryMoreRepliesImmediately  = 1 << 0,$/;"	e	enum:__anon155
kDNSServiceDiscoveryNameConflict	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryNameConflict      = -65548,$/;"	e	enum:__anon156
kDNSServiceDiscoveryNoCache	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryNoCache           = -65546,$/;"	e	enum:__anon156
kDNSServiceDiscoveryNoError	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryNoError     = 0,$/;"	e	enum:__anon156
kDNSServiceDiscoveryNoFlags	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryNoFlags         = 0,$/;"	e	enum:__anon155
kDNSServiceDiscoveryNoMemoryErr	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryNoMemoryErr       = -65539,$/;"	e	enum:__anon156
kDNSServiceDiscoveryNoSuchNameErr	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryNoSuchNameErr     = -65538,$/;"	e	enum:__anon156
kDNSServiceDiscoveryNotInitializedErr	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryNotInitializedErr = -65545,$/;"	e	enum:__anon156
kDNSServiceDiscoveryUnknownErr	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryUnknownErr        = -65537,       \/\/ 0xFFFE FFFF$/;"	e	enum:__anon156
kDNSServiceDiscoveryUnsupportedErr	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryUnsupportedErr    = -65544,$/;"	e	enum:__anon156
kDNSServiceDiscoveryWaiting	mDNSMacOSX/DNSServiceDiscovery.h	/^    kDNSServiceDiscoveryWaiting     = 1,$/;"	e	enum:__anon156
kDNSServiceErr_AlreadyRegistered	mDNSShared/dns_sd.h	/^    kDNSServiceErr_AlreadyRegistered         = -65547,$/;"	e	enum:__anon137
kDNSServiceErr_BadFlags	mDNSShared/dns_sd.h	/^    kDNSServiceErr_BadFlags                  = -65543,$/;"	e	enum:__anon137
kDNSServiceErr_BadInterfaceIndex	mDNSShared/dns_sd.h	/^    kDNSServiceErr_BadInterfaceIndex         = -65552,$/;"	e	enum:__anon137
kDNSServiceErr_BadKey	mDNSShared/dns_sd.h	/^    kDNSServiceErr_BadKey                    = -65561,$/;"	e	enum:__anon137
kDNSServiceErr_BadParam	mDNSShared/dns_sd.h	/^    kDNSServiceErr_BadParam                  = -65540,$/;"	e	enum:__anon137
kDNSServiceErr_BadReference	mDNSShared/dns_sd.h	/^    kDNSServiceErr_BadReference              = -65541,$/;"	e	enum:__anon137
kDNSServiceErr_BadSig	mDNSShared/dns_sd.h	/^    kDNSServiceErr_BadSig                    = -65560,$/;"	e	enum:__anon137
kDNSServiceErr_BadState	mDNSShared/dns_sd.h	/^    kDNSServiceErr_BadState                  = -65542,$/;"	e	enum:__anon137
kDNSServiceErr_BadTime	mDNSShared/dns_sd.h	/^    kDNSServiceErr_BadTime                   = -65559,  \/* Codes up to here existed in Tiger *\/$/;"	e	enum:__anon137
kDNSServiceErr_DoubleNAT	mDNSShared/dns_sd.h	/^    kDNSServiceErr_DoubleNAT                 = -65558,$/;"	e	enum:__anon137
kDNSServiceErr_Firewall	mDNSShared/dns_sd.h	/^    kDNSServiceErr_Firewall                  = -65550,$/;"	e	enum:__anon137
kDNSServiceErr_Incompatible	mDNSShared/dns_sd.h	/^    kDNSServiceErr_Incompatible              = -65551,  \/* client library incompatible with daemon *\/$/;"	e	enum:__anon137
kDNSServiceErr_Invalid	mDNSShared/dns_sd.h	/^    kDNSServiceErr_Invalid                   = -65549,$/;"	e	enum:__anon137
kDNSServiceErr_NATPortMappingDisabled	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NATPortMappingDisabled    = -65565,  \/* NAT supports PCP, NAT-PMP or UPnP, but it's disabled by the administrator *\/$/;"	e	enum:__anon137
kDNSServiceErr_NATPortMappingUnsupported	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NATPortMappingUnsupported = -65564,  \/* NAT doesn't support PCP, NAT-PMP or UPnP *\/$/;"	e	enum:__anon137
kDNSServiceErr_NATTraversal	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NATTraversal              = -65557,$/;"	e	enum:__anon137
kDNSServiceErr_NameConflict	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NameConflict              = -65548,$/;"	e	enum:__anon137
kDNSServiceErr_NoAuth	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NoAuth                    = -65555,$/;"	e	enum:__anon137
kDNSServiceErr_NoError	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NoError                   = 0,$/;"	e	enum:__anon137
kDNSServiceErr_NoMemory	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NoMemory                  = -65539,$/;"	e	enum:__anon137
kDNSServiceErr_NoRouter	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NoRouter                  = -65566,  \/* No router currently configured (probably no network connectivity) *\/$/;"	e	enum:__anon137
kDNSServiceErr_NoSuchKey	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NoSuchKey                 = -65556,$/;"	e	enum:__anon137
kDNSServiceErr_NoSuchName	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NoSuchName                = -65538,$/;"	e	enum:__anon137
kDNSServiceErr_NoSuchRecord	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NoSuchRecord              = -65554,$/;"	e	enum:__anon137
kDNSServiceErr_NotInitialized	mDNSShared/dns_sd.h	/^    kDNSServiceErr_NotInitialized            = -65545,$/;"	e	enum:__anon137
kDNSServiceErr_PollingMode	mDNSShared/dns_sd.h	/^    kDNSServiceErr_PollingMode               = -65567,$/;"	e	enum:__anon137
kDNSServiceErr_Refused	mDNSShared/dns_sd.h	/^    kDNSServiceErr_Refused                   = -65553,$/;"	e	enum:__anon137
kDNSServiceErr_ServiceNotRunning	mDNSShared/dns_sd.h	/^    kDNSServiceErr_ServiceNotRunning         = -65563,  \/* Background daemon not running *\/$/;"	e	enum:__anon137
kDNSServiceErr_Timeout	mDNSShared/dns_sd.h	/^    kDNSServiceErr_Timeout                   = -65568$/;"	e	enum:__anon137
kDNSServiceErr_Transient	mDNSShared/dns_sd.h	/^    kDNSServiceErr_Transient                 = -65562,$/;"	e	enum:__anon137
kDNSServiceErr_Unknown	mDNSShared/dns_sd.h	/^    kDNSServiceErr_Unknown                   = -65537,  \/* 0xFFFE FFFF *\/$/;"	e	enum:__anon137
kDNSServiceErr_Unsupported	mDNSShared/dns_sd.h	/^    kDNSServiceErr_Unsupported               = -65544,$/;"	e	enum:__anon137
kDNSServiceFlagsAdd	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsAdd                 = 0x2,$/;"	e	enum:__anon133
kDNSServiceFlagsAllowRemoteQuery	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsAllowRemoteQuery    = 0x200,$/;"	e	enum:__anon133
kDNSServiceFlagsBackgroundTrafficClass	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsBackgroundTrafficClass  = 0x80000,$/;"	e	enum:__anon133
kDNSServiceFlagsBogus	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsBogus                  = 0x200040,$/;"	e	enum:__anon133
kDNSServiceFlagsBrowseDomains	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsBrowseDomains       = 0x40,$/;"	e	enum:__anon133
kDNSServiceFlagsDefault	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsDefault             = 0x4,$/;"	e	enum:__anon133
kDNSServiceFlagsForce	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsForce               = 0x800,    \/\/ This flag is deprecated.$/;"	e	enum:__anon133
kDNSServiceFlagsForceMulticast	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsForceMulticast      = 0x400,$/;"	e	enum:__anon133
kDNSServiceFlagsIncludeAWDL	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsIncludeAWDL      = 0x100000,$/;"	e	enum:__anon133
kDNSServiceFlagsIncludeP2P	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsIncludeP2P          = 0x20000,$/;"	e	enum:__anon133
kDNSServiceFlagsIndeterminate	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsIndeterminate          = 0x200080,$/;"	e	enum:__anon133
kDNSServiceFlagsInsecure	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsInsecure               = 0x200020,$/;"	e	enum:__anon133
kDNSServiceFlagsKnownUnique	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsKnownUnique         = 0x800,$/;"	e	enum:__anon133
kDNSServiceFlagsLongLivedQuery	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsLongLivedQuery      = 0x100,$/;"	e	enum:__anon133
kDNSServiceFlagsMoreComing	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsMoreComing          = 0x1,$/;"	e	enum:__anon133
kDNSServiceFlagsNoAutoRename	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsNoAutoRename        = 0x8,$/;"	e	enum:__anon133
kDNSServiceFlagsNonBrowsable	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsNonBrowsable        = 0x2000,$/;"	e	enum:__anon133
kDNSServiceFlagsRegistrationDomains	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsRegistrationDomains = 0x80,$/;"	e	enum:__anon133
kDNSServiceFlagsReturnIntermediates	Clients/dns-sd.c	193;"	d	file:
kDNSServiceFlagsReturnIntermediates	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsReturnIntermediates = 0x1000,$/;"	e	enum:__anon133
kDNSServiceFlagsSecure	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsSecure                 = 0x200010,$/;"	e	enum:__anon133
kDNSServiceFlagsShareConnection	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsShareConnection     = 0x4000,$/;"	e	enum:__anon133
kDNSServiceFlagsShared	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsShared              = 0x10,$/;"	e	enum:__anon133
kDNSServiceFlagsSuppressUnusable	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsSuppressUnusable    = 0x8000,$/;"	e	enum:__anon133
kDNSServiceFlagsThresholdFinder	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsThresholdFinder        = 0x4000000,$/;"	e	enum:__anon133
kDNSServiceFlagsThresholdOne	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsThresholdOne           = 0x2000000,$/;"	e	enum:__anon133
kDNSServiceFlagsThresholdReached	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsThresholdReached       = kDNSServiceFlagsThresholdOne,$/;"	e	enum:__anon133
kDNSServiceFlagsTimeout	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsTimeout            = 0x10000,$/;"	e	enum:__anon133
kDNSServiceFlagsUnicastResponse	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsUnicastResponse        = 0x400000,$/;"	e	enum:__anon133
kDNSServiceFlagsUnique	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsUnique              = 0x20,$/;"	e	enum:__anon133
kDNSServiceFlagsValidate	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsValidate               = 0x200000,$/;"	e	enum:__anon133
kDNSServiceFlagsValidateOptional	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsValidateOptional       = 0x800000,$/;"	e	enum:__anon133
kDNSServiceFlagsWakeOnResolve	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsWakeOnResolve      = 0x40000,$/;"	e	enum:__anon133
kDNSServiceFlagsWakeOnlyService	mDNSShared/dns_sd.h	/^    kDNSServiceFlagsWakeOnlyService        = 0x1000000,$/;"	e	enum:__anon133
kDNSServiceInterfaceIndexAny	mDNSShared/dns_sd.h	762;"	d
kDNSServiceInterfaceIndexLocalOnly	mDNSShared/dns_sd.h	763;"	d
kDNSServiceInterfaceIndexP2P	mDNSShared/dns_sd.h	765;"	d
kDNSServiceInterfaceIndexUnicast	mDNSShared/dns_sd.h	764;"	d
kDNSServiceMaxDomainName	mDNSShared/dns_sd.h	655;"	d
kDNSServiceMaxServiceName	mDNSShared/dns_sd.h	650;"	d
kDNSServiceOutputFlags	mDNSShared/dns_sd.h	500;"	d
kDNSServiceProperty_DaemonVersion	mDNSShared/dns_sd.h	825;"	d
kDNSServiceProtocol_IPv4	mDNSShared/dns_sd.h	/^    kDNSServiceProtocol_IPv4 = 0x01,$/;"	e	enum:__anon134
kDNSServiceProtocol_IPv6	mDNSShared/dns_sd.h	/^    kDNSServiceProtocol_IPv6 = 0x02,$/;"	e	enum:__anon134
kDNSServiceProtocol_TCP	mDNSShared/dns_sd.h	/^    kDNSServiceProtocol_TCP  = 0x20$/;"	e	enum:__anon134
kDNSServiceProtocol_UDP	mDNSShared/dns_sd.h	/^    kDNSServiceProtocol_UDP  = 0x10,$/;"	e	enum:__anon134
kDNSServiceType_A	mDNSShared/dns_sd.h	/^    kDNSServiceType_A          = 1,      \/* Host address. *\/$/;"	e	enum:__anon136
kDNSServiceType_A6	mDNSShared/dns_sd.h	/^    kDNSServiceType_A6         = 38,     \/* IPv6 Address (deprecated) *\/$/;"	e	enum:__anon136
kDNSServiceType_AAAA	mDNSShared/dns_sd.h	/^    kDNSServiceType_AAAA       = 28,     \/* IPv6 Address. *\/$/;"	e	enum:__anon136
kDNSServiceType_AFSDB	mDNSShared/dns_sd.h	/^    kDNSServiceType_AFSDB      = 18,     \/* AFS cell database. *\/$/;"	e	enum:__anon136
kDNSServiceType_ANY	mDNSShared/dns_sd.h	/^    kDNSServiceType_ANY        = 255     \/* Wildcard match. *\/$/;"	e	enum:__anon136
kDNSServiceType_APL	mDNSShared/dns_sd.h	/^    kDNSServiceType_APL        = 42,     \/* Address Prefix List *\/$/;"	e	enum:__anon136
kDNSServiceType_ATMA	mDNSShared/dns_sd.h	/^    kDNSServiceType_ATMA       = 34,     \/* ATM Address *\/$/;"	e	enum:__anon136
kDNSServiceType_AXFR	mDNSShared/dns_sd.h	/^    kDNSServiceType_AXFR       = 252,    \/* Transfer zone of authority. *\/$/;"	e	enum:__anon136
kDNSServiceType_CERT	mDNSShared/dns_sd.h	/^    kDNSServiceType_CERT       = 37,     \/* Certification record *\/$/;"	e	enum:__anon136
kDNSServiceType_CNAME	mDNSShared/dns_sd.h	/^    kDNSServiceType_CNAME      = 5,      \/* Canonical name. *\/$/;"	e	enum:__anon136
kDNSServiceType_DHCID	mDNSShared/dns_sd.h	/^    kDNSServiceType_DHCID      = 49,     \/* DHCP Client Identifier *\/$/;"	e	enum:__anon136
kDNSServiceType_DNAME	mDNSShared/dns_sd.h	/^    kDNSServiceType_DNAME      = 39,     \/* Non-terminal DNAME (for IPv6) *\/$/;"	e	enum:__anon136
kDNSServiceType_DNSKEY	mDNSShared/dns_sd.h	/^    kDNSServiceType_DNSKEY     = 48,     \/* DNSKEY *\/$/;"	e	enum:__anon136
kDNSServiceType_DS	mDNSShared/dns_sd.h	/^    kDNSServiceType_DS         = 43,     \/* Delegation Signer *\/$/;"	e	enum:__anon136
kDNSServiceType_EID	mDNSShared/dns_sd.h	/^    kDNSServiceType_EID        = 31,     \/* Endpoint identifier. *\/$/;"	e	enum:__anon136
kDNSServiceType_GID	mDNSShared/dns_sd.h	/^    kDNSServiceType_GID        = 102,    \/* IANA-Reserved *\/$/;"	e	enum:__anon136
kDNSServiceType_GPOS	mDNSShared/dns_sd.h	/^    kDNSServiceType_GPOS       = 27,     \/* Geographical position (withdrawn). *\/$/;"	e	enum:__anon136
kDNSServiceType_HINFO	mDNSShared/dns_sd.h	/^    kDNSServiceType_HINFO      = 13,     \/* Host information. *\/$/;"	e	enum:__anon136
kDNSServiceType_HIP	mDNSShared/dns_sd.h	/^    kDNSServiceType_HIP        = 55,     \/* Host Identity Protocol *\/$/;"	e	enum:__anon136
kDNSServiceType_IPSECKEY	mDNSShared/dns_sd.h	/^    kDNSServiceType_IPSECKEY   = 45,     \/* IPSECKEY *\/$/;"	e	enum:__anon136
kDNSServiceType_ISDN	mDNSShared/dns_sd.h	/^    kDNSServiceType_ISDN       = 20,     \/* ISDN calling address. *\/$/;"	e	enum:__anon136
kDNSServiceType_IXFR	mDNSShared/dns_sd.h	/^    kDNSServiceType_IXFR       = 251,    \/* Incremental zone transfer. *\/$/;"	e	enum:__anon136
kDNSServiceType_KEY	mDNSShared/dns_sd.h	/^    kDNSServiceType_KEY        = 25,     \/* Security key. *\/$/;"	e	enum:__anon136
kDNSServiceType_KX	mDNSShared/dns_sd.h	/^    kDNSServiceType_KX         = 36,     \/* Key Exchange *\/$/;"	e	enum:__anon136
kDNSServiceType_LOC	mDNSShared/dns_sd.h	/^    kDNSServiceType_LOC        = 29,     \/* Location Information. *\/$/;"	e	enum:__anon136
kDNSServiceType_MAILA	mDNSShared/dns_sd.h	/^    kDNSServiceType_MAILA      = 254,    \/* Transfer mail agent records. *\/$/;"	e	enum:__anon136
kDNSServiceType_MAILB	mDNSShared/dns_sd.h	/^    kDNSServiceType_MAILB      = 253,    \/* Transfer mailbox records. *\/$/;"	e	enum:__anon136
kDNSServiceType_MB	mDNSShared/dns_sd.h	/^    kDNSServiceType_MB         = 7,      \/* Mailbox domain name. *\/$/;"	e	enum:__anon136
kDNSServiceType_MD	mDNSShared/dns_sd.h	/^    kDNSServiceType_MD         = 3,      \/* Mail destination. *\/$/;"	e	enum:__anon136
kDNSServiceType_MF	mDNSShared/dns_sd.h	/^    kDNSServiceType_MF         = 4,      \/* Mail forwarder. *\/$/;"	e	enum:__anon136
kDNSServiceType_MG	mDNSShared/dns_sd.h	/^    kDNSServiceType_MG         = 8,      \/* Mail group member. *\/$/;"	e	enum:__anon136
kDNSServiceType_MINFO	mDNSShared/dns_sd.h	/^    kDNSServiceType_MINFO      = 14,     \/* Mailbox information. *\/$/;"	e	enum:__anon136
kDNSServiceType_MR	mDNSShared/dns_sd.h	/^    kDNSServiceType_MR         = 9,      \/* Mail rename name. *\/$/;"	e	enum:__anon136
kDNSServiceType_MX	mDNSShared/dns_sd.h	/^    kDNSServiceType_MX         = 15,     \/* Mail routing information. *\/$/;"	e	enum:__anon136
kDNSServiceType_NAPTR	mDNSShared/dns_sd.h	/^    kDNSServiceType_NAPTR      = 35,     \/* Naming Authority PoinTeR *\/$/;"	e	enum:__anon136
kDNSServiceType_NIMLOC	mDNSShared/dns_sd.h	/^    kDNSServiceType_NIMLOC     = 32,     \/* Nimrod Locator. *\/$/;"	e	enum:__anon136
kDNSServiceType_NS	mDNSShared/dns_sd.h	/^    kDNSServiceType_NS         = 2,      \/* Authoritative server. *\/$/;"	e	enum:__anon136
kDNSServiceType_NSAP	mDNSShared/dns_sd.h	/^    kDNSServiceType_NSAP       = 22,     \/* NSAP address. *\/$/;"	e	enum:__anon136
kDNSServiceType_NSAP_PTR	mDNSShared/dns_sd.h	/^    kDNSServiceType_NSAP_PTR   = 23,     \/* Reverse NSAP lookup (deprecated). *\/$/;"	e	enum:__anon136
kDNSServiceType_NSEC	mDNSShared/dns_sd.h	/^    kDNSServiceType_NSEC       = 47,     \/* Denial of Existence *\/$/;"	e	enum:__anon136
kDNSServiceType_NSEC3	mDNSShared/dns_sd.h	/^    kDNSServiceType_NSEC3      = 50,     \/* Hashed Authenticated Denial of Existence *\/$/;"	e	enum:__anon136
kDNSServiceType_NSEC3PARAM	mDNSShared/dns_sd.h	/^    kDNSServiceType_NSEC3PARAM = 51,     \/* Hashed Authenticated Denial of Existence *\/$/;"	e	enum:__anon136
kDNSServiceType_NULL	mDNSShared/dns_sd.h	/^    kDNSServiceType_NULL       = 10,     \/* Null resource record. *\/$/;"	e	enum:__anon136
kDNSServiceType_NXT	mDNSShared/dns_sd.h	/^    kDNSServiceType_NXT        = 30,     \/* Next domain (security). *\/$/;"	e	enum:__anon136
kDNSServiceType_OPT	mDNSShared/dns_sd.h	/^    kDNSServiceType_OPT        = 41,     \/* EDNS0 option (meta-RR) *\/$/;"	e	enum:__anon136
kDNSServiceType_PTR	mDNSShared/dns_sd.h	/^    kDNSServiceType_PTR        = 12,     \/* Domain name pointer. *\/$/;"	e	enum:__anon136
kDNSServiceType_PX	mDNSShared/dns_sd.h	/^    kDNSServiceType_PX         = 26,     \/* X.400 mail mapping. *\/$/;"	e	enum:__anon136
kDNSServiceType_RP	mDNSShared/dns_sd.h	/^    kDNSServiceType_RP         = 17,     \/* Responsible person. *\/$/;"	e	enum:__anon136
kDNSServiceType_RRSIG	mDNSShared/dns_sd.h	/^    kDNSServiceType_RRSIG      = 46,     \/* RRSIG *\/$/;"	e	enum:__anon136
kDNSServiceType_RT	mDNSShared/dns_sd.h	/^    kDNSServiceType_RT         = 21,     \/* Router. *\/$/;"	e	enum:__anon136
kDNSServiceType_SIG	mDNSShared/dns_sd.h	/^    kDNSServiceType_SIG        = 24,     \/* Security signature. *\/$/;"	e	enum:__anon136
kDNSServiceType_SINK	mDNSShared/dns_sd.h	/^    kDNSServiceType_SINK       = 40,     \/* Kitchen sink (experimental) *\/$/;"	e	enum:__anon136
kDNSServiceType_SOA	mDNSShared/dns_sd.h	/^    kDNSServiceType_SOA        = 6,      \/* Start of authority zone. *\/$/;"	e	enum:__anon136
kDNSServiceType_SPF	mDNSShared/dns_sd.h	/^    kDNSServiceType_SPF        = 99,     \/* Sender Policy Framework for E-Mail *\/$/;"	e	enum:__anon136
kDNSServiceType_SRV	mDNSShared/dns_sd.h	/^    kDNSServiceType_SRV        = 33,     \/* Server Selection. *\/$/;"	e	enum:__anon136
kDNSServiceType_SSHFP	mDNSShared/dns_sd.h	/^    kDNSServiceType_SSHFP      = 44,     \/* SSH Key Fingerprint *\/$/;"	e	enum:__anon136
kDNSServiceType_TKEY	mDNSShared/dns_sd.h	/^    kDNSServiceType_TKEY       = 249,    \/* Transaction key *\/$/;"	e	enum:__anon136
kDNSServiceType_TSIG	mDNSShared/dns_sd.h	/^    kDNSServiceType_TSIG       = 250,    \/* Transaction signature. *\/$/;"	e	enum:__anon136
kDNSServiceType_TXT	mDNSShared/dns_sd.h	/^    kDNSServiceType_TXT        = 16,     \/* One or more text strings (NOT "zero or more..."). *\/$/;"	e	enum:__anon136
kDNSServiceType_UID	mDNSShared/dns_sd.h	/^    kDNSServiceType_UID        = 101,    \/* IANA-Reserved *\/$/;"	e	enum:__anon136
kDNSServiceType_UINFO	mDNSShared/dns_sd.h	/^    kDNSServiceType_UINFO      = 100,    \/* IANA-Reserved *\/$/;"	e	enum:__anon136
kDNSServiceType_UNSPEC	mDNSShared/dns_sd.h	/^    kDNSServiceType_UNSPEC     = 103,    \/* IANA-Reserved *\/$/;"	e	enum:__anon136
kDNSServiceType_WKS	mDNSShared/dns_sd.h	/^    kDNSServiceType_WKS        = 11,     \/* Well known service. *\/$/;"	e	enum:__anon136
kDNSServiceType_X25	mDNSShared/dns_sd.h	/^    kDNSServiceType_X25        = 19,     \/* X_25 calling address. *\/$/;"	e	enum:__anon136
kDNSType_A	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_A = 1,         \/\/  1 Address$/;"	e	enum:__anon30
kDNSType_A6	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_A6,            \/\/ 38 IPv6 Address (deprecated)$/;"	e	enum:__anon30
kDNSType_AAAA	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_AAAA,          \/\/ 28 IPv6 Address$/;"	e	enum:__anon30
kDNSType_AFSDB	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_AFSDB,         \/\/ 18 AFS cell database$/;"	e	enum:__anon30
kDNSType_APL	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_APL,           \/\/ 42 Address Prefix List$/;"	e	enum:__anon30
kDNSType_ATMA	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_ATMA,          \/\/ 34 ATM Address$/;"	e	enum:__anon30
kDNSType_AXFR	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_AXFR,          \/\/ 252 Transfer zone of authority$/;"	e	enum:__anon30
kDNSType_CERT	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_CERT,          \/\/ 37 Certification record$/;"	e	enum:__anon30
kDNSType_CNAME	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_CNAME,         \/\/  5 Canonical Name$/;"	e	enum:__anon30
kDNSType_DHCID	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_DHCID,         \/\/ 49 DHCP Client Identifier$/;"	e	enum:__anon30
kDNSType_DNAME	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_DNAME,         \/\/ 39 Non-terminal DNAME (for IPv6)$/;"	e	enum:__anon30
kDNSType_DNSKEY	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_DNSKEY,        \/\/ 48 DNSKEY$/;"	e	enum:__anon30
kDNSType_DS	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_DS,            \/\/ 43 Delegation Signer$/;"	e	enum:__anon30
kDNSType_EID	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_EID,           \/\/ 31 Endpoint identifier$/;"	e	enum:__anon30
kDNSType_GID	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_GID,           \/\/ 102 IANA-Reserved$/;"	e	enum:__anon30
kDNSType_GPOS	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_GPOS,          \/\/ 27 Geographical position (withdrawn)$/;"	e	enum:__anon30
kDNSType_HINFO	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_HINFO,         \/\/ 13 Host information$/;"	e	enum:__anon30
kDNSType_HIP	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_HIP = 55,      \/\/ 55 Host Identity Protocol$/;"	e	enum:__anon30
kDNSType_IPSECKEY	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_IPSECKEY,      \/\/ 45 IPSECKEY$/;"	e	enum:__anon30
kDNSType_ISDN	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_ISDN,          \/\/ 20 ISDN calling address$/;"	e	enum:__anon30
kDNSType_IXFR	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_IXFR,          \/\/ 251 Incremental zone transfer$/;"	e	enum:__anon30
kDNSType_KEY	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_KEY,           \/\/ 25 Security key$/;"	e	enum:__anon30
kDNSType_KX	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_KX,            \/\/ 36 Key Exchange$/;"	e	enum:__anon30
kDNSType_LOC	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_LOC,           \/\/ 29 Location Information$/;"	e	enum:__anon30
kDNSType_MAILA	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_MAILA,         \/\/ 254 Transfer mail agent records$/;"	e	enum:__anon30
kDNSType_MAILB	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_MAILB,         \/\/ 253 Transfer mailbox records$/;"	e	enum:__anon30
kDNSType_MB	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_MB,            \/\/  7 Mailbox$/;"	e	enum:__anon30
kDNSType_MD	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_MD,            \/\/  3 Mail Destination$/;"	e	enum:__anon30
kDNSType_MF	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_MF,            \/\/  4 Mail Forwarder$/;"	e	enum:__anon30
kDNSType_MG	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_MG,            \/\/  8 Mail Group$/;"	e	enum:__anon30
kDNSType_MINFO	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_MINFO,         \/\/ 14 Mailbox information$/;"	e	enum:__anon30
kDNSType_MR	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_MR,            \/\/  9 Mail Rename$/;"	e	enum:__anon30
kDNSType_MX	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_MX,            \/\/ 15 Mail Exchanger$/;"	e	enum:__anon30
kDNSType_NAPTR	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_NAPTR,         \/\/ 35 Naming Authority PoinTeR$/;"	e	enum:__anon30
kDNSType_NIMLOC	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_NIMLOC,        \/\/ 32 Nimrod Locator$/;"	e	enum:__anon30
kDNSType_NS	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_NS,            \/\/  2 Name Server$/;"	e	enum:__anon30
kDNSType_NSAP	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_NSAP,          \/\/ 22 NSAP address$/;"	e	enum:__anon30
kDNSType_NSAP_PTR	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_NSAP_PTR,      \/\/ 23 Reverse NSAP lookup (deprecated)$/;"	e	enum:__anon30
kDNSType_NSEC	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_NSEC,          \/\/ 47 Denial of Existence$/;"	e	enum:__anon30
kDNSType_NSEC3	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_NSEC3,         \/\/ 50 Hashed Authenticated Denial of Existence$/;"	e	enum:__anon30
kDNSType_NSEC3PARAM	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_NSEC3PARAM,    \/\/ 51 Hashed Authenticated Denial of Existence$/;"	e	enum:__anon30
kDNSType_NULL	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_NULL,          \/\/ 10 NULL RR$/;"	e	enum:__anon30
kDNSType_NXT	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_NXT,           \/\/ 30 Next domain (security)$/;"	e	enum:__anon30
kDNSType_OPT	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_OPT,           \/\/ 41 EDNS0 option (meta-RR)$/;"	e	enum:__anon30
kDNSType_PTR	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_PTR,           \/\/ 12 Domain name pointer$/;"	e	enum:__anon30
kDNSType_PX	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_PX,            \/\/ 26 X.400 mail mapping$/;"	e	enum:__anon30
kDNSType_RP	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_RP,            \/\/ 17 Responsible person$/;"	e	enum:__anon30
kDNSType_RRSIG	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_RRSIG,         \/\/ 46 RRSIG$/;"	e	enum:__anon30
kDNSType_RT	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_RT,            \/\/ 21 Router$/;"	e	enum:__anon30
kDNSType_SIG	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_SIG,           \/\/ 24 Security signature$/;"	e	enum:__anon30
kDNSType_SINK	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_SINK,          \/\/ 40 Kitchen sink (experimental)$/;"	e	enum:__anon30
kDNSType_SOA	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_SOA,           \/\/  6 Start of Authority$/;"	e	enum:__anon30
kDNSType_SPF	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_SPF = 99,      \/\/ 99 Sender Policy Framework for E-Mail$/;"	e	enum:__anon30
kDNSType_SRV	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_SRV,           \/\/ 33 Service record$/;"	e	enum:__anon30
kDNSType_SSHFP	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_SSHFP,         \/\/ 44 SSH Key Fingerprint$/;"	e	enum:__anon30
kDNSType_TKEY	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_TKEY = 249,    \/\/ 249 Transaction key$/;"	e	enum:__anon30
kDNSType_TSIG	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_TSIG,          \/\/ 250 Transaction signature$/;"	e	enum:__anon30
kDNSType_TXT	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_TXT,           \/\/ 16 Arbitrary text string$/;"	e	enum:__anon30
kDNSType_UID	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_UID,           \/\/ 101 IANA-Reserved$/;"	e	enum:__anon30
kDNSType_UINFO	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_UINFO,         \/\/ 100 IANA-Reserved$/;"	e	enum:__anon30
kDNSType_UNSPEC	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_UNSPEC,        \/\/ 103 IANA-Reserved$/;"	e	enum:__anon30
kDNSType_WKS	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_WKS,           \/\/ 11 Well-known-service$/;"	e	enum:__anon30
kDNSType_X25	mDNSCore/mDNSEmbeddedAPI.h	/^    kDNSType_X25,           \/\/ 19 X_25 calling address$/;"	e	enum:__anon30
kDNSX_BadParam	mDNSMacOSX/Private/dns_services.h	/^    kDNSX_BadParam                  = -65540,$/;"	e	enum:__anon160
kDNSX_DaemonNotRunning	mDNSMacOSX/Private/dns_services.h	/^    kDNSX_DaemonNotRunning          = -65563,   \/* Background daemon not running *\/$/;"	e	enum:__anon160
kDNSX_DictError	mDNSMacOSX/Private/dns_services.h	/^    kDNSX_DictError                 = -65565,   \/* Dictionary Error *\/$/;"	e	enum:__anon160
kDNSX_Engaged	mDNSMacOSX/Private/dns_services.h	/^    kDNSX_Engaged                   = -65566,   \/* DNS Proxy is in use by another client *\/$/;"	e	enum:__anon160
kDNSX_NoError	mDNSMacOSX/Private/dns_services.h	/^    kDNSX_NoError                   =  0,$/;"	e	enum:__anon160
kDNSX_NoMem	mDNSMacOSX/Private/dns_services.h	/^    kDNSX_NoMem                     = -65539,$/;"	e	enum:__anon160
kDNSX_Timeout	mDNSMacOSX/Private/dns_services.h	/^    kDNSX_Timeout                   = -65568    $/;"	e	enum:__anon160
kDNSX_UnknownErr	mDNSMacOSX/Private/dns_services.h	/^    kDNSX_UnknownErr                = -65537,   \/* 0xFFFE FFFF *\/$/;"	e	enum:__anon160
kDNSZonePrivate	mDNSShared/dnsextd.h	/^    kDNSZonePrivate$/;"	e	enum:DNSZoneSpecType
kDNSZonePublic	mDNSShared/dnsextd.h	/^    kDNSZonePublic,$/;"	e	enum:DNSZoneSpecType
kDateErr	mDNSShared/CommonServices.h	1085;"	d
kDaysPerWeek	mDNSShared/CommonServices.h	1161;"	d
kDebugFlags16BitSeparator	mDNSShared/DebugServices.h	237;"	d
kDebugFlags32BitOffset	mDNSShared/DebugServices.h	233;"	d
kDebugFlags8BitSeparator	mDNSShared/DebugServices.h	236;"	d
kDebugFlagsNo16ByteHexPad	mDNSShared/DebugServices.h	239;"	d
kDebugFlagsNo32BitSeparator	mDNSShared/DebugServices.h	238;"	d
kDebugFlagsNoASCII	mDNSShared/DebugServices.h	234;"	d
kDebugFlagsNoAddress	mDNSShared/DebugServices.h	231;"	d
kDebugFlagsNoByteCount	mDNSShared/DebugServices.h	240;"	d
kDebugFlagsNoNewLine	mDNSShared/DebugServices.h	235;"	d
kDebugFlagsNoOffset	mDNSShared/DebugServices.h	232;"	d
kDebugFlagsNone	mDNSShared/DebugServices.h	230;"	d
kDebugInDeferredTaskMask	mDNSShared/DebugServices.h	/^    kDebugInDeferredTaskMask                = 0x00000020,$/;"	e	enum:__anon117
kDebugInSecondaryInterruptHandlerMask	mDNSShared/DebugServices.h	/^    kDebugInSecondaryInterruptHandlerMask   = 0x00000040,$/;"	e	enum:__anon117
kDebugInVBLTaskMask	mDNSShared/DebugServices.h	/^    kDebugInVBLTaskMask                     = 0x00000010,$/;"	e	enum:__anon117
kDebugInterruptDepthMask	mDNSShared/DebugServices.h	/^    kDebugInterruptDepthMask                = 0x00FF0000$/;"	e	enum:__anon117
kDebugInterruptDepthShift	mDNSShared/DebugServices.h	/^    kDebugInterruptDepthShift               = 16,$/;"	e	enum:__anon117
kDebugInterruptLevelMask	mDNSShared/DebugServices.h	/^    kDebugInterruptLevelMask                = 0x00000007,$/;"	e	enum:__anon117
kDebugInterruptLevelShift	mDNSShared/DebugServices.h	/^    kDebugInterruptLevelShift               = 0,$/;"	e	enum:__anon117
kDebugLevelAlert	mDNSShared/DebugServices.h	296;"	d
kDebugLevelAssert	mDNSShared/DebugServices.h	292;"	d
kDebugLevelChatty	mDNSShared/DebugServices.h	286;"	d
kDebugLevelCritical	mDNSShared/DebugServices.h	295;"	d
kDebugLevelEmergency	mDNSShared/DebugServices.h	297;"	d
kDebugLevelError	mDNSShared/DebugServices.h	294;"	d
kDebugLevelFlagDebugBreak	mDNSShared/DebugServices.h	305;"	d
kDebugLevelFlagMask	mDNSShared/DebugServices.h	303;"	d
kDebugLevelFlagStackTrace	mDNSShared/DebugServices.h	304;"	d
kDebugLevelInfo	mDNSShared/DebugServices.h	289;"	d
kDebugLevelMask	mDNSShared/DebugServices.h	285;"	d
kDebugLevelMax	mDNSShared/DebugServices.h	299;"	d
kDebugLevelNotice	mDNSShared/DebugServices.h	290;"	d
kDebugLevelRequire	mDNSShared/DebugServices.h	293;"	d
kDebugLevelTrace	mDNSShared/DebugServices.h	288;"	d
kDebugLevelTragic	mDNSShared/DebugServices.h	298;"	d
kDebugLevelVerbose	mDNSShared/DebugServices.h	287;"	d
kDebugLevelWarning	mDNSShared/DebugServices.h	291;"	d
kDebugMPTaskLevelMask	mDNSShared/DebugServices.h	/^    kDebugMPTaskLevelMask                   = 0x00000200,   \/\/ There should be a "kMPTaskLevelMask" in Debugging.h.$/;"	e	enum:__anon117
kDebugOutputTypeCustom	mDNSShared/DebugServices.h	170;"	d
kDebugOutputTypeFPrintF	mDNSShared/DebugServices.h	171;"	d
kDebugOutputTypeFlagsFile	mDNSShared/DebugServices.h	204;"	d
kDebugOutputTypeFlagsStdErr	mDNSShared/DebugServices.h	203;"	d
kDebugOutputTypeFlagsStdOut	mDNSShared/DebugServices.h	202;"	d
kDebugOutputTypeFlagsTypeMask	mDNSShared/DebugServices.h	201;"	d
kDebugOutputTypeKPrintF	mDNSShared/DebugServices.h	173;"	d
kDebugOutputTypeMacOSXIOLog	mDNSShared/DebugServices.h	174;"	d
kDebugOutputTypeMacOSXLog	mDNSShared/DebugServices.h	175;"	d
kDebugOutputTypeMetaConsole	mDNSShared/DebugServices.h	186;"	d
kDebugOutputTypeNone	mDNSShared/DebugServices.h	169;"	d
kDebugOutputTypeWindowsDebugger	mDNSShared/DebugServices.h	176;"	d
kDebugOutputTypeWindowsEventLog	mDNSShared/DebugServices.h	177;"	d
kDebugOutputTypeiDebug	mDNSShared/DebugServices.h	172;"	d
kDebugPageFaultFatalMask	mDNSShared/DebugServices.h	/^    kDebugPageFaultFatalMask                = 0x00000100,   \/\/ There should be a "kPageFaultFatalMask" in Debugging.h.$/;"	e	enum:__anon117
kDebugPropertyTagBreakLevel	mDNSShared/DebugServices.h	352;"	d
kDebugPropertyTagPrintLevel	mDNSShared/DebugServices.h	347;"	d
kDebugPropertyTagPrintLevelMax	mDNSShared/DebugServices.h	349;"	d
kDebugPropertyTagPrintLevelMin	mDNSShared/DebugServices.h	344;"	d
kDebugTCPStates	mDNSShared/DebugServices.c	/^const char *        kDebugTCPStates[] =$/;"	v
kDefValueSize	mDNSWindows/SystemService/Service.c	72;"	d	file:
kDefaultDomain	mDNSPosix/Client.c	/^static const char kDefaultDomain[]      = "local.";$/;"	v	file:
kDefaultNextStatsticsLogTime	mDNSCore/mDNSEmbeddedAPI.h	3120;"	d
kDefaultPIDFile	mDNSPosix/Responder.c	/^static const char kDefaultPIDFile[]     = "\/var\/run\/mDNSResponder.pid";$/;"	v	file:
kDefaultPortNumber	mDNSPosix/Responder.c	/^    kDefaultPortNumber = 548$/;"	e	enum:__anon22	file:
kDefaultPriority	Clients/PrinterSetupWizard/UtilTypes.h	27;"	d
kDefaultQTotal	Clients/PrinterSetupWizard/UtilTypes.h	28;"	d
kDefaultReconfirmTimeForFlappingInterface	mDNSCore/mDNS.c	2901;"	d	file:
kDefaultReconfirmTimeForNoAnswer	mDNSCore/mDNS.c	2900;"	d	file:
kDefaultReconfirmTimeForWake	mDNSCore/mDNS.c	2899;"	d	file:
kDefaultRouteMetric	mDNSWindows/SystemService/Service.c	74;"	d	file:
kDefaultServiceDomain	mDNSPosix/Responder.c	/^static const char kDefaultServiceDomain[] = "local.";$/;"	v	file:
kDefaultServiceType	mDNSPosix/Client.c	/^static const char kDefaultServiceType[] = "_afpovertcp._tcp";$/;"	v	file:
kDefaultServiceType	mDNSPosix/Responder.c	/^static const char kDefaultServiceType[] = "_afpovertcp._tcp.";$/;"	v	file:
kDeletedErr	mDNSShared/CommonServices.h	1062;"	d
kDomainListDefaultDomainColumnWidth	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	62;"	d	file:
kDuplicateErr	mDNSShared/CommonServices.h	1066;"	d
kDurationDay	mDNSShared/CommonServices.h	1143;"	d
kDurationForever	mDNSShared/CommonServices.h	1144;"	d
kDurationHour	mDNSShared/CommonServices.h	1142;"	d
kDurationImmediate	mDNSShared/CommonServices.h	1137;"	d
kDurationMicrosecond	mDNSShared/CommonServices.h	1138;"	d
kDurationMillisecond	mDNSShared/CommonServices.h	1139;"	d
kDurationMinute	mDNSShared/CommonServices.h	1141;"	d
kDurationSecond	mDNSShared/CommonServices.h	1140;"	d
kEndingErr	mDNSShared/CommonServices.h	1088;"	d
kEventsToReadAtOnce	mDNSMacOSX/daemon.c	2620;"	d	file:
kExecutionStateErr	mDNSShared/CommonServices.h	1039;"	d
kFilePathSep	Clients/dns-sd.c	/^static const char kFilePathSep = '\/';$/;"	v	file:
kFilePathSep	Clients/dns-sd.c	/^static const char kFilePathSep = '\\\\';$/;"	v	file:
kFilePathSep	Clients/dnsctl.c	/^static const char kFilePathSep   =  '\/';$/;"	v	file:
kFlagErr	mDNSShared/CommonServices.h	1077;"	d
kFormatErr	mDNSShared/CommonServices.h	1053;"	d
kGenericErrorBase	mDNSShared/CommonServices.h	1034;"	d
kGenericErrorEnd	mDNSShared/CommonServices.h	1101;"	d
kGenericManufacturer	Clients/PrinterSetupWizard/ThirdPage.cpp	44;"	d	file:
kGenericPCL	Clients/PrinterSetupWizard/ThirdPage.cpp	47;"	d	file:
kGenericPCLColorDriver	Clients/PrinterSetupWizard/ThirdPage.cpp	52;"	d	file:
kGenericPCLDriver	Clients/PrinterSetupWizard/ThirdPage.cpp	53;"	d	file:
kGenericPSColorDriver	Clients/PrinterSetupWizard/ThirdPage.cpp	50;"	d	file:
kGenericPSDriver	Clients/PrinterSetupWizard/ThirdPage.cpp	51;"	d	file:
kGenericPostscript	Clients/PrinterSetupWizard/ThirdPage.cpp	46;"	d	file:
kGenericText	Clients/PrinterSetupWizard/ThirdPage.cpp	45;"	d	file:
kHostNameSmallTTL	mDNSCore/mDNSEmbeddedAPI.h	435;"	d
kHostNameTTL	mDNSCore/mDNSEmbeddedAPI.h	429;"	d
kHoursPerDay	mDNSShared/CommonServices.h	1160;"	d
kIDErr	mDNSShared/CommonServices.h	1044;"	d
kIEIconResource	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	62;"	d	file:
kIPPServiceType	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	352;"	d
kIPv6IfIndexBase	mDNSWindows/mDNSWin32.c	84;"	d	file:
kImmutableErr	mDNSShared/CommonServices.h	1067;"	d
kInProgressErr	mDNSShared/CommonServices.h	1030;"	d
kInUseErr	mDNSShared/CommonServices.h	1057;"	d
kIncompatibleErr	mDNSShared/CommonServices.h	1070;"	d
kIntegrityErr	mDNSShared/CommonServices.h	1069;"	d
kInterfaceSpecificOption	mDNSMacOSX/mDNSMacOSX.c	119;"	d	file:
kInterfaceVersionCurrent	mDNSShared/Java/JNISupport.c	/^    kInterfaceVersionCurrent        \/\/ Must match version in .jar file$/;"	e	enum:__anon122	file:
kInterfaceVersionOne	mDNSShared/Java/JNISupport.c	/^    kInterfaceVersionOne = 1,$/;"	e	enum:__anon122	file:
kInvalidSocketRef	mDNSShared/CommonServices.h	441;"	d
kInvalidSocketRef	mDNSShared/CommonServices.h	453;"	d
kInvalidSocketRef	mDNSVxWorks/mDNSVxWorksIPv4Only.c	107;"	d	file:
kKeepaliveRetryCount	mDNSCore/mDNSEmbeddedAPI.h	455;"	d
kKeepaliveRetryInterval	mDNSCore/mDNSEmbeddedAPI.h	457;"	d
kKnownServiceTable	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^static const KnownServiceEntry		kKnownServiceTable[] =$/;"	v	file:
kLLNetworkAddr	mDNSWindows/SystemService/Service.c	151;"	d	file:
kLLNetworkAddrMask	mDNSWindows/SystemService/Service.c	152;"	d	file:
kLLQOp_Event	mDNSCore/mDNSEmbeddedAPI.h	1789;"	d
kLLQOp_Refresh	mDNSCore/mDNSEmbeddedAPI.h	1788;"	d
kLLQOp_Setup	mDNSCore/mDNSEmbeddedAPI.h	1787;"	d
kLLQ_DefLease	mDNSCore/mDNSEmbeddedAPI.h	1783;"	d
kLLQ_INIT_RESEND	mDNSCore/mDNSEmbeddedAPI.h	1785;"	d
kLLQ_MAX_TRIES	mDNSCore/mDNSEmbeddedAPI.h	1784;"	d
kLLQ_Vers	mDNSCore/mDNSEmbeddedAPI.h	1782;"	d
kLPRServiceType	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	351;"	d
kLogLevelAlert	mDNSShared/DebugServices.h	327;"	d
kLogLevelAll	mDNSShared/DebugServices.h	316;"	d
kLogLevelAssert	mDNSShared/DebugServices.h	323;"	d
kLogLevelChatty	mDNSShared/DebugServices.h	317;"	d
kLogLevelCritical	mDNSShared/DebugServices.h	326;"	d
kLogLevelEmergency	mDNSShared/DebugServices.h	328;"	d
kLogLevelError	mDNSShared/DebugServices.h	325;"	d
kLogLevelInfo	mDNSShared/DebugServices.h	320;"	d
kLogLevelNotice	mDNSShared/DebugServices.h	321;"	d
kLogLevelOff	mDNSShared/DebugServices.h	330;"	d
kLogLevelRequire	mDNSShared/DebugServices.h	324;"	d
kLogLevelTrace	mDNSShared/DebugServices.h	319;"	d
kLogLevelTragic	mDNSShared/DebugServices.h	329;"	d
kLogLevelUninitialized	mDNSShared/DebugServices.h	315;"	d
kLogLevelVerbose	mDNSShared/DebugServices.h	318;"	d
kLogLevelWarning	mDNSShared/DebugServices.h	322;"	d
kMDNSDefaultName	mDNSVxWorks/mDNSVxWorksIPv4Only.c	97;"	d	file:
kMDNSDefaultName	mDNSWindows/mDNSWin32.c	74;"	d	file:
kMDNSPipeCommandCodeInvalid	mDNSVxWorks/mDNSVxWorks.c	86;"	d	file:
kMDNSPipeCommandCodeInvalid	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    kMDNSPipeCommandCodeInvalid         = 0,$/;"	e	enum:__anon188	file:
kMDNSPipeCommandCodeQuit	mDNSVxWorks/mDNSVxWorks.c	89;"	d	file:
kMDNSPipeCommandCodeQuit	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    kMDNSPipeCommandCodeQuit            = 3$/;"	e	enum:__anon188	file:
kMDNSPipeCommandCodeReconfigure	mDNSVxWorks/mDNSVxWorks.c	88;"	d	file:
kMDNSPipeCommandCodeReconfigure	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    kMDNSPipeCommandCodeReconfigure     = 2,$/;"	e	enum:__anon188	file:
kMDNSPipeCommandCodeReschedule	mDNSVxWorks/mDNSVxWorks.c	87;"	d	file:
kMDNSPipeCommandCodeReschedule	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    kMDNSPipeCommandCodeReschedule      = 1,$/;"	e	enum:__anon188	file:
kMDNSPipeMessageQueueSize	mDNSVxWorks/mDNSVxWorksIPv4Only.c	104;"	d	file:
kMDNSPipeMessageSize	mDNSVxWorks/mDNSVxWorksIPv4Only.c	105;"	d	file:
kMDNSPipeName	mDNSVxWorks/mDNSVxWorksIPv4Only.c	103;"	d	file:
kMDNSTaskName	mDNSVxWorks/mDNSVxWorksIPv4Only.c	99;"	d	file:
kMDNSTaskPriority	mDNSVxWorks/mDNSVxWorksIPv4Only.c	100;"	d	file:
kMDNSTaskStackSize	mDNSVxWorks/mDNSVxWorksIPv4Only.c	101;"	d	file:
kMalformedErr	mDNSShared/CommonServices.h	1078;"	d
kMaxTries	mDNSWindows/SystemService/Firewall.cpp	/^static const int kMaxTries			= 30;$/;"	v	file:
kMaxUpdateCredits	mDNSCore/mDNS.c	98;"	d	file:
kMetricRef	mDNSMacOSX/mDNSMacOSX.c	/^static const CFStringRef kMetricRef = CFSTR("Metric");$/;"	v	file:
kMicrosecondsPerMillisecond	mDNSShared/CommonServices.h	1152;"	d
kMicrosecondsPerSecond	mDNSShared/CommonServices.h	1151;"	d
kMillisecondsPerSecond	mDNSShared/CommonServices.h	1153;"	d
kMinimumReconfirmTime	mDNSCore/mDNS.c	2898;"	d	file:
kMinutesPerDay	mDNSShared/CommonServices.h	1159;"	d
kMinutesPerHour	mDNSShared/CommonServices.h	1158;"	d
kMismatchErr	mDNSShared/CommonServices.h	1084;"	d
kMonthsPerYear	mDNSShared/CommonServices.h	1163;"	d
kMulticastWakeupNumTries	mDNSWindows/mDNSWin32.c	132;"	d	file:
kMulticastWakeupSleepBetweenTries	mDNSWindows/mDNSWin32.c	133;"	d	file:
kNTPrintFile	Clients/PrinterSetupWizard/ThirdPage.cpp	34;"	d	file:
kNameErr	mDNSShared/CommonServices.h	1080;"	d
kNanosecondsPerMicrosecond	mDNSShared/CommonServices.h	1148;"	d
kNanosecondsPerMillisecond	mDNSShared/CommonServices.h	1149;"	d
kNanosecondsPerSecond	mDNSShared/CommonServices.h	1150;"	d
kNetBrowserInfoDictionaryKeyCallbacks	mDNSMacOSX/BonjourEvents.c	/^static const CFDictionaryKeyCallBacks kNetBrowserInfoDictionaryKeyCallbacks = {$/;"	v	file:
kNetBrowserInfoDictionaryValueCallbacks	mDNSMacOSX/BonjourEvents.c	/^static const CFDictionaryValueCallBacks kNetBrowserInfoDictionaryValueCallbacks = {$/;"	v	file:
kNoAckErr	mDNSShared/CommonServices.h	1094;"	d
kNoAddressAckErr	mDNSShared/CommonServices.h	1097;"	d
kNoErr	mDNSShared/CommonServices.h	1029;"	d
kNoMemoryErr	mDNSShared/CommonServices.h	1064;"	d
kNoResourcesErr	mDNSShared/CommonServices.h	1065;"	d
kNoSpaceErr	mDNSShared/CommonServices.h	1099;"	d
kNotFoundErr	mDNSShared/CommonServices.h	1063;"	d
kNotHandledErr	mDNSShared/CommonServices.h	1050;"	d
kNotInUseErr	mDNSShared/CommonServices.h	1056;"	d
kNotInitializedErr	mDNSShared/CommonServices.h	1054;"	d
kNotReadableErr	mDNSShared/CommonServices.h	1074;"	d
kNotReadyErr	mDNSShared/CommonServices.h	1081;"	d
kNotWritableErr	mDNSShared/CommonServices.h	1075;"	d
kOpenErr	mDNSShared/CommonServices.h	1091;"	d
kOptionErr	mDNSShared/CommonServices.h	1037;"	d
kOverrunErr	mDNSShared/CommonServices.h	1087;"	d
kPDLPCLKey	Clients/PrinterSetupWizard/ThirdPage.cpp	49;"	d	file:
kPDLPostscriptKey	Clients/PrinterSetupWizard/ThirdPage.cpp	48;"	d	file:
kPDLServiceType	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	350;"	d
kParamCountErr	mDNSShared/CommonServices.h	1042;"	d
kParamErr	mDNSShared/CommonServices.h	1041;"	d
kPathErr	mDNSShared/CommonServices.h	1040;"	d
kRacoonPort	mDNSMacOSX/mDNSMacOSX.c	4067;"	d	file:
kRangeErr	mDNSShared/CommonServices.h	1046;"	d
kRcvDestAddrOption	mDNSMacOS9/mDNSMacOS9.c	/^static const TSetByteOption kRcvDestAddrOption =$/;"	v	file:
kReadErr	mDNSShared/CommonServices.h	1082;"	d
kRegistryMaxKeyLength	mDNSWindows/mDNSWin32.c	79;"	d	file:
kRegistryMaxValueName	mDNSWindows/mDNSWin32.c	80;"	d	file:
kReportTopHosts	mDNSPosix/NetMonitor.c	110;"	d	file:
kReportTopServices	mDNSPosix/NetMonitor.c	109;"	d	file:
kRequestErr	mDNSShared/CommonServices.h	1047;"	d
kResponseErr	mDNSShared/CommonServices.h	1048;"	d
kRetryFirewallPeriod	mDNSWindows/SystemService/Service.c	71;"	d	file:
kRetrySleepPeriod	mDNSWindows/SystemService/Firewall.cpp	/^static const int kRetrySleepPeriod	= 1 * 1000; \/\/ 1 second$/;"	v	file:
kReusePortOption	mDNSMacOS9/mDNSMacOS9.c	/^static const TSetBooleanOption kReusePortOption =$/;"	v	file:
kSMBDeregisterEvent	mDNSWindows/mDNSWin32.c	278;"	d	file:
kSMBRegisterEvent	mDNSWindows/mDNSWin32.c	277;"	d	file:
kSMBStopEvent	mDNSWindows/mDNSWin32.c	276;"	d	file:
kSPSMaintenanceWakePeriod	mDNSWindows/SystemService/Service.c	76;"	d	file:
kScopeInterfaceID	mDNSCore/mDNSEmbeddedAPI.h	/^    kScopeInterfaceID  = 1,        \/\/ Scoped DNS server used only by scoped questions$/;"	e	enum:__anon71
kScopeNone	mDNSCore/mDNSEmbeddedAPI.h	/^    kScopeNone         = 0,        \/\/ DNS server used by unscoped questions$/;"	e	enum:__anon71
kScopeServiceID	mDNSCore/mDNSEmbeddedAPI.h	/^    kScopeServiceID    = 2         \/\/ Service specific DNS server used only by questions$/;"	e	enum:__anon71
kSecondsPerDay	mDNSShared/CommonServices.h	1156;"	d
kSecondsPerHour	mDNSShared/CommonServices.h	1155;"	d
kSecondsPerMinute	mDNSShared/CommonServices.h	1154;"	d
kSecondsPerWeek	mDNSShared/CommonServices.h	1157;"	d
kSecondsTo100NSUnits	mDNSWindows/SystemService/Service.c	75;"	d	file:
kSelectorErr	mDNSShared/CommonServices.h	1038;"	d
kServiceAdvertisedServices	mDNSWindows/RegNames.h	38;"	d
kServiceCacheEntryCount	mDNSWindows/RegNames.h	36;"	d
kServiceCacheEntryCount	mDNSWindows/RegNames.h	54;"	d
kServiceDependencies	mDNSWindows/SystemService/Service.c	69;"	d	file:
kServiceDynDNSBrowseDomains	mDNSWindows/RegNames.h	29;"	d
kServiceDynDNSBrowseDomains	mDNSWindows/RegNames.h	47;"	d
kServiceDynDNSDomains	mDNSWindows/RegNames.h	32;"	d
kServiceDynDNSDomains	mDNSWindows/RegNames.h	50;"	d
kServiceDynDNSEnabled	mDNSWindows/RegNames.h	33;"	d
kServiceDynDNSEnabled	mDNSWindows/RegNames.h	51;"	d
kServiceDynDNSHostNames	mDNSWindows/RegNames.h	30;"	d
kServiceDynDNSHostNames	mDNSWindows/RegNames.h	48;"	d
kServiceDynDNSRegistrationDomains	mDNSWindows/RegNames.h	31;"	d
kServiceDynDNSRegistrationDomains	mDNSWindows/RegNames.h	49;"	d
kServiceDynDNSStatus	mDNSWindows/RegNames.h	34;"	d
kServiceDynDNSStatus	mDNSWindows/RegNames.h	52;"	d
kServiceFirewallName	mDNSWindows/SystemService/Service.c	68;"	d	file:
kServiceListDefaultServiceColumnDescWidth	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	67;"	d	file:
kServiceListDefaultServiceColumnTypeWidth	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	66;"	d	file:
kServiceManageFirewall	mDNSWindows/RegNames.h	37;"	d
kServiceManageFirewall	mDNSWindows/RegNames.h	55;"	d
kServiceManageLLRouting	mDNSWindows/RegNames.h	35;"	d
kServiceManageLLRouting	mDNSWindows/RegNames.h	53;"	d
kServiceName	mDNSWindows/RegNames.h	28;"	d
kServiceName	mDNSWindows/RegNames.h	46;"	d
kServiceParametersAppleComputer	mDNSWindows/RegNames.h	25;"	d
kServiceParametersAppleComputer	mDNSWindows/RegNames.h	43;"	d
kServiceParametersBonjour	mDNSWindows/RegNames.h	26;"	d
kServiceParametersBonjour	mDNSWindows/RegNames.h	44;"	d
kServiceParametersNode	mDNSWindows/RegNames.h	27;"	d
kServiceParametersNode	mDNSWindows/RegNames.h	45;"	d
kServiceParametersSoftware	mDNSWindows/RegNames.h	24;"	d
kServiceParametersSoftware	mDNSWindows/RegNames.h	42;"	d
kSetMulticastTTLOption	mDNSMacOS9/mDNSMacOS9.c	/^static const TSetByteOption kSetMulticastTTLOption =$/;"	v	file:
kSetUnicastTTLOption	mDNSMacOS9/mDNSMacOS9.c	/^static const TSetByteOption kSetUnicastTTLOption =$/;"	v	file:
kSignatureErr	mDNSShared/CommonServices.h	1052;"	d
kSizeCString	mDNSShared/CommonServices.h	574;"	d
kSizeErr	mDNSShared/CommonServices.h	1079;"	d
kSkipErr	mDNSShared/CommonServices.h	1093;"	d
kStandardTTL	mDNSCore/mDNSEmbeddedAPI.h	428;"	d
kStateErr	mDNSShared/CommonServices.h	1045;"	d
kStaticCacheTTL	mDNSCore/mDNSEmbeddedAPI.h	448;"	d
kStatsActionClear	mDNSCore/mDNSEmbeddedAPI.h	/^    kStatsActionClear,$/;"	e	enum:__anon89
kStatsActionDecrement	mDNSCore/mDNSEmbeddedAPI.h	/^    kStatsActionDecrement,$/;"	e	enum:__anon89
kStatsActionIncrement	mDNSCore/mDNSEmbeddedAPI.h	/^    kStatsActionIncrement,$/;"	e	enum:__anon89
kStatsActionSet	mDNSCore/mDNSEmbeddedAPI.h	/^    kStatsActionSet$/;"	e	enum:__anon89
kStatsTypeExtraPackets	mDNSCore/mDNSEmbeddedAPI.h	/^    kStatsTypeExtraPackets,$/;"	e	enum:__anon90
kStatsTypeLatency	mDNSCore/mDNSEmbeddedAPI.h	/^    kStatsTypeLatency,$/;"	e	enum:__anon90
kStatsTypeMemoryUsage	mDNSCore/mDNSEmbeddedAPI.h	/^    kStatsTypeMemoryUsage,$/;"	e	enum:__anon90
kStatsTypeMsgSize	mDNSCore/mDNSEmbeddedAPI.h	/^    kStatsTypeMsgSize$/;"	e	enum:__anon90
kStatsTypeProbe	mDNSCore/mDNSEmbeddedAPI.h	/^    kStatsTypeProbe,$/;"	e	enum:__anon90
kStatsTypeStatus	mDNSCore/mDNSEmbeddedAPI.h	/^    kStatsTypeStatus,$/;"	e	enum:__anon90
kTCPSocketFlags_UseTLS	mDNSCore/mDNSEmbeddedAPI.h	/^    kTCPSocketFlags_UseTLS = (1 << 0)$/;"	e	enum:__anon97
kTCPSocketFlags_Zero	mDNSCore/mDNSEmbeddedAPI.h	/^    kTCPSocketFlags_Zero   = 0,$/;"	e	enum:__anon97
kTXTRecordKeyPath	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	58;"	d	file:
kTimeoutErr	mDNSShared/CommonServices.h	1058;"	d
kToolInstaller	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	51;"	d
kToolName	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	49;"	d
kToolPath	mDNSMacOSX/PreferencePane/PrivilegedOperations.h	50;"	d
kTunnelAddressInterface	mDNSMacOSX/helper.c	/^static const char kTunnelAddressInterface[] = "lo0";$/;"	v	file:
kTypeErr	mDNSShared/CommonServices.h	1092;"	d
kUnderrunErr	mDNSShared/CommonServices.h	1086;"	d
kUnexpectedErr	mDNSShared/CommonServices.h	1072;"	d
kUnicastWakeupNumTries	mDNSWindows/mDNSWin32.c	130;"	d	file:
kUnicastWakeupSleepBetweenTries	mDNSWindows/mDNSWin32.c	131;"	d	file:
kUnknownErr	mDNSShared/CommonServices.h	1036;"	d
kUnsupportedDataErr	mDNSShared/CommonServices.h	1068;"	d
kUnsupportedErr	mDNSShared/CommonServices.h	1071;"	d
kUpdateCreditRefreshInterval	mDNSCore/mDNS.c	99;"	d	file:
kValueErr	mDNSShared/CommonServices.h	1073;"	d
kVersionErr	mDNSShared/CommonServices.h	1051;"	d
kVersionStageAlpha	mDNSShared/CommonServices.h	1172;"	d
kVersionStageBeta	mDNSShared/CommonServices.h	1173;"	d
kVersionStageDevelopment	mDNSShared/CommonServices.h	1171;"	d
kVersionStageFinal	mDNSShared/CommonServices.h	1174;"	d
kVistaPrintFiles	Clients/PrinterSetupWizard/ThirdPage.cpp	39;"	d	file:
kWSARecvMsgGUID	mDNSWindows/mDNSWin32.c	/^static GUID											kWSARecvMsgGUID = WSAID_WSARECVMSG;$/;"	v	file:
kWaitToRetry	mDNSWindows/SystemService/Service.c	77;"	d	file:
kWeeksPerYear	mDNSShared/CommonServices.h	1162;"	d
kWholeV6Mask	mDNSMacOSX/helper.c	/^static const uint8_t kWholeV6Mask = 128;$/;"	v	file:
kWinSockMajorMin	mDNSWindows/mDNSWin32.c	76;"	d	file:
kWinSockMinorMin	mDNSWindows/mDNSWin32.c	77;"	d	file:
kWireCharSet	Clients/Java/SimpleChat.java	/^	static final String	kWireCharSet = "ISO-8859-1";$/;"	f	class:SimpleChat
kWriteErr	mDNSShared/CommonServices.h	1083;"	d
kZeroIndex	mDNSWindows/SystemService/Service.c	73;"	d	file:
k_addrs_max	mDNSPosix/nss_mdns.c	492;"	d	file:
k_aliases_max	mDNSPosix/nss_mdns.c	491;"	d	file:
k_comment_char	mDNSPosix/nss_mdns.c	/^const char k_comment_char = '#';$/;"	v
k_conf_file	mDNSPosix/nss_mdns.c	/^const char * k_conf_file = "\/etc\/nss_mdns.conf";$/;"	v
k_default_domains	mDNSPosix/nss_mdns.c	/^const char * k_default_domains [] =$/;"	v
k_dns_separator	mDNSPosix/nss_mdns.c	/^static const char k_dns_separator = '.';$/;"	v	file:
k_empty_config	mDNSPosix/nss_mdns.c	/^const config_t k_empty_config =$/;"	v
k_hostname_maxlen	mDNSPosix/nss_mdns.c	489;"	d	file:
k_keyword_domain	mDNSPosix/nss_mdns.c	/^const char * k_keyword_domain = "domain";$/;"	v
k_label_maxlen	mDNSPosix/nss_mdns.c	/^static const unsigned int k_label_maxlen = DNS_LABEL_MAXLEN;$/;"	v	file:
k_local_suffix	mDNSPosix/nss_mdns.c	/^static const char * k_local_suffix = "local";$/;"	v	file:
k_select_time	mDNSPosix/nss_mdns.c	/^k_select_time = { 0, 500000 };$/;"	v	typeref:struct:timeval	file:
k_table_af	mDNSPosix/nss_mdns.c	/^static const table_entry_t k_table_af [] =$/;"	v	file:
k_table_af_size	mDNSPosix/nss_mdns.c	/^static const int k_table_af_size =$/;"	v	file:
k_table_ns_class	mDNSPosix/nss_mdns.c	/^static const char * k_table_ns_class [] =$/;"	v	file:
k_table_ns_class_size	mDNSPosix/nss_mdns.c	/^static const int k_table_ns_class_size =$/;"	v	file:
k_table_ns_type	mDNSPosix/nss_mdns.c	/^static const char * k_table_ns_type [] =$/;"	v	file:
k_table_ns_type_size	mDNSPosix/nss_mdns.c	/^static const int k_table_ns_type_size =$/;"	v	file:
kacontext	mDNSShared/dnssd_clientstub.c	/^    void             *kacontext;$/;"	m	struct:_DNSServiceRef_t	file:
key	mDNSCore/dnssec.h	/^	RRVerifier *key;		\/\/ Public key for that RRSET$/;"	m	struct:AuthChain_struct
key	mDNSCore/dnssec.h	/^    RRVerifier *key;                \/\/ DNSKEY for rrset$/;"	m	struct:DNSSECVerifier_struct
key	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataDNSKey key;$/;"	m	union:__anon58
key	mDNSShared/uds_daemon.c	/^    mDNSu32 key;$/;"	m	struct:registered_record_entry	file:
keyTag	Clients/dns-sd.c	/^    unsigned short keyTag;$/;"	m	struct:__anon168	file:
keyTag	Clients/dns-sd.c	/^    unsigned short keyTag;$/;"	m	struct:__anon170	file:
key_set	mDNSShared/dnsextd_parser.y	/^key_set:$/;"	l
keycontent	mDNSShared/dnsextd_parser.y	/^keycontent:$/;"	l
keydata_ipad	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 keydata_ipad[HMAC_LEN];              \/\/ padded key for inner hash rounds$/;"	m	struct:DomainAuthInfo
keydata_opad	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 keydata_opad[HMAC_LEN];              \/\/ padded key for outer hash rounds$/;"	m	struct:DomainAuthInfo
keyname	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname keyname;$/;"	m	struct:DomainAuthInfo
keystatement	mDNSShared/dnsextd_parser.y	/^keystatement:$/;"	l
keystatements	mDNSShared/dnsextd_parser.y	/^keystatements:$/;"	l
keytag	Clients/dns-sd.c	/^static unsigned int keytag(unsigned char *key, unsigned int keysize)  $/;"	f	file:
keytag	mDNSCore/DNSCommon.c	/^mDNSlocal mDNSu32 keytag(mDNSu8 *key, mDNSu32 keysize)$/;"	f
keytag	mDNSCore/dnssec.c	/^mDNSlocal mDNSu32 keytag(mDNSu8 *key, mDNSu32 keysize)$/;"	f
kickRacoon	mDNSMacOSX/helper.c	/^kickRacoon(void)$/;"	f	file:
killmdnsd	mDNSPosix/mdnsd.sh	/^	killmdnsd() {$/;"	f
kmDNSAutoTunnelSetKeysDelete	mDNSMacOSX/helper.h	/^    kmDNSAutoTunnelSetKeysDelete$/;"	e	enum:mDNSAutoTunnelSetKeysReplaceDelete
kmDNSAutoTunnelSetKeysReplace	mDNSMacOSX/helper.h	/^    kmDNSAutoTunnelSetKeysReplace = 1,$/;"	e	enum:mDNSAutoTunnelSetKeysReplaceDelete
kmDNSBackToMyMacConfig	mDNSMacOSX/mDNSMacOSX.h	/^    kmDNSBackToMyMacConfig,$/;"	e	enum:mDNSDynamicStoreSetConfigKey
kmDNSComputerName	mDNSMacOSX/helper.h	/^    kmDNSComputerName = 1,$/;"	e	enum:mDNSPreferencesSetNameKey
kmDNSDebugState	mDNSMacOSX/mDNSMacOSX.h	/^    kmDNSDebugState, $/;"	e	enum:mDNSDynamicStoreSetConfigKey
kmDNSDown	mDNSMacOSX/helper.h	/^    kmDNSDown$/;"	e	enum:mDNSUpDown
kmDNSDynamicConfig	mDNSMacOSX/mDNSMacOSX.h	/^    kmDNSDynamicConfig,$/;"	e	enum:mDNSDynamicStoreSetConfigKey
kmDNSEnableLoggingStr	mDNSMacOSX/daemon.c	59;"	d	file:
kmDNSHelperServiceName	mDNSMacOSX/helper.h	21;"	d
kmDNSIPv6IPv4Tunnel	mDNSMacOSX/helper.c	/^    kmDNSIPv6IPv4Tunnel,$/;"	e	enum:_mDNSTunnelType	file:
kmDNSIPv6IPv6Tunnel	mDNSMacOSX/helper.c	/^    kmDNSIPv6IPv6Tunnel$/;"	e	enum:_mDNSTunnelType	file:
kmDNSKcAccount	mDNSMacOSX/helper.h	/^    kmDNSKcAccount, \/\/ Account$/;"	e	enum:mDNSKeyChainAttributes
kmDNSKcKey	mDNSMacOSX/helper.h	/^    kmDNSKcKey,     \/\/ Key$/;"	e	enum:mDNSKeyChainAttributes
kmDNSKcName	mDNSMacOSX/helper.h	/^    kmDNSKcName     \/\/ Name$/;"	e	enum:mDNSKeyChainAttributes
kmDNSKcWhere	mDNSMacOSX/helper.h	/^    kmDNSKcWhere,   \/\/ Where$/;"	e	enum:mDNSKeyChainAttributes
kmDNSLocalHostName	mDNSMacOSX/helper.h	/^    kmDNSLocalHostName$/;"	e	enum:mDNSPreferencesSetNameKey
kmDNSMulticastConfig	mDNSMacOSX/mDNSMacOSX.h	/^    kmDNSMulticastConfig = 1,$/;"	e	enum:mDNSDynamicStoreSetConfigKey
kmDNSNoTunnel	mDNSMacOSX/helper.c	/^    kmDNSNoTunnel,$/;"	e	enum:_mDNSTunnelType	file:
kmDNSPrivateConfig	mDNSMacOSX/mDNSMacOSX.h	/^    kmDNSPrivateConfig,$/;"	e	enum:mDNSDynamicStoreSetConfigKey
kmDNSResponderManagedPrefsID	mDNSMacOSX/mDNSMacOSX.c	175;"	d	file:
kmDNSResponderPrefID	mDNSMacOSX/daemon.c	61;"	d	file:
kmDNSResponderPrefIDStr	mDNSMacOSX/daemon.c	60;"	d	file:
kmDNSResponderServName	mDNSMacOSX/mDNSMacOSX.h	58;"	d
kmDNSSleepProxyServersState	mDNSMacOSX/mDNSMacOSX.h	/^    kmDNSSleepProxyServersState,$/;"	e	enum:mDNSDynamicStoreSetConfigKey
kmDNSTunnelPolicyGenerate	mDNSMacOSX/helper.c	/^    kmDNSTunnelPolicyGenerate$/;"	e	enum:_mDNSTunnelPolicyWhich	file:
kmDNSTunnelPolicySetup	mDNSMacOSX/helper.c	/^    kmDNSTunnelPolicySetup,$/;"	e	enum:_mDNSTunnelPolicyWhich	file:
kmDNSTunnelPolicyTeardown	mDNSMacOSX/helper.c	/^    kmDNSTunnelPolicyTeardown,$/;"	e	enum:_mDNSTunnelPolicyWhich	file:
kmDNSUp	mDNSMacOSX/helper.h	/^    kmDNSUp = 1,$/;"	e	enum:mDNSUpDown
kqEntry	mDNSMacOSX/mDNSMacOSX.h	/^    KQueueEntry *kqEntry;$/;"	m	struct:TCPSocket_struct
kqs	mDNSMacOSX/daemon.c	/^    KQueueEntry kqs;$/;"	m	struct:KQSocketEventSource	file:
kqsv4	mDNSMacOSX/mDNSMacOSX.h	/^    KQueueEntry kqsv4;$/;"	m	struct:__anon145
kqsv6	mDNSMacOSX/mDNSMacOSX.h	/^    KQueueEntry kqsv6;$/;"	m	struct:__anon145
l	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[ 8]; mDNSu16 w[4]; mDNSu32 l[2]; } mDNSOpaque64;$/;"	m	union:__anon33
l	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[16]; mDNSu16 w[8]; mDNSu32 l[4]; } mDNSOpaque128;$/;"	m	union:__anon34
lSize	mDNSCore/DNSCommon.c	/^    unsigned lSize : 1;$/;"	m	struct:mDNSprintf_format	file:
label1	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.Label label1;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
label1	Clients/SimpleChat.NET/SimpleChat.cs	/^		private System.Windows.Forms.Label      label1;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
label2	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.Label label2;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
label3	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.Label label3;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
label4	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.Label label4;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
label5	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.Label label5;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
labels	Clients/dns-sd.c	/^    unsigned char labels;$/;"	m	struct:__anon170	file:
largerec	mDNSCore/dnssec.c	/^LargeCacheRecord largerec;$/;"	v
lastSeen	mDNSVxWorks/mDNSVxWorks.h	/^    mDNSs32 lastSeen;                               \/\/ If exists == 0, last time this interface appeared in getifaddrs list.$/;"	m	struct:NetworkInterfaceInfoVxWorks
lastSuccessfulProtocol	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTProtocol lastSuccessfulProtocol;            \/\/ To send correct deletion request & update non-PCP external address operations$/;"	m	struct:NATTraversalInfo_struct
lastcompname	mDNSMacOSX/helper.c	/^char lastcompname[MAX_DOMAIN_LABEL+1] = {0}; \/\/ the last computer name saved to preferences$/;"	v
lasthostname	mDNSMacOSX/helper.c	/^char lasthostname[MAX_DOMAIN_LABEL+1] = {0}; \/\/ the last local host name saved to preferences$/;"	v
lastid	mDNSPosix/Identify.c	/^static mDNSOpaque16 lastid, id;$/;"	v	file:
lastsrc	mDNSPosix/Identify.c	/^static mDNSAddr lastsrc, hostaddr, target;$/;"	v	file:
lastsuccess	mDNSMacOSX/daemon.c	/^    mDNSs32 lastsuccess;$/;"	m	struct:DNSServiceBrowser_struct	file:
lasttest	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 lasttest;           \/\/ Time we sent last bug-detection query to this server$/;"	m	struct:DNSServer
launch_data_get_machport	mDNSMacOSX/helper-main.c	51;"	d	file:
launchd_fds	mDNSMacOSX/daemon.c	/^static dnssd_sock_t *launchd_fds = mDNSNULL;$/;"	v	file:
launchd_fds_count	mDNSMacOSX/daemon.c	/^static mDNSu32 launchd_fds_count = 0;$/;"	v	file:
lease	mDNSShared/dnsextd.h	/^    mDNSu32 lease;            \/\/ original lease, in seconds$/;"	m	struct:LLQEntry
leftJustify	mDNSCore/DNSCommon.c	/^    unsigned leftJustify : 1;$/;"	m	struct:mDNSprintf_format	file:
len	mDNSMacOSX/helper.c	/^    u_int16_t len;$/;"	m	struct:vpnctl_hdr_struct	file:
len	mDNSShared/dnsextd.h	/^    size_t len;$/;"	m	struct:__anon114
lenval_compare	mDNSCore/dnssec.c	/^mDNSlocal int lenval_compare(mDNSu8 *d1, mDNSu8 *d2, int *len1, int *len2, int rem1, int rem2)$/;"	f
libSystemVersion	mDNSShared/dnssd_clientstub.c	/^static int32_t libSystemVersion = 0;$/;"	v	file:
lib_q	mDNSMacOSX/Private/dns_services.c	/^    dispatch_queue_t  lib_q;         \/\/ internal queue created in library itself   $/;"	m	struct:_DNSXConnRef_t	file:
library	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^HMODULE library;$/;"	m	class:CPrinterSetupWizardSheet::CUPSLibrary
linenum	mDNSPosix/nss_mdns.c	/^    int linenum;$/;"	m	struct:__anon26	file:
link	mDNSMacOS9/Mac OS Test Searcher.c	/^typedef struct { ServiceInfo i; mDNSBool add; mDNSBool dom; OTLink link; } linkedServiceInfo;$/;"	m	struct:__anon182	file:
link	mDNSMacOS9/Searcher.c	/^    OTLink link;$/;"	m	struct:__anon187	file:
linkedServiceInfo	mDNSMacOS9/Mac OS Test Searcher.c	/^typedef struct { ServiceInfo i; mDNSBool add; mDNSBool dom; OTLink link; } linkedServiceInfo;$/;"	t	typeref:struct:__anon182	file:
linkedServiceInfo	mDNSMacOS9/Searcher.c	/^} linkedServiceInfo;$/;"	t	typeref:struct:__anon187	file:
listBox1_SelectedIndexChanged	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private void listBox1_SelectedIndexChanged(object sender, System.EventArgs e)$/;"	m	class:DNSServiceBrowser_NET.Form1	file:
listenfd	mDNSShared/uds_daemon.c	/^static dnssd_sock_t listenfd = dnssd_InvalidSocket;$/;"	v	file:
llqOp	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 llqOp;$/;"	m	struct:__anon53
llq_addr	mDNSShared/dnsextd.h	/^    struct sockaddr_in llq_addr;        \/\/ the address we will receive llq requests on.$/;"	m	struct:__anon116	typeref:struct:__anon116::sockaddr_in
llq_port	mDNSShared/dnsextd.h	/^    mDNSIPPort llq_port;           \/\/ listening port for llq$/;"	m	struct:__anon116
llq_tcpsd	mDNSShared/dnsextd.h	/^    int llq_tcpsd;                      \/\/ listening TCP socket for llq service$/;"	m	struct:__anon116
llq_udpsd	mDNSShared/dnsextd.h	/^    int llq_udpsd;                      \/\/ listening UDP socket for llq service$/;"	m	struct:__anon116
llqlease	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 llqlease;$/;"	m	struct:__anon53
load_config	mDNSPosix/nss_mdns.c	/^load_config (config_t * conf)$/;"	f	file:
loc_inner	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv6Addr loc_inner;$/;"	m	struct:ClientTunnel
loc_outer	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv4Addr loc_outer;$/;"	m	struct:ClientTunnel
loc_outer6	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv6Addr loc_outer6;$/;"	m	struct:ClientTunnel
localdomain	mDNSCore/mDNSEmbeddedAPI.h	2527;"	d
localtime_r	mDNSWindows/PosixCompat.c	/^localtime_r( const time_t * clock, struct tm * result )$/;"	f
location	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString location;$/;"	m	struct:PrinterSetupWizard::Queue
lock	mDNSVxWorks/mDNSVxWorks.h	/^    SEM_ID lock;$/;"	m	struct:mDNS_PlatformSupport_struct
lockID	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    SEM_ID lockID;$/;"	m	struct:mDNS_PlatformSupport_struct
lock_Questions	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 lock_Questions;$/;"	m	struct:mDNS_struct
lock_Records	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 lock_Records;$/;"	m	struct:mDNS_struct
lock_rrcache	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 lock_rrcache;                \/\/ For debugging: Set at times when these lists may not be modified$/;"	m	struct:mDNS_struct
log_client	mDNSMacOSX/daemon.c	/^static aslclient log_client = NULL;$/;"	v	file:
log_msg	mDNSMacOSX/daemon.c	/^static aslmsg log_msg = NULL;$/;"	v	file:
logclient	mDNSMacOSX/helper-main.c	/^static aslclient logclient = NULL;$/;"	v	file:
logcounter	mDNSShared/dnssd_clientstub.c	/^    uint32_t logcounter;                \/\/ Counter used to control number of syslog messages we write$/;"	m	struct:_DNSServiceRef_t	file:
long_long_compat	mDNSShared/CommonServices.h	/^typedef __int64 long_long_compat;$/;"	t
long_long_compat	mDNSShared/CommonServices.h	/^typedef signed long long long_long_compat;$/;"	t
lostRecords	mDNSMacOS9/Mac OS Test Searcher.c	/^	Boolean lostRecords;$/;"	m	struct:__anon181	file:
lostRecords	mDNSMacOS9/Searcher.c	/^    Boolean lostRecords;$/;"	m	struct:__anon186	file:
m	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS             *m;$/;"	m	struct:tcpInfo_t
m	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS             *m;$/;"	m	struct:tcpLNTInfo_struct
m	mDNSCore/mDNSEmbeddedAPI.h	/^    union { DNSMessage m; void *p; } imsg;  \/\/ Incoming message received from wire$/;"	m	union:mDNS_struct::__anon93
m	mDNSMacOS9/Mac OS Test Responder.c	/^static mDNS m;$/;"	v	file:
m	mDNSMacOS9/SubTypeTester.c	/^static mDNS m;$/;"	v	file:
m	mDNSMacOS9/mDNSMacOS9.h	/^typedef union  { TOptionHeader h; TIPAddMulticastOption m; TSetByteOption i; TSetBooleanOption b; } TOptionBlock;$/;"	m	union:__anon180
m	mDNSMacOSX/mDNSMacOSX.h	/^    mDNS                    *m;$/;"	m	struct:NetworkInterfaceInfoOSX_struct
m	mDNSMacOSX/mDNSMacOSX.h	/^    mDNS                    *m;$/;"	m	struct:__anon145
m	mDNSMacOSX/mDNSMacOSX.h	/^    mDNS *m; \/\/ So we can call KQueueLock from the SSLHandshake thread$/;"	m	struct:TCPSocket_struct
m	mDNSWindows/mDNSWin32.h	/^	mDNS						*m;$/;"	m	struct:UDPSocket_struct
m	mDNSWindows/mDNSWin32.h	/^	mDNS					*	m;$/;"	m	struct:TCPSocket_struct
mBandID	Clients/ExplorerPlugin/ExplorerBar.h	/^DWORD mBandID;$/;"	m	class:ExplorerBar
mBrowser	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^		DNSBrowserRef				mBrowser;$/;"	m	class:ChooserDialog
mBrowser	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.h	/^		DNSBrowserRef								mBrowser;$/;"	m	class:BrowserDialog
mBrowserEntries	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.h	/^		CArray < BrowserEntry, BrowserEntry >		mBrowserEntries;$/;"	m	class:BrowserDialog
mBrowserList	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.h	/^		CListCtrl	mBrowserList;$/;"	m	class:BrowserDialog
mCLSIDObject	Clients/ExplorerPlugin/ClassFactory.h	/^CLSID mCLSIDObject;$/;"	m	class:ClassFactory
mChooserList	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^		CListCtrl mChooserList;$/;"	m	class:ChooserDialog
mDNS	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct mDNS_struct mDNS;$/;"	t	typeref:struct:mDNS_struct
mDNS	mDNSPosix/mDNSPosix.c	/^    mDNS *mDNS;$/;"	m	struct:IfChangeRec	file:
mDNSASLLog	mDNSMacOSX/LegacyNATTraversal.c	29;"	d	file:
mDNSASLLog	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSASLLog(uuid_t *uuid, const char *subdomain, const char *result, const char *signature, const char *fmt, ...)$/;"	f
mDNSAddToFirewall	mDNSWindows/SystemService/Firewall.cpp	/^mDNSAddToFirewall$/;"	f
mDNSAddr	mDNSCore/mDNSEmbeddedAPI.h	/^} mDNSAddr;$/;"	t	typeref:struct:__anon37
mDNSAddrIPv4FromMappedIPv6	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool mDNSAddrIPv4FromMappedIPv6(mDNSv6Addr *in, mDNSv4Addr* out)$/;"	f
mDNSAddrIsDNSMulticast	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool mDNSAddrIsDNSMulticast(const mDNSAddr *ip)$/;"	f
mDNSAddrIsRFC1918	mDNSCore/mDNSEmbeddedAPI.h	2894;"	d
mDNSAddrMapIPv4toIPv6	mDNSCore/DNSCommon.c	/^mDNSexport void mDNSAddrMapIPv4toIPv6(mDNSv4Addr* in, mDNSv6Addr* out)$/;"	f
mDNSAddrType_IPv4	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddrType_IPv4    = 4,$/;"	e	enum:__anon35
mDNSAddrType_IPv6	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddrType_IPv6    = 6,$/;"	e	enum:__anon35
mDNSAddrType_None	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddrType_None    = 0,$/;"	e	enum:__anon35
mDNSAddrType_Unknown	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddrType_Unknown = ~0   \/\/ Special marker value used in known answer list recording$/;"	e	enum:__anon35
mDNSAddressIsAllDNSLinkGroup	mDNSCore/mDNSEmbeddedAPI.h	2920;"	d
mDNSAddressIsLinkLocal	mDNSCore/mDNSEmbeddedAPI.h	2943;"	d
mDNSAddressIsLoopback	mDNSCore/mDNSEmbeddedAPI.h	2950;"	d
mDNSAddressIsNonLinkLocalIPv4	mDNSVxWorks/mDNSVxWorks.c	1050;"	d	file:
mDNSAddressIsOnes	mDNSCore/mDNSEmbeddedAPI.h	2932;"	d
mDNSAddressIsValid	mDNSCore/mDNSEmbeddedAPI.h	2936;"	d
mDNSAddressIsValidNonZero	mDNSCore/mDNSEmbeddedAPI.h	2928;"	d
mDNSAddressIsZero	mDNSCore/mDNSEmbeddedAPI.h	2924;"	d
mDNSAutoTunnelSetKeys	mDNSMacOSX/helper-stubs.c	/^int mDNSAutoTunnelSetKeys(int replacedelete, v6addr_t local_inner,$/;"	f
mDNSAutoTunnelSetKeysReplaceDelete	mDNSMacOSX/helper.h	/^enum mDNSAutoTunnelSetKeysReplaceDelete$/;"	g
mDNSBool	mDNSCore/mDNSEmbeddedAPI.h	/^typedef unsigned char mDNSBool;$/;"	t
mDNSBucketData	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal int mDNSBucketData(int inputData, int interval)$/;"	f
mDNSCallback	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void mDNSCallback (mDNS *const m, mStatus result);$/;"	t
mDNSConfigureServer	mDNSMacOSX/helper-stubs.c	/^void mDNSConfigureServer(int updown, const char *const prefix, const domainname *const fqdn)$/;"	f
mDNSCoreBeSleepProxyServer	mDNSCore/mDNSEmbeddedAPI.h	3474;"	d
mDNSCoreBeSleepProxyServer_internal	mDNSCore/mDNS.c	/^mDNSexport void mDNSCoreBeSleepProxyServer_internal(mDNS *const m, mDNSu8 sps, mDNSu8 port, mDNSu8 marginalpower, mDNSu8 totpower, mDNSu8 features)$/;"	f
mDNSCoreFreeProxyRR	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreFreeProxyRR(mDNS *const m)$/;"	f
mDNSCoreHaveAdvertisedMulticastServices	mDNSCore/mDNS.c	/^mDNSexport mDNSBool mDNSCoreHaveAdvertisedMulticastServices(mDNS *const m)$/;"	f
mDNSCoreInitComplete	mDNSCore/mDNS.c	/^mDNSexport void mDNSCoreInitComplete(mDNS *const m, mStatus result)$/;"	f
mDNSCoreInitComplete	mDNSShared/dnsextd.c	/^void mDNSCoreInitComplete( mDNS * const m, mStatus result) { ( void ) m; ( void ) result; }$/;"	f
mDNSCoreIntervalToNextWake	mDNSCore/mDNS.c	/^mDNSexport mDNSs32 mDNSCoreIntervalToNextWake(mDNS *const m, mDNSs32 now)$/;"	f
mDNSCoreMachineSleep	mDNSCore/mDNS.c	/^mDNSexport void mDNSCoreMachineSleep(mDNS *const m, mDNSBool sleep)$/;"	f
mDNSCoreMachineSleep	mDNSShared/dnsextd.c	/^void mDNSCoreMachineSleep(mDNS * const m, mDNSBool wake) { ( void ) m; ( void ) wake; }$/;"	f
mDNSCorePrintStoredProxyRecords	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCorePrintStoredProxyRecords(mDNS *const m)$/;"	f
mDNSCoreReadyForSleep	mDNSCore/mDNS.c	/^mDNSexport mDNSBool mDNSCoreReadyForSleep(mDNS *m, mDNSs32 now)$/;"	f
mDNSCoreReceive	mDNSCore/mDNS.c	/^mDNSexport void mDNSCoreReceive(mDNS *const m, void *const pkt, const mDNSu8 *const end,$/;"	f
mDNSCoreReceive	mDNSPosix/Identify.c	/^mDNSexport void mDNSCoreReceive(mDNS *const m, DNSMessage *const msg, const mDNSu8 *const end,$/;"	f
mDNSCoreReceive	mDNSPosix/Identify.c	24;"	d	file:
mDNSCoreReceive	mDNSPosix/Identify.c	26;"	d	file:
mDNSCoreReceive	mDNSPosix/NetMonitor.c	/^mDNSexport void mDNSCoreReceive(mDNS *const m, DNSMessage *const msg, const mDNSu8 *const end,$/;"	f
mDNSCoreReceive	mDNSPosix/NetMonitor.c	24;"	d	file:
mDNSCoreReceive	mDNSPosix/NetMonitor.c	26;"	d	file:
mDNSCoreReceive	mDNSShared/dnsextd.c	/^void mDNSCoreReceive(mDNS *const m, void *const msg, const mDNSu8 *const end,$/;"	f
mDNSCoreReceiveCacheCheck	mDNSCore/mDNS.c	/^mDNSlocal CacheRecord* mDNSCoreReceiveCacheCheck(mDNS *const m, const DNSMessage *const response, uDNS_LLQType LLQType,$/;"	f
mDNSCoreReceiveNoDNSSECAnswers	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreReceiveNoDNSSECAnswers(mDNS *const m, const DNSMessage *const response, const mDNSu8 *end, const mDNSAddr *dstaddr,$/;"	f
mDNSCoreReceiveNoUnicastAnswers	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreReceiveNoUnicastAnswers(mDNS *const m, const DNSMessage *const response, const mDNSu8 *end, const mDNSAddr *dstaddr,$/;"	f
mDNSCoreReceiveQuery	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreReceiveQuery(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *const end,$/;"	f
mDNSCoreReceiveRawARP	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreReceiveRawARP(mDNS *const m, const ARP_EthIP *const arp, const mDNSInterfaceID InterfaceID)$/;"	f
mDNSCoreReceiveRawND	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreReceiveRawND(mDNS *const m, const mDNSEthAddr *const sha, const mDNSv6Addr *spa,$/;"	f
mDNSCoreReceiveRawPacket	mDNSCore/mDNS.c	/^mDNSexport void mDNSCoreReceiveRawPacket(mDNS *const m, const mDNSu8 *const p, const mDNSu8 *const end, const mDNSInterfaceID InterfaceID)$/;"	f
mDNSCoreReceiveRawTransportPacket	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreReceiveRawTransportPacket(mDNS *const m, const mDNSEthAddr *const sha, const mDNSAddr *const src, const mDNSAddr *const dst, const mDNSu8 protocol,$/;"	f
mDNSCoreReceiveResponse	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreReceiveResponse(mDNS *const m,$/;"	f
mDNSCoreReceiveUpdate	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreReceiveUpdate(mDNS *const m,$/;"	f
mDNSCoreReceiveUpdateR	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreReceiveUpdateR(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *end, const mDNSAddr *srcaddr, const mDNSInterfaceID InterfaceID)$/;"	f
mDNSCoreRegisteredProxyRecord	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool mDNSCoreRegisteredProxyRecord(mDNS *const m, AuthRecord *rr)$/;"	f
mDNSCoreResetRecord	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreResetRecord(mDNS *const m)$/;"	f
mDNSCoreRestartAddressQueries	mDNSCore/mDNS.c	/^mDNSexport void mDNSCoreRestartAddressQueries(mDNS *const m, mDNSBool SearchDomainsChanged, FlushCache flushCacheRecords,$/;"	f
mDNSCoreRestartQueries	mDNSCore/mDNS.c	/^mDNSexport void mDNSCoreRestartQueries(mDNS *const m)$/;"	f
mDNSCoreRestartQuestion	mDNSCore/mDNS.c	/^mDNSexport void mDNSCoreRestartQuestion(mDNS *const m, DNSQuestion *q)$/;"	f
mDNSCoreRestartRegistration	mDNSCore/mDNS.c	/^mDNSexport void mDNSCoreRestartRegistration(mDNS *const m, AuthRecord  *rr, int announceCount)$/;"	f
mDNSCoreStoreProxyRR	mDNSCore/mDNS.c	/^mDNSlocal void mDNSCoreStoreProxyRR(mDNS *const m, const mDNSInterfaceID InterfaceID, AuthRecord *const rr)$/;"	f
mDNSDaemonIdle	mDNSMacOSX/daemon.c	/^mDNSlocal mDNSs32 mDNSDaemonIdle(mDNS *const m)$/;"	f
mDNSDaemonInitialize	mDNSMacOSX/daemon.c	/^mDNSlocal kern_return_t mDNSDaemonInitialize(void)$/;"	f
mDNSDeferIPv4	mDNSVxWorks/mDNSVxWorks.c	/^void    mDNSDeferIPv4( mDNSBool inDefer )$/;"	f
mDNSDynamicStoreSetConfig	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSDynamicStoreSetConfig(int key, const char *subkey, CFPropertyListRef value)$/;"	f
mDNSDynamicStoreSetConfigKey	mDNSMacOSX/mDNSMacOSX.h	/^enum mDNSDynamicStoreSetConfigKey$/;"	g
mDNSEthAddr	mDNSCore/mDNSEmbeddedAPI.h	/^typedef mDNSOpaque48 mDNSEthAddr;       \/\/ An Ethernet address is a six-byte opaque identifier (not an integer)$/;"	t
mDNSEthAddressIsZero	mDNSCore/mDNSEmbeddedAPI.h	2915;"	d
mDNSFinderBrowseThreshold	mDNSCore/mDNS.c	11411;"	d	file:
mDNSFirewallAddApp	mDNSWindows/SystemService/Firewall.cpp	/^mDNSFirewallAddApp$/;"	f	file:
mDNSFirewallAppIsEnabled	mDNSWindows/SystemService/Firewall.cpp	/^mDNSFirewallAppIsEnabled$/;"	f	file:
mDNSFirewallCleanup	mDNSWindows/SystemService/Firewall.cpp	/^mDNSFirewallCleanup$/;"	f	file:
mDNSFirewallInitialize	mDNSWindows/SystemService/Firewall.cpp	/^mDNSFirewallInitialize(OUT INetFwProfile ** fwProfile)$/;"	f	file:
mDNSFirewallIsFileAndPrintSharingEnabled	mDNSWindows/SystemService/Firewall.cpp	/^mDNSFirewallIsFileAndPrintSharingEnabled$/;"	f	file:
mDNSGetRemoteMAC	mDNSMacOSX/helper-stubs.c	/^void mDNSGetRemoteMAC(mDNS *const m, int family, v6addr_t raddr)$/;"	f
mDNSHelperError	mDNSMacOSX/helper-stubs.c	/^const char *mDNSHelperError(int err)$/;"	f
mDNSHelperErrorBase	mDNSMacOSX/helper.h	/^    mDNSHelperErrorBase = 2300,$/;"	e	enum:mDNSHelperErrors
mDNSHelperErrorEnd	mDNSMacOSX/helper.h	/^    mDNSHelperErrorEnd$/;"	e	enum:mDNSHelperErrors
mDNSHelperErrors	mDNSMacOSX/helper.h	/^enum mDNSHelperErrors$/;"	g
mDNSHelperInit	mDNSMacOSX/helper-stubs.c	/^mDNSexport mStatus mDNSHelperInit()$/;"	f
mDNSIPPort	mDNSCore/mDNSEmbeddedAPI.h	/^typedef mDNSOpaque16 mDNSIPPort;        \/\/ An IP port is a two-byte opaque identifier (not an integer)$/;"	t
mDNSIPPortIsZero	mDNSCore/mDNSEmbeddedAPI.h	2910;"	d
mDNSIPv4AddressIsOnes	mDNSCore/mDNSEmbeddedAPI.h	2917;"	d
mDNSIPv4AddressIsZero	mDNSCore/mDNSEmbeddedAPI.h	2913;"	d
mDNSIPv6AddressIsOnes	mDNSCore/mDNSEmbeddedAPI.h	2918;"	d
mDNSIPv6AddressIsZero	mDNSCore/mDNSEmbeddedAPI.h	2914;"	d
mDNSInetAddress	mDNSMacOS9/mDNSMacOS9.c	/^typedef struct { OTAddressType fAddressType; mDNSIPPort fPort; mDNSv4Addr fHost; UInt8 fUnused[8]; } mDNSInetAddress;$/;"	t	typeref:struct:__anon174	file:
mDNSInterfaceData	mDNSWindows/mDNSWin32.h	/^struct	mDNSInterfaceData$/;"	s
mDNSInterfaceData	mDNSWindows/mDNSWin32.h	/^typedef struct	mDNSInterfaceData	mDNSInterfaceData;$/;"	t	typeref:struct:mDNSInterfaceData
mDNSInterfaceID	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct mDNSInterfaceID_dummystruct { void *dummy; } *mDNSInterfaceID;$/;"	t	typeref:struct:mDNSInterfaceID_dummystruct
mDNSInterfaceID_dummystruct	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct mDNSInterfaceID_dummystruct { void *dummy; } *mDNSInterfaceID;$/;"	s
mDNSInterfaceMark	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSInterfaceID mDNSInterfaceMark       = (mDNSInterfaceID)-1;$/;"	v
mDNSInterface_Any	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSInterfaceID mDNSInterface_Any       = 0;$/;"	v
mDNSInterface_LocalOnly	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSInterfaceID mDNSInterface_LocalOnly = (mDNSInterfaceID)-2;$/;"	v
mDNSInterface_P2P	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSInterfaceID mDNSInterface_P2P       = (mDNSInterfaceID)-4;$/;"	v
mDNSInterface_Unicast	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSInterfaceID mDNSInterface_Unicast   = (mDNSInterfaceID)-3;$/;"	v
mDNSIsDigit	mDNSCore/DNSCommon.h	106;"	d
mDNSIsDigit	mDNSShared/dnssd_clientlib.c	51;"	d	file:
mDNSIsFileAndPrintSharingEnabled	mDNSWindows/SystemService/Firewall.cpp	/^mDNSIsFileAndPrintSharingEnabled( BOOL * retry )$/;"	f
mDNSIsLetter	mDNSCore/DNSCommon.h	109;"	d
mDNSIsLowerCase	mDNSCore/DNSCommon.h	108;"	d
mDNSIsUpperCase	mDNSCore/DNSCommon.h	107;"	d
mDNSKeyChainAttributes	mDNSMacOSX/helper.h	/^enum mDNSKeyChainAttributes$/;"	g
mDNSKeychainGetSecrets	mDNSMacOSX/helper-stubs.c	/^int mDNSKeychainGetSecrets(CFArrayRef *result)$/;"	f
mDNSLogBonjourStatistics	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void mDNSLogBonjourStatistics(mDNS *const m)$/;"	f
mDNSLogDNSSECStatistics	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void mDNSLogDNSSECStatistics(mDNS *const m)$/;"	f
mDNSLogLevel_t	mDNSCore/mDNSDebug.h	/^} mDNSLogLevel_t;$/;"	t	typeref:enum:__anon100
mDNSLogStatistics	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSLogStatistics(mDNS *const m)$/;"	f
mDNSMacOSXCreateEtcHostsEntry	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool mDNSMacOSXCreateEtcHostsEntry(mDNS *const m, const domainname *domain, const struct sockaddr *sa, const domainname *cname, char *ifname, AuthHash *auth)$/;"	f
mDNSMacOSXGetEtcHostsFD	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal int mDNSMacOSXGetEtcHostsFD(mDNS *const m)$/;"	f
mDNSMacOSXNetworkChanged	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSMacOSXNetworkChanged(mDNS *const m)$/;"	f
mDNSMacOSXParseEtcHosts	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void mDNSMacOSXParseEtcHosts(mDNS *const m, int fd, AuthHash *auth)$/;"	f
mDNSMacOSXParseEtcHostsLine	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void mDNSMacOSXParseEtcHostsLine(mDNS *const m, char *buffer, ssize_t length, AuthHash *auth)$/;"	f
mDNSMacOSXSystemBuildNumber	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSMacOSXSystemBuildNumber(char *HINFO_SWstring)$/;"	f
mDNSMacOSXUpdateEtcHosts	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void mDNSMacOSXUpdateEtcHosts(mDNS *const m)$/;"	f
mDNSManagedPrefsGet	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal SCPreferencesRef mDNSManagedPrefsGet(void)$/;"	f
mDNSMixRandomSeed	mDNSCore/DNSCommon.c	/^mDNSlocal mDNSu32 mDNSMixRandomSeed(mDNSu32 seed, mDNSu8 iteration)$/;"	f
mDNSNBBY	mDNSCore/mDNSEmbeddedAPI.h	297;"	d
mDNSNULL	mDNSCore/mDNSEmbeddedAPI.h	325;"	d
mDNSNetMonitor	mDNSPosix/NetMonitor.c	/^mDNSlocal mStatus mDNSNetMonitor(void)$/;"	f
mDNSNotifier	mDNSMacOS9/mDNSMacOS9.c	/^mDNSlocal pascal void mDNSNotifier(void *contextPtr, OTEventCode code, OTResult result, void *cookie)$/;"	f
mDNSNotify	mDNSMacOSX/helper-stubs.c	/^void mDNSNotify(const char *title, const char *msg) \/\/ Both strings are UTF-8 text$/;"	f
mDNSOffloadCmd	mDNSMacOSX/mDNSMacOSX.c	/^} mDNSOffloadCmd;$/;"	t	typeref:struct:__anon154	file:
mDNSOpaque128	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[16]; mDNSu16 w[8]; mDNSu32 l[4]; } mDNSOpaque128;$/;"	t	typeref:union:__anon34
mDNSOpaque16	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[ 2]; mDNSu16 NotAnInteger; } mDNSOpaque16;$/;"	t	typeref:union:__anon31
mDNSOpaque16	mDNSMacOS9/Responder.c	/^typedef union { UInt8 b[2]; UInt16 NotAnInteger; } mDNSOpaque16;$/;"	t	typeref:union:__anon183	file:
mDNSOpaque16	mDNSMacOS9/Searcher.c	/^typedef union { UInt8 b[2]; UInt16 NotAnInteger; } mDNSOpaque16;$/;"	t	typeref:union:__anon185	file:
mDNSOpaque16IsZero	mDNSCore/mDNSEmbeddedAPI.h	2911;"	d
mDNSOpaque16fromIntVal	mDNSCore/mDNSEmbeddedAPI.h	/^mDNSinline mDNSOpaque16 mDNSOpaque16fromIntVal(mDNSu16 v)$/;"	f
mDNSOpaque16fromIntVal	mDNSMacOS9/Responder.c	/^static mDNSOpaque16 mDNSOpaque16fromIntVal(UInt16 v)$/;"	f	file:
mDNSOpaque16fromIntVal	mDNSMacOS9/Searcher.c	/^static mDNSOpaque16 mDNSOpaque16fromIntVal(UInt16 v)$/;"	f	file:
mDNSOpaque32	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[ 4]; mDNSu32 NotAnInteger; } mDNSOpaque32;$/;"	t	typeref:union:__anon32
mDNSOpaque64	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[ 8]; mDNSu16 w[4]; mDNSu32 l[2]; } mDNSOpaque64;$/;"	t	typeref:union:__anon33
mDNSOpaque64IsZero	mDNSCore/mDNSEmbeddedAPI.h	2912;"	d
mDNSOpenEndpoint	mDNSMacOS9/mDNSMacOS9.c	/^mDNSlocal OSStatus mDNSOpenEndpoint(const mDNS *const m)$/;"	f
mDNSOppCaching	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool        mDNSOppCaching;             \/\/ Opportunistic Caching$/;"	m	struct:mDNS_struct
mDNSOptionManagement	mDNSMacOS9/mDNSMacOS9.c	/^mDNSlocal void mDNSOptionManagement(mDNS *const m)$/;"	f
mDNSPacketFilterControl	mDNSMacOSX/helper-stubs.c	/^void mDNSPacketFilterControl(uint32_t command, char * ifname, uint32_t count, pfArray_t portArray, pfArray_t protocolArray)$/;"	f
mDNSParseNSEC3Records	mDNSCore/mDNS.c	/^mDNSlocal void mDNSParseNSEC3Records(mDNS *const m, const DNSMessage *const response, const mDNSu8 *end,$/;"	f
mDNSPlatformAllowPID	mDNSMacOSX/CUPolicy.c	/^mDNSexport mDNSBool mDNSPlatformAllowPID(mDNS *const m, DNSQuestion *q)$/;"	f
mDNSPlatformAllowPID	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSBool mDNSPlatformAllowPID(mDNS *const m, DNSQuestion *q)$/;"	f
mDNSPlatformAllowPID	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSBool mDNSPlatformAllowPID(mDNS *const m, DNSQuestion *q)$/;"	f
mDNSPlatformClockDivisor	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSu32 mDNSPlatformClockDivisor = 0;$/;"	v
mDNSPlatformClose	mDNSMacOS9/mDNSMacOS9.c	/^extern void mDNSPlatformClose (mDNS *const m)$/;"	f
mDNSPlatformClose	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformClose(mDNS *const m)$/;"	f
mDNSPlatformClose	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformClose(mDNS *const m)$/;"	f
mDNSPlatformClose	mDNSVxWorks/mDNSVxWorks.c	/^void    mDNSPlatformClose( mDNS * const inMDNS )$/;"	f
mDNSPlatformClose	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void    mDNSPlatformClose( mDNS * const inMDNS )$/;"	f
mDNSPlatformClose	mDNSWindows/mDNSWin32.c	/^mDNSexport void	mDNSPlatformClose( mDNS * const inMDNS )$/;"	f
mDNSPlatformCloseDNSProxySkts	mDNSMacOSX/DNSProxySupport.c	/^mDNSexport void mDNSPlatformCloseDNSProxySkts(mDNS *const m)$/;"	f
mDNSPlatformCloseFD	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformCloseFD(KQueueEntry *kq, int fd)$/;"	f
mDNSPlatformDispatchAsync	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformDispatchAsync(mDNS *const m, void *context, AsyncDispatchFunc func)$/;"	f
mDNSPlatformDisposeProxyContext	mDNSMacOSX/DNSProxySupport.c	/^mDNSexport void mDNSPlatformDisposeProxyContext(void *context)$/;"	f
mDNSPlatformDynDNSHostNameStatusChanged	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformDynDNSHostNameStatusChanged(const domainname *const dname, const mStatus status)$/;"	f
mDNSPlatformDynDNSHostNameStatusChanged	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformDynDNSHostNameStatusChanged(const domainname *const dname, const mStatus status)$/;"	f
mDNSPlatformDynDNSHostNameStatusChanged	mDNSWindows/mDNSWin32.c	/^mDNSPlatformDynDNSHostNameStatusChanged(const domainname *const dname, const mStatus status)$/;"	f
mDNSPlatformFormatTime	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformFormatTime(unsigned long te, mDNSu8 *buf, int bufsize)$/;"	f
mDNSPlatformFormatTime	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformFormatTime(unsigned long te, mDNSu8 *buf, int bufsize)$/;"	f
mDNSPlatformFormatTime	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformFormatTime(unsigned long te, mDNSu8 *buf, int bufsize)$/;"	f
mDNSPlatformGetPID	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSs32 mDNSPlatformGetPID()$/;"	f
mDNSPlatformGetPID	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSs32 mDNSPlatformGetPID()$/;"	f
mDNSPlatformGetPID	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSs32 mDNSPlatformGetPID()$/;"	f
mDNSPlatformGetPrimaryInterface	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mStatus mDNSPlatformGetPrimaryInterface(mDNS *const m, mDNSAddr *v4, mDNSAddr *v6, mDNSAddr *r)$/;"	f
mDNSPlatformGetPrimaryInterface	mDNSPosix/mDNSPosix.c	/^mDNSexport mStatus mDNSPlatformGetPrimaryInterface(mDNS * const m, mDNSAddr * v4, mDNSAddr * v6, mDNSAddr * router)$/;"	f
mDNSPlatformGetPrimaryInterface	mDNSWindows/mDNSWin32.c	/^mDNSPlatformGetPrimaryInterface( mDNS * const m, mDNSAddr * v4, mDNSAddr * v6, mDNSAddr * router )$/;"	f
mDNSPlatformGetRemoteMacAddr	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mStatus mDNSPlatformGetRemoteMacAddr(mDNS *const m, mDNSAddr *raddr)$/;"	f
mDNSPlatformGetRemoteMacAddr	mDNSPosix/mDNSPosix.c	/^mDNSexport mStatus mDNSPlatformGetRemoteMacAddr(mDNS *const m, mDNSAddr *raddr)$/;"	f
mDNSPlatformGetRemoteMacAddr	mDNSWindows/mDNSWin32.c	/^mDNSexport mStatus mDNSPlatformGetRemoteMacAddr(mDNSAddr *raddr, char *eth)$/;"	f
mDNSPlatformGetServiceID	mDNSMacOSX/VPNService.c	/^mDNSexport mDNSs32 mDNSPlatformGetServiceID(mDNS *const m, DNSQuestion *q)$/;"	f
mDNSPlatformGetServiceID	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSs32 mDNSPlatformGetServiceID(mDNS *const m, DNSQuestion *q)$/;"	f
mDNSPlatformGetServiceID	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSs32 mDNSPlatformGetServiceID(mDNS *const m, DNSQuestion *q)$/;"	f
mDNSPlatformGetUDPPort	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSu16 mDNSPlatformGetUDPPort(UDPSocket *sock)$/;"	f
mDNSPlatformGetUDPPort	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSu16 mDNSPlatformGetUDPPort(UDPSocket *sock)$/;"	f
mDNSPlatformGetUDPPort	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSu16 mDNSPlatformGetUDPPort(UDPSocket *sock)$/;"	f
mDNSPlatformIdle	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void mDNSPlatformIdle(mDNS *const m)$/;"	f
mDNSPlatformInit	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport mStatus mDNSPlatformInit (mDNS *const m)$/;"	f
mDNSPlatformInit	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mStatus mDNSPlatformInit(mDNS *const m)$/;"	f
mDNSPlatformInit	mDNSPosix/mDNSPosix.c	/^mDNSexport mStatus mDNSPlatformInit(mDNS *const m)$/;"	f
mDNSPlatformInit	mDNSVxWorks/mDNSVxWorks.c	/^mStatus mDNSPlatformInit( mDNS * const inMDNS )$/;"	f
mDNSPlatformInit	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mStatus mDNSPlatformInit( mDNS * const inMDNS )$/;"	f
mDNSPlatformInit	mDNSWindows/mDNSWin32.c	/^mDNSexport mStatus	mDNSPlatformInit( mDNS * const inMDNS )$/;"	f
mDNSPlatformInitDNSProxySkts	mDNSMacOSX/DNSProxySupport.c	/^mDNSexport void mDNSPlatformInitDNSProxySkts(mDNS *const m, ProxyCallback UDPCallback, ProxyCallback TCPCallback)$/;"	f
mDNSPlatformInit_CanReceiveUnicast	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSBool mDNSPlatformInit_CanReceiveUnicast(void)$/;"	f
mDNSPlatformInit_CanReceiveUnicast	mDNSPosix/mDNSPosix.c	/^mDNSlocal mDNSBool mDNSPlatformInit_CanReceiveUnicast(void)$/;"	f
mDNSPlatformInit_setup	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus mDNSPlatformInit_setup(mDNS *const m)$/;"	f
mDNSPlatformInterfaceIDToInfo	mDNSVxWorks/mDNSVxWorks.c	/^mStatus mDNSPlatformInterfaceIDToInfo( mDNS * const inMDNS, mDNSInterfaceID inID, mDNSPlatformInterfaceInfo *outInfo )$/;"	f
mDNSPlatformInterfaceIDToInfo	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mStatus mDNSPlatformInterfaceIDToInfo( mDNS * const inMDNS, mDNSInterfaceID inID, mDNSPlatformInterfaceInfo *outInfo )$/;"	f
mDNSPlatformInterfaceIDToInfo	mDNSWindows/mDNSWin32.c	/^mDNSexport mStatus	mDNSPlatformInterfaceIDToInfo( mDNS * const inMDNS, mDNSInterfaceID inID, mDNSPlatformInterfaceInfo *outInfo )$/;"	f
mDNSPlatformInterfaceIDfromInterfaceIndex	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSInterfaceID mDNSPlatformInterfaceIDfromInterfaceIndex(mDNS *const m, mDNSu32 ifindex)$/;"	f
mDNSPlatformInterfaceIDfromInterfaceIndex	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSInterfaceID mDNSPlatformInterfaceIDfromInterfaceIndex(mDNS *const m, mDNSu32 index)$/;"	f
mDNSPlatformInterfaceIDfromInterfaceIndex	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport mDNSInterfaceID  mDNSPlatformInterfaceIDfromInterfaceIndex( mDNS *const inMDNS, mDNSu32 inIndex )$/;"	f
mDNSPlatformInterfaceIDfromInterfaceIndex	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSInterfaceID	mDNSPlatformInterfaceIDfromInterfaceIndex( mDNS * const inMDNS, mDNSu32 inIndex )$/;"	f
mDNSPlatformInterfaceIndexfromInterfaceID	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSu32 mDNSPlatformInterfaceIndexfromInterfaceID(mDNS *const m, mDNSInterfaceID id, mDNSBool suppressNetworkChange)$/;"	f
mDNSPlatformInterfaceIndexfromInterfaceID	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSu32 mDNSPlatformInterfaceIndexfromInterfaceID(mDNS *const m, mDNSInterfaceID id, mDNSBool suppressNetworkChange)$/;"	f
mDNSPlatformInterfaceIndexfromInterfaceID	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport mDNSu32  mDNSPlatformInterfaceIndexfromInterfaceID( mDNS *const inMDNS, mDNSInterfaceID inID )$/;"	f
mDNSPlatformInterfaceIndexfromInterfaceID	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSu32	mDNSPlatformInterfaceIndexfromInterfaceID( mDNS * const inMDNS, mDNSInterfaceID inID, mDNSBool suppressNetworkChange )$/;"	f
mDNSPlatformInterfaceInfo	mDNSVxWorks/mDNSVxWorks.c	/^struct  mDNSPlatformInterfaceInfo$/;"	s	file:
mDNSPlatformInterfaceInfo	mDNSVxWorks/mDNSVxWorks.c	/^typedef struct mDNSPlatformInterfaceInfo mDNSPlatformInterfaceInfo;$/;"	t	typeref:struct:mDNSPlatformInterfaceInfo	file:
mDNSPlatformInterfaceInfo	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^struct  mDNSPlatformInterfaceInfo$/;"	s	file:
mDNSPlatformInterfaceInfo	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^typedef struct mDNSPlatformInterfaceInfo mDNSPlatformInterfaceInfo;$/;"	t	typeref:struct:mDNSPlatformInterfaceInfo	file:
mDNSPlatformInterfaceInfo	mDNSWindows/mDNSWin32.c	/^struct	mDNSPlatformInterfaceInfo$/;"	s	file:
mDNSPlatformInterfaceInfo	mDNSWindows/mDNSWin32.c	/^typedef struct mDNSPlatformInterfaceInfo	mDNSPlatformInterfaceInfo;$/;"	t	typeref:struct:mDNSPlatformInterfaceInfo	file:
mDNSPlatformInterfaceIsD2D	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSBool mDNSPlatformInterfaceIsD2D(mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformInterfaceIsD2D	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSBool mDNSPlatformInterfaceIsD2D(mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformInterfaceIsD2D	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSBool mDNSPlatformInterfaceIsD2D(mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformInterfaceNameToID	mDNSVxWorks/mDNSVxWorks.c	/^mStatus mDNSPlatformInterfaceNameToID( mDNS * const inMDNS, const char *inName, mDNSInterfaceID *outID )$/;"	f
mDNSPlatformInterfaceNameToID	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mStatus mDNSPlatformInterfaceNameToID( mDNS * const inMDNS, const char *inName, mDNSInterfaceID *outID )$/;"	f
mDNSPlatformInterfaceNameToID	mDNSWindows/mDNSWin32.c	/^mDNSexport mStatus	mDNSPlatformInterfaceNameToID( mDNS * const inMDNS, const char *inName, mDNSInterfaceID *outID )$/;"	f
mDNSPlatformLock	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void    mDNSPlatformLock(const mDNS *const m)$/;"	f
mDNSPlatformLock	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void     mDNSPlatformLock   (const mDNS *const m) { (void)m; }$/;"	f
mDNSPlatformLock	mDNSPosix/mDNSPosix.c	/^mDNSexport void    mDNSPlatformLock   (const mDNS *const m)$/;"	f
mDNSPlatformLock	mDNSVxWorks/mDNSVxWorks.c	/^void    mDNSPlatformLock( const mDNS * const inMDNS )$/;"	f
mDNSPlatformLock	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void    mDNSPlatformLock( const mDNS * const inMDNS )$/;"	f
mDNSPlatformLock	mDNSWindows/mDNSWin32.c	/^mDNSexport void	mDNSPlatformLock( const mDNS * const inMDNS )$/;"	f
mDNSPlatformLogToFile	mDNSMacOSX/daemon.c	/^mDNSexport void mDNSPlatformLogToFile(int log_level, const char *buffer)$/;"	f
mDNSPlatformMemAllocate	mDNSCore/mDNSEmbeddedAPI.h	3087;"	d
mDNSPlatformMemAllocate	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void *   mDNSPlatformMemAllocate(mDNSu32 len)                              { return(OTAllocMem(len)); }$/;"	f
mDNSPlatformMemAllocate	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void *   mDNSPlatformMemAllocate(mDNSu32 len) { return(mallocL("mDNSPlatformMemAllocate", len)); }$/;"	f
mDNSPlatformMemAllocate	mDNSPosix/mDNSPosix.c	/^mDNSexport void *  mDNSPlatformMemAllocate(mDNSu32 len) { return(malloc(len)); }$/;"	f
mDNSPlatformMemAllocate	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport void *   mDNSPlatformMemAllocate( mDNSu32 inSize )$/;"	f
mDNSPlatformMemAllocate	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSexport void *   mDNSPlatformMemAllocate( mDNSu32 inSize )$/;"	f
mDNSPlatformMemAllocate	mDNSWindows/mDNSWin32.c	/^mDNSexport void *	mDNSPlatformMemAllocate( mDNSu32 inSize )$/;"	f
mDNSPlatformMemCmp	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int      mDNSPlatformMemCmp(const void *dst, const void *src, mDNSu32 len) { return(memcmp(dst, src, len)); }$/;"	f
mDNSPlatformMemCmp	mDNSPosix/mDNSPosix.c	/^mDNSexport int mDNSPlatformMemCmp(const void *dst, const void *src, mDNSu32 len)$/;"	f
mDNSPlatformMemCmp	mDNSWindows/mDNSWin32.c	/^mDNSexport int	mDNSPlatformMemCmp( const void *inDst, const void *inSrc, mDNSu32 inSize )$/;"	f
mDNSPlatformMemCopy	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void     mDNSPlatformMemCopy(      void *dst, const void *src, UInt32 len) { OTMemcpy(dst, src, len); }$/;"	f
mDNSPlatformMemCopy	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void     mDNSPlatformMemCopy(      void *dst, const void *src, mDNSu32 len) { memcpy(dst, src, len); }$/;"	f
mDNSPlatformMemCopy	mDNSPosix/mDNSPosix.c	/^mDNSexport void    mDNSPlatformMemCopy(void *dst, const void *src, mDNSu32 len)$/;"	f
mDNSPlatformMemCopy	mDNSVxWorks/mDNSVxWorks.c	/^void    mDNSPlatformMemCopy( void *inDst, const void *inSrc, mDNSu32 inSize )$/;"	f
mDNSPlatformMemCopy	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void    mDNSPlatformMemCopy( void *inDst, const void *inSrc, mDNSu32 inSize )$/;"	f
mDNSPlatformMemCopy	mDNSWindows/mDNSWin32.c	/^mDNSexport void	mDNSPlatformMemCopy( void *inDst, const void *inSrc, mDNSu32 inSize )$/;"	f
mDNSPlatformMemFree	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void     mDNSPlatformMemFree(void *mem)                                    { OTFreeMem(mem); }$/;"	f
mDNSPlatformMemFree	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void     mDNSPlatformMemFree    (void *mem)   { freeL("mDNSPlatformMemFree", mem); }$/;"	f
mDNSPlatformMemFree	mDNSPosix/mDNSPosix.c	/^mDNSexport void    mDNSPlatformMemFree    (void *mem)   { free(mem); }$/;"	f
mDNSPlatformMemFree	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport void mDNSPlatformMemFree( void *inMem )$/;"	f
mDNSPlatformMemFree	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSexport void mDNSPlatformMemFree( void *inMem )$/;"	f
mDNSPlatformMemFree	mDNSWindows/mDNSWin32.c	/^mDNSexport void	mDNSPlatformMemFree( void *inMem )$/;"	f
mDNSPlatformMemSame	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport mDNSBool mDNSPlatformMemSame(const void *dst, const void *src, UInt32 len) { return(OTMemcmp(dst, src, len)); }$/;"	f
mDNSPlatformMemSame	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSBool mDNSPlatformMemSame(const void *dst, const void *src, mDNSu32 len) { return(memcmp(dst, src, len) == 0); }$/;"	f
mDNSPlatformMemSame	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSBool mDNSPlatformMemSame(const void *dst, const void *src, mDNSu32 len)$/;"	f
mDNSPlatformMemSame	mDNSVxWorks/mDNSVxWorks.c	/^mDNSBool    mDNSPlatformMemSame( const void *inDst, const void *inSrc, mDNSu32 inSize )$/;"	f
mDNSPlatformMemSame	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSBool    mDNSPlatformMemSame( const void *inDst, const void *inSrc, mDNSu32 inSize )$/;"	f
mDNSPlatformMemSame	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSBool	mDNSPlatformMemSame( const void *inDst, const void *inSrc, mDNSu32 inSize )$/;"	f
mDNSPlatformMemZero	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void     mDNSPlatformMemZero(      void *dst,                  UInt32 len) { OTMemzero(dst, len); }$/;"	f
mDNSPlatformMemZero	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void     mDNSPlatformMemZero(      void *dst,                  mDNSu32 len) { memset(dst, 0, len); }$/;"	f
mDNSPlatformMemZero	mDNSPosix/mDNSPosix.c	/^mDNSexport void    mDNSPlatformMemZero(void *dst, mDNSu32 len)$/;"	f
mDNSPlatformMemZero	mDNSVxWorks/mDNSVxWorks.c	/^void    mDNSPlatformMemZero( void *inDst, mDNSu32 inSize )$/;"	f
mDNSPlatformMemZero	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void    mDNSPlatformMemZero( void *inDst, mDNSu32 inSize )$/;"	f
mDNSPlatformMemZero	mDNSWindows/mDNSWin32.c	/^mDNSexport void	mDNSPlatformMemZero( void *inDst, mDNSu32 inSize )$/;"	f
mDNSPlatformOneSecond	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport SInt32 mDNSPlatformOneSecond = 60;$/;"	v
mDNSPlatformOneSecond	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSs32 mDNSPlatformOneSecond = 1000;$/;"	v
mDNSPlatformOneSecond	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSs32 mDNSPlatformOneSecond = 1024;$/;"	v
mDNSPlatformOneSecond	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport mDNSs32 mDNSPlatformOneSecond;$/;"	v
mDNSPlatformOneSecond	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSs32 mDNSPlatformOneSecond;$/;"	v
mDNSPlatformOneSecond	mDNSWindows/mDNSWin32.c	/^mDNSs32							mDNSPlatformOneSecond	= 0;$/;"	v
mDNSPlatformPeekUDP	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSBool mDNSPlatformPeekUDP(mDNS *const m, UDPSocket *src)$/;"	f
mDNSPlatformPeekUDP	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSBool mDNSPlatformPeekUDP(mDNS *const m, UDPSocket *src)$/;"	f
mDNSPlatformPeekUDP	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSBool mDNSPlatformPeekUDP(mDNS *const m, UDPSocket *src)$/;"	f
mDNSPlatformPosixRefreshInterfaceList	mDNSPosix/mDNSPosix.c	/^mDNSexport mStatus mDNSPlatformPosixRefreshInterfaceList(mDNS *const m)$/;"	f
mDNSPlatformQsort	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void     mDNSPlatformQsort  (      void *base, int nel, int width, int (*compar)(const void *, const void *))$/;"	f
mDNSPlatformQsort	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformQsort(void *base, int nel, int width, int (*compar)(const void *, const void *))$/;"	f
mDNSPlatformQsort	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformQsort(void *base, int nel, int width, int (*compar)(const void *, const void *))$/;"	f
mDNSPlatformRandomNumber	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSu32 mDNSPlatformRandomNumber(void)$/;"	f
mDNSPlatformRandomNumber	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSu32 mDNSPlatformRandomNumber(void)$/;"	f
mDNSPlatformRandomSeed	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport mDNSu32  mDNSPlatformRandomSeed(void)                                      { return(TickCount()); }$/;"	f
mDNSPlatformRandomSeed	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSu32 mDNSPlatformRandomSeed(void)$/;"	f
mDNSPlatformRandomSeed	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport mDNSu32  mDNSPlatformRandomSeed( void )$/;"	f
mDNSPlatformRandomSeed	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSexport mDNSu32 mDNSPlatformRandomSeed(void)$/;"	f
mDNSPlatformRawTime	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport SInt32   mDNSPlatformRawTime()                                             { return((SInt32)TickCount()); }$/;"	f
mDNSPlatformRawTime	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSs32 mDNSPlatformRawTime(void)$/;"	f
mDNSPlatformRawTime	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSs32  mDNSPlatformRawTime()$/;"	f
mDNSPlatformRawTime	mDNSVxWorks/mDNSVxWorks.c	/^mDNSs32 mDNSPlatformRawTime( void )$/;"	f
mDNSPlatformRawTime	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSs32 mDNSPlatformRawTime( void )$/;"	f
mDNSPlatformRawTime	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSs32	mDNSPlatformRawTime( void )$/;"	f
mDNSPlatformReadTCP	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport long mDNSPlatformReadTCP(TCPSocket *sock, void *buf, unsigned long buflen, mDNSBool *closed)$/;"	f
mDNSPlatformReadTCP	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport long mDNSPlatformReadTCP(TCPSocket *sock, void *buf, unsigned long buflen, mDNSBool *closed)$/;"	f
mDNSPlatformReadTCP	mDNSPosix/mDNSPosix.c	/^mDNSexport long mDNSPlatformReadTCP(TCPSocket *sock, void *buf, unsigned long buflen, mDNSBool * closed)$/;"	f
mDNSPlatformReadTCP	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport long mDNSPlatformReadTCP(int sd, void *buf, unsigned long buflen)$/;"	f
mDNSPlatformReadTCP	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSexport long mDNSPlatformReadTCP(int sd, void *buf, unsigned long buflen)$/;"	f
mDNSPlatformReadTCP	mDNSWindows/mDNSWin32.c	/^mDNSexport long	mDNSPlatformReadTCP( TCPSocket *sock, void *inBuffer, unsigned long inBufferSize, mDNSBool * closed )$/;"	f
mDNSPlatformReceiveBPF_fd	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformReceiveBPF_fd(mDNS *const m, int fd)$/;"	f
mDNSPlatformReceiveRawPacket	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformReceiveRawPacket(const void *const msg, const mDNSu8 *const end, mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformRetrieveTCPInfo	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mStatus mDNSPlatformRetrieveTCPInfo(mDNS *const m, mDNSAddr *laddr, mDNSIPPort *lport, mDNSAddr *raddr, mDNSIPPort *rport, mDNSTCPInfo *mti)$/;"	f
mDNSPlatformRetrieveTCPInfo	mDNSPosix/mDNSPosix.c	/^mDNSexport mStatus mDNSPlatformRetrieveTCPInfo(mDNS *const m, mDNSAddr *laddr, mDNSIPPort *lport, mDNSAddr *raddr, mDNSIPPort *rport, mDNSTCPInfo *mti)$/;"	f
mDNSPlatformRetrieveTCPInfo	mDNSWindows/mDNSWin32.c	/^mDNSexport mStatus mDNSPlatformRetrieveTCPInfo(mDNS *const m, mDNSAddr *laddr, mDNSIPPort *lport, mDNSAddr *raddr, mDNSIPPort *rport, mDNSTCPInfo *mti)$/;"	f
mDNSPlatformSendKeepalive	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformSendKeepalive(mDNSAddr *sadd, mDNSAddr *dadd, mDNSIPPort *lport, mDNSIPPort *rport, mDNSu32 seq, mDNSu32 ack, mDNSu16 win)$/;"	f
mDNSPlatformSendKeepalive	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformSendKeepalive(mDNSAddr *sadd, mDNSAddr *dadd, mDNSIPPort *lport, mDNSIPPort *rport, mDNSu32 seq, mDNSu32 ack, mDNSu16 win)$/;"	f
mDNSPlatformSendKeepalive	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformSendKeepalive(mDNSAddr *sadd, mDNSAddr *dadd, mDNSIPPort *lport, mDNSIPPort *rport, mDNSu32 seq, mDNSu32 ack, mDNSu16 win)$/;"	f
mDNSPlatformSendRawPacket	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformSendRawPacket(const void *const msg, const mDNSu8 *const end, mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformSendRawPacket	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformSendRawPacket(const void *const msg, const mDNSu8 *const end, mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformSendRawPacket	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformSendRawPacket(const void *const msg, const mDNSu8 *const end, mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformSendUDP	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport mStatus mDNSPlatformSendUDP(const mDNS *const m, const void *const msg, const mDNSu8 *const end,$/;"	f
mDNSPlatformSendUDP	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mStatus mDNSPlatformSendUDP(const mDNS *const m, const void *const msg, const mDNSu8 *const end,$/;"	f
mDNSPlatformSendUDP	mDNSPosix/mDNSPosix.c	/^mDNSexport mStatus mDNSPlatformSendUDP(const mDNS *const m, const void *const msg, const mDNSu8 *const end,$/;"	f
mDNSPlatformSendUDP	mDNSVxWorks/mDNSVxWorks.c	/^mDNSPlatformSendUDP($/;"	f
mDNSPlatformSendUDP	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSPlatformSendUDP($/;"	f
mDNSPlatformSendUDP	mDNSWindows/mDNSWin32.c	/^	mDNSPlatformSendUDP( $/;"	f
mDNSPlatformSendWakeupPacket	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformSendWakeupPacket(mDNS *const m, mDNSInterfaceID InterfaceID, char *EthAddr, char *IPAddr, int iteration)$/;"	f
mDNSPlatformSendWakeupPacket	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformSendWakeupPacket(mDNS *const m, mDNSInterfaceID InterfaceID, char *EthAddr, char *IPAddr, int iteration)$/;"	f
mDNSPlatformSendWakeupPacket	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformSendWakeupPacket(mDNS *const m, mDNSInterfaceID InterfaceID, char *ethaddr, char *ipaddr, int iteration)$/;"	f
mDNSPlatformSetAllowSleep	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformSetAllowSleep(mDNS *const m, mDNSBool allowSleep, const char *reason)$/;"	f
mDNSPlatformSetAllowSleep	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformSetAllowSleep(mDNS *const m, mDNSBool allowSleep, const char *reason)$/;"	f
mDNSPlatformSetAllowSleep	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformSetAllowSleep(mDNS *const m, mDNSBool allowSleep, const char *reason)$/;"	f
mDNSPlatformSetDNSConfig	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSBool mDNSPlatformSetDNSConfig(mDNS *const m, mDNSBool setservers, mDNSBool setsearch, domainname *const fqdn,$/;"	f
mDNSPlatformSetDNSConfig	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSBool mDNSPlatformSetDNSConfig(mDNS *const m, mDNSBool setservers, mDNSBool setsearch, domainname *const fqdn, DNameListElem **RegDomains,$/;"	f
mDNSPlatformSetDNSConfig	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSBool mDNSPlatformSetDNSConfig(mDNS *const m, mDNSBool setservers, mDNSBool setsearch, domainname *const fqdn, DNameListElem **regDomains, DNameListElem **browseDomains, mDNSBool ackConfig)$/;"	f
mDNSPlatformSetDelegatePID	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformSetDelegatePID(UDPSocket *src, const mDNSAddr *dst, DNSQuestion *q)$/;"	f
mDNSPlatformSetDelegatePID	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformSetDelegatePID(UDPSocket *src, const mDNSAddr *dst, DNSQuestion *q)$/;"	f
mDNSPlatformSetDelegatePID	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformSetDelegatePID(UDPSocket *src, const mDNSAddr *dst, DNSQuestion *q)$/;"	f
mDNSPlatformSetLocalARP	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformSetLocalARP( const mDNSv4Addr * const tpa, const mDNSEthAddr * const tha, mDNSInterfaceID InterfaceID )$/;"	f
mDNSPlatformSetLocalAddressCacheEntry	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformSetLocalAddressCacheEntry(mDNS *const m, const mDNSAddr *const tpa, const mDNSEthAddr *const tha, mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformSetLocalAddressCacheEntry	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformSetLocalAddressCacheEntry(mDNS *const m, const mDNSAddr *const tpa, const mDNSEthAddr *const tha, mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformSetLocalAddressCacheEntry	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformSetLocalAddressCacheEntry(mDNS *const m, const mDNSAddr *const tpa, const mDNSEthAddr *const tha, mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformSourceAddrForDest	mDNSShared/PlatformCommon.c	/^mDNSexport void mDNSPlatformSourceAddrForDest(mDNSAddr *const src, const mDNSAddr *const dst)$/;"	f
mDNSPlatformSourceAddrForDest	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformSourceAddrForDest( mDNSAddr * const src, const mDNSAddr * const dst )$/;"	f
mDNSPlatformStatus	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus mDNSPlatformStatus;$/;"	m	struct:mDNS_struct
mDNSPlatformStoreSPSMACAddr	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mStatus mDNSPlatformStoreSPSMACAddr(mDNSAddr *spsaddr, char *ifname)$/;"	f
mDNSPlatformStoreSPSMACAddr	mDNSPosix/mDNSPosix.c	/^mDNSexport mStatus    mDNSPlatformStoreSPSMACAddr(mDNSAddr *spsaddr, char *ifname)$/;"	f
mDNSPlatformStoreSPSMACAddr	mDNSWindows/mDNSWin32.c	/^mDNSexport  mStatus    mDNSPlatformStoreSPSMACAddr(mDNSAddr *spsaddr, char *ifname)$/;"	f
mDNSPlatformStrCopy	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void     mDNSPlatformStrCopy(      void *dst, const void *src)             { OTStrCopy((char*)dst, (char*)src); }$/;"	f
mDNSPlatformStrCopy	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void     mDNSPlatformStrCopy(      void *dst, const void *src)              { strcpy((char *)dst, (char *)src); }$/;"	f
mDNSPlatformStrCopy	mDNSPosix/mDNSPosix.c	/^mDNSexport void    mDNSPlatformStrCopy(void *dst, const void *src)$/;"	f
mDNSPlatformStrCopy	mDNSVxWorks/mDNSVxWorks.c	/^void    mDNSPlatformStrCopy( void *inDst, const void *inSrc )$/;"	f
mDNSPlatformStrCopy	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void    mDNSPlatformStrCopy( void *inDst, const void *inSrc )$/;"	f
mDNSPlatformStrCopy	mDNSWindows/mDNSWin32.c	/^mDNSexport void	mDNSPlatformStrCopy( void *inDst, const void *inSrc )$/;"	f
mDNSPlatformStrLen	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport UInt32   mDNSPlatformStrLen (                 const void *src)             { return(OTStrLength((char*)src)); }$/;"	f
mDNSPlatformStrLen	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSu32  mDNSPlatformStrLen (                 const void *src)              { return(strlen((char*)src)); }$/;"	f
mDNSPlatformStrLen	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSu32  mDNSPlatformStrLen (const void *src)$/;"	f
mDNSPlatformStrLen	mDNSVxWorks/mDNSVxWorks.c	/^mDNSu32 mDNSPlatformStrLen( const void *inSrc )$/;"	f
mDNSPlatformStrLen	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSu32  mDNSPlatformStrLen( const void *inSrc )$/;"	f
mDNSPlatformStrLen	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSu32	mDNSPlatformStrLen( const void *inSrc )$/;"	f
mDNSPlatformTCPAccept	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport TCPSocket *mDNSPlatformTCPAccept(TCPSocketFlags flags, int sd)$/;"	f
mDNSPlatformTCPAccept	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport TCPSocket *mDNSPlatformTCPAccept(TCPSocketFlags flags, int fd)$/;"	f
mDNSPlatformTCPAccept	mDNSPosix/mDNSPosix.c	/^mDNSexport TCPSocket *mDNSPlatformTCPAccept(TCPSocketFlags flags, int sd)$/;"	f
mDNSPlatformTCPAccept	mDNSWindows/mDNSWin32.c	/^mDNSexport TCPSocket *mDNSPlatformTCPAccept( TCPSocketFlags flags, int fd )$/;"	f
mDNSPlatformTCPCloseConnection	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void mDNSPlatformTCPCloseConnection(TCPSocket *sd)$/;"	f
mDNSPlatformTCPCloseConnection	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformTCPCloseConnection(TCPSocket *sock)$/;"	f
mDNSPlatformTCPCloseConnection	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformTCPCloseConnection(TCPSocket *sock)$/;"	f
mDNSPlatformTCPCloseConnection	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport void mDNSPlatformTCPCloseConnection(int sd)$/;"	f
mDNSPlatformTCPCloseConnection	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSexport void mDNSPlatformTCPCloseConnection(int sd)$/;"	f
mDNSPlatformTCPCloseConnection	mDNSWindows/mDNSWin32.c	/^mDNSexport void	mDNSPlatformTCPCloseConnection( TCPSocket *sock )$/;"	f
mDNSPlatformTCPConnect	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport mStatus mDNSPlatformTCPConnect(TCPSocket *sock, const mDNSAddr * dst, mDNSOpaque16 dstport, mDNSInterfaceID InterfaceID,$/;"	f
mDNSPlatformTCPConnect	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mStatus mDNSPlatformTCPConnect(TCPSocket *sock, const mDNSAddr *dst, mDNSOpaque16 dstport, domainname *hostname, mDNSInterfaceID InterfaceID, TCPConnectionCallback callback, void *context)$/;"	f
mDNSPlatformTCPConnect	mDNSPosix/mDNSPosix.c	/^mDNSexport mStatus mDNSPlatformTCPConnect(TCPSocket *sock, const mDNSAddr *dst, mDNSOpaque16 dstport, domainname *hostname, mDNSInterfaceID InterfaceID,$/;"	f
mDNSPlatformTCPConnect	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport mStatus mDNSPlatformTCPConnect(const mDNSAddr *dst, mDNSOpaque16 dstport, mDNSInterfaceID InterfaceID,$/;"	f
mDNSPlatformTCPConnect	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSexport mStatus mDNSPlatformTCPConnect(const mDNSAddr *dst, mDNSOpaque16 dstport, mDNSInterfaceID InterfaceID,$/;"	f
mDNSPlatformTCPConnect	mDNSWindows/mDNSWin32.c	/^mDNSPlatformTCPConnect$/;"	f
mDNSPlatformTCPGetFD	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport int mDNSPlatformTCPGetFD(TCPSocket *sock)$/;"	f
mDNSPlatformTCPGetFD	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport int mDNSPlatformTCPGetFD(TCPSocket *sock)$/;"	f
mDNSPlatformTCPGetFD	mDNSPosix/mDNSPosix.c	/^mDNSexport int mDNSPlatformTCPGetFD(TCPSocket *sock)$/;"	f
mDNSPlatformTCPGetFD	mDNSWindows/mDNSWin32.c	/^mDNSexport int mDNSPlatformTCPGetFD(TCPSocket *sock )$/;"	f
mDNSPlatformTCPSocket	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport TCPSocket *mDNSPlatformTCPSocket(mDNS * const m, TCPSocketFlags flags, mDNSIPPort * port)$/;"	f
mDNSPlatformTCPSocket	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport TCPSocket *mDNSPlatformTCPSocket(mDNS *const m, TCPSocketFlags flags, mDNSIPPort *port, mDNSBool useBackgroundTrafficClass)$/;"	f
mDNSPlatformTCPSocket	mDNSPosix/mDNSPosix.c	/^mDNSexport TCPSocket *mDNSPlatformTCPSocket(mDNS * const m, TCPSocketFlags flags, mDNSIPPort * port, mDNSBool useBackgroundTrafficClass)$/;"	f
mDNSPlatformTCPSocket	mDNSWindows/mDNSWin32.c	/^mDNSPlatformTCPSocket$/;"	f
mDNSPlatformTLSSetupCerts	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mStatus mDNSPlatformTLSSetupCerts(void)$/;"	f
mDNSPlatformTLSSetupCerts	mDNSPosix/mDNSPosix.c	/^mDNSexport mStatus mDNSPlatformTLSSetupCerts(void)$/;"	f
mDNSPlatformTLSSetupCerts	mDNSWindows/mDNSWin32.c	/^mDNSPlatformTLSSetupCerts(void)$/;"	f
mDNSPlatformTLSTearDownCerts	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void  mDNSPlatformTLSTearDownCerts(void)$/;"	f
mDNSPlatformTLSTearDownCerts	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformTLSTearDownCerts(void)$/;"	f
mDNSPlatformTLSTearDownCerts	mDNSWindows/mDNSWin32.c	/^mDNSPlatformTLSTearDownCerts(void)$/;"	f
mDNSPlatformTimeInit	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport mStatus  mDNSPlatformTimeInit(void)                                        { return(mStatus_NoError); }$/;"	f
mDNSPlatformTimeInit	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mStatus mDNSPlatformTimeInit(void)$/;"	f
mDNSPlatformTimeInit	mDNSPosix/mDNSPosix.c	/^mDNSexport mStatus mDNSPlatformTimeInit(void)$/;"	f
mDNSPlatformTimeInit	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport mStatus  mDNSPlatformTimeInit( void )$/;"	f
mDNSPlatformTimeInit	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSexport mStatus mDNSPlatformTimeInit( void )$/;"	f
mDNSPlatformTimeInit	mDNSWindows/mDNSWin32.c	/^mDNSexport mStatus	mDNSPlatformTimeInit( void )$/;"	f
mDNSPlatformTriggerDNSRetry	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformTriggerDNSRetry(mDNS *const m, DNSQuestion *v4q, DNSQuestion *v6q)$/;"	f
mDNSPlatformUDPClose	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void           mDNSPlatformUDPClose(UDPSocket *sock)$/;"	f
mDNSPlatformUDPClose	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformUDPClose(UDPSocket *sock)$/;"	f
mDNSPlatformUDPClose	mDNSPosix/mDNSPosix.c	/^mDNSexport void           mDNSPlatformUDPClose(UDPSocket *sock)$/;"	f
mDNSPlatformUDPClose	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformUDPClose( UDPSocket *sock )$/;"	f
mDNSPlatformUDPSocket	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport UDPSocket *mDNSPlatformUDPSocket(mDNS * const m, mDNSIPPort port)$/;"	f
mDNSPlatformUDPSocket	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport UDPSocket *mDNSPlatformUDPSocket(mDNS *const m, const mDNSIPPort requestedport)$/;"	f
mDNSPlatformUDPSocket	mDNSPosix/mDNSPosix.c	/^mDNSexport UDPSocket *mDNSPlatformUDPSocket(mDNS * const m, mDNSIPPort port)$/;"	f
mDNSPlatformUDPSocket	mDNSWindows/mDNSWin32.c	/^mDNSexport UDPSocket* mDNSPlatformUDPSocket(mDNS *const m, const mDNSIPPort requestedport)$/;"	f
mDNSPlatformUTC	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport mDNSs32  mDNSPlatformUTC(void)$/;"	f
mDNSPlatformUTC	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSs32 mDNSPlatformUTC(void)$/;"	f
mDNSPlatformUTC	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSs32 mDNSPlatformUTC(void)$/;"	f
mDNSPlatformUTC	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport mDNSs32  mDNSPlatformUTC( void )$/;"	f
mDNSPlatformUTC	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSexport mDNSs32  mDNSPlatformUTC( void )$/;"	f
mDNSPlatformUTC	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSs32	mDNSPlatformUTC( void )$/;"	f
mDNSPlatformUnlock	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport void    mDNSPlatformUnlock(const mDNS *const m)$/;"	f
mDNSPlatformUnlock	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void     mDNSPlatformUnlock (const mDNS *const m) { (void)m; }$/;"	f
mDNSPlatformUnlock	mDNSPosix/mDNSPosix.c	/^mDNSexport void    mDNSPlatformUnlock (const mDNS *const m)$/;"	f
mDNSPlatformUnlock	mDNSVxWorks/mDNSVxWorks.c	/^void    mDNSPlatformUnlock( const mDNS * const inMDNS )$/;"	f
mDNSPlatformUnlock	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void    mDNSPlatformUnlock( const mDNS * const inMDNS )$/;"	f
mDNSPlatformUnlock	mDNSWindows/mDNSWin32.c	/^mDNSexport void	mDNSPlatformUnlock( const mDNS * const inMDNS )$/;"	f
mDNSPlatformUpdateDNSStatus	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformUpdateDNSStatus(mDNS *const m, DNSQuestion *q)$/;"	f
mDNSPlatformUpdateProxyList	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSPlatformUpdateProxyList(mDNS *const m, const mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformUpdateProxyList	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPlatformUpdateProxyList(mDNS *const m, const mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformUpdateProxyList	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformUpdateProxyList(mDNS *const m, const mDNSInterfaceID InterfaceID)$/;"	f
mDNSPlatformValidQuestionForInterface	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSBool mDNSPlatformValidQuestionForInterface(DNSQuestion *q, const NetworkInterfaceInfo *intf)$/;"	f
mDNSPlatformValidQuestionForInterface	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSBool mDNSPlatformValidQuestionForInterface(DNSQuestion *q, const NetworkInterfaceInfo *intf)$/;"	f
mDNSPlatformValidQuestionForInterface	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSBool mDNSPlatformValidQuestionForInterface(DNSQuestion *q, const NetworkInterfaceInfo *intf)$/;"	f
mDNSPlatformValidRecordForInterface	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSBool mDNSPlatformValidRecordForInterface(AuthRecord *rr, const NetworkInterfaceInfo *intf)$/;"	f
mDNSPlatformValidRecordForInterface	mDNSPosix/mDNSPosix.c	/^mDNSexport mDNSBool mDNSPlatformValidRecordForInterface(AuthRecord *rr, const NetworkInterfaceInfo *intf)$/;"	f
mDNSPlatformValidRecordForInterface	mDNSWindows/mDNSWin32.c	/^mDNSexport mDNSBool mDNSPlatformValidRecordForInterface(AuthRecord *rr, const NetworkInterfaceInfo *intf)$/;"	f
mDNSPlatformValidRecordForQuestion	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport mDNSBool   mDNSPlatformValidRecordForQuestion(const ResourceRecord *const rr, const DNSQuestion *const q)$/;"	f
mDNSPlatformWriteDebugMsg	mDNSShared/PlatformCommon.c	/^mDNSexport void mDNSPlatformWriteDebugMsg(const char *msg)$/;"	f
mDNSPlatformWriteDebugMsg	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformWriteDebugMsg(const char *msg)$/;"	f
mDNSPlatformWriteLogMsg	mDNSShared/PlatformCommon.c	/^mDNSexport void mDNSPlatformWriteLogMsg(const char *ident, const char *buffer, mDNSLogLevel_t loglevel)$/;"	f
mDNSPlatformWriteLogMsg	mDNSWindows/mDNSWin32.c	/^mDNSexport void mDNSPlatformWriteLogMsg( const char * ident, const char * msg, mDNSLogLevel_t loglevel )$/;"	f
mDNSPlatformWriteTCP	mDNSMacOS9/mDNSMacOS9.c	/^mDNSexport long mDNSPlatformWriteTCP(TCPSocket *sock, const char *msg, unsigned long len)$/;"	f
mDNSPlatformWriteTCP	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport long mDNSPlatformWriteTCP(TCPSocket *sock, const char *msg, unsigned long len)$/;"	f
mDNSPlatformWriteTCP	mDNSPosix/mDNSPosix.c	/^mDNSexport long mDNSPlatformWriteTCP(TCPSocket *sock, const char *msg, unsigned long len)$/;"	f
mDNSPlatformWriteTCP	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport long mDNSPlatformWriteTCP(int sd, const char *msg, unsigned long len)$/;"	f
mDNSPlatformWriteTCP	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSexport long mDNSPlatformWriteTCP(int sd, const char *msg, unsigned long len)$/;"	f
mDNSPlatformWriteTCP	mDNSWindows/mDNSWin32.c	/^mDNSexport long	mDNSPlatformWriteTCP( TCPSocket *sock, const char *inMsg, unsigned long inMsgSize )$/;"	f
mDNSPoll	mDNSWindows/Poll.c	/^mDNSPoll( DWORD msec )$/;"	f
mDNSPollEventCallback	mDNSWindows/Poll.h	/^typedef void ( CALLBACK *mDNSPollEventCallback )( HANDLE event, void *context );$/;"	t
mDNSPollRegisterEvent	mDNSWindows/Poll.c	/^mDNSPollRegisterEvent( HANDLE event, mDNSPollEventCallback callback, void *context )$/;"	f
mDNSPollRegisterSocket	mDNSWindows/Poll.c	/^mDNSPollRegisterSocket( SOCKET socket, int networkEvents, mDNSPollSocketCallback callback, void *context )$/;"	f
mDNSPollSocketCallback	mDNSWindows/Poll.h	/^typedef void ( CALLBACK *mDNSPollSocketCallback )( SOCKET socket, LPWSANETWORKEVENTS event, void *context );$/;"	t
mDNSPollUnregisterEvent	mDNSWindows/Poll.c	/^mDNSPollUnregisterEvent( HANDLE event )$/;"	f
mDNSPollUnregisterSocket	mDNSWindows/Poll.c	/^mDNSPollUnregisterSocket( SOCKET socket )$/;"	f
mDNSPortInetAddress	mDNSMacOS9/mDNSMacOS9.c	/^static const mDNSInetAddress mDNSPortInetAddress = { AF_INET, { MulticastDNSPortAsNumber >> 8, MulticastDNSPortAsNumber & 0xFF }, { 0,0,0,0 } };$/;"	v	file:
mDNSPosixAddFDToEventLoop	mDNSPosix/mDNSPosix.c	/^mStatus mDNSPosixAddFDToEventLoop(int fd, mDNSPosixEventCallback callback, void *context)$/;"	f
mDNSPosixAddToFDSet	mDNSPosix/mDNSPosix.c	/^mDNSlocal void mDNSPosixAddToFDSet(int *nfds, fd_set *readfds, int s)$/;"	f
mDNSPosixEventCallback	mDNSPosix/mDNSPosix.h	/^typedef void (*mDNSPosixEventCallback)(int fd, short filter, void *context);$/;"	t
mDNSPosixGetFDSet	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPosixGetFDSet(mDNS *m, int *nfds, fd_set *readfds, struct timeval *timeout)$/;"	f
mDNSPosixIgnoreSignalInEventLoop	mDNSPosix/mDNSPosix.c	/^mStatus mDNSPosixIgnoreSignalInEventLoop(int signum)$/;"	f
mDNSPosixListenForSignalInEventLoop	mDNSPosix/mDNSPosix.c	/^mStatus mDNSPosixListenForSignalInEventLoop(int signum)$/;"	f
mDNSPosixProcessFDSet	mDNSPosix/mDNSPosix.c	/^mDNSexport void mDNSPosixProcessFDSet(mDNS *const m, fd_set *readfds)$/;"	f
mDNSPosixRemoveFDFromEventLoop	mDNSPosix/mDNSPosix.c	/^mStatus mDNSPosixRemoveFDFromEventLoop(int fd)$/;"	f
mDNSPosixRunEventLoopOnce	mDNSPosix/mDNSPosix.c	/^mStatus mDNSPosixRunEventLoopOnce(mDNS *m, const struct timeval *pTimeout,$/;"	f
mDNSPowerRequest	mDNSMacOSX/helper-stubs.c	/^int mDNSPowerRequest(int key, int interval)$/;"	f
mDNSPreferencesSetName	mDNSMacOSX/helper-stubs.c	/^void mDNSPreferencesSetName(int key, domainlabel *old, domainlabel *new)$/;"	f
mDNSPreferencesSetNameKey	mDNSMacOSX/helper.h	/^enum mDNSPreferencesSetNameKey$/;"	g
mDNSPreferencesSetNames	mDNSMacOSX/daemon.c	/^mDNSlocal void mDNSPreferencesSetNames(mDNS *const m, int key, domainlabel *old, domainlabel *new)$/;"	f
mDNSQuestionCallback	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void mDNSQuestionCallback (mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord);$/;"	t
mDNSRandom	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu32 mDNSRandom(mDNSu32 max)      \/\/ Returns pseudo-random result from zero to max inclusive$/;"	f
mDNSRandomFromSeed	mDNSCore/DNSCommon.c	/^mDNSlocal mDNSu32 mDNSRandomFromSeed(mDNSu32 seed)$/;"	f
mDNSRandomNumber	mDNSCore/DNSCommon.c	/^mDNSlocal mDNSu32 mDNSRandomNumber()$/;"	f
mDNSRandomNumber	mDNSCore/DNSCommon.c	551;"	d	file:
mDNSReconfigure	mDNSVxWorks/mDNSVxWorks.c	/^void    mDNSReconfigure( void )$/;"	f
mDNSReconfigure	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void    mDNSReconfigure( void )$/;"	f
mDNSRecordCallback	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void mDNSRecordCallback (mDNS *const m, AuthRecord *const rr, mStatus result);$/;"	t
mDNSRecordUpdateCallback	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void mDNSRecordUpdateCallback (mDNS *const m, AuthRecord *const rr, RData *OldRData, mDNSu16 OldRDLen);$/;"	t
mDNSRecvMsg	mDNSVxWorks/mDNSVxWorks.c	/^mDNSRecvMsg($/;"	f
mDNSRequestBPF	mDNSMacOSX/helper-stubs.c	/^void mDNSRequestBPF(void)$/;"	f
mDNSResponderGID	mDNSMacOSX/helper.c	/^gid_t mDNSResponderGID;$/;"	v
mDNSResponderSetAvail	mDNSMacOS9/SubTypeTester.c	/^mDNSlocal OSStatus mDNSResponderSetAvail(mDNS *m, AuthRecord *rr, ServiceRecordSet *sr)$/;"	f
mDNSResponderTestSetup	mDNSMacOS9/Mac OS Test Responder.c	/^mDNSlocal OSStatus mDNSResponderTestSetup(mDNS *m)$/;"	f
mDNSResponderTestSetup	mDNSMacOS9/SubTypeTester.c	/^mDNSlocal OSStatus mDNSResponderTestSetup(mDNS *m)$/;"	f
mDNSResponderUID	mDNSMacOSX/helper.c	/^uid_t mDNSResponderUID;$/;"	v
mDNSResponderVersionString	mDNSShared/uds_daemon.h	90;"	d
mDNSResponderVersionString_SCCS	mDNSMacOSX/daemon.c	/^mDNSexport const char mDNSResponderVersionString_SCCS[] = "@(#) mDNSResponder " STRINGIFY(mDNSResponderVersion) " (" __DATE__ " " __TIME__ ")";$/;"	v
mDNSResponderVersionString_SCCS	mDNSPosix/Bonjour.c	/^mDNSexport const char mDNSResponderVersionString_SCCS[] = "@(#) mDNSResponder (Engineering Build) (" __DATE__ " " __TIME__ ")";$/;"	v
mDNSResponderVersionString_SCCS	mDNSPosix/Bonjour.c	/^mDNSexport const char mDNSResponderVersionString_SCCS[] = "@(#) mDNSResponder (Engineering Build)";$/;"	v
mDNSResponderVersionString_SCCS	mDNSPosix/Bonjour.c	/^mDNSexport const char mDNSResponderVersionString_SCCS[] = "@(#) mDNSResponder-" STRINGIFY(mDNSResponderVersion) " (" __DATE__ " " __TIME__ ")";$/;"	v
mDNSResponderVersionString_SCCS	mDNSPosix/PosixDaemon.c	/^mDNSexport const char mDNSResponderVersionString_SCCS[] = "@(#) mDNSResponder (Engineering Build) (" __DATE__ " " __TIME__ ")";$/;"	v
mDNSResponderVersionString_SCCS	mDNSPosix/PosixDaemon.c	/^mDNSexport const char mDNSResponderVersionString_SCCS[] = "@(#) mDNSResponder (Engineering Build)";$/;"	v
mDNSResponderVersionString_SCCS	mDNSPosix/PosixDaemon.c	/^mDNSexport const char mDNSResponderVersionString_SCCS[] = "@(#) mDNSResponder-" STRINGIFY(mDNSResponderVersion) " (" __DATE__ " " __TIME__ ")";$/;"	v
mDNSResponderVersionString_SCCS	mDNSShared/dnsextd.c	/^const char mDNSResponderVersionString_SCCS[] = "@(#) dnsextd " STRINGIFY(mDNSResponderVersion) " (" __DATE__ " " __TIME__ ")";$/;"	v
mDNSRetrieveTCPInfo	mDNSMacOSX/helper-stubs.c	/^int mDNSRetrieveTCPInfo(int family, v6addr_t laddr, uint16_t lport, v6addr_t raddr, uint16_t rport, uint32_t *seq, uint32_t *ack, uint16_t *win, int32_t *intfid)$/;"	f
mDNSSameAddress	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool mDNSSameAddress(const mDNSAddr *ip1, const mDNSAddr *ip2)$/;"	f
mDNSSameClientTunnel	mDNSMacOSX/mDNSMacOSX.c	4773;"	d	file:
mDNSSameEthAddress	mDNSCore/mDNSEmbeddedAPI.h	2908;"	d
mDNSSameIPPort	mDNSCore/mDNSEmbeddedAPI.h	2900;"	d
mDNSSameIPv4Address	mDNSCore/mDNSEmbeddedAPI.h	2905;"	d
mDNSSameIPv6Address	mDNSCore/mDNSEmbeddedAPI.h	2906;"	d
mDNSSameIPv6NetworkPart	mDNSCore/mDNSEmbeddedAPI.h	2907;"	d
mDNSSameOpaque16	mDNSCore/mDNSEmbeddedAPI.h	2901;"	d
mDNSSameOpaque32	mDNSCore/mDNSEmbeddedAPI.h	2902;"	d
mDNSSameOpaque64	mDNSCore/mDNSEmbeddedAPI.h	2903;"	d
mDNSSendDNSMessage	mDNSCore/DNSCommon.c	/^mDNSexport mStatus mDNSSendDNSMessage(mDNS *const m, DNSMessage *const msg, mDNSu8 *end,$/;"	f
mDNSSendKeepalive	mDNSMacOSX/helper-stubs.c	/^void mDNSSendKeepalive(v6addr_t sadd, v6addr_t dadd, uint16_t lport, uint16_t rport, unsigned seq, unsigned ack, uint16_t win)$/;"	f
mDNSSendWakeOnResolve	mDNSCore/mDNS.c	/^mDNSlocal void mDNSSendWakeOnResolve(mDNS *const m, DNSQuestion *q)$/;"	f
mDNSSendWakeupPacket	mDNSMacOSX/helper-stubs.c	/^void mDNSSendWakeupPacket(unsigned ifid, char *eth_addr, char *ip_addr, int iteration)$/;"	f
mDNSServiceCallback	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void mDNSServiceCallback (mDNS *const m, ServiceRecordSet *const sr, mStatus result);$/;"	t
mDNSServiceInfoQueryCallback	mDNSCore/mDNSEmbeddedAPI.h	/^typedef void mDNSServiceInfoQueryCallback (mDNS *const m, ServiceInfoQuery *query);$/;"	t
mDNSSetLocalAddressCacheEntry	mDNSMacOSX/helper-stubs.c	/^int mDNSSetLocalAddressCacheEntry(int ifindex, int family, const v6addr_t ip, const ethaddr_t eth)$/;"	f
mDNSSetPacketFilterRules	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void mDNSSetPacketFilterRules(mDNS *const m, char * ifname, const ResourceRecord *const excludeRecord)$/;"	f
mDNSSetupSignal	mDNSMacOSX/daemon.c	/^mDNSlocal void mDNSSetupSignal(dispatch_queue_t queue, int sig)$/;"	f
mDNSShow	mDNSVxWorks/mDNSVxWorks.c	/^void    mDNSShow( void )$/;"	f
mDNSShow	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void    mDNSShow( BOOL inShowRecords )$/;"	f
mDNSShowRecords	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void    mDNSShowRecords( void )$/;"	f
mDNSShowTXT	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^void    mDNSShowTXT( const void *inTXT, size_t inTXTSize )$/;"	f
mDNSSleepProxyMetric	mDNSCore/mDNSEmbeddedAPI.h	/^} mDNSSleepProxyMetric;$/;"	t	typeref:enum:__anon98
mDNSSleepProxyMetric_Dedicated	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSSleepProxyMetric_Dedicated          = 20,$/;"	e	enum:__anon98
mDNSSleepProxyMetric_IncidentalHardware	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSSleepProxyMetric_IncidentalHardware = 70,$/;"	e	enum:__anon98
mDNSSleepProxyMetric_IncidentalSoftware	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSSleepProxyMetric_IncidentalSoftware = 80$/;"	e	enum:__anon98
mDNSSleepProxyMetric_PrimaryHardware	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSSleepProxyMetric_PrimaryHardware    = 30,$/;"	e	enum:__anon98
mDNSSleepProxyMetric_PrimarySoftware	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSSleepProxyMetric_PrimarySoftware    = 40,$/;"	e	enum:__anon98
mDNSSleepProxyMetric_SecondaryHardware	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSSleepProxyMetric_SecondaryHardware  = 50,$/;"	e	enum:__anon98
mDNSSleepProxyMetric_SecondarySoftware	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSSleepProxyMetric_SecondarySoftware  = 60,$/;"	e	enum:__anon98
mDNSStatistics	mDNSCore/mDNSEmbeddedAPI.h	/^} mDNSStatistics;$/;"	t	typeref:struct:__anon92
mDNSStats	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSStatistics   mDNSStats;$/;"	m	struct:mDNS_struct
mDNSStorage	mDNSMacOS9/Mac OS Test Searcher.c	/^static mDNS mDNSStorage;$/;"	v	file:
mDNSStorage	mDNSMacOS9/mDNSLibrary.c	/^mDNS mDNSStorage;$/;"	v
mDNSStorage	mDNSPosix/Client.c	/^static mDNS mDNSStorage;       \/\/ mDNS core uses this to store its globals$/;"	v	file:
mDNSStorage	mDNSPosix/Identify.c	/^static mDNS mDNSStorage;       \/\/ mDNS core uses this to store its globals$/;"	v	file:
mDNSStorage	mDNSPosix/NetMonitor.c	/^mDNS mDNSStorage;                       \/\/ mDNS core uses this to store its globals$/;"	v
mDNSStorage	mDNSPosix/ProxyResponder.c	/^static mDNS mDNSStorage;       \/\/ mDNS core uses this to store its globals$/;"	v	file:
mDNSStorage	mDNSPosix/Responder.c	/^static mDNS mDNSStorage;       \/\/ mDNS core uses this to store its globals$/;"	v	file:
mDNSStorage	mDNSShared/dnsextd.c	/^mDNS mDNSStorage;$/;"	v
mDNSStorage	mDNSShared/uds_daemon.c	/^mDNSexport mDNS mDNSStorage;$/;"	v
mDNSStoreSPSMACAddress	mDNSMacOSX/helper-stubs.c	/^void mDNSStoreSPSMACAddress(int family, v6addr_t spsaddr, char *ifname)$/;"	f
mDNSSubTypeLabel	mDNSCore/DNSCommon.h	104;"	d
mDNSTCPInfo	mDNSCore/mDNSEmbeddedAPI.h	/^} mDNSTCPInfo;$/;"	t	typeref:struct:__anon47
mDNSTimerTask	mDNSMacOS9/mDNSMacOS9.c	/^static pascal void mDNSTimerTask(void *arg)$/;"	f	file:
mDNSTransport_None	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSTransport_None = 0,$/;"	e	enum:__anon36
mDNSTransport_TCP	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSTransport_TCP  = 2$/;"	e	enum:__anon36
mDNSTransport_UDP	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSTransport_UDP  = 1,$/;"	e	enum:__anon36
mDNSTunnelPolicyWhich	mDNSMacOSX/helper.c	/^} mDNSTunnelPolicyWhich;$/;"	t	typeref:enum:_mDNSTunnelPolicyWhich	file:
mDNSTunnelType	mDNSMacOSX/helper.c	/^} mDNSTunnelType;$/;"	t	typeref:enum:_mDNSTunnelType	file:
mDNSUpDown	mDNSMacOSX/helper.h	/^enum mDNSUpDown$/;"	g
mDNSUpdateOkToSend	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool mDNSUpdateOkToSend(mDNS *const m, AuthRecord *rr, NetworkInterfaceInfo *const intf, mDNSu32 scopeid)$/;"	f
mDNSUpdatePacketFilter	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void mDNSUpdatePacketFilter(const ResourceRecord *const excludeRecord)$/;"	f
mDNSVal16	mDNSCore/mDNSEmbeddedAPI.h	/^mDNSinline mDNSu16 mDNSVal16(mDNSOpaque16 x) { return((mDNSu16)((mDNSu16)x.b[0] <<  8 | (mDNSu16)x.b[1])); }$/;"	f
mDNSVal16	mDNSMacOS9/Responder.c	/^static UInt16 mDNSVal16(mDNSOpaque16 x) { return((UInt16)(x.b[0]<<8 | x.b[1])); }$/;"	f	file:
mDNSVal16	mDNSMacOS9/Searcher.c	/^static UInt16 mDNSVal16(mDNSOpaque16 x) { return((UInt16)(x.b[0]<<8 | x.b[1])); }$/;"	f	file:
mDNSValidHostChar	mDNSCore/DNSCommon.h	111;"	d
mDNSWakeForNetworkAccess	mDNSCore/mDNSEmbeddedAPI.h	/^} mDNSWakeForNetworkAccess;$/;"	t	typeref:enum:__anon99
mDNS_ActivateNetWake_internal	mDNSCore/mDNS.c	/^mDNSexport void mDNS_ActivateNetWake_internal(mDNS *const m, NetworkInterfaceInfo *set)$/;"	f
mDNS_AddDNSServer	mDNSCore/uDNS.c	/^mDNSexport DNSServer *mDNS_AddDNSServer(mDNS *const m, const domainname *d, const mDNSInterfaceID interface, const mDNSs32 serviceID, const mDNSAddr *addr,$/;"	f
mDNS_AddDNSServer	mDNSShared/dnsextd.c	/^DNSServer *mDNS_AddDNSServer(mDNS *const m, const domainname *d, const mDNSInterfaceID interface, const int serviceID, const mDNSAddr *addr, const mDNSIPPort port, $/;"	f
mDNS_AddDynDNSHostName	mDNSCore/uDNS.c	/^mDNSexport void mDNS_AddDynDNSHostName(mDNS *m, const domainname *fqdn, mDNSRecordCallback *StatusCallback, const void *StatusContext)$/;"	f
mDNS_AddDynDNSHostName	mDNSShared/dnsextd.c	/^void mDNS_AddDynDNSHostName(mDNS *m, const domainname *fqdn, mDNSRecordCallback *StatusCallback, const void *StatusContext)$/;"	f
mDNS_AddMcastResolver	mDNSCore/mDNS.c	/^mDNSexport McastResolver *mDNS_AddMcastResolver(mDNS *const m, const domainname *d, const mDNSInterfaceID interface, mDNSu32 timeout)$/;"	f
mDNS_AddRecordToService	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_AddRecordToService(mDNS *const m, ServiceRecordSet *sr,$/;"	f
mDNS_AddSearchDomain	mDNSCore/uDNS.c	/^mDNSexport void mDNS_AddSearchDomain(const domainname *const domain, mDNSInterfaceID InterfaceID)$/;"	f
mDNS_AddSearchDomain	mDNSShared/dnsextd.c	/^void mDNS_AddSearchDomain(const domainname *const domain, mDNSInterfaceID InterfaceID) { (void)domain; (void) InterfaceID;}$/;"	f
mDNS_AddSearchDomain_CString	mDNSCore/mDNSEmbeddedAPI.h	3004;"	d
mDNS_AddressIsLocalSubnet	mDNSCore/mDNS.c	/^mDNSexport mDNSBool mDNS_AddressIsLocalSubnet(mDNS *const m, const mDNSInterfaceID InterfaceID, const mDNSAddr *addr, mDNSBool *myself)$/;"	f
mDNS_AdvertiseDomains	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_AdvertiseDomains(mDNS *const m, AuthRecord *rr,$/;"	f
mDNS_CFMInit	mDNSMacOS9/mDNSLibrary.c	/^pascal OSErr mDNS_CFMInit(const CFragInitBlock *theInitBlock)$/;"	f
mDNS_CFMTerm	mDNSMacOS9/mDNSLibrary.c	/^void mDNS_CFMTerm(void)$/;"	f
mDNS_CheckForCacheRecord	mDNSCore/mDNS.c	/^mDNSexport mDNSBool mDNS_CheckForCacheRecord(mDNS *const m, DNSQuestion *q, mDNSu16 qtype)$/;"	f
mDNS_CheckLock	mDNSCore/DNSCommon.h	300;"	d
mDNS_Close	mDNSCore/mDNSEmbeddedAPI.h	2647;"	d
mDNS_ConfigChanged	mDNSCore/mDNS.c	/^mDNSexport void mDNS_ConfigChanged(mDNS *const m)$/;"	f
mDNS_ConfigChanged	mDNSShared/dnsextd.c	/^void mDNS_ConfigChanged(mDNS *const m)  { ( void ) m; }$/;"	f
mDNS_DeactivateNetWake_internal	mDNSCore/mDNS.c	/^mDNSexport void mDNS_DeactivateNetWake_internal(mDNS *const m, NetworkInterfaceInfo *set)$/;"	f
mDNS_DebugMode	mDNSShared/mDNSDebug.c	/^mDNSexport int mDNS_DebugMode = mDNSfalse;$/;"	v
mDNS_DebugMode	mDNSShared/mDNSDebug.c	/^mDNSexport int mDNS_DebugMode = mDNStrue;$/;"	v
mDNS_Dereg_conflict	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { mDNS_Dereg_normal, mDNS_Dereg_rapid, mDNS_Dereg_conflict, mDNS_Dereg_repeat } mDNS_Dereg_type;$/;"	e	enum:__anon94
mDNS_Dereg_normal	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { mDNS_Dereg_normal, mDNS_Dereg_rapid, mDNS_Dereg_conflict, mDNS_Dereg_repeat } mDNS_Dereg_type;$/;"	e	enum:__anon94
mDNS_Dereg_rapid	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { mDNS_Dereg_normal, mDNS_Dereg_rapid, mDNS_Dereg_conflict, mDNS_Dereg_repeat } mDNS_Dereg_type;$/;"	e	enum:__anon94
mDNS_Dereg_repeat	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { mDNS_Dereg_normal, mDNS_Dereg_rapid, mDNS_Dereg_conflict, mDNS_Dereg_repeat } mDNS_Dereg_type;$/;"	e	enum:__anon94
mDNS_Dereg_type	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { mDNS_Dereg_normal, mDNS_Dereg_rapid, mDNS_Dereg_conflict, mDNS_Dereg_repeat } mDNS_Dereg_type;$/;"	t	typeref:enum:__anon94
mDNS_Deregister	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_Deregister(mDNS *const m, AuthRecord *const rr)$/;"	f
mDNS_Deregister	mDNSShared/dnsextd.c	/^mStatus mDNS_Deregister(mDNS *const m, AuthRecord *const rr) { ( void ) m; ( void ) rr; return 0; }$/;"	f
mDNS_DeregisterInterface	mDNSCore/mDNS.c	/^mDNSexport void mDNS_DeregisterInterface(mDNS *const m, NetworkInterfaceInfo *set, mDNSBool flapping)$/;"	f
mDNS_DeregisterInterface	mDNSShared/dnsextd.c	/^void mDNS_DeregisterInterface(mDNS *const m, NetworkInterfaceInfo *set, mDNSBool flapping)$/;"	f
mDNS_DeregisterNoSuchService	mDNSCore/mDNSEmbeddedAPI.h	2745;"	d
mDNS_DeregisterService	mDNSCore/mDNSEmbeddedAPI.h	2739;"	d
mDNS_DeregisterService_drt	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_DeregisterService_drt(mDNS *const m, ServiceRecordSet *sr, mDNS_Dereg_type drt)$/;"	f
mDNS_Deregister_internal	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_Deregister_internal(mDNS *const m, AuthRecord *const rr, mDNS_Dereg_type drt)$/;"	f
mDNS_DirectOP	mDNSShared/dnssd_clientshim.c	/^typedef struct mDNS_DirectOP_struct mDNS_DirectOP;$/;"	t	typeref:struct:mDNS_DirectOP_struct	file:
mDNS_DirectOP_Browse	mDNSShared/dnssd_clientshim.c	/^} mDNS_DirectOP_Browse;$/;"	t	typeref:struct:__anon119	file:
mDNS_DirectOP_Dispose	mDNSShared/dnssd_clientshim.c	/^typedef void mDNS_DirectOP_Dispose (mDNS_DirectOP *op);$/;"	t	file:
mDNS_DirectOP_QueryRecord	mDNSShared/dnssd_clientshim.c	/^} mDNS_DirectOP_QueryRecord;$/;"	t	typeref:struct:__anon121	file:
mDNS_DirectOP_Register	mDNSShared/dnssd_clientshim.c	/^} mDNS_DirectOP_Register;$/;"	t	typeref:struct:__anon118	file:
mDNS_DirectOP_Resolve	mDNSShared/dnssd_clientshim.c	/^} mDNS_DirectOP_Resolve;$/;"	t	typeref:struct:__anon120	file:
mDNS_DirectOP_struct	mDNSShared/dnssd_clientshim.c	/^struct mDNS_DirectOP_struct$/;"	s	file:
mDNS_DomainType	mDNSCore/mDNSEmbeddedAPI.h	/^} mDNS_DomainType;$/;"	t	typeref:enum:__anon96
mDNS_DomainTypeBrowse	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS_DomainTypeBrowse              = 0,$/;"	e	enum:__anon96
mDNS_DomainTypeBrowseAutomatic	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS_DomainTypeBrowseAutomatic     = 2,$/;"	e	enum:__anon96
mDNS_DomainTypeBrowseDefault	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS_DomainTypeBrowseDefault       = 1,$/;"	e	enum:__anon96
mDNS_DomainTypeMax	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS_DomainTypeMax = 4$/;"	e	enum:__anon96
mDNS_DomainTypeNames	mDNSCore/mDNS.c	/^mDNSexport const char *const mDNS_DomainTypeNames[] =$/;"	v
mDNS_DomainTypeNames	mDNSShared/dnsextd.c	/^const char * const mDNS_DomainTypeNames[1] = {};$/;"	v
mDNS_DomainTypeRegistration	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS_DomainTypeRegistration        = 3,$/;"	e	enum:__anon96
mDNS_DomainTypeRegistrationDefault	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS_DomainTypeRegistrationDefault = 4,$/;"	e	enum:__anon96
mDNS_DropLockBeforeCallback	mDNSCore/DNSCommon.h	303;"	d
mDNS_Execute	mDNSCore/mDNS.c	/^mDNSexport mDNSs32 mDNS_Execute(mDNS *const m)$/;"	f
mDNS_Execute	mDNSShared/dnsextd.c	/^mDNSs32 mDNS_Execute   (mDNS *const m) { ( void ) m; return 0; }$/;"	f
mDNS_ExitNow	mDNSCore/mDNSEmbeddedAPI.h	2648;"	d
mDNS_ExtractKeepaliveInfo	mDNSCore/mDNS.c	/^mDNSlocal void mDNS_ExtractKeepaliveInfo(AuthRecord *ar, mDNSu32 *timeout, mDNSAddr *laddr, mDNSAddr *raddr, mDNSEthAddr *eth, mDNSu32 *seq,$/;"	f
mDNS_FinalExit	mDNSCore/mDNS.c	/^mDNSexport void mDNS_FinalExit(mDNS *const m)$/;"	f
mDNS_GetDomains	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_GetDomains(mDNS *const m, DNSQuestion *const question, mDNS_DomainType DomainType, const domainname *dom,$/;"	f
mDNS_GetDomains	mDNSShared/dnsextd.c	/^mStatus mDNS_GetDomains(mDNS *const m, DNSQuestion *const question, mDNS_DomainType DomainType, const domainname *dom,$/;"	f
mDNS_GrowCache	mDNSCore/mDNS.c	/^mDNSexport void mDNS_GrowCache(mDNS *const m, CacheEntity *storage, mDNSu32 numrecords)$/;"	f
mDNS_GrowCache_internal	mDNSCore/mDNS.c	/^mDNSlocal void mDNS_GrowCache_internal(mDNS *const m, CacheEntity *storage, mDNSu32 numrecords)$/;"	f
mDNS_HostNameCallback	mDNSCore/mDNS.c	/^mDNSlocal void mDNS_HostNameCallback(mDNS *const m, AuthRecord *const rr, mStatus result)$/;"	f
mDNS_IOREG_KA_KEY	mDNSMacOSX/mDNSMacOSX.c	123;"	d	file:
mDNS_IOREG_KEY	mDNSMacOSX/mDNSMacOSX.c	121;"	d	file:
mDNS_IOREG_VALUE	mDNSMacOSX/mDNSMacOSX.c	122;"	d	file:
mDNS_IdUsedInQuestionsList	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool mDNS_IdUsedInQuestionsList(mDNS * const m, mDNSOpaque16 id)$/;"	f
mDNS_IdUsedInResourceRecordsList	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool mDNS_IdUsedInResourceRecordsList(mDNS * const m, mDNSOpaque16 id)$/;"	f
mDNS_Init	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_Init(mDNS *const m, mDNS_PlatformSupport *const p,$/;"	f
mDNS_Init_AdvertiseLocalAddresses	mDNSCore/mDNSEmbeddedAPI.h	2637;"	d
mDNS_Init_DontAdvertiseLocalAddresses	mDNSCore/mDNSEmbeddedAPI.h	2638;"	d
mDNS_Init_NoCache	mDNSCore/mDNSEmbeddedAPI.h	2634;"	d
mDNS_Init_NoInitCallback	mDNSCore/mDNSEmbeddedAPI.h	2639;"	d
mDNS_Init_NoInitCallbackContext	mDNSCore/mDNSEmbeddedAPI.h	2640;"	d
mDNS_Init_ZeroCacheSize	mDNSCore/mDNSEmbeddedAPI.h	2635;"	d
mDNS_InstantiateInlines	mDNSCore/DNSCommon.c	19;"	d	file:
mDNS_KeepaliveRecord	mDNSCore/mDNSEmbeddedAPI.h	451;"	d
mDNS_Lock	mDNSCore/DNSCommon.h	296;"	d
mDNS_Lock_	mDNSCore/DNSCommon.c	/^mDNSexport void mDNS_Lock_(mDNS *const m, const char * const functionname)$/;"	f
mDNS_LoggingEnabled	mDNSShared/mDNSDebug.c	/^mDNSexport int mDNS_LoggingEnabled       = 0;$/;"	v
mDNS_MatchKeepaliveInfo	mDNSCore/mDNS.c	/^mDNSlocal AuthRecord* mDNS_MatchKeepaliveInfo(mDNS *const m, const mDNSAddr* pladdr, const mDNSAddr* praddr, const mDNSIPPort plport,$/;"	f
mDNS_McastLoggingEnabled	mDNSShared/mDNSDebug.c	/^mDNSexport int mDNS_McastLoggingEnabled  = 0;$/;"	v
mDNS_McastTracingEnabled	mDNSShared/mDNSDebug.c	/^mDNSexport int mDNS_McastTracingEnabled  = 0; $/;"	v
mDNS_NewMessageID	mDNSCore/mDNS.c	/^mDNSexport mDNSOpaque16 mDNS_NewMessageID(mDNS * const m)$/;"	f
mDNS_NoWake	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS_NoWake        = 0, \/\/ System does not support Wake on LAN$/;"	e	enum:__anon99
mDNS_PacketLoggingEnabled	mDNSShared/mDNSDebug.c	/^mDNSexport int mDNS_PacketLoggingEnabled = 0;$/;"	v
mDNS_PlatformSupport	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct mDNS_PlatformSupport_struct mDNS_PlatformSupport;$/;"	t	typeref:struct:mDNS_PlatformSupport_struct
mDNS_PlatformSupport_struct	mDNSMacOS9/mDNSMacOS9.h	/^struct mDNS_PlatformSupport_struct$/;"	s
mDNS_PlatformSupport_struct	mDNSMacOSX/mDNSMacOSX.h	/^struct mDNS_PlatformSupport_struct$/;"	s
mDNS_PlatformSupport_struct	mDNSPosix/mDNSPosix.h	/^struct mDNS_PlatformSupport_struct$/;"	s
mDNS_PlatformSupport_struct	mDNSVxWorks/mDNSVxWorks.h	/^struct  mDNS_PlatformSupport_struct$/;"	s
mDNS_PlatformSupport_struct	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^struct  mDNS_PlatformSupport_struct$/;"	s
mDNS_PlatformSupport_struct	mDNSWindows/mDNSWin32.h	/^struct	mDNS_PlatformSupport_struct$/;"	s
mDNS_PurgeCacheResourceRecord	mDNSCore/mDNS.c	/^mDNSexport void mDNS_PurgeCacheResourceRecord(mDNS *const m, CacheRecord *rr)$/;"	f
mDNS_PurgeForQuestion	mDNSCore/mDNS.c	/^mDNSlocal void mDNS_PurgeForQuestion(mDNS *const m, DNSQuestion *q)$/;"	f
mDNS_REQUEST_UNICAST_RESPONSE	mDNSCore/mDNS.c	107;"	d	file:
mDNS_ReclaimLockAfterCallback	mDNSCore/DNSCommon.h	307;"	d
mDNS_Reconfirm	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_Reconfirm(mDNS *const m, CacheRecord *const cr)$/;"	f
mDNS_ReconfirmByValue	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_ReconfirmByValue(mDNS *const m, ResourceRecord *const rr)$/;"	f
mDNS_Reconfirm_internal	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_Reconfirm_internal(mDNS *const m, CacheRecord *const rr, mDNSu32 interval)$/;"	f
mDNS_Register	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_Register(mDNS *const m, AuthRecord *const rr)$/;"	f
mDNS_Register	mDNSShared/dnsextd.c	/^mStatus mDNS_Register(mDNS *const m, AuthRecord *const rr) { ( void ) m; ( void ) rr; return 0; }$/;"	f
mDNS_RegisterInterface	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_RegisterInterface(mDNS *const m, NetworkInterfaceInfo *set, mDNSBool flapping)$/;"	f
mDNS_RegisterInterface	mDNSShared/dnsextd.c	/^mStatus mDNS_RegisterInterface(mDNS *const m, NetworkInterfaceInfo *set, mDNSBool flapping)$/;"	f
mDNS_RegisterNoSuchService	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_RegisterNoSuchService(mDNS *const m, AuthRecord *const rr,$/;"	f
mDNS_RegisterProxyHost	mDNSPosix/ProxyResponder.c	/^mDNSlocal mStatus mDNS_RegisterProxyHost(mDNS *m, ProxyHost *p)$/;"	f
mDNS_RegisterService	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_RegisterService(mDNS *const m, ServiceRecordSet *sr,$/;"	f
mDNS_Register_internal	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_Register_internal(mDNS *const m, AuthRecord *const rr)$/;"	f
mDNS_RemoveDynDNSHostName	mDNSCore/uDNS.c	/^mDNSexport void mDNS_RemoveDynDNSHostName(mDNS *m, const domainname *fqdn)$/;"	f
mDNS_RemoveDynDNSHostName	mDNSShared/dnsextd.c	/^void mDNS_RemoveDynDNSHostName(mDNS *m, const domainname *fqdn) { ( void ) m; ( void ) fqdn; }$/;"	f
mDNS_RemoveRecordFromService	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_RemoveRecordFromService(mDNS *const m, ServiceRecordSet *sr, ExtraResourceRecord *extra,$/;"	f
mDNS_RenameAndReregisterService	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_RenameAndReregisterService(mDNS *const m, ServiceRecordSet *const sr, const domainlabel *newname)$/;"	f
mDNS_SendKeepaliveACK	mDNSCore/mDNS.c	/^mDNSlocal void mDNS_SendKeepaliveACK(mDNS *const m, AuthRecord *ar)$/;"	f
mDNS_SendKeepalives	mDNSCore/mDNS.c	/^mDNSlocal void mDNS_SendKeepalives(mDNS *const m)$/;"	f
mDNS_SetFQDN	mDNSCore/mDNS.c	/^mDNSexport void mDNS_SetFQDN(mDNS *const m)$/;"	f
mDNS_SetFQDN	mDNSShared/dnsextd.c	/^void mDNS_SetFQDN(mDNS * const m) { ( void ) m; }$/;"	f
mDNS_SetPrimaryInterfaceInfo	mDNSCore/uDNS.c	/^mDNSexport void mDNS_SetPrimaryInterfaceInfo(mDNS *m, const mDNSAddr *v4addr, const mDNSAddr *v6addr, const mDNSAddr *router)$/;"	f
mDNS_SetPrimaryInterfaceInfo	mDNSShared/dnsextd.c	/^void mDNS_SetPrimaryInterfaceInfo(mDNS *m, const mDNSAddr *v4addr,  const mDNSAddr *v6addr, const mDNSAddr *router)$/;"	f
mDNS_SetSecretForDomain	mDNSCore/uDNS.c	/^mDNSexport mStatus mDNS_SetSecretForDomain(mDNS *m, DomainAuthInfo *info, const domainname *domain, const domainname *keyname, const char *b64keydata, const domainname *hostname, mDNSIPPort *port, mDNSBool autoTunnel)$/;"	f
mDNS_SetSecretForDomain	mDNSCore/uDNS.c	/^mDNSexport mStatus mDNS_SetSecretForDomain(mDNS *m, DomainAuthInfo *info,$/;"	f
mDNS_SetSecretForDomain	mDNSShared/dnsextd.c	/^mStatus mDNS_SetSecretForDomain(mDNS *m, DomainAuthInfo *info,$/;"	f
mDNS_SetupQuestion	mDNSCore/DNSCommon.c	/^mDNSexport void mDNS_SetupQuestion(DNSQuestion *const q, const mDNSInterfaceID InterfaceID, const domainname *const name,$/;"	f
mDNS_SetupResourceRecord	mDNSCore/DNSCommon.c	/^mDNSexport void mDNS_SetupResourceRecord(AuthRecord *rr, RData *RDataStorage, mDNSInterfaceID InterfaceID,$/;"	f
mDNS_StartBrowse	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_StartBrowse(mDNS *const m, DNSQuestion *const question,$/;"	f
mDNS_StartBrowse_internal	mDNSCore/mDNS.c	/^mDNSlocal mStatus mDNS_StartBrowse_internal(mDNS *const m, DNSQuestion *const question,$/;"	f
mDNS_StartExit	mDNSCore/mDNS.c	/^mDNSexport void mDNS_StartExit(mDNS *const m)$/;"	f
mDNS_StartNATOperation	mDNSCore/uDNS.c	/^mDNSexport mStatus mDNS_StartNATOperation(mDNS *const m, NATTraversalInfo *traversal)$/;"	f
mDNS_StartNATOperation_internal	mDNSCore/uDNS.c	/^mDNSexport mStatus mDNS_StartNATOperation_internal(mDNS *const m, NATTraversalInfo *traversal)$/;"	f
mDNS_StartNATOperation_internal	mDNSCore/uDNS.c	/^mDNSexport mStatus mDNS_StartNATOperation_internal(mDNS *m, NATTraversalInfo *traversal)$/;"	f
mDNS_StartQuery	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_StartQuery(mDNS *const m, DNSQuestion *const question)$/;"	f
mDNS_StartQuery_internal	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_StartQuery_internal(mDNS *const m, DNSQuestion *const question)$/;"	f
mDNS_StartResolveService	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_StartResolveService(mDNS *const m,$/;"	f
mDNS_StatusCallback	mDNSMacOS9/mDNSLibrary.c	/^mDNSlocal void mDNS_StatusCallback(mDNS *const m, mStatus result)$/;"	f
mDNS_StatusCallback	mDNSMacOSX/daemon.c	/^mDNSlocal void mDNS_StatusCallback(mDNS *const m, mStatus result)$/;"	f
mDNS_StatusCallback	mDNSPosix/Bonjour.c	/^mDNSlocal void mDNS_StatusCallback(mDNS *const m, mStatus result)$/;"	f
mDNS_StatusCallback	mDNSPosix/PosixDaemon.c	/^mDNSlocal void mDNS_StatusCallback(mDNS *const m, mStatus result)$/;"	f
mDNS_StopAdvertiseDomains	mDNSCore/mDNSEmbeddedAPI.h	2777;"	d
mDNS_StopBrowse	mDNSCore/mDNSEmbeddedAPI.h	2755;"	d
mDNS_StopGetDomains	mDNSCore/mDNSEmbeddedAPI.h	2775;"	d
mDNS_StopNATOperation	mDNSCore/uDNS.c	/^mDNSexport mStatus mDNS_StopNATOperation(mDNS *const m, NATTraversalInfo *traversal)$/;"	f
mDNS_StopNATOperation_internal	mDNSCore/uDNS.c	/^mDNSexport mStatus mDNS_StopNATOperation_internal(mDNS *m, NATTraversalInfo *traversal)$/;"	f
mDNS_StopQuery	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_StopQuery(mDNS *const m, DNSQuestion *const question)$/;"	f
mDNS_StopQuery	mDNSShared/dnsextd.c	/^mStatus mDNS_StopQuery(mDNS *const m, DNSQuestion *const question) { ( void ) m; ( void ) question; return 0; }$/;"	f
mDNS_StopQueryWithRemoves	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_StopQueryWithRemoves(mDNS *const m, DNSQuestion *const question)$/;"	f
mDNS_StopQuery_internal	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_StopQuery_internal(mDNS *const m, DNSQuestion *const question)$/;"	f
mDNS_StopResolveService	mDNSCore/mDNS.c	/^mDNSexport void    mDNS_StopResolveService (mDNS *const m, ServiceInfoQuery *q)$/;"	f
mDNS_TimeNow	mDNSCore/mDNS.c	/^mDNSexport mDNSs32 mDNS_TimeNow(const mDNS *const m)$/;"	f
mDNS_TimeNow	mDNSShared/dnsextd.c	/^mDNSs32 mDNS_TimeNow(const mDNS *const m) { ( void ) m; return 0; }$/;"	f
mDNS_TimeNow_NoLock	mDNSCore/mDNSEmbeddedAPI.h	3108;"	d
mDNS_USER_CLIENT_CREATE_TYPE	mDNSMacOSX/mDNSMacOSX.c	124;"	d	file:
mDNS_Unlock	mDNSCore/DNSCommon.h	298;"	d
mDNS_Unlock_	mDNSCore/DNSCommon.c	/^mDNSexport void mDNS_Unlock_(mDNS *const m, const char * const functionname)$/;"	f
mDNS_Update	mDNSCore/mDNS.c	/^mDNSexport mStatus mDNS_Update(mDNS *const m, AuthRecord *const rr, mDNSu32 newttl,$/;"	f
mDNS_UpdateAllowSleep	mDNSCore/mDNS.c	/^mDNSexport void mDNS_UpdateAllowSleep(mDNS *const m)$/;"	f
mDNS_VACB_Lim	mDNSCore/DNSCommon.c	4054;"	d	file:
mDNS_VACB_Lim	mDNSShared/DebugServices.c	1225;"	d	file:
mDNS_VACB_Remain	mDNSCore/DNSCommon.c	4055;"	d	file:
mDNS_VACB_Remain	mDNSShared/DebugServices.c	1226;"	d	file:
mDNS_VACB_Size	mDNSCore/DNSCommon.c	4052;"	d	file:
mDNS_VACB_Size	mDNSShared/DebugServices.c	1223;"	d	file:
mDNS_WakeOnAC	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS_WakeOnAC      = 1, \/\/ System supports Wake on LAN when connected to AC power only$/;"	e	enum:__anon99
mDNS_WakeOnBattery	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS_WakeOnBattery = 2  \/\/ System supports Wake on LAN on battery$/;"	e	enum:__anon99
mDNS_busy	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 mDNS_busy;                  \/\/ Incremented between mDNS_Lock\/mDNS_Unlock section$/;"	m	struct:mDNS_struct
mDNS_numPrereqs	mDNSCore/mDNSEmbeddedAPI.h	483;"	d
mDNS_numUpdates	mDNSCore/mDNSEmbeddedAPI.h	484;"	d
mDNS_numZones	mDNSCore/mDNSEmbeddedAPI.h	482;"	d
mDNS_plat	mDNSCore/mDNSEmbeddedAPI.h	/^    Platform_t mDNS_plat;$/;"	m	struct:mDNS_struct
mDNS_reentrancy	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 mDNS_reentrancy;            \/\/ Incremented when calling a client callback$/;"	m	struct:mDNS_struct
mDNS_snprintf	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu32 mDNS_snprintf(char *sbuffer, mDNSu32 buflen, const char *fmt, ...)$/;"	f
mDNS_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct mDNS_struct$/;"	s
mDNS_vsnprintf	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu32 mDNS_vsnprintf(char *sbuffer, mDNSu32 buflen, const char *fmt, va_list arg)$/;"	f
mDNSbindReq	mDNSMacOS9/mDNSMacOS9.c	/^static const TBind mDNSbindReq = { sizeof(mDNSPortInetAddress), sizeof(mDNSPortInetAddress), (UInt8*)&mDNSPortInetAddress, 0 };$/;"	v	file:
mDNSexport	mDNSCore/mDNSEmbeddedAPI.h	118;"	d
mDNSfalse	mDNSCore/mDNSEmbeddedAPI.h	/^enum { mDNSfalse = 0, mDNStrue = 1 };$/;"	e	enum:__anon39
mDNSinitComplete	mDNSMacOS9/mDNSMacOS9.c	/^mDNSlocal void mDNSinitComplete(mDNS *const m, mStatus result)$/;"	f
mDNSinline	mDNSCore/mDNSEmbeddedAPI.h	2539;"	d
mDNSinline	mDNSCore/mDNSEmbeddedAPI.h	2541;"	d
mDNSinline	mDNSCore/mDNSEmbeddedAPI.h	2554;"	d
mDNSisspace	mDNSCore/DNSDigest.c	1134;"	d	file:
mDNSlocal	mDNSCore/mDNSEmbeddedAPI.h	111;"	d
mDNSprintf_format	mDNSCore/DNSCommon.c	/^static const struct mDNSprintf_format$/;"	s	file:
mDNSprintf_format_default	mDNSCore/DNSCommon.c	/^} mDNSprintf_format_default = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:mDNSprintf_format	file:
mDNSs16	mDNSCore/mDNSEmbeddedAPI.h	/^typedef   signed short mDNSs16;$/;"	t
mDNSs32	mDNSCore/mDNSEmbeddedAPI.h	/^typedef   signed int mDNSs32;$/;"	t
mDNSs32	mDNSCore/mDNSEmbeddedAPI.h	/^typedef   signed int32 mDNSs32;$/;"	t
mDNSs8	mDNSCore/mDNSEmbeddedAPI.h	/^typedef   signed char mDNSs8;$/;"	t
mDNSstrchr	mDNSCore/DNSDigest.c	/^mDNSlocal const char *mDNSstrchr(const char *s, int c)$/;"	f
mDNStrue	mDNSCore/mDNSEmbeddedAPI.h	/^enum { mDNSfalse = 0, mDNStrue = 1 };$/;"	e	enum:__anon39
mDNSu16	mDNSCore/mDNSEmbeddedAPI.h	/^typedef unsigned short mDNSu16;$/;"	t
mDNSu32	mDNSCore/mDNSEmbeddedAPI.h	/^typedef unsigned int mDNSu32;$/;"	t
mDNSu32	mDNSCore/mDNSEmbeddedAPI.h	/^typedef unsigned int32 mDNSu32;$/;"	t
mDNSu8	mDNSCore/mDNSEmbeddedAPI.h	/^typedef unsigned char mDNSu8;$/;"	t
mDNSv	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32   mDNSv;      \/\/ mDNSResponder Version (DNS_SD_H defined in dns_sd.h)$/;"	m	struct:__anon55
mDNSv4Addr	mDNSCore/mDNSEmbeddedAPI.h	/^typedef mDNSOpaque32 mDNSv4Addr;        \/\/ An IP address is a four-byte opaque identifier (not an integer)$/;"	t
mDNSv4AddrIsRFC1918	mDNSCore/DNSCommon.c	/^mDNSexport mDNSBool mDNSv4AddrIsRFC1918(const mDNSv4Addr * const addr)$/;"	f
mDNSv4AddressIsLinkLocal	mDNSCore/mDNSEmbeddedAPI.h	2940;"	d
mDNSv4AddressIsLoopback	mDNSCore/mDNSEmbeddedAPI.h	2947;"	d
mDNSv6Addr	mDNSCore/mDNSEmbeddedAPI.h	/^typedef mDNSOpaque128 mDNSv6Addr;       \/\/ An IPv6 address is a 16-byte opaque identifier (not an integer)$/;"	t
mDNSv6AddressIsLinkLocal	mDNSCore/mDNSEmbeddedAPI.h	2941;"	d
mDNSv6AddressIsLoopback	mDNSCore/mDNSEmbeddedAPI.h	2948;"	d
mData	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    uint8_t *       mData;$/;"	m	struct:TextRecord
mDomainList	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^		CListCtrl mDomainList;$/;"	m	class:ChooserDialog
mFocus	Clients/ExplorerPlugin/ExplorerBar.h	/^BOOL mFocus;$/;"	m	class:ExplorerBar
mIcon	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.h	/^		HICON										mIcon;$/;"	m	class:BrowserDialog
mIsServiceBrowsing	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^		BOOL						mIsServiceBrowsing;$/;"	m	class:ChooserDialog
mMenuAcceleratorTable	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^		HACCEL						mMenuAcceleratorTable;$/;"	m	class:ChooserDialog
mOT_Bind	mDNSMacOS9/mDNSMacOS9.h	/^    mOT_Bind,           \/\/ We've just called OTBind$/;"	e	enum:__anon176
mOT_Closed	mDNSMacOS9/mDNSMacOS9.h	/^    mOT_Closed = 0,     \/\/ We got kOTProviderIsClosed message$/;"	e	enum:__anon176
mOT_LLScope	mDNSMacOS9/mDNSMacOS9.h	/^    mOT_LLScope,        \/\/ Have just done kAddLinkMulticastOption$/;"	e	enum:__anon176
mOT_RcvDestAddr	mDNSMacOS9/mDNSMacOS9.h	/^    mOT_RcvDestAddr,    \/\/ Have just done kRcvDestAddrOption$/;"	e	enum:__anon176
mOT_Ready	mDNSMacOS9/mDNSMacOS9.h	/^    mOT_Ready           \/\/ Got T_BINDCOMPLETE; Interface is registered and active$/;"	e	enum:__anon176
mOT_Reset	mDNSMacOS9/mDNSMacOS9.h	/^    mOT_Reset,          \/\/ We got xOTStackWasLoaded message$/;"	e	enum:__anon176
mOT_ReusePort	mDNSMacOS9/mDNSMacOS9.h	/^    mOT_ReusePort,      \/\/ Have just done kReusePortOption$/;"	e	enum:__anon176
mOT_SetMTTL	mDNSMacOS9/mDNSMacOS9.h	/^    mOT_SetMTTL,        \/\/ Have just done kSetMulticastTTLOption$/;"	e	enum:__anon176
mOT_SetUTTL	mDNSMacOS9/mDNSMacOS9.h	/^    mOT_SetUTTL,        \/\/ Have just done kSetUnicastTTLOption$/;"	e	enum:__anon176
mOT_Start	mDNSMacOS9/mDNSMacOS9.h	/^    mOT_Start,          \/\/ We've called OTAsyncOpenEndpoint$/;"	e	enum:__anon176
mOT_State	mDNSMacOS9/mDNSMacOS9.h	/^} mOT_State;$/;"	t	typeref:enum:__anon176
mOTstate	mDNSMacOS9/mDNSMacOS9.h	/^    UInt32 mOTstate;                \/\/ mOT_State enum$/;"	m	struct:mDNS_PlatformSupport_struct
mOwner	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^ExplorerBar *           mOwner;$/;"	m	class:ExplorerBarWindow
mParentWindow	Clients/ExplorerPlugin/ExplorerBar.h	/^HWND mParentWindow;$/;"	m	class:ExplorerBar
mPassword	Clients/ExplorerPlugin/LoginDialog.h	/^CString mPassword;$/;"	m	class:LoginDialog
mPassword	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.h	/^		CString		mPassword;$/;"	m	class:LoginDialog
mRefCount	Clients/ExplorerPlugin/ClassFactory.h	/^DWORD mRefCount;$/;"	m	class:ClassFactory
mRefCount	Clients/ExplorerPlugin/ExplorerBar.h	/^DWORD mRefCount;$/;"	m	class:ExplorerBar
mResolveServiceRef	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^DNSServiceRef mResolveServiceRef;$/;"	m	class:ExplorerBarWindow
mServiceHandlers	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^ServiceHandlerArray mServiceHandlers;$/;"	m	class:ExplorerBarWindow
mServiceInstances	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^		ServiceInstanceVector		mServiceInstances;$/;"	m	class:ChooserDialog
mServiceList	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^		CListCtrl mServiceList;$/;"	m	class:ChooserDialog
mServiceTypes	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^		ServiceTypeVector			mServiceTypes;$/;"	m	class:ChooserDialog
mSite	Clients/ExplorerPlugin/ExplorerBar.h	/^IInputObjectSite *      mSite;$/;"	m	class:ExplorerBar
mSize	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    uint16_t mSize;$/;"	m	struct:TextRecord
mState	mDNSCore/mDNSEmbeddedAPI.h	/^    mergeState_t mState;       \/\/ Unicast Record Registrations merge state$/;"	m	struct:AuthRecord_struct
mStatus	mDNSCore/mDNSEmbeddedAPI.h	/^typedef mDNSs32 mStatus;$/;"	t
mStatus_AlreadyRegistered	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_AlreadyRegistered         = -65547,$/;"	e	enum:__anon40
mStatus_BadFlagsErr	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_BadFlagsErr               = -65543,$/;"	e	enum:__anon40
mStatus_BadInterfaceErr	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_BadInterfaceErr           = -65552,$/;"	e	enum:__anon40
mStatus_BadKey	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_BadKey                    = -65561,$/;"	e	enum:__anon40
mStatus_BadParamErr	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_BadParamErr               = -65540,$/;"	e	enum:__anon40
mStatus_BadReferenceErr	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_BadReferenceErr           = -65541,$/;"	e	enum:__anon40
mStatus_BadSig	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_BadSig                    = -65560,     \/\/ while we define this per RFC 2845, BIND 9 returns Refused for bad\/missing signatures$/;"	e	enum:__anon40
mStatus_BadStateErr	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_BadStateErr               = -65542,$/;"	e	enum:__anon40
mStatus_BadTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_BadTime                   = -65559,$/;"	e	enum:__anon40
mStatus_ConfigChanged	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_ConfigChanged     = -65791,$/;"	e	enum:__anon40
mStatus_ConnEstablished	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_ConnEstablished   = -65789,$/;"	e	enum:__anon40
mStatus_ConnFailed	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_ConnFailed        = -65788,$/;"	e	enum:__anon40
mStatus_ConnPending	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_ConnPending       = -65787,$/;"	e	enum:__anon40
mStatus_DoubleNAT	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_DoubleNAT                 = -65558,$/;"	e	enum:__anon40
mStatus_Firewall	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_Firewall                  = -65550,$/;"	e	enum:__anon40
mStatus_GrowCache	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_GrowCache         = -65790,$/;"	e	enum:__anon40
mStatus_Incompatible	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_Incompatible              = -65551,$/;"	e	enum:__anon40
mStatus_Invalid	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_Invalid                   = -65549,$/;"	e	enum:__anon40
mStatus_MemFree	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_MemFree           = -65792      \/\/ Last value: 0xFFFE FF00$/;"	e	enum:__anon40
mStatus_NATPortMappingDisabled	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NATPortMappingDisabled    = -65565,     \/\/ NAT supports PCP, NAT-PMP or UPnP, but it's disabled by the administrator$/;"	e	enum:__anon40
mStatus_NATPortMappingUnsupported	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NATPortMappingUnsupported = -65564,     \/\/ NAT doesn't support PCP, NAT-PMP or UPnP$/;"	e	enum:__anon40
mStatus_NATTraversal	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NATTraversal              = -65557,$/;"	e	enum:__anon40
mStatus_NameConflict	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NameConflict              = -65548,$/;"	e	enum:__anon40
mStatus_NoAuth	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NoAuth                    = -65555,$/;"	e	enum:__anon40
mStatus_NoCache	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NoCache                   = -65546,$/;"	e	enum:__anon40
mStatus_NoError	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NoError           = 0,$/;"	e	enum:__anon40
mStatus_NoMemoryErr	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NoMemoryErr               = -65539,$/;"	e	enum:__anon40
mStatus_NoRouter	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NoRouter                  = -65566,$/;"	e	enum:__anon40
mStatus_NoSuchKey	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NoSuchKey                 = -65556,$/;"	e	enum:__anon40
mStatus_NoSuchNameErr	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NoSuchNameErr             = -65538,$/;"	e	enum:__anon40
mStatus_NoSuchRecord	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NoSuchRecord              = -65554,$/;"	e	enum:__anon40
mStatus_NotInitializedErr	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_NotInitializedErr         = -65545,$/;"	e	enum:__anon40
mStatus_PollingMode	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_PollingMode               = -65567,$/;"	e	enum:__anon40
mStatus_Refused	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_Refused                   = -65553,$/;"	e	enum:__anon40
mStatus_ServiceNotRunning	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_ServiceNotRunning         = -65563,     \/\/ Background daemon not running$/;"	e	enum:__anon40
mStatus_Timeout	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_Timeout                   = -65568,$/;"	e	enum:__anon40
mStatus_TransientErr	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_TransientErr              = -65562,     \/\/ transient failures, e.g. sending packets shortly after a network transition or wake from sleep$/;"	e	enum:__anon40
mStatus_UnknownErr	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_UnknownErr                = -65537,     \/\/ First value: 0xFFFE FFFF$/;"	e	enum:__anon40
mStatus_UnsupportedErr	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_UnsupportedErr            = -65544,$/;"	e	enum:__anon40
mStatus_Waiting	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus_Waiting           = 1,$/;"	e	enum:__anon40
mTree	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^CTreeCtrl mTree;$/;"	m	class:ExplorerBarWindow
mUsername	Clients/ExplorerPlugin/LoginDialog.h	/^CString mUsername;$/;"	m	class:LoginDialog
mUsername	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.h	/^		CString		mUsername;$/;"	m	class:LoginDialog
mViewMode	Clients/ExplorerPlugin/ExplorerBar.h	/^DWORD mViewMode;$/;"	m	class:ExplorerBar
mWebBrowser	Clients/ExplorerPlugin/ExplorerBar.h	/^IWebBrowser2 *          mWebBrowser;$/;"	m	class:ExplorerBar
mWindow	Clients/ExplorerPlugin/ExplorerBar.h	/^ExplorerBarWindow mWindow;$/;"	m	class:ExplorerBar
m_SMBCheckBox	mDNSWindows/ControlPanel/ServicesPage.h	/^	CButton m_SMBCheckBox;$/;"	m	class:CServicesPage
m_about	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^HTREEITEM m_about;$/;"	m	class:ExplorerBarWindow
m_active	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^HCURSOR m_active;$/;"	m	class:CPrinterSetupWizardSheet
m_advertiseServices	mDNSWindows/ControlPanel/RegistrationPage.h	/^	CButton			m_advertiseServices;$/;"	m	class:CRegistrationPage
m_advertiseServicesButton	mDNSWindows/ControlPanel/SecondPage.h	/^	CButton			m_advertiseServicesButton;$/;"	m	class:CSecondPage
m_allocated	mDNSWindows/DLLX/TXTRecord.h	/^	BOOL			m_allocated;$/;"	m	class:CTXTRecord
m_applets	mDNSWindows/ControlPanel/ControlPanel.h	/^	CList<CCPApplet*, CCPApplet*&> m_applets;$/;"	m	class:CCPApp
m_arrow	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^HCURSOR m_arrow;$/;"	m	class:CPrinterSetupWizardSheet
m_bDisposed	mDNSWindows/DLL.NET/dnssd_NET.h	/^			bool				m_bDisposed;$/;"	m	class:Apple::DNSSD::ServiceRef
m_bkBrush	Clients/ExplorerPlugin/About.h	/^CBrush m_bkBrush;$/;"	m	class:CAbout
m_browseDomains	mDNSWindows/ControlPanel/ConfigPropertySheet.h	/^	StringList	m_browseDomains;$/;"	m	class:CConfigPropertySheet
m_browseDomainsRef	mDNSWindows/ControlPanel/ConfigPropertySheet.h	/^	DNSServiceRef		m_browseDomainsRef;$/;"	m	class:CConfigPropertySheet
m_browseList	Clients/PrinterSetupWizard/SecondPage.h	/^CTreeCtrl m_browseList;$/;"	m	class:CSecondPage
m_browseListCtrl	mDNSWindows/ControlPanel/BrowsingPage.h	/^	CListCtrl	m_browseListCtrl;$/;"	m	class:CBrowsingPage
m_browser	Clients/SimpleChat.NET/SimpleChat.cs	/^        private Bonjour.DNSSDService            m_browser = null;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
m_buffer	Clients/SimpleChat.NET/SimpleChat.cs	/^        public byte[]                           m_buffer = new byte[BUFFER_SIZE];$/;"	f	class:SimpleChat.NET.SimpleChat
m_buffer	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	char	*	m_buffer;$/;"	m	struct:HostsFile	file:
m_bufferSize	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	int			m_bufferSize;$/;"	m	struct:HostsFile	file:
m_byteArray	mDNSWindows/DLLX/TXTRecord.h	/^	ByteArray		m_byteArray;$/;"	m	class:CTXTRecord
m_callback	mDNSWindows/DLL.NET/dnssd_NET.h	/^			Object			*	m_callback;$/;"	m	class:Apple::DNSSD::ServiceRef
m_checkBox	mDNSWindows/ControlPanel/FourthPage.h	/^	CButton m_checkBox;$/;"	m	class:CFourthPage
m_comboBox	mDNSWindows/ControlPanel/BrowsingPage.h	/^	CComboBox	m_comboBox;$/;"	m	class:CAddBrowseDomain
m_complete	Clients/SimpleChat.NET/SimpleChat.cs	/^        public bool                             m_complete = false;$/;"	f	class:SimpleChat.NET.SimpleChat
m_componentCtrl	Clients/ExplorerPlugin/About.h	/^CStatic m_componentCtrl;$/;"	m	class:CAbout
m_defaultPrinterCtrl	Clients/PrinterSetupWizard/ThirdPage.h	/^CButton m_defaultPrinterCtrl;$/;"	m	class:CThirdPage
m_descId	mDNSWindows/ControlPanel/ControlPanel.h	/^	UINT				m_descId;$/;"	m	class:CCPApplet
m_descriptionField	Clients/PrinterSetupWizard/SecondPage.h	/^CStatic m_descriptionField;$/;"	m	class:CSecondPage
m_descriptionLabel	Clients/PrinterSetupWizard/SecondPage.h	/^CStatic m_descriptionLabel;$/;"	m	class:CSecondPage
m_disposed	mDNSWindows/DLL.NET/dnssd_NET.h	/^				bool				m_disposed;$/;"	m	class:Apple::DNSSD::ServiceRef::ServiceRefImpl
m_driverThreadExitCode	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^DWORD m_driverThreadExitCode;$/;"	m	class:CPrinterSetupWizardSheet
m_driverThreadFinished	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^bool m_driverThreadFinished;$/;"	m	class:CPrinterSetupWizardSheet
m_emptyListItem	Clients/PrinterSetupWizard/SecondPage.h	/^HTREEITEM m_emptyListItem;$/;"	m	class:CSecondPage
m_energySaverIcon	mDNSWindows/ControlPanel/ServicesPage.h	/^	CStatic m_energySaverIcon;$/;"	m	class:CPowerManagementWarning
m_eventManager	Clients/SimpleChat.NET/SimpleChat.cs	/^        private Bonjour.DNSSDEventManager       m_eventManager = null;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
m_eventManager	mDNSWindows/DLLX/DNSSDService.h	/^	CDNSSDEventManager	*	m_eventManager;$/;"	m	class:CDNSSDService
m_fileDesc	Clients/FirefoxExtension/CDNSSDService.h	/^PRFileDesc      *   m_fileDesc;$/;"	m	class:CDNSSDService
m_firstPage	mDNSWindows/ControlPanel/ConfigPropertySheet.h	/^	CServicesPage		m_firstPage;$/;"	m	class:CConfigPropertySheet
m_firstTime	mDNSWindows/ControlPanel/BrowsingPage.h	/^	bool		m_firstTime;$/;"	m	class:CBrowsingPage
m_fp	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	FILE	*	m_fp;$/;"	m	struct:HostsFile	file:
m_genericPCL	Clients/PrinterSetupWizard/ThirdPage.h	/^Model           *   m_genericPCL;$/;"	m	class:CThirdPage
m_genericPostscript	Clients/PrinterSetupWizard/ThirdPage.h	/^Model           *   m_genericPostscript;$/;"	m	class:CThirdPage
m_goodbye	Clients/PrinterSetupWizard/FourthPage.h	/^CStatic m_goodbye;$/;"	m	class:CFourthPage
m_gotChoice	Clients/PrinterSetupWizard/SecondPage.h	/^bool m_gotChoice;$/;"	m	class:CSecondPage
m_greeting	Clients/PrinterSetupWizard/FirstPage.h	/^CStatic m_greeting;$/;"	m	class:CFirstPage
m_hiddenWindow	mDNSWindows/DLLX/DNSSDService.cpp	/^HWND						CDNSSDService::m_hiddenWindow			= NULL;$/;"	m	class:CDNSSDService	file:
m_hiddenWindow	mDNSWindows/DLLX/DNSSDService.h	/^	static HWND				m_hiddenWindow;$/;"	m	class:CDNSSDService
m_host	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	struct hostent		m_host;$/;"	m	struct:HostsFileInfo	typeref:struct:HostsFileInfo::hostent	file:
m_hostnameControl	mDNSWindows/ControlPanel/RegistrationPage.h	/^	CEdit			m_hostnameControl;$/;"	m	class:CRegistrationPage
m_hostnameSetupKey	mDNSWindows/ControlPanel/RegistrationPage.h	/^	HKEY			m_hostnameSetupKey;$/;"	m	class:CRegistrationPage
m_ignoreChanges	mDNSWindows/ControlPanel/RegistrationPage.h	/^	bool			m_ignoreChanges;$/;"	m	class:CRegistrationPage
m_imageList	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^CImageList m_imageList;$/;"	m	class:ExplorerBarWindow
m_impl	mDNSWindows/DLL.NET/dnssd_NET.h	/^			RecordRefImpl * m_impl;$/;"	m	class:Apple::DNSSD::RecordRef
m_impl	mDNSWindows/DLL.NET/dnssd_NET.h	/^			ServiceRefImpl	*	m_impl;$/;"	m	class:Apple::DNSSD::ServiceRef
m_impl	mDNSWindows/DLL.NET/dnssd_NET.h	/^			TextRecordImpl * m_impl;$/;"	m	class:Apple::DNSSD::TextRecord
m_initialized	Clients/PrinterSetupWizard/FourthPage.h	/^bool m_initialized;$/;"	m	class:CFourthPage
m_initialized	Clients/PrinterSetupWizard/SecondPage.h	/^bool m_initialized;$/;"	m	class:CSecondPage
m_initialized	Clients/PrinterSetupWizard/ThirdPage.h	/^bool m_initialized;$/;"	m	class:CThirdPage
m_initialized	mDNSWindows/ControlPanel/BrowsingPage.h	/^	bool		m_initialized;$/;"	m	class:CBrowsingPage
m_instance	mDNSWindows/DLLStub/DLLStub.cpp	/^DLLStub * DLLStub::m_instance;$/;"	m	class:DLLStub	file:
m_instance	mDNSWindows/DLLStub/DLLStub.h	/^	static DLLStub	*	m_instance;$/;"	m	class:DLLStub
m_iod	Clients/FirefoxExtension/CDNSSDService.h	/^PRJobIoDesc m_iod;$/;"	m	class:CDNSSDService
m_ippBrowser	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^DNSServiceRef m_ippBrowser;$/;"	m	class:CPrinterSetupWizardSheet
m_isPrimary	mDNSWindows/DLLX/DNSSDService.h	/^	BOOL					m_isPrimary;$/;"	m	class:CDNSSDService
m_job	Clients/FirefoxExtension/CDNSSDService.h	/^PRJob           *   m_job;$/;"	m	class:CDNSSDService
m_key	mDNSWindows/ControlPanel/SharedSecret.h	/^	CString m_key;$/;"	m	class:CSharedSecret
m_largeFont	Clients/PrinterSetupWizard/FirstPage.h	/^CFont m_largeFont;$/;"	m	class:CFirstPage
m_largeFont	Clients/PrinterSetupWizard/FourthPage.h	/^CFont m_largeFont;$/;"	m	class:CFourthPage
m_lastPage	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^CPropertyPage                   *   m_lastPage;$/;"	m	class:CPrinterSetupWizardSheet
m_legalCtrl	Clients/ExplorerPlugin/About.h	/^CStatic m_legalCtrl;$/;"	m	class:CAbout
m_library	mDNSWindows/DLLStub/DLLStub.h	/^	HMODULE				m_library;$/;"	m	class:DLLStub
m_listener	Clients/FirefoxExtension/CDNSSDService.h	/^nsISupports     *   m_listener;$/;"	m	class:CDNSSDService
m_locationField	Clients/PrinterSetupWizard/SecondPage.h	/^CStatic m_locationField;$/;"	m	class:CSecondPage
m_locationLabel	Clients/PrinterSetupWizard/SecondPage.h	/^CStatic m_locationLabel;$/;"	m	class:CSecondPage
m_lock	mDNSWindows/ControlPanel/ConfigPropertySheet.h	/^	CRITICAL_SECTION	m_lock;$/;"	m	class:CConfigPropertySheet
m_lprBrowser	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^DNSServiceRef m_lprBrowser;$/;"	m	class:CPrinterSetupWizardSheet
m_mainRef	Clients/FirefoxExtension/CDNSSDService.h	/^DNSServiceRef m_mainRef;$/;"	m	class:CDNSSDService
m_manufacturerListCtrl	Clients/PrinterSetupWizard/ThirdPage.h	/^CListCtrl m_manufacturerListCtrl;$/;"	m	class:CThirdPage
m_manufacturerSelected	Clients/PrinterSetupWizard/ThirdPage.h	/^Manufacturer    *   m_manufacturerSelected;$/;"	m	class:CThirdPage
m_manufacturers	Clients/PrinterSetupWizard/ThirdPage.h	/^Manufacturers m_manufacturers;$/;"	m	class:CThirdPage
m_master	Clients/FirefoxExtension/CDNSSDService.h	/^char m_master;$/;"	m	class:CDNSSDService
m_modelListCtrl	Clients/PrinterSetupWizard/ThirdPage.h	/^CListCtrl m_modelListCtrl;$/;"	m	class:CThirdPage
m_modelSelected	Clients/PrinterSetupWizard/ThirdPage.h	/^Model           *   m_modelSelected;$/;"	m	class:CThirdPage
m_modified	mDNSWindows/ControlPanel/BrowsingPage.h	/^	BOOL			m_modified;$/;"	m	class:CBrowsingPage
m_modified	mDNSWindows/ControlPanel/FourthPage.h	/^	BOOL			m_modified;$/;"	m	class:CFourthPage
m_modified	mDNSWindows/ControlPanel/RegistrationPage.h	/^	bool			m_modified;$/;"	m	class:CRegistrationPage
m_modified	mDNSWindows/ControlPanel/SecondPage.h	/^	BOOL			m_modified;$/;"	m	class:CSecondPage
m_modified	mDNSWindows/ControlPanel/ServicesPage.h	/^	BOOL			m_modified;$/;"	m	class:CServicesPage
m_name	Clients/SimpleChat.NET/SimpleChat.cs	/^		private String					        m_name;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
m_name	mDNSWindows/ControlPanel/ControlPanel.h	/^	CString				m_name;$/;"	m	class:CCPApplet
m_next	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	struct HostsFileInfo	*	m_next;$/;"	m	struct:HostsFileInfo	typeref:struct:HostsFileInfo::HostsFileInfo	file:
m_outer	mDNSWindows/DLL.NET/dnssd_NET.h	/^				gcroot<ServiceRef*> m_outer;$/;"	m	class:Apple::DNSSD::ServiceRef::ServiceRefImpl
m_p	mDNSWindows/DLL.NET/PString.h	/^		IntPtr m_p;$/;"	m	class:Apple::PString
m_pageNumber	mDNSWindows/ControlPanel/ControlPanel.h	/^	int					m_pageNumber;$/;"	m	class:CCPApplet
m_passwordControl	mDNSWindows/ControlPanel/RegistrationPage.h	/^	CEdit			m_passwordControl;$/;"	m	class:CRegistrationPage
m_pdlBrowser	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^DNSServiceRef m_pdlBrowser;$/;"	m	class:CPrinterSetupWizardSheet
m_pgFourth	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^CFourthPage m_pgFourth;$/;"	m	class:CPrinterSetupWizardSheet
m_pgSecond	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^CSecondPage m_pgSecond;$/;"	m	class:CPrinterSetupWizardSheet
m_pgThird	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^CThirdPage m_pgThird;$/;"	m	class:CPrinterSetupWizardSheet
m_port	mDNSMacOSX/daemon.c	/^static mach_port_t m_port            = MACH_PORT_NULL;$/;"	v	file:
m_powerManagementCheckBox	mDNSWindows/ControlPanel/ServicesPage.h	/^	CButton m_powerManagementCheckBox;$/;"	m	class:CServicesPage
m_primary	mDNSWindows/DLLX/DNSSDService.h	/^	DNSServiceRef			m_primary;$/;"	m	class:CDNSSDService
m_printerDefault	Clients/PrinterSetupWizard/FourthPage.h	/^CStatic m_printerDefault;$/;"	m	class:CFourthPage
m_printerImage	Clients/PrinterSetupWizard/ThirdPage.h	/^CStatic *   m_printerImage;$/;"	m	class:CThirdPage
m_printerInformation	Clients/PrinterSetupWizard/SecondPage.h	/^CStatic m_printerInformation;$/;"	m	class:CSecondPage
m_printerManufacturerCtrl	Clients/PrinterSetupWizard/FourthPage.h	/^CStatic m_printerManufacturerCtrl;$/;"	m	class:CFourthPage
m_printerModelCtrl	Clients/PrinterSetupWizard/FourthPage.h	/^CStatic m_printerModelCtrl;$/;"	m	class:CFourthPage
m_printerName	Clients/PrinterSetupWizard/ThirdPage.h	/^CStatic m_printerName;$/;"	m	class:CThirdPage
m_printerNameCtrl	Clients/PrinterSetupWizard/FourthPage.h	/^CStatic m_printerNameCtrl;$/;"	m	class:CFourthPage
m_printerNames	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^PrinterNames m_printerNames;$/;"	m	class:CPrinterSetupWizardSheet
m_printerProtocolCtrl	Clients/PrinterSetupWizard/FourthPage.h	/^CStatic m_printerProtocolCtrl;$/;"	m	class:CFourthPage
m_printerSelectionText	Clients/PrinterSetupWizard/ThirdPage.h	/^CStatic m_printerSelectionText;$/;"	m	class:CThirdPage
m_printers	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^Printers m_printers;$/;"	m	class:CPrinterSetupWizardSheet
m_readMessageCallback	Clients/SimpleChat.NET/SimpleChat.cs	/^        ReadMessageCallback                     m_readMessageCallback;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
m_ref	mDNSWindows/DLL.NET/dnssd_NET.h	/^				DNSRecordRef m_ref;$/;"	m	class:Apple::DNSSD::RecordRef::RecordRefImpl
m_ref	mDNSWindows/DLL.NET/dnssd_NET.h	/^				DNSServiceRef		m_ref;$/;"	m	class:Apple::DNSSD::ServiceRef::ServiceRefImpl
m_ref	mDNSWindows/DLL.NET/dnssd_NET.h	/^				TXTRecordRef m_ref;$/;"	m	class:Apple::DNSSD::TextRecord::TextRecordImpl
m_regDomainsBox	mDNSWindows/ControlPanel/SecondPage.h	/^	CComboBox		m_regDomainsBox;$/;"	m	class:CSecondPage
m_registeredWindowClass	mDNSWindows/DLLX/DNSSDService.cpp	/^BOOL						CDNSSDService::m_registeredWindowClass	= FALSE;$/;"	m	class:CDNSSDService	file:
m_registeredWindowClass	mDNSWindows/DLLX/DNSSDService.h	/^	static BOOL				m_registeredWindowClass;$/;"	m	class:CDNSSDService
m_registrar	Clients/SimpleChat.NET/SimpleChat.cs	/^        private Bonjour.DNSSDService            m_registrar = null;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
m_registrationSetupKey	mDNSWindows/ControlPanel/RegistrationPage.h	/^	HKEY			m_registrationSetupKey;$/;"	m	class:CRegistrationPage
m_removeButton	mDNSWindows/ControlPanel/BrowsingPage.h	/^	CButton m_removeButton;$/;"	m	class:CBrowsingPage
m_resolver	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^DNSServiceRef m_resolver;$/;"	m	class:CPrinterSetupWizardSheet
m_resolver	Clients/SimpleChat.NET/SimpleChat.cs	/^        private Bonjour.DNSSDService            m_resolver = null;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
m_resourceId	mDNSWindows/ControlPanel/ControlPanel.h	/^	UINT				m_resourceId;$/;"	m	class:CCPApplet
m_rref	mDNSWindows/DLLX/DNSSDRecord.h	/^	DNSRecordRef	m_rref;$/;"	m	class:CDNSSDRecord
m_sb	Clients/SimpleChat.NET/SimpleChat.cs	/^        public StringBuilder                    m_sb = new StringBuilder();$/;"	f	class:SimpleChat.NET.SimpleChat
m_secondPage	mDNSWindows/ControlPanel/ConfigPropertySheet.h	/^	CRegistrationPage	m_secondPage;$/;"	m	class:CConfigPropertySheet
m_secret	mDNSWindows/ControlPanel/SharedSecret.h	/^	CString m_secret;$/;"	m	class:CSharedSecret
m_selectOkay	Clients/PrinterSetupWizard/SecondPage.h	/^bool m_selectOkay;$/;"	m	class:CSecondPage
m_selectedName	Clients/PrinterSetupWizard/SecondPage.h	/^std::string m_selectedName;$/;"	m	class:CSecondPage
m_selectedPrinter	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^Printer                         *   m_selectedPrinter;$/;"	m	class:CPrinterSetupWizardSheet
m_self	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet * CPrinterSetupWizardSheet::m_self;$/;"	m	class:CPrinterSetupWizardSheet	file:
m_self	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^static CPrinterSetupWizardSheet *   m_self;$/;"	m	class:CPrinterSetupWizardSheet
m_service	Clients/SimpleChat.NET/SimpleChat.cs	/^        private Bonjour.DNSSDService            m_service = null;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
m_serviceObject	mDNSWindows/DLLX/DNSSDRecord.h	/^	CDNSSDService *	m_serviceObject;$/;"	m	class:CDNSSDRecord
m_serviceRefList	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^ServiceRefList m_serviceRefList;$/;"	m	class:CPrinterSetupWizardSheet
m_serviceRefs	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^ServiceRefList m_serviceRefs;$/;"	m	class:ExplorerBarWindow
m_setupKey	mDNSWindows/ControlPanel/SecondPage.h	/^	HKEY			m_setupKey;$/;"	m	class:CSecondPage
m_sharedSecretButton	mDNSWindows/ControlPanel/SecondPage.h	/^	CButton			m_sharedSecretButton;$/;"	m	class:CSecondPage
m_socket	Clients/SimpleChat.NET/SimpleChat.cs	/^        private Socket                          m_socket = null;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
m_socket	mDNSWindows/DLL.NET/dnssd_NET.h	/^				SOCKET				m_socket;$/;"	m	class:Apple::DNSSD::ServiceRef::ServiceRefImpl
m_socketEvent	mDNSWindows/DLL.NET/dnssd_NET.h	/^				HANDLE				m_socketEvent;$/;"	m	class:Apple::DNSSD::ServiceRef::ServiceRefImpl
m_socketMap	mDNSWindows/DLLX/DNSSDService.cpp	/^CDNSSDService::SocketMap	CDNSSDService::m_socketMap;$/;"	m	class:CDNSSDService	file:
m_socketMap	mDNSWindows/DLLX/DNSSDService.h	/^	static SocketMap		m_socketMap;$/;"	m	class:CDNSSDService
m_statusKey	mDNSWindows/ControlPanel/ConfigPropertySheet.h	/^	HKEY				m_statusKey;$/;"	m	class:CConfigPropertySheet
m_statusKey	mDNSWindows/ControlPanel/RegistrationPage.h	/^	HKEY			m_statusKey;$/;"	m	class:CRegistrationPage
m_stopEvent	mDNSWindows/DLL.NET/dnssd_NET.h	/^				HANDLE				m_stopEvent;$/;"	m	class:Apple::DNSSD::ServiceRef::ServiceRefImpl
m_stopped	mDNSWindows/DLLX/DNSSDService.h	/^	BOOL					m_stopped;$/;"	m	class:CDNSSDService
m_subRef	Clients/FirefoxExtension/CDNSSDService.h	/^DNSServiceRef m_subRef;$/;"	m	class:CDNSSDService
m_subord	mDNSWindows/DLLX/DNSSDService.h	/^	DNSServiceRef			m_subord;$/;"	m	class:CDNSSDService
m_text	mDNSWindows/ControlPanel/BrowsingPage.h	/^	CString		m_text;$/;"	m	class:CAddBrowseDomain
m_thirdPage	mDNSWindows/ControlPanel/ConfigPropertySheet.h	/^	CBrowsingPage		m_thirdPage;$/;"	m	class:CConfigPropertySheet
m_thread	mDNSWindows/ControlPanel/ConfigPropertySheet.h	/^	HANDLE				m_thread;$/;"	m	class:CConfigPropertySheet
m_thread	mDNSWindows/DLL.NET/dnssd_NET.h	/^			Thread			*	m_thread;$/;"	m	class:Apple::DNSSD::ServiceRef
m_threadExited	mDNSWindows/ControlPanel/ConfigPropertySheet.h	/^	HANDLE				m_threadExited;$/;"	m	class:CConfigPropertySheet
m_threadId	mDNSWindows/DLL.NET/dnssd_NET.h	/^				DWORD				m_threadId;$/;"	m	class:Apple::DNSSD::ServiceRef::ServiceRefImpl
m_threadPool	Clients/FirefoxExtension/CDNSSDService.h	/^PRThreadPool    *   m_threadPool;$/;"	m	class:CDNSSDService
m_tref	mDNSWindows/DLLX/TXTRecord.h	/^	TXTRecordRef	m_tref;$/;"	m	class:CTXTRecord
m_uiClass	mDNSWindows/ControlPanel/ControlPanel.h	/^	CRuntimeClass	*	m_uiClass;$/;"	m	class:CCPApplet
m_usernameControl	mDNSWindows/ControlPanel/RegistrationPage.h	/^	CEdit			m_usernameControl;$/;"	m	class:CRegistrationPage
m_wait	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^HCURSOR m_wait;$/;"	m	class:CPrinterSetupWizardSheet
m_waiting	Clients/PrinterSetupWizard/SecondPage.h	/^bool m_waiting;$/;"	m	class:CSecondPage
machserver_automatic_browse_domain_changed	mDNSMacOSX/daemon.c	/^mDNSexport void machserver_automatic_browse_domain_changed(const domainname *d, mDNSBool add)$/;"	f
machserver_automatic_registration_domain_changed	mDNSMacOSX/daemon.c	/^mDNSexport void machserver_automatic_registration_domain_changed(const domainname *d, mDNSBool add)$/;"	f
main	Clients/Java/BrowserApp.java	/^    public static void main(String s[]) $/;"	m	class:BrowserApp
main	Clients/Java/DNSSDUnitTest.java	/^    public static void main(String s[]) $/;"	m	class:DNSSDUnitTest
main	Clients/Java/SimpleChat.java	/^    public static void main(String s[]) $/;"	m	class:SimpleChat
main	Clients/dns-sd.c	/^int main(int argc, char **argv)$/;"	f
main	Clients/dnsctl.c	/^int main(int argc, char **argv)$/;"	f
main	mDNSMacOS9/Mac OS Test Responder.c	/^int main()$/;"	f
main	mDNSMacOS9/Mac OS Test Searcher.c	/^int main()$/;"	f
main	mDNSMacOS9/Responder.c	/^int main()$/;"	f
main	mDNSMacOS9/Searcher.c	/^int main()$/;"	f
main	mDNSMacOS9/SubTypeTester.c	/^int main()$/;"	f
main	mDNSMacOS9/mDNSLibraryLoader.c	/^extern void main(void)$/;"	f
main	mDNSMacOSX/daemon.c	/^mDNSexport int main(int argc, char **argv)$/;"	f
main	mDNSMacOSX/helper-main.c	/^int main(int ac, char *av[])$/;"	f
main	mDNSPosix/Client.c	/^int main(int argc, char **argv)$/;"	f
main	mDNSPosix/Identify.c	/^mDNSexport int main(int argc, char **argv)$/;"	f
main	mDNSPosix/NetMonitor.c	/^mDNSexport int main(int argc, char **argv)$/;"	f
main	mDNSPosix/PosixDaemon.c	/^int main(int argc, char **argv)$/;"	f
main	mDNSPosix/ProxyResponder.c	/^mDNSexport int main(int argc, char **argv)$/;"	f
main	mDNSPosix/Responder.c	/^int main(int argc, char **argv)$/;"	f
main	mDNSPosix/testBonjour.c	/^int main(int argc, char *argv[])$/;"	f
main	mDNSShared/dnsextd.c	/^int main(int argc, char *argv[])$/;"	f
main	mDNSWindows/NSPTool/NSPTool.c	/^int main( int argc, char *argv[] )$/;"	f
main	mDNSWindows/Poll.c	/^	Worker			main;$/;"	m	struct:Poll_struct	file:
mainThread	mDNSWindows/mDNSWin32.h	/^	HANDLE						mainThread;$/;"	m	struct:mDNS_PlatformSupport_struct
main_queue	Clients/dns-sd.c	/^dispatch_queue_t main_queue;$/;"	v
malloc	mDNSMacOS9/mDNSPrefix.h	62;"	d
mallocL	mDNSCore/mDNSDebug.h	158;"	d
mallocL	mDNSMacOSX/daemon.c	/^mDNSexport void *mallocL(char *msg, unsigned int size)$/;"	f
malloced	mDNSShared/dnssd_clientlib.c	/^    uint16_t malloced;  \/\/ Non-zero if buffer was allocated via malloc()$/;"	m	struct:_TXTRecordRefRealType	file:
manufacturer	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString manufacturer;$/;"	m	struct:PrinterSetupWizard::Printer
mapTypeToName	Clients/Java/BrowserApp.java	/^	protected String	mapTypeToName( String type)$/;"	m	class:ServicesBrowserListModel
markedForDeletion	mDNSShared/dnsextd.h	/^    mDNSBool markedForDeletion;$/;"	m	struct:EventSource
mask	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr mask;$/;"	m	struct:NetworkInterfaceInfo_struct
max	mDNSPosix/NetMonitor.c	/^    long max;$/;"	m	struct:__anon20	file:
max_index	mDNSShared/dnssd_clientstub.c	/^    uint32_t max_index;                 \/\/ Largest assigned record index - 0 if no additional records registered$/;"	m	struct:_DNSServiceRef_t	file:
max_msg_size	mDNSMacOSX/helper-main.c	/^union max_msg_size$/;"	u	file:
maxidle	mDNSMacOSX/helper-main.c	/^unsigned long maxidle = 15;$/;"	v
mcount	mDNSShared/uds_daemon.c	/^static mDNSu32 mcount;     \/\/ tracks the current active mcast operations for McastLogging$/;"	v	file:
md5_block_data_order	mDNSCore/DNSDigest.c	/^void md5_block_data_order (MD5_CTX *c, const void *data_, int num)$/;"	f
md5_block_data_order	mDNSCore/DNSDigest.c	235;"	d	file:
md5_block_host_order	mDNSCore/DNSDigest.c	/^void md5_block_host_order (MD5_CTX *c, const void *data, int num)$/;"	f
md5_block_host_order	mDNSCore/DNSDigest.c	203;"	d	file:
mdns	mDNSVxWorks/mDNSVxWorks.c	/^debug_log_new_default_category( mdns );$/;"	v
mdns	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^debug_log_new_default_category( mdns );$/;"	v
mdns_gethostbyname2	mDNSPosix/nss_mdns.c	/^mdns_gethostbyname2 ($/;"	f
mdns_lookup_addr	mDNSPosix/nss_mdns.c	/^mdns_lookup_addr ($/;"	f	file:
mdns_lookup_callback	mDNSPosix/nss_mdns.c	/^mdns_lookup_callback$/;"	f
mdns_lookup_callback	mDNSPosix/nss_mdns.c	/^mdns_lookup_callback_t mdns_lookup_callback;$/;"	v
mdns_lookup_callback_t	mDNSPosix/nss_mdns.c	/^mdns_lookup_callback_t$/;"	t	file:
mdns_lookup_name	mDNSPosix/nss_mdns.c	/^mdns_lookup_name ($/;"	f	file:
mdnsd_start	mDNSPosix/Bonjour.c	/^int mdnsd_start(int debug)$/;"	f
mdnsd_stop	mDNSPosix/Bonjour.c	/^void mdnsd_stop(void)$/;"	f
members	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord     *members;            \/\/ List of CacheRecords with this same name$/;"	m	struct:AuthGroup_struct
members	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheRecord    *members;            \/\/ List of CacheRecords with this same name$/;"	m	struct:CacheGroup_struct
members	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheRecord    *members;$/;"	m	struct:CacheGroup_base
mergeState_DontMerge	mDNSCore/mDNSEmbeddedAPI.h	/^    mergeState_DontMerge = 1  \/\/ Set on fatal error conditions to disable merging$/;"	e	enum:__anon75
mergeState_Zero	mDNSCore/mDNSEmbeddedAPI.h	/^    mergeState_Zero = 0,$/;"	e	enum:__anon75
mergeState_t	mDNSCore/mDNSEmbeddedAPI.h	/^} mergeState_t;$/;"	t	typeref:enum:__anon75
mhdr	mDNSShared/uds_daemon.c	/^    ipc_msg_hdr mhdr[1];$/;"	m	struct:reply_state	file:
mode	mDNSMacOS9/mDNSMacOS9.c	/^long sleep, wake, mode;$/;"	v
modelName	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString modelName;$/;"	m	struct:PrinterSetupWizard::Printer
models	Clients/PrinterSetupWizard/UtilTypes.h	/^    Models models;$/;"	m	struct:PrinterSetupWizard::Manufacturer
more_bytes	mDNSShared/dnssd_clientstub.c	/^static int more_bytes(dnssd_sock_t sd)$/;"	f	file:
moreptr	mDNSShared/dnssd_clientstub.c	/^    int              *moreptr;          \/\/ Set while DNSServiceProcessResult working on this particular DNSServiceRef$/;"	m	struct:_DNSServiceRef_t	file:
moveAsideAnonymousRacoonConfiguration	mDNSMacOSX/helper.c	/^moveAsideAnonymousRacoonConfiguration(const char* dir)$/;"	f	file:
mprintf	mDNSPosix/Identify.c	/^mDNSlocal mDNSu32 mprintf(const char *format, ...)$/;"	f
mprintf	mDNSPosix/NetMonitor.c	/^mDNSlocal mDNSu32 mprintf(const char *format, ...)$/;"	f
msecSleep	mDNSWindows/mDNSWin32.c	/^	INT						msecSleep;$/;"	m	struct:MulticastWakeupStruct	file:
msg	mDNSShared/dnsextd.h	/^    DNSMessage msg;$/;"	m	struct:__anon114
msg_type	mDNSMacOSX/helper.c	/^    u_int16_t msg_type;$/;"	m	struct:vpnctl_hdr_struct	file:
msgbuf	mDNSShared/uds_daemon.c	/^    char          *msgbuf;          \/\/ pointer to data storage to pass to free()$/;"	m	struct:request_state	file:
msgend	mDNSShared/uds_daemon.c	/^    char          *msgend;          \/\/ pointer to byte after last byte of message$/;"	m	struct:request_state	file:
msgid	mDNSCore/dnsproxy.c	/^    mDNSOpaque16 msgid;             \/\/ DNS msg id$/;"	m	struct:DNSProxyClient_struct	file:
msgptr	mDNSShared/uds_daemon.c	/^    const char    *msgptr;          \/\/ pointer to data to be read from (may be modified)$/;"	m	struct:request_state	file:
multicast	mDNSVxWorks/mDNSVxWorks.h	/^    mDNSBool multicast;$/;"	m	struct:NetworkInterfaceInfoVxWorks
multicastGroupAddress	mDNSMacOS9/mDNSMacOS9.h	/^typedef struct { TOptionHeader h; mDNSv4Addr multicastGroupAddress; mDNSv4Addr InterfaceAddress; } TIPAddMulticastOption;$/;"	m	struct:__anon177
multicastSocket4	mDNSPosix/mDNSPosix.h	/^    int multicastSocket4;$/;"	m	struct:PosixNetworkInterface
multicastSocket6	mDNSPosix/mDNSPosix.h	/^    int multicastSocket6;$/;"	m	struct:PosixNetworkInterface
multicastSocketRef	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    MDNSSocketRef multicastSocketRef;$/;"	m	struct:MDNSInterfaceItem	file:
mx	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataMX mx;$/;"	m	union:__anon57
mx	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataMX mx;$/;"	m	union:__anon58
mx_compare	mDNSCore/dnssec.c	/^mDNSlocal int mx_compare(rdataComp *const r1, rdataComp *const r2)$/;"	f
myGetIfAddrs	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal struct ifaddrs *myGetIfAddrs(int refresh)$/;"	f
myGetIfAddrs	mDNSWindows/mDNSWin32.c	/^myGetIfAddrs(int refresh)$/;"	f
myIfIndexToName	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal int myIfIndexToName(u_short ifindex, char *name)$/;"	f
myKQSocketCallBack	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport void myKQSocketCallBack(int s1, short filter, void *context)$/;"	f
myTimerCallBack	Clients/dns-sd.c	/^static void myTimerCallBack(void)$/;"	f	file:
my_in_pktinfo	mDNSPosix/mDNSUNP.h	/^struct my_in_pktinfo {$/;"	s
my_perror	mDNSShared/uds_daemon.c	/^mDNSlocal void my_perror(char *errmsg)$/;"	f
my_recv	mDNSShared/dnsextd.c	/^static int my_recv(TCPSocket *sock, void *const buf, const int len, mDNSBool * closed)$/;"	f	file:
my_throttled_perror	mDNSShared/uds_daemon.c	/^mDNSlocal void my_throttled_perror(char *err_msg)$/;"	f
myhinfoW	Clients/dns-sd.c	/^static char myhinfoW[14] = "\\002PC\\012Windows XP";$/;"	v	file:
myhinfoX	Clients/dns-sd.c	/^static char myhinfoX[ 9] = "\\003Mac\\004OS X";$/;"	v	file:
myrecvfrom	mDNSMacOSX/mDNSMacOSX.c	/^mDNSexport ssize_t myrecvfrom(const int s, void *const buffer, const size_t max,$/;"	f
n_mquests	mDNSShared/uds_daemon.c	/^static mDNSu32 n_mquests;  \/\/ tracks the current active mcast questions for McastLogging$/;"	v	file:
n_mrecords	mDNSShared/uds_daemon.c	/^static mDNSu32 n_mrecords; \/\/ tracks the current active mcast records for McastLogging$/;"	v	file:
name	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    char *                      name;$/;"	m	struct:ServiceInfo
name	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString name;$/;"	m	struct:PrinterSetupWizard::Manufacturer
name	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString name;$/;"	m	struct:PrinterSetupWizard::Model
name	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString name;$/;"	m	struct:PrinterSetupWizard::Queue
name	Clients/PrinterSetupWizard/UtilTypes.h	/^    std::string name;$/;"	m	struct:PrinterSetupWizard::Printer
name	mDNSCore/dnssec.h	/^    domainname name;$/;"	m	struct:RRVerifier_struct
name	mDNSCore/mDNSEmbeddedAPI.h	/^    const domainname *name;$/;"	m	struct:ResourceRecord_struct
name	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname     *name;               \/\/ Common name for all AuthRecords in this list$/;"	m	struct:AuthGroup_struct
name	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname     *name;               \/\/ Common name for all CacheRecords in this list$/;"	m	struct:CacheGroup_struct
name	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname     *name;$/;"	m	struct:CacheGroup_base
name	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname name;        \/\/ For PTR, NS, CNAME, DNAME$/;"	m	union:__anon57
name	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname name;        \/\/ For PTR, NS, CNAME, DNAME$/;"	m	union:__anon58
name	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname name;$/;"	m	struct:DNameListElem
name	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname name;$/;"	m	struct:__anon86
name	mDNSMacOS9/Searcher.c	/^    char name[kDNSServiceMaxDomainName];$/;"	m	struct:__anon187	file:
name	mDNSMacOSX/LegacyNATTraversal.c	/^    char *name;$/;"	m	struct:Property_struct	file:
name	mDNSMacOSX/daemon.c	/^    domainlabel name;  \/\/ used only if autoname is false$/;"	m	struct:DNSServiceRegistration	file:
name	mDNSMacOSX/daemon.c	/^    domainlabel name;$/;"	m	struct:ServiceInstance	file:
name	mDNSMacOSX/mDNSMacOSX.c	/^    domainname name;$/;"	m	struct:D2DBrowseListElem	file:
name	mDNSPosix/nss_mdns.c	/^    const char * name;$/;"	m	struct:__anon27	file:
name	mDNSShared/dnsextd.h	/^    domainname name;          \/\/ name of the record$/;"	m	struct:RRTableElem
name	mDNSShared/dnsextd.h	/^    domainname name;$/;"	m	struct:AnswerListElem
name	mDNSShared/dnsextd.h	/^    domainname name;$/;"	m	struct:DNSZone
name	mDNSShared/dnssd_clientshim.c	/^    domainlabel name;$/;"	m	struct:__anon118	file:
name	mDNSShared/uds_daemon.c	/^            domainlabel name;$/;"	m	struct:request_state::__anon124::__anon126	file:
name	mDNSVxWorks/mDNSVxWorks.c	/^    const char *        name;$/;"	m	struct:mDNSPlatformInterfaceInfo	file:
name	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    char name[ 32 ];$/;"	m	struct:MDNSInterfaceItem	file:
name	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    const char *        name;$/;"	m	struct:mDNSPlatformInterfaceInfo	file:
name	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	std::string				name;$/;"	m	struct:ServiceEventInfo	file:
name	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^	std::string		name;$/;"	m	struct:ServiceInstanceInfo
name	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.h	/^			CString		name;$/;"	m	struct:BrowserDialog::BrowserEntry
name	mDNSWindows/mDNSWin32.c	/^	const char *		name;$/;"	m	struct:mDNSPlatformInterfaceInfo	file:
name	mDNSWindows/mDNSWin32.h	/^	char						name[ 128 ];$/;"	m	struct:mDNSInterfaceData
name	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	char				name[ kDNSServiceMaxDomainName ];$/;"	m	struct:Query	file:
nameField	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.TextBox nameField;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
nameSize	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	size_t				nameSize;$/;"	m	struct:Query	file:
name_compare	mDNSCore/dnssec.c	/^mDNSlocal int name_compare(mDNSu8 *const rdata1, mDNSu8 *const rdata2, int rdlen1, int rdlen2)$/;"	f
namehash	mDNSCore/dnssec.h	/^    mDNSu32 namehash;$/;"	m	struct:RRVerifier_struct
namehash	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32         namehash;           \/\/ Name-based (i.e. case insensitive) hash of name$/;"	m	struct:CacheGroup_struct
namehash	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32         namehash;$/;"	m	struct:CacheGroup_base
namehash	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 namehash;                   \/\/ Name-based (i.e. case insensitive) hash of name$/;"	m	struct:AuthGroup_struct
namehash	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 namehash;                   \/\/ Name-based (i.e. case-insensitive) hash of name$/;"	m	struct:ResourceRecord_struct
namestorage	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname namestorage;                                 \/\/ Needs to go *after* the extra rdata bytes$/;"	m	struct:__anon79
namestorage	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname namestorage;$/;"	m	struct:AuthRecord_struct
namestorage	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 namestorage[AUTH_GROUP_NAME_SIZE];$/;"	m	struct:AuthGroup_struct
namestorage	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 namestorage[sizeof(CacheRecord) - sizeof(struct CacheGroup_base)];  \/\/ match sizeof(CacheRecord)$/;"	m	struct:CacheGroup_struct
namestr	mDNSMacOS9/Responder.c	/^    char namestr[64];$/;"	m	struct:RegisteredService_struct	file:
naptr_compare	mDNSCore/dnssec.c	/^mDNSlocal int naptr_compare(rdataComp *const r1, rdataComp *const r2)$/;"	f
natTraversalHandleAddressReply	mDNSCore/uDNS.c	/^mDNSexport void natTraversalHandleAddressReply(mDNS *const m, mDNSu16 err, mDNSv4Addr ExtAddr)$/;"	f
natTraversalHandlePortMapReply	mDNSCore/uDNS.c	/^mDNSexport void natTraversalHandlePortMapReply(mDNS *const m, NATTraversalInfo *n, const mDNSInterfaceID InterfaceID, mDNSu16 err, mDNSIPPort extport, mDNSu32 lease, NATTProtocol protocol)$/;"	f
natTraversalHandlePortMapReplyWithAddress	mDNSCore/uDNS.c	/^mDNSlocal void natTraversalHandlePortMapReplyWithAddress(mDNS *const m, NATTraversalInfo *n, const mDNSInterfaceID InterfaceID, mDNSu16 err, mDNSv4Addr extaddr, mDNSIPPort extport, mDNSu32 lease, NATTProtocol protocol)$/;"	f
natinfo	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTraversalInfo natinfo;$/;"	m	struct:HostnameInfo
nbdomain	mDNSWindows/mDNSWin32.h	/^	char						nbdomain[ 32 ];$/;"	m	struct:mDNS_PlatformSupport_struct
nbname	mDNSWindows/mDNSWin32.h	/^	char						nbname[ 32 ];$/;"	m	struct:mDNS_PlatformSupport_struct
nbuckets	mDNSShared/dnsextd.h	/^    mDNSs32 nbuckets;          \/\/ buckets allocated$/;"	m	struct:__anon116
ndp	mDNSCore/mDNSEmbeddedAPI.h	/^    IPv6NDP ndp;$/;"	m	union:__anon49
needsLogin	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    bool needsLogin;$/;"	m	struct:ServiceHandlerEntry
nelems	mDNSShared/dnsextd.h	/^    mDNSs32 nelems;            \/\/ elements in table$/;"	m	struct:__anon116
nesting	mDNSMacOS9/mDNSMacOS9.h	/^    UInt32 nesting;$/;"	m	struct:mDNS_PlatformSupport_struct
networkaddress	mDNSShared/dnsextd_parser.y	/^networkaddress:$/;"	l
new	Clients/ExplorerPlugin/ClassFactory.cpp	30;"	d	file:
new	Clients/ExplorerPlugin/ExplorerBar.cpp	33;"	d	file:
new	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	35;"	d	file:
new	Clients/ExplorerPlugin/ExplorerPlugin.cpp	43;"	d	file:
new	Clients/ExplorerPlugin/LoginDialog.cpp	28;"	d	file:
new	Clients/PrinterSetupWizard/PrinterSetupWizardApp.cpp	25;"	d	file:
new	mDNSWindows/ControlPanel/ConfigDialog.cpp	25;"	d	file:
new	mDNSWindows/ControlPanel/ControlPanel.cpp	28;"	d	file:
new	mDNSWindows/ControlPanel/ControlPanelExe.cpp	29;"	d	file:
new	mDNSWindows/DNSServiceBrowser/Windows/Sources/AboutDialog.cpp	25;"	d	file:
new	mDNSWindows/DNSServiceBrowser/Windows/Sources/Application.cpp	31;"	d	file:
new	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	39;"	d	file:
new	mDNSWindows/DNSServiceBrowser/Windows/Sources/LoginDialog.cpp	26;"	d	file:
new	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/Application.cpp	27;"	d	file:
new	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.cpp	27;"	d	file:
newMasterElected	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void newMasterElected(mDNS *const m, struct net_event_data * ptr)$/;"	f
newrdlength	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 newrdlength;                \/\/ ... and the length of the new RData$/;"	m	struct:AuthRecord_struct
next	mDNSCore/dnsproxy.c	/^    DNSProxyClient *next; $/;"	m	struct:DNSProxyClient_struct	file:
next	mDNSCore/dnssec.h	/^	AuthChain  *next;		\/\/ Next element in the chain$/;"	m	struct:AuthChain_struct
next	mDNSCore/dnssec.h	/^    RRVerifier *next;$/;"	m	struct:RRVerifier_struct
next	mDNSCore/dnssec.h	/^    RRVerifierSet next;$/;"	m	struct:DNSSECVerifier_struct
next	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthGroup      *next;               \/\/ Next AuthGroup object in this hash table bucket$/;"	m	struct:AuthGroup_struct
next	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord     *next;               \/\/ Next in list; first element of structure for efficiency reasons$/;"	m	struct:AuthRecord_struct
next	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheGroup     *next;               \/\/ Next CacheGroup object in this hash table bucket$/;"	m	struct:CacheGroup_struct
next	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheGroup     *next;$/;"	m	struct:CacheGroup_base
next	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheRecord    *next;               \/\/ Next in list; first element of structure for efficiency reasons$/;"	m	struct:CacheRecord_struct
next	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion          *next;$/;"	m	struct:DNSQuestion_struct
next	mDNSCore/mDNSEmbeddedAPI.h	/^    ExtraResourceRecord *next;$/;"	m	struct:ExtraResourceRecord_struct
next	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTraversalInfo           *next;$/;"	m	struct:NATTraversalInfo_struct
next	mDNSCore/mDNSEmbeddedAPI.h	/^    NetworkInterfaceInfo *next;$/;"	m	struct:NetworkInterfaceInfo_struct
next	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname *next; \/\/placeholders are uncommented because C89 in Windows requires that a struct has at least a member.$/;"	m	struct:__anon56
next	mDNSCore/mDNSEmbeddedAPI.h	/^    struct ARListElem *next;$/;"	m	struct:ARListElem	typeref:struct:ARListElem::ARListElem
next	mDNSCore/mDNSEmbeddedAPI.h	/^    struct ClientTunnel *next;$/;"	m	struct:ClientTunnel	typeref:struct:ClientTunnel::ClientTunnel
next	mDNSCore/mDNSEmbeddedAPI.h	/^    struct DNSServer *next;$/;"	m	struct:DNSServer	typeref:struct:DNSServer::DNSServer
next	mDNSCore/mDNSEmbeddedAPI.h	/^    struct DNameListElem *next;$/;"	m	struct:DNameListElem	typeref:struct:DNameListElem::DNameListElem
next	mDNSCore/mDNSEmbeddedAPI.h	/^    struct DomainAuthInfo *next;$/;"	m	struct:DomainAuthInfo	typeref:struct:DomainAuthInfo::DomainAuthInfo
next	mDNSCore/mDNSEmbeddedAPI.h	/^    struct HostnameInfo *next;$/;"	m	struct:HostnameInfo	typeref:struct:HostnameInfo::HostnameInfo
next	mDNSCore/mDNSEmbeddedAPI.h	/^    struct McastResolver *next;$/;"	m	struct:McastResolver	typeref:struct:McastResolver::McastResolver
next	mDNSCore/mDNSEmbeddedAPI.h	/^    struct SearchListElem *next;$/;"	m	struct:SearchListElem	typeref:struct:SearchListElem::SearchListElem
next	mDNSCore/mDNSEmbeddedAPI.h	/^    struct TrustAnchor *next;$/;"	m	struct:TrustAnchor	typeref:struct:TrustAnchor::TrustAnchor
next	mDNSCore/mDNSEmbeddedAPI.h	/^    tcpLNTInfo       *next;$/;"	m	struct:tcpLNTInfo_struct
next	mDNSCore/mDNSEmbeddedAPI.h	/^union AuthEntity_union { AuthEntity *next; AuthGroup ag; };$/;"	m	union:AuthEntity_union
next	mDNSCore/mDNSEmbeddedAPI.h	/^union CacheEntity_union { CacheEntity *next; CacheGroup cg; CacheRecord cr; };$/;"	m	union:CacheEntity_union
next	mDNSMacOS9/Responder.c	/^    RegisteredService *next;$/;"	m	struct:RegisteredService_struct	file:
next	mDNSMacOSX/DNSServiceDiscovery.c	/^    struct a_requests       *next;$/;"	m	struct:a_requests	typeref:struct:a_requests::a_requests	file:
next	mDNSMacOSX/daemon.c	/^    DNSServiceBrowser *next;$/;"	m	struct:DNSServiceBrowser_struct	file:
next	mDNSMacOSX/daemon.c	/^    DNSServiceBrowserResult *next;$/;"	m	struct:DNSServiceBrowserResult_struct	file:
next	mDNSMacOSX/daemon.c	/^    DNSServiceDomainEnumeration *next;$/;"	m	struct:DNSServiceDomainEnumeration_struct	file:
next	mDNSMacOSX/daemon.c	/^    DNSServiceResolver *next;$/;"	m	struct:DNSServiceResolver_struct	file:
next	mDNSMacOSX/daemon.c	/^    struct  KQSocketEventSource *next;$/;"	m	struct:KQSocketEventSource	typeref:struct:KQSocketEventSource::KQSocketEventSource	file:
next	mDNSMacOSX/daemon.c	/^    struct DNSServiceBrowserQuestion *next;$/;"	m	struct:DNSServiceBrowserQuestion	typeref:struct:DNSServiceBrowserQuestion::DNSServiceBrowserQuestion	file:
next	mDNSMacOSX/daemon.c	/^    struct DNSServiceRegistration *next;$/;"	m	struct:DNSServiceRegistration	typeref:struct:DNSServiceRegistration::DNSServiceRegistration	file:
next	mDNSMacOSX/daemon.c	/^    struct ServiceInstance *next;$/;"	m	struct:ServiceInstance	typeref:struct:ServiceInstance::ServiceInstance	file:
next	mDNSMacOSX/mDNSMacOSX.c	/^    struct D2DBrowseListElem *next;$/;"	m	struct:D2DBrowseListElem	typeref:struct:D2DBrowseListElem::D2DBrowseListElem	file:
next	mDNSMacOSX/mDNSMacOSX.c	/^    struct D2DRecordListElem *next;$/;"	m	struct:D2DRecordListElem	typeref:struct:D2DRecordListElem::D2DRecordListElem	file:
next	mDNSMacOSX/mDNSMacOSX.h	/^    NetworkInterfaceInfoOSX *next;$/;"	m	struct:NetworkInterfaceInfoOSX_struct
next	mDNSPosix/NetMonitor.c	/^    ActivityStat *next;$/;"	m	struct:ActivityStat_struct	file:
next	mDNSPosix/NetMonitor.c	/^    FilterList *next;$/;"	m	struct:FilterList_struct	file:
next	mDNSPosix/Responder.c	/^    PosixService *next;$/;"	m	struct:PosixService	file:
next	mDNSPosix/nss_mdns.c	/^    struct domain_entry * next;$/;"	m	struct:domain_entry	typeref:struct:domain_entry::domain_entry	file:
next	mDNSShared/dnsextd.h	/^    struct  EventSource *   next;$/;"	m	struct:EventSource	typeref:struct:EventSource::EventSource
next	mDNSShared/dnsextd.h	/^    struct AnswerListElem *next;$/;"	m	struct:AnswerListElem	typeref:struct:AnswerListElem::AnswerListElem
next	mDNSShared/dnsextd.h	/^    struct DNSZone      *   next;$/;"	m	struct:DNSZone	typeref:struct:DNSZone::DNSZone
next	mDNSShared/dnsextd.h	/^    struct LLQEntry *next;$/;"	m	struct:LLQEntry	typeref:struct:LLQEntry::LLQEntry
next	mDNSShared/dnsextd.h	/^    struct RRTableElem *next;$/;"	m	struct:RRTableElem	typeref:struct:RRTableElem::RRTableElem
next	mDNSShared/dnssd_clientstub.c	/^    DNSServiceOp     *next;             \/\/ For shared connection$/;"	m	struct:_DNSServiceRef_t	file:
next	mDNSShared/uds_daemon.c	/^    request_state *next;$/;"	m	struct:request_state	file:
next	mDNSShared/uds_daemon.c	/^    struct browser_t *next;$/;"	m	struct:browser_t	typeref:struct:browser_t::browser_t	file:
next	mDNSShared/uds_daemon.c	/^    struct registered_record_entry *next;$/;"	m	struct:registered_record_entry	typeref:struct:registered_record_entry::registered_record_entry	file:
next	mDNSShared/uds_daemon.c	/^    struct reply_state *next;       \/\/ If there are multiple unsent replies$/;"	m	struct:reply_state	typeref:struct:reply_state::reply_state	file:
next	mDNSShared/uds_daemon.c	/^    struct service_instance *next;$/;"	m	struct:service_instance	typeref:struct:service_instance::service_instance	file:
next	mDNSVxWorks/mDNSVxWorks.h	/^    NetworkInterfaceInfoVxWorks *       next;$/;"	m	struct:NetworkInterfaceInfoVxWorks
next	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    MDNSInterfaceItem *         next;$/;"	m	struct:MDNSInterfaceItem	file:
next	mDNSWindows/Poll.c	/^	struct PollSource_struct	*next;$/;"	m	struct:PollSource_struct	typeref:struct:PollSource_struct::PollSource_struct	file:
next	mDNSWindows/Poll.c	/^	struct Worker_struct	*next;$/;"	m	struct:Worker_struct	typeref:struct:Worker_struct::Worker_struct	file:
next	mDNSWindows/mDNSWin32.h	/^	UDPSocket					*next;$/;"	m	struct:UDPSocket_struct
next	mDNSWindows/mDNSWin32.h	/^	mDNSInterfaceData		*	next;$/;"	m	struct:mDNSInterfaceData
next	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	QueryRef			next;$/;"	m	struct:Query	file:
nextDHCPLeaseExpires	mDNSWindows/mDNSWin32.h	/^	time_t						nextDHCPLeaseExpires;$/;"	m	struct:mDNS_PlatformSupport_struct
nextservice	mDNSMacOS9/Responder.c	/^static RegisteredService *services = NULL, **nextservice = &services;$/;"	v	file:
nicelabel	mDNSCore/mDNSEmbeddedAPI.h	/^    domainlabel nicelabel;              \/\/ Rich text label encoded using canonically precomposed UTF-8$/;"	m	struct:mDNS_struct
njp	mDNSMacOS9/Mac OS Test Responder.c	/^static ServiceRecordSet p1, p2, afp, http, njp;$/;"	v	file:
njp	mDNSMacOS9/Responder.c	/^static RegisteredService p1, p2, afp, http, njp;$/;"	v	file:
noServerResponse	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 noServerResponse;               \/\/ At least one server did not respond.$/;"	m	struct:DNSQuestion_struct
no_reply	mDNSShared/uds_daemon.c	/^    int no_reply;                   \/\/ don't send asynchronous replies to client$/;"	m	struct:request_state	file:
nodeAbsence	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void nodeAbsence(mDNS *const m, struct kev_dl_node_absence * p)$/;"	f
nodePresence	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void nodePresence(mDNS *const m, struct kev_dl_node_presence * p)$/;"	f
notAnIntPort	mDNSMacOS9/Searcher.c	/^    mDNSOpaque16 notAnIntPort;$/;"	m	struct:__anon187	file:
notifyRacoon	mDNSMacOSX/helper.c	/^notifyRacoon(void)$/;"	f	file:
notifyToken	mDNSCore/mDNSEmbeddedAPI.h	/^    int             notifyToken;$/;"	m	struct:mDNS_struct
nread	mDNSCore/mDNSEmbeddedAPI.h	/^    unsigned long nread;                \/\/ number of bytes read so far$/;"	m	struct:tcpLNTInfo_struct
nread	mDNSCore/mDNSEmbeddedAPI.h	/^    unsigned long nread;$/;"	m	struct:tcpInfo_t
nread	mDNSMacOSX/DNSProxySupport.c	/^    mDNSu32     nread;$/;"	m	struct:__anon143	file:
ns_addr	mDNSShared/dnsextd.h	/^    struct sockaddr_in ns_addr;         \/\/ the real ns server address$/;"	m	struct:__anon116	typeref:struct:__anon116::sockaddr_in
ns_c_in	mDNSMacOS9/Searcher.c	31;"	d	file:
ns_class_t	mDNSPosix/nss_mdns.c	/^typedef int ns_class_t;$/;"	t	file:
ns_class_to_str	mDNSPosix/nss_mdns.c	/^ns_class_to_str (ns_class_t in)$/;"	f
ns_t_a	mDNSMacOS9/Searcher.c	32;"	d	file:
ns_type_t	mDNSPosix/nss_mdns.c	/^typedef int ns_type_t;$/;"	t	file:
ns_type_to_str	mDNSPosix/nss_mdns.c	/^ns_type_to_str (ns_type_t in)$/;"	f
nsec	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheRecord    *nsec;               \/\/ NSEC records needed for non-existence proofs$/;"	m	struct:CacheRecord_struct
nsec3RR	mDNSCore/mDNSEmbeddedAPI.h	/^    ResourceRecord *nsec3RR;$/;"	m	struct:__anon72
nss_status	mDNSPosix/nss_mdns.c	/^typedef enum nss_status nss_status;$/;"	t	typeref:enum:nss_status	file:
nta	mDNSCore/mDNSEmbeddedAPI.h	/^    ZoneData             *nta;              \/\/ Used for getting zone data for private or LLQ query$/;"	m	struct:DNSQuestion_struct
nta	mDNSCore/mDNSEmbeddedAPI.h	/^    ZoneData  *nta;$/;"	m	struct:AuthRecord_struct
ntries	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs16 ntries;                         \/\/ for UDP: the number of packets sent for this LLQ state$/;"	m	struct:DNSQuestion_struct
num	mDNSCore/mDNSEmbeddedAPI.h	/^    int num;$/;"	m	struct:MD5state_st
num	mDNSPosix/NetMonitor.c	/^    long num;$/;"	m	struct:__anon20	file:
numCfAnswers	mDNSCore/mDNSEmbeddedAPI.h	/^    int numCfAnswers;$/;"	m	struct:SearchListElem
numRRRecords	mDNSMacOSX/mDNSMacOSX.c	/^    uint32_t numRRRecords;            \/\/ number of RR records$/;"	m	struct:__anon154	file:
numReplies	mDNSCore/mDNSEmbeddedAPI.h	/^    int numReplies;$/;"	m	struct:tcpInfo_t
numSources	mDNSWindows/Poll.c	/^	DWORD					numSources;$/;"	m	struct:Worker_struct	file:
numSources	mDNSWindows/Poll.c	/^	DWORD			numSources;$/;"	m	struct:Poll_struct	file:
numTCPPorts	mDNSMacOSX/mDNSMacOSX.c	/^    uint32_t numTCPPorts;             \/\/ number of SRV TCP ports$/;"	m	struct:__anon154	file:
numTries	mDNSWindows/mDNSWin32.c	/^	INT						numTries;$/;"	m	struct:MulticastWakeupStruct	file:
numUDPPorts	mDNSMacOSX/mDNSMacOSX.c	/^    uint32_t numUDPPorts;             \/\/ number of SRV UDP ports$/;"	m	struct:__anon154	file:
numValidAddrs	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	uint8_t				numValidAddrs;$/;"	m	struct:Query	file:
numWorkers	mDNSWindows/Poll.c	/^	DWORD			numWorkers;$/;"	m	struct:Poll_struct	file:
num_pkts_accepted	mDNSPosix/mDNSPosix.c	/^static int num_pkts_accepted = 0;$/;"	v	file:
num_pkts_rejected	mDNSPosix/mDNSPosix.c	/^static int num_pkts_rejected = 0;$/;"	v	file:
num_printed	Clients/dns-sd.c	/^static int num_printed;$/;"	v	file:
num_registered_interfaces	mDNSPosix/mDNSPosix.c	/^static int num_registered_interfaces = 0;$/;"	v	file:
num_subtypes	mDNSShared/uds_daemon.c	/^            int num_subtypes;$/;"	m	struct:request_state::__anon124::__anon126	file:
nwriten	mDNSShared/uds_daemon.c	/^    mDNSu32 nwriten;$/;"	m	struct:reply_state	file:
obj	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    ExplorerBarWindow *     obj;$/;"	m	struct:ServiceHandlerEntry
omsg	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSMessage omsg;                        \/\/ Outgoing message we're building$/;"	m	struct:mDNS_struct
onesEthAddr	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSEthAddr onesEthAddr       = { { 255, 255, 255, 255, 255, 255 } };$/;"	v
onesID	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSOpaque16 onesID          = { { 255, 255 } };$/;"	v
onesIPv4Addr	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSv4Addr onesIPv4Addr      = { { 255, 255, 255, 255 } };$/;"	v
onesIPv6Addr	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSv6Addr onesIPv6Addr      = { { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 } };$/;"	v
op	mDNSCore/mDNSEmbeddedAPI.h	/^    LNTOp_t op;                         \/\/ operation performed using this connection$/;"	m	struct:tcpLNTInfo_struct
op	mDNSShared/dnssd_clientstub.c	/^    uint32_t op;                        \/\/ request_op_t or reply_op_t$/;"	m	struct:_DNSServiceRef_t	file:
openPFDevice	mDNSMacOSX/P2PPacketFilter.c	/^static int openPFDevice( int * outFD )$/;"	f	file:
operation	Clients/dns-sd.c	/^static int operation;$/;"	v	file:
operationFailed	Clients/Java/BrowserApp.java	/^	public void	operationFailed( DNSSDService service, int errorCode)$/;"	m	class:BrowserApp
operationFailed	Clients/Java/BrowserApp.java	/^	public void	operationFailed( DNSSDService service, int errorCode)$/;"	m	class:BrowserListModel
operationFailed	Clients/Java/BrowserApp.java	/^	public void	operationFailed( DNSSDService service, int errorCode)$/;"	m	class:DomainListModel
operationFailed	Clients/Java/DNSSDUnitTest.java	/^	public void	operationFailed( DNSSDService service, int errorCode)$/;"	m	class:BrowseTest
operationFailed	Clients/Java/DNSSDUnitTest.java	/^	public void	operationFailed( DNSSDService service, int errorCode)$/;"	m	class:DomainTest
operationFailed	Clients/Java/DNSSDUnitTest.java	/^	public void	operationFailed( DNSSDService service, int errorCode)$/;"	m	class:TermReporter
operationFailed	Clients/Java/SimpleChat.java	/^	public void	operationFailed( DNSSDService service, int errorCode)$/;"	m	class:SimpleChat
operationFailed	Clients/Java/SimpleChat.java	/^	public void	operationFailed( DNSSDService service, int errorCode)$/;"	m	class:TargetListModel
operationFailed	Clients/Java/SwingBrowseListener.java	/^	public void	operationFailed( DNSSDService service, int errorCode)$/;"	m	class:SwingBrowseListener
operationFailed	Clients/Java/SwingDomainListener.java	/^	public void	operationFailed( DNSSDService service, int errorCode)$/;"	m	class:SwingDomainListener
operationFailed	Clients/Java/SwingQueryListener.java	/^	public void	operationFailed( DNSSDService service, int errorCode)$/;"	m	class:SwingQueryListener
operationFailed	mDNSShared/Java/BaseListener.java	/^	void	operationFailed( DNSSDService service, int errorCode);$/;"	m	interface:BaseListener
operator ()	Clients/PrinterSetupWizard/ThirdPage.h	/^    bool operator()( const CString & s1, const CString & s2 ) const$/;"	f	struct:CThirdPage::compare_func
opinterface	Clients/dns-sd.c	/^static uint32_t opinterface = kDNSServiceInterfaceIndexAny;$/;"	v	file:
opt	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataOPT opt[2];        \/\/ For EDNS0 OPT record; RDataBody may contain multiple variable-length rdataOPT objects packed together$/;"	m	union:__anon57
opt	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataOPT opt[2];        \/\/ For EDNS0 OPT record; RDataBody may contain multiple variable-length rdataOPT objects packed together$/;"	m	union:__anon58
optBlock	mDNSMacOS9/mDNSMacOS9.h	/^    TOptionBlock optBlock;$/;"	m	struct:mDNS_PlatformSupport_struct
optLen	mDNSCore/dnsproxy.c	/^    mDNSu16 optLen;                 \/\/ Total Length of the EDNS0 option $/;"	m	struct:DNSProxyClient_struct	file:
optRR	mDNSCore/dnsproxy.c	/^    mDNSu8 *optRR;                  \/\/ EDNS0 option$/;"	m	struct:DNSProxyClient_struct	file:
optReq	mDNSMacOS9/mDNSMacOS9.h	/^    TOptMgmt optReq;$/;"	m	struct:mDNS_PlatformSupport_struct
opt_debug	mDNSMacOSX/helper-main.c	/^static int opt_debug;$/;"	v	file:
options_set	mDNSShared/dnsextd_parser.y	/^options_set:$/;"	l
optionscontent	mDNSShared/dnsextd_parser.y	/^optionscontent:$/;"	l
optionsstatement	mDNSShared/dnsextd_parser.y	/^optionsstatement:$/;"	l
optionsstatements	mDNSShared/dnsextd_parser.y	/^optionsstatements:$/;"	l
origInterfaceID	mDNSShared/uds_daemon.c	/^    mDNSInterfaceID origInterfaceID;$/;"	m	struct:registered_record_entry	file:
origName	mDNSCore/dnssec.h	/^    domainname origName;            \/\/ Original question name that needs verification$/;"	m	struct:DNSSECVerifier_struct
origTTL	Clients/dns-sd.c	/^    unsigned int origTTL;$/;"	m	struct:__anon170	file:
origType	mDNSCore/dnssec.h	/^    mDNSu16 origType;               \/\/ Original question type corresponding to origName$/;"	m	struct:DNSSECVerifier_struct
osMajorVersion	mDNSWindows/mDNSWin32.h	/^	DWORD						osMajorVersion;$/;"	m	struct:mDNS_PlatformSupport_struct
osMinorVersion	mDNSWindows/mDNSWin32.h	/^	DWORD						osMinorVersion;$/;"	m	struct:mDNS_PlatformSupport_struct
ourName	Clients/Java/SimpleChat.java	/^	String				ourName;			\/\/ name used to identify this user in chat$/;"	f	class:SimpleChat
outSocket	Clients/Java/SimpleChat.java	/^	DatagramSocket		outSocket;			\/\/ Outbound data socket$/;"	f	class:SimpleChat
p	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNS_PlatformSupport *p;            \/\/ Pointer to platform-specific data of indeterminite size$/;"	m	struct:mDNS_struct
p	mDNSCore/mDNSEmbeddedAPI.h	/^    union { DNSMessage m; void *p; } imsg;  \/\/ Incoming message received from wire$/;"	m	union:mDNS_struct::__anon93
p	mDNSMacOS9/Mac OS Test Responder.c	/^static mDNS_PlatformSupport p;$/;"	v	file:
p	mDNSMacOS9/SubTypeTester.c	/^static mDNS_PlatformSupport p;$/;"	v	file:
p1	mDNSMacOS9/Mac OS Test Responder.c	/^static ServiceRecordSet p1, p2, afp, http, njp;$/;"	v	file:
p1	mDNSMacOS9/Responder.c	/^static RegisteredService p1, p2, afp, http, njp;$/;"	v	file:
p1	mDNSMacOS9/SubTypeTester.c	/^static ServiceRecordSet p1, p2;$/;"	v	file:
p2	mDNSMacOS9/Mac OS Test Responder.c	/^static ServiceRecordSet p1, p2, afp, http, njp;$/;"	v	file:
p2	mDNSMacOS9/Responder.c	/^static RegisteredService p1, p2, afp, http, njp;$/;"	v	file:
p2	mDNSMacOS9/SubTypeTester.c	/^static ServiceRecordSet p1, p2;$/;"	v	file:
pPortData	Clients/PrinterSetupWizard/tcpxcv.h	/^    PORT_DATA_2 pPortData[1];$/;"	m	struct:_PORT_DATA_LIST_1
packedstruct	mDNSCore/mDNSEmbeddedAPI.h	143;"	d
packedstruct	mDNSCore/mDNSEmbeddedAPI.h	146;"	d
packedstruct	mDNSShared/dnssd_ipc.h	111;"	d
packedstruct	mDNSShared/dnssd_ipc.h	114;"	d
packedunion	mDNSCore/mDNSEmbeddedAPI.h	144;"	d
packedunion	mDNSCore/mDNSEmbeddedAPI.h	147;"	d
packedunion	mDNSShared/dnssd_ipc.h	112;"	d
packedunion	mDNSShared/dnssd_ipc.h	115;"	d
packet	mDNSWindows/mDNSWin32.h	/^	DNSMessage					packet;$/;"	m	struct:UDPSocket_struct
padding	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 padding;        \/\/ So that RDataBody is aligned on 32-bit boundary$/;"	m	struct:__anon59
padding	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 padding;        \/\/ So that data is aligned on 32-bit boundary$/;"	m	struct:__anon60
parent	mDNSCore/dnssec.h	/^    DNSSECVerifier *parent;$/;"	m	struct:DNSSECVerifier_struct
parentNATInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    NATTraversalInfo *parentNATInfo;    \/\/ pointer back to the parent NATTraversalInfo$/;"	m	struct:tcpLNTInfo_struct
parselog	mDNSPosix/parselog.py	/^def parselog(inFile):$/;"	f
password	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSOpaque48 password;  \/\/ Optional password$/;"	m	struct:__anon54
pause_idle_timer	mDNSMacOSX/helper-main.c	/^void pause_idle_timer(void)$/;"	f
pdl	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString pdl;$/;"	m	struct:PrinterSetupWizard::Queue
penaltyTime	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 penaltyTime;        \/\/ amount of time this server is penalized$/;"	m	struct:DNSServer
pendingNSEC	mDNSCore/dnssec.h	/^    RRVerifier *pendingNSEC;$/;"	m	struct:DNSSECVerifier_struct
permanentsockets	mDNSMacOSX/mDNSMacOSX.h	/^    KQSocketSet permanentsockets;$/;"	m	struct:mDNS_PlatformSupport_struct
pfArray_t	mDNSMacOSX/helpermsg-types.h	/^typedef uint16_t pfArray_t [PFPortArraySize];$/;"	t
pfkey_align	mDNSMacOSX/pfkey.c	/^pfkey_align(msg, mhp)$/;"	f
pfkey_check	mDNSMacOSX/pfkey.c	/^pfkey_check(mhp)$/;"	f
pfkey_close	mDNSMacOSX/pfkey.c	/^pfkey_close(so)$/;"	f
pfkey_get_softrate	mDNSMacOSX/pfkey.c	/^pfkey_get_softrate(type)$/;"	f
pfkey_open	mDNSMacOSX/pfkey.c	/^pfkey_open()$/;"	f
pfkey_recv	mDNSMacOSX/pfkey.c	/^pfkey_recv(so)$/;"	f
pfkey_recv_register	mDNSMacOSX/pfkey.c	/^pfkey_recv_register(so)$/;"	f
pfkey_send	mDNSMacOSX/pfkey.c	/^pfkey_send(so, msg, len)$/;"	f
pfkey_send_add	mDNSMacOSX/pfkey.c	/^pfkey_send_add(so, satype, mode, src, dst, spi, reqid, wsize,$/;"	f
pfkey_send_delete	mDNSMacOSX/pfkey.c	/^pfkey_send_delete(so, satype, mode, src, dst, spi)$/;"	f
pfkey_send_delete_all	mDNSMacOSX/pfkey.c	/^pfkey_send_delete_all(so, satype, mode, src, dst)$/;"	f
pfkey_send_dump	mDNSMacOSX/pfkey.c	/^pfkey_send_dump(so, satype)$/;"	f
pfkey_send_flush	mDNSMacOSX/pfkey.c	/^pfkey_send_flush(so, satype)$/;"	f
pfkey_send_get	mDNSMacOSX/pfkey.c	/^pfkey_send_get(so, satype, mode, src, dst, spi)$/;"	f
pfkey_send_getspi	mDNSMacOSX/pfkey.c	/^pfkey_send_getspi(so, satype, mode, src, dst, min, max, reqid, seq)$/;"	f
pfkey_send_promisc_toggle	mDNSMacOSX/pfkey.c	/^pfkey_send_promisc_toggle(so, flag)$/;"	f
pfkey_send_register	mDNSMacOSX/pfkey.c	/^pfkey_send_register(so, satype)$/;"	f
pfkey_send_spdadd	mDNSMacOSX/pfkey.c	/^pfkey_send_spdadd(so, src, prefs, dst, prefd, proto, policy, policylen, seq)$/;"	f
pfkey_send_spdadd2	mDNSMacOSX/pfkey.c	/^pfkey_send_spdadd2(so, src, prefs, dst, prefd, proto, ltime, vtime,$/;"	f
pfkey_send_spddelete	mDNSMacOSX/pfkey.c	/^pfkey_send_spddelete(so, src, prefs, dst, prefd, proto, policy, policylen, seq)$/;"	f
pfkey_send_spddelete2	mDNSMacOSX/pfkey.c	/^pfkey_send_spddelete2(so, spid)$/;"	f
pfkey_send_spddump	mDNSMacOSX/pfkey.c	/^pfkey_send_spddump(so)$/;"	f
pfkey_send_spdflush	mDNSMacOSX/pfkey.c	/^pfkey_send_spdflush(so)$/;"	f
pfkey_send_spdget	mDNSMacOSX/pfkey.c	/^pfkey_send_spdget(so, spid)$/;"	f
pfkey_send_spdsetidx	mDNSMacOSX/pfkey.c	/^pfkey_send_spdsetidx(so, src, prefs, dst, prefd, proto, policy, policylen, seq)$/;"	f
pfkey_send_spdupdate	mDNSMacOSX/pfkey.c	/^pfkey_send_spdupdate(so, src, prefs, dst, prefd, proto, policy, policylen, seq)$/;"	f
pfkey_send_spdupdate2	mDNSMacOSX/pfkey.c	/^pfkey_send_spdupdate2(so, src, prefs, dst, prefd, proto, ltime, vtime,$/;"	f
pfkey_send_update	mDNSMacOSX/pfkey.c	/^pfkey_send_update(so, satype, mode, src, dst, spi, reqid, wsize,$/;"	f
pfkey_send_x1	mDNSMacOSX/pfkey.c	/^pfkey_send_x1(so, type, satype, mode, src, dst, spi, reqid, wsize,$/;"	f	file:
pfkey_send_x2	mDNSMacOSX/pfkey.c	/^pfkey_send_x2(so, type, satype, mode, src, dst, spi)$/;"	f	file:
pfkey_send_x3	mDNSMacOSX/pfkey.c	/^pfkey_send_x3(so, type, satype)$/;"	f	file:
pfkey_send_x4	mDNSMacOSX/pfkey.c	/^pfkey_send_x4(so, type, src, prefs, dst, prefd, proto,$/;"	f	file:
pfkey_send_x5	mDNSMacOSX/pfkey.c	/^pfkey_send_x5(so, type, spid)$/;"	f	file:
pfkey_set_softrate	mDNSMacOSX/pfkey.c	/^pfkey_set_softrate(type, rate)$/;"	f
pfkey_set_supported	mDNSMacOSX/pfkey.c	/^pfkey_set_supported(msg, tlen)$/;"	f
pfkey_setsadbaddr	mDNSMacOSX/pfkey.c	/^pfkey_setsadbaddr(buf, lim, exttype, saddr, prefixlen, ul_proto)$/;"	f	file:
pfkey_setsadbkey	mDNSMacOSX/pfkey.c	/^pfkey_setsadbkey(buf, lim, type, key, keylen)$/;"	f	file:
pfkey_setsadblifetime	mDNSMacOSX/pfkey.c	/^pfkey_setsadblifetime(buf, lim, type, l_alloc, l_bytes, l_addtime, l_usetime)$/;"	f	file:
pfkey_setsadbmsg	mDNSMacOSX/pfkey.c	/^pfkey_setsadbmsg(buf, lim, type, tlen, satype, seq, pid)$/;"	f	file:
pfkey_setsadbsa	mDNSMacOSX/pfkey.c	/^pfkey_setsadbsa(buf, lim, spi, wsize, auth, enc, flags)$/;"	f	file:
pfkey_setsadbxsa2	mDNSMacOSX/pfkey.c	/^pfkey_setsadbxsa2(buf, lim, mode0, reqid)$/;"	f	file:
pid	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 pid;                            \/\/ Process ID of the client that is requesting the question$/;"	m	struct:DNSQuestion_struct
pid_name	mDNSShared/uds_daemon.c	/^    char  pid_name[MAXCOMLEN];      \/\/ Client's process name$/;"	m	struct:request_state	file:
pid_t	Clients/dns-sd.c	/^typedef int pid_t;$/;"	t	file:
pid_t	mDNSShared/uds_daemon.c	/^    typedef unsigned int pid_t;$/;"	t	file:
pid_t	mDNSWindows/PosixCompat.h	/^typedef int pid_t;$/;"	t
pkt	mDNSShared/dnsextd.c	/^    PktMsg pkt;$/;"	m	struct:__anon111	file:
pkt	mDNSShared/dnsextd.c	/^    PktMsg pkt;$/;"	m	struct:__anon112	file:
pkts	mDNSPosix/NetMonitor.c	/^    unsigned long pkts[HostPkt_NumTypes];$/;"	m	struct:__anon19	file:
platf	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8    platf;      \/\/ Running platform (see enum Platform_t)$/;"	m	struct:__anon55
platform_Atv	mDNSCore/mDNSEmbeddedAPI.h	/^    platform_Atv,       \/\/ Atv Platform $/;"	e	enum:__anon52
platform_NonApple	mDNSCore/mDNSEmbeddedAPI.h	/^    platform_NonApple   \/\/ Non-Apple (Windows, POSIX) Platform$/;"	e	enum:__anon52
platform_OSX	mDNSCore/mDNSEmbeddedAPI.h	/^    platform_OSX = 1,   \/\/ OSX Platform $/;"	e	enum:__anon52
platform_data	mDNSShared/uds_daemon.c	/^    void * platform_data;$/;"	m	struct:request_state	file:
platform_iOS	mDNSCore/mDNSEmbeddedAPI.h	/^    platform_iOS,       \/\/ iOS Platform $/;"	e	enum:__anon52
plen_to_mask	mDNSPosix/mDNSUNP.c	/^void plen_to_mask(int plen, char *addr) {$/;"	f
pm	mDNSShared/uds_daemon.c	/^        } pm;$/;"	m	union:request_state::__anon124	typeref:struct:request_state::__anon124::__anon128	file:
port	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    uint16_t port;$/;"	m	struct:ResolveInfo
port	mDNSCore/DNSCommon.c	/^    mDNSIPPort port; \/\/ MUST BE FIRST FIELD -- mDNSCoreReceive expects every UDPSocket_struct to begin with mDNSIPPort port$/;"	m	struct:UDPSocket_struct	file:
port	mDNSCore/dnsproxy.c	/^    mDNSIPPort  port;               \/\/ Client's port number$/;"	m	struct:DNSProxyClient_struct	file:
port	mDNSCore/mDNS.c	/^    mDNSIPPort port; \/\/ MUST BE FIRST FIELD -- mDNSCoreReceive expects every UDPSocket_struct to begin with mDNSIPPort port$/;"	m	struct:UDPSocket_struct	file:
port	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort port;                    \/\/ Port where this service can be accessed$/;"	m	struct:__anon86
port	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort port;$/;"	m	struct:DNSServer
port	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort port;$/;"	m	struct:DomainAuthInfo
port	mDNSMacOSX/DNSServiceDiscovery.c	/^    mach_port_t port;$/;"	m	struct:_dns_service_discovery_t	file:
port	mDNSMacOSX/daemon.c	/^    mDNSIPPort port;$/;"	m	struct:DNSServiceRegistration	file:
port	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSIPPort port; \/\/ MUST BE FIRST FIELD -- UDPSocket_struct begins with a KQSocketSet,$/;"	m	struct:__anon145
port	mDNSShared/uds_daemon.c	/^            mDNSIPPort port;$/;"	m	struct:request_state::__anon124::__anon126	file:
port	mDNSWindows/mDNSWin32.h	/^	mDNSIPPort					port; 		\/\/ MUST BE FIRST FIELD -- mDNSCoreReceive expects every UDPSocket_struct to begin with mDNSIPPort port$/;"	m	struct:UDPSocket_struct
portField	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.TextBox portField;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
portForUpdate	Clients/Java/BrowserApp.java	/^	int					portForUpdate;$/;"	f	class:BrowserApp
portLabel	Clients/Java/BrowserApp.java	/^	JLabel				hostLabel, portLabel;$/;"	f	class:BrowserApp
portName	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString portName;$/;"	m	struct:PrinterSetupWizard::Printer
portNumber	Clients/PrinterSetupWizard/UtilTypes.h	/^    unsigned short portNumber;$/;"	m	struct:PrinterSetupWizard::Service
port_mapping_create_reply	Clients/dns-sd.c	/^static void DNSSD_API port_mapping_create_reply(DNSServiceRef sdref, DNSServiceFlags flags, uint32_t ifIndex, DNSServiceErrorType errorCode, uint32_t publicAddress, uint32_t protocol, uint16_t privatePort, uint16_t publicPort, uint32_t ttl, void *context)$/;"	f	file:
port_mapping_create_request_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void port_mapping_create_request_callback(mDNS *m, NATTraversalInfo *n)$/;"	f
port_mapping_reply_op	mDNSShared/dnssd_ipc.h	/^    port_mapping_reply_op,  \/\/ New in Leopard and B4W 2.0$/;"	e	enum:__anon110
port_mapping_request	mDNSShared/dnssd_ipc.h	/^    port_mapping_request,   \/\/ New in Leopard and B4W 2.0$/;"	e	enum:__anon109
port_mapping_termination_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void port_mapping_termination_callback(request_state *request)$/;"	f
precision	mDNSCore/DNSCommon.c	/^    unsigned int precision;$/;"	m	struct:mDNSprintf_format	file:
prevnewhostlabel	mDNSMacOSX/mDNSMacOSX.h	/^    domainlabel prevnewhostlabel;               \/\/ Previous m->hostlabel$/;"	m	struct:mDNS_PlatformSupport_struct
prevnewnicelabel	mDNSMacOSX/mDNSMacOSX.h	/^    domainlabel prevnewnicelabel;               \/\/ Previous m->nicelabel$/;"	m	struct:mDNS_PlatformSupport_struct
prevoldhostlabel	mDNSMacOSX/mDNSMacOSX.h	/^    domainlabel prevoldhostlabel;               \/\/ Previous m->p->userhostlabel$/;"	m	struct:mDNS_PlatformSupport_struct
prevoldnicelabel	mDNSMacOSX/mDNSMacOSX.h	/^    domainlabel prevoldnicelabel;               \/\/ Previous m->p->usernicelabel$/;"	m	struct:mDNS_PlatformSupport_struct
primary	mDNSShared/dnssd_clientstub.c	/^    DNSServiceOp     *primary;          \/\/ For shared connection$/;"	m	struct:_DNSServiceRef_t	file:
primary	mDNSShared/uds_daemon.c	/^    request_state *primary;         \/\/ If this operation is on a shared socket, pointer to primary$/;"	m	struct:request_state	file:
print_usage	Clients/dns-sd.c	/^static void print_usage(const char *arg0, int print_all)$/;"	f	file:
print_usage	Clients/dnsctl.c	/^static void print_usage(const char *arg0)$/;"	f	file:
printed	mDNSPosix/NetMonitor.c	/^    int printed;$/;"	m	struct:ActivityStat_struct	file:
printer	Clients/PrinterSetupWizard/UtilTypes.h	/^    Printer     *   printer;$/;"	m	struct:PrinterSetupWizard::Service
printstats	mDNSPosix/NetMonitor.c	/^mDNSlocal void printstats(int max)$/;"	f
printtimestamp	Clients/dns-sd.c	/^static void printtimestamp(void)$/;"	f	file:
printtimestamp	Clients/dnsctl.c	/^static void printtimestamp(void) $/;"	f	file:
priority	Clients/PrinterSetupWizard/UtilTypes.h	/^    uint32_t priority;$/;"	m	struct:PrinterSetupWizard::Queue
privateDnsArray	mDNSMacOSX/mDNSMacOSX.c	/^static CFArrayRef privateDnsArray = NULL;$/;"	v	file:
private_port	mDNSShared/dnsextd.h	/^    mDNSIPPort private_port;           \/\/ listening port for private messages$/;"	m	struct:__anon116
proc	mDNSShared/uds_daemon.c	/^struct proc_bsdshortinfo proc;$/;"	v	typeref:struct:proc_bsdshortinfo
process_config_line	mDNSPosix/nss_mdns.c	/^process_config_line ($/;"	f	file:
process_id	mDNSShared/uds_daemon.c	/^    pid_t process_id;               \/\/ Client's PID value$/;"	m	struct:request_state	file:
product	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString product;$/;"	m	struct:PrinterSetupWizard::Queue
proto	Clients/dns-sd.c	/^    unsigned char proto;$/;"	m	struct:__anon169	file:
protocol	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString protocol;$/;"	m	struct:PrinterSetupWizard::Service
protocol	mDNSShared/uds_daemon.c	/^            mDNSu32 protocol;$/;"	m	struct:request_state::__anon124::__anon127	file:
provide_DNSServiceBrowserCreate_rpc	mDNSMacOSX/daemon.c	/^mDNSexport kern_return_t provide_DNSServiceBrowserCreate_rpc(mach_port_t unusedserver, mach_port_t client,$/;"	f
provide_DNSServiceDomainEnumerationCreate_rpc	mDNSMacOSX/daemon.c	/^mDNSexport kern_return_t provide_DNSServiceDomainEnumerationCreate_rpc(mach_port_t unusedserver, mach_port_t client,$/;"	f
provide_DNSServiceRegistrationAddRecord_rpc	mDNSMacOSX/daemon.c	/^mDNSexport kern_return_t provide_DNSServiceRegistrationAddRecord_rpc(mach_port_t unusedserver, mach_port_t client,$/;"	f
provide_DNSServiceRegistrationCreate_rpc	mDNSMacOSX/daemon.c	/^mDNSexport kern_return_t provide_DNSServiceRegistrationCreate_rpc(mach_port_t unusedserver, mach_port_t client,$/;"	f
provide_DNSServiceRegistrationRemoveRecord_rpc	mDNSMacOSX/daemon.c	/^mDNSexport kern_return_t provide_DNSServiceRegistrationRemoveRecord_rpc(mach_port_t unusedserver, mach_port_t client,$/;"	f
provide_DNSServiceRegistrationUpdateRecord_rpc	mDNSMacOSX/daemon.c	/^mDNSexport kern_return_t provide_DNSServiceRegistrationUpdateRecord_rpc(mach_port_t unusedserver, mach_port_t client,$/;"	f
provide_DNSServiceResolverResolve_rpc	mDNSMacOSX/daemon.c	/^mDNSexport kern_return_t provide_DNSServiceResolverResolve_rpc(mach_port_t unusedserver, mach_port_t client,$/;"	f
proxy	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSBool proxy;$/;"	m	struct:__anon145
psztPortName	Clients/PrinterSetupWizard/tcpxcv.h	/^    WCHAR psztPortName[MAX_PORTNAME_LEN];$/;"	m	struct:_DELETE_PORT_DATA_1
ptr	mDNSMacOSX/mDNSMacOSX.c	/^typedef union { void *ptr; mDNSOpaque64 sixtyfourbits; } FatPtr;$/;"	m	union:__anon153	file:
public_names	mDNSShared/dnsextd.h	/^    DNameListElem   *   public_names;   \/\/ list of public SRV names$/;"	m	struct:__anon116
putDNSSECOption	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putDNSSECOption(DNSMessage *msg, mDNSu8 *end, mDNSu8 *limit)$/;"	f
putDeleteAllRRSets	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putDeleteAllRRSets(DNSMessage *msg, mDNSu8 *ptr, const domainname *name)$/;"	f
putDeleteRRSetWithLimit	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putDeleteRRSetWithLimit(DNSMessage *msg, mDNSu8 *ptr, const domainname *name, mDNSu16 rrtype, mDNSu8 *limit)$/;"	f
putDeletionRecord	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putDeletionRecord(DNSMessage *msg, mDNSu8 *ptr, ResourceRecord *rr)$/;"	f
putDeletionRecordWithLimit	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putDeletionRecordWithLimit(DNSMessage *msg, mDNSu8 *ptr, ResourceRecord *rr, mDNSu8 *limit)$/;"	f
putDomainNameAsLabels	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putDomainNameAsLabels(const DNSMessage *const msg,$/;"	f
putEmptyResourceRecord	mDNSCore/DNSCommon.c	/^mDNSlocal mDNSu8 *putEmptyResourceRecord(DNSMessage *const msg, mDNSu8 *ptr, const mDNSu8 *const limit, mDNSu16 *count, const AuthRecord *rr)$/;"	f
putHINFO	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putHINFO(const mDNS *const m, DNSMessage *const msg, mDNSu8 *end, DomainAuthInfo *authInfo, mDNSu8 *limit)$/;"	f
putLLQ	mDNSCore/uDNS.c	/^mDNSlocal mDNSu8 *putLLQ(DNSMessage *const msg, mDNSu8 *ptr, const DNSQuestion *const question, const LLQOptData *const data)$/;"	f
putPrereqNameNotInUse	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putPrereqNameNotInUse(const domainname *const name, DNSMessage *const msg, mDNSu8 *const ptr, mDNSu8 *const end)$/;"	f
putQuestion	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putQuestion(DNSMessage *const msg, mDNSu8 *ptr, const mDNSu8 *const limit, const domainname *const name, mDNSu16 rrtype, mDNSu16 rrclass)$/;"	f
putRData	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putRData(const DNSMessage *const msg, mDNSu8 *ptr, const mDNSu8 *const limit, const ResourceRecord *const rr)$/;"	f
putRRSetDeletion	mDNSShared/dnsextd.c	/^mDNSlocal mDNSu8 *putRRSetDeletion(DNSMessage *msg, mDNSu8 *ptr, mDNSu8 *limit,  ResourceRecord *rr)$/;"	f
putUpdateLease	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putUpdateLease(DNSMessage *msg, mDNSu8 *end, mDNSu32 lease)$/;"	f
putUpdateLeaseWithLimit	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putUpdateLeaseWithLimit(DNSMessage *msg, mDNSu8 *end, mDNSu32 lease, mDNSu8 *limit)$/;"	f
putVal16	mDNSCore/DNSCommon.c	/^mDNSlocal mDNSu8 *putVal16(mDNSu8 *ptr, mDNSu16 val)$/;"	f
putVal16	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSu8 *putVal16(mDNSu8 *ptr, mDNSu16 val)$/;"	f
putVal32	mDNSCore/DNSCommon.c	/^mDNSlocal mDNSu8 *putVal32(mDNSu8 *ptr, mDNSu32 val)$/;"	f
putVal32	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mDNSu8 *putVal32(mDNSu8 *ptr, mDNSu32 val)$/;"	f
putZone	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu8 *putZone(DNSMessage *const msg, mDNSu8 *ptr, mDNSu8 *limit, const domainname *zone, mDNSOpaque16 zoneClass)$/;"	f
put_error_code	mDNSShared/dnssd_ipc.h	201;"	d
put_flags	mDNSShared/dnssd_ipc.h	198;"	d
put_rdata	mDNSShared/dnssd_ipc.c	/^void put_rdata(const int rdlen, const unsigned char *rdata, char **ptr)$/;"	f
put_string	mDNSShared/dnssd_ipc.c	/^int put_string(const char *str, char **ptr)$/;"	f
put_uint16	mDNSShared/dnssd_ipc.c	/^void put_uint16(uint16_t s, char **ptr)$/;"	f
put_uint32	mDNSShared/dnssd_ipc.c	/^void put_uint32(const uint32_t l, char **ptr)$/;"	f
px	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataPX px;             \/\/ This is large; not included in the normal RDataBody definition$/;"	m	union:__anon58
px_compare	mDNSCore/dnssec.c	/^mDNSlocal int px_compare(rdataComp *const r1, rdataComp *const r2)$/;"	f
q	mDNSCore/dnsproxy.c	/^    DNSQuestion q;                  \/\/ as it can change underneath us for CNAMEs$/;"	m	struct:DNSProxyClient_struct	file:
q	mDNSCore/dnssec.h	/^    DNSQuestion q;$/;"	m	struct:DNSSECVerifier_struct
q	mDNSCore/dnssec.h	/^    DNSQuestion q;$/;"	m	struct:InsecureContext_struct
q	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion q;$/;"	m	struct:ClientTunnel
q	mDNSMacOSX/daemon.c	/^    DNSQuestion q;$/;"	m	struct:DNSServiceBrowserQuestion	file:
q	mDNSMacOSX/daemon.c	/^    ServiceInfoQuery q;$/;"	m	struct:DNSServiceResolver_struct	file:
q	mDNSShared/dnssd_clientshim.c	/^    DNSQuestion q;$/;"	m	struct:__anon119	file:
q	mDNSShared/dnssd_clientshim.c	/^    DNSQuestion q;$/;"	m	struct:__anon121	file:
q	mDNSShared/uds_daemon.c	/^            DNSQuestion q;$/;"	m	struct:request_state::__anon124::__anon130	file:
q	mDNSShared/uds_daemon.c	/^    DNSQuestion q;$/;"	m	struct:browser_t	file:
q2	mDNSShared/uds_daemon.c	/^            DNSQuestion *q2;$/;"	m	struct:request_state::__anon124::__anon130	file:
q4	mDNSShared/uds_daemon.c	/^            DNSQuestion q4;$/;"	m	struct:request_state::__anon124::__anon127	file:
q42	mDNSShared/uds_daemon.c	/^            DNSQuestion *q42;$/;"	m	struct:request_state::__anon124::__anon127	file:
q6	mDNSShared/uds_daemon.c	/^            DNSQuestion q6;$/;"	m	struct:request_state::__anon124::__anon127	file:
q62	mDNSShared/uds_daemon.c	/^            DNSQuestion *q62;$/;"	m	struct:request_state::__anon124::__anon127	file:
qAv4	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion qAv4;$/;"	m	struct:ServiceInfoQuery_struct
qAv6	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion qAv6;$/;"	m	struct:ServiceInfoQuery_struct
qDNSServer	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSServer            *qDNSServer;       \/\/ Caching server for this query (in the absence of an SRV saying otherwise)$/;"	m	struct:DNSQuestion_struct
qSRV	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion qSRV;$/;"	m	struct:ServiceInfoQuery_struct
qSRV	mDNSShared/dnssd_clientshim.c	/^    DNSQuestion qSRV;$/;"	m	struct:__anon120	file:
qTXT	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion qTXT;$/;"	m	struct:ServiceInfoQuery_struct
qTXT	mDNSShared/dnssd_clientshim.c	/^    DNSQuestion qTXT;$/;"	m	struct:__anon120	file:
q_all	mDNSShared/uds_daemon.c	/^            DNSQuestion q_all;$/;"	m	struct:request_state::__anon124::__anon129	file:
q_default	mDNSShared/uds_daemon.c	/^            DNSQuestion q_default;$/;"	m	struct:request_state::__anon124::__anon129	file:
q_start	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { q_stop = 0, q_start } q_state;$/;"	e	enum:__anon41
q_state	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { q_stop = 0, q_start } q_state;$/;"	t	typeref:enum:__anon41
q_stop	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { q_stop = 0, q_start } q_state;$/;"	e	enum:__anon41
qclass	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 qclass;$/;"	m	struct:DNSQuestion_struct
qd	mDNSMacOS9/ShowInitIcon.c	/^    QDGlobals qd;                                           \/\/ Storage for the QuickDraw globals$/;"	m	struct:__anon184	file:
qdGlobalsPtr	mDNSMacOS9/ShowInitIcon.c	/^    long qdGlobalsPtr;                                          \/\/ A5 points to this place; it will contain a pointer to qd$/;"	m	struct:__anon184	file:
qlist	mDNSMacOSX/daemon.c	/^    DNSServiceBrowserQuestion *qlist;$/;"	m	struct:DNSServiceBrowser_struct	file:
qname	mDNSCore/dnsproxy.c	/^    domainname qname;               \/\/ q->qname can't be used for duplicate check$/;"	m	struct:DNSProxyClient_struct	file:
qname	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname qname;$/;"	m	struct:DNSQuestion_struct
qname	mDNSShared/dnsextd.h	/^    domainname qname;$/;"	m	struct:LLQEntry
qnameOrig	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname           *qnameOrig;        \/\/ Copy of the original question name if it is not fully qualified$/;"	m	struct:DNSQuestion_struct
qnamehash	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 qnamehash;$/;"	m	struct:DNSQuestion_struct
qr_reply	Clients/dns-sd.c	/^static void DNSSD_API qr_reply(DNSServiceRef sdref, const DNSServiceFlags flags, uint32_t ifIndex, DNSServiceErrorType errorCode,$/;"	f	file:
qsrv	mDNSShared/uds_daemon.c	/^            DNSQuestion qsrv;$/;"	m	struct:request_state::__anon124::__anon131	file:
qtotal	Clients/PrinterSetupWizard/UtilTypes.h	/^    unsigned short qtotal;$/;"	m	struct:PrinterSetupWizard::Service
qtxt	mDNSShared/uds_daemon.c	/^            DNSQuestion qtxt;$/;"	m	struct:request_state::__anon124::__anon131	file:
qtype	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 qtype;$/;"	m	struct:DNSQuestion_struct
qtype	mDNSShared/dnsextd.h	/^    mDNSu16 qtype;$/;"	m	struct:LLQEntry
queryAnswered	Clients/Java/DNSSDUnitTest.java	/^	public void	queryAnswered( DNSSDService query, int flags, int ifIndex, String fullName, $/;"	m	class:QueryTest
queryAnswered	Clients/Java/SimpleChat.java	/^	public void	queryAnswered( DNSSDService query, int flags, int ifIndex, String fullName, $/;"	m	class:SimpleChat
queryAnswered	Clients/Java/SwingQueryListener.java	/^	public void	queryAnswered( DNSSDService query, int flags, int ifIndex, String fullName, $/;"	m	class:SwingQueryListener
queryAnswered	mDNSShared/Java/QueryListener.java	/^	void	queryAnswered( DNSSDService query, int flags, int ifIndex, String fullName, $/;"	m	interface:QueryListener
queryKeys	mDNSShared/dnsextd.h	/^    DomainAuthInfo      *   queryKeys;  \/\/ linked list of keys for queries$/;"	m	struct:DNSZone
queryRecord	mDNSShared/Java/DNSSD.java	/^	public static DNSSDService	queryRecord( int flags, int ifIndex, String serviceName, int rrtype,$/;"	m	class:DNSSD
querySet	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	WSAQUERYSETW *		querySet;$/;"	m	struct:Query	file:
querySetFlags	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	DWORD				querySetFlags;$/;"	m	struct:Query	file:
querySetSize	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	size_t				querySetSize;$/;"	m	struct:Query	file:
query_reply_op	mDNSShared/dnssd_ipc.h	/^    query_reply_op,$/;"	e	enum:__anon110
query_request	mDNSShared/dnssd_ipc.h	/^    query_request,$/;"	e	enum:__anon109
queryrecord	mDNSShared/uds_daemon.c	/^        } queryrecord;$/;"	m	union:request_state::__anon124	typeref:struct:request_state::__anon124::__anon130	file:
queryrecord_result_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void queryrecord_result_callback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
queryrecord_result_reply	mDNSShared/uds_daemon.c	/^mDNSlocal void queryrecord_result_reply(mDNS *const m, request_state *req, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord,$/;"	f
queryrecord_termination_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void queryrecord_termination_callback(request_state *request)$/;"	f
question	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion      *question;   \/\/ For queries$/;"	m	struct:tcpInfo_t
question	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSQuestion question;               \/\/ Storage for any active question$/;"	m	struct:ZoneData_struct
queues	Clients/PrinterSetupWizard/UtilTypes.h	/^    Queues queues;$/;"	m	struct:PrinterSetupWizard::Service
quit	mDNSVxWorks/mDNSVxWorks.h	/^    mDNSBool quit;$/;"	m	struct:mDNS_PlatformSupport_struct
quit	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    mDNSBool quit;$/;"	m	struct:mDNS_PlatformSupport_struct
quitEvent	mDNSVxWorks/mDNSVxWorks.h	/^    SEM_ID quitEvent;$/;"	m	struct:mDNS_PlatformSupport_struct
quitEvent	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    SEM_ID quitEvent;$/;"	m	struct:mDNS_PlatformSupport_struct
r	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord r;$/;"	m	struct:ExtraResourceRecord_struct
r	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheRecord r;$/;"	m	struct:__anon79
rDNSServer	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSServer       *rDNSServer;        \/\/ Unicast DNS server authoritative for this entry;null for multicast$/;"	m	struct:ResourceRecord_struct
r_errno	mDNSPosix/nss_mdns.c	/^    int r_errno;$/;"	m	struct:result_map	file:
r_h_errno	mDNSPosix/nss_mdns.c	/^    int r_h_errno;$/;"	m	struct:result_map	file:
racoon_config_file	mDNSMacOSX/helper.c	/^static const char racoon_config_file[] = "anonymous.conf";$/;"	v	file:
racoon_config_file_orig	mDNSMacOSX/helper.c	/^static const char racoon_config_file_orig[] = "anonymous.conf.orig";$/;"	v	file:
rcvBufSize	mDNSCore/dnsproxy.c	/^    mDNSu16 rcvBufSize;             \/\/ How much can the client receive ?$/;"	m	struct:DNSProxyClient_struct	file:
rdata	mDNSCore/dnssec.c	/^    mDNSu8 *rdata;$/;"	m	struct:__anon104	file:
rdata	mDNSCore/dnssec.h	/^    mDNSu8  *rdata;$/;"	m	struct:RRVerifier_struct
rdata	mDNSCore/mDNSEmbeddedAPI.h	/^    RData           *rdata;             \/\/ Pointer to storage for this rdata$/;"	m	struct:ResourceRecord_struct
rdataComp	mDNSCore/dnssec.c	/^} rdataComp;$/;"	t	typeref:struct:__anon104	file:
rdataDNSKey	Clients/dns-sd.c	/^} rdataDNSKey;$/;"	t	typeref:struct:__anon169	file:
rdataDS	Clients/dns-sd.c	/^} rdataDS;$/;"	t	typeref:struct:__anon168	file:
rdataNSEC	mDNSCore/mDNSEmbeddedAPI.h	/^} rdataNSEC;$/;"	t	typeref:struct:__anon56
rdataRRSig	Clients/dns-sd.c	/^} rdataRRSig;$/;"	t	typeref:struct:__anon170	file:
rdata_compare	mDNSCore/dnssec.c	/^mDNSlocal int rdata_compare(mDNSu8 *const rdata1, mDNSu8 *const rdata2, int rdlen1, int rdlen2)$/;"	f
rdatahash	mDNSCore/dnssec.h	/^    mDNSu32 rdatahash;$/;"	m	struct:RRVerifier_struct
rdatahash	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 rdatahash;                  \/\/ For rdata containing domain name (e.g. PTR, SRV, CNAME etc.), case-insensitive name hash$/;"	m	struct:ResourceRecord_struct
rdatastorage	mDNSCore/mDNSEmbeddedAPI.h	/^    RData rdatastorage;                 \/\/ Normally the storage is right here, except for oversized records$/;"	m	struct:AuthRecord_struct
rdestimate	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 rdestimate;                 \/\/ Upper bound on on-the-wire size of rdata after name compression$/;"	m	struct:ResourceRecord_struct
rdlength	mDNSCore/dnssec.c	/^    mDNSu16 rdlength;$/;"	m	struct:__anon104	file:
rdlength	mDNSCore/dnssec.h	/^    mDNSu16 rdlength;$/;"	m	struct:RRVerifier_struct
rdlength	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 rdlength;                   \/\/ Size of the raw rdata, in bytes, in the on-the-wire format$/;"	m	struct:ResourceRecord_struct
rds	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataDS rds;$/;"	m	struct:TrustAnchor
rdsize	mDNSMacOSX/daemon.c	/^    size_t rdsize;$/;"	m	struct:DNSServiceRegistration	file:
readSource	mDNSMacOSX/mDNSMacOSX.h	/^    dispatch_source_t readSource;$/;"	m	struct:__anon144
read_all	mDNSShared/dnssd_clientstub.c	/^static int read_all(dnssd_sock_t sd, char *buf, int len)$/;"	f	file:
read_all_fail	mDNSShared/dnssd_clientstub.c	/^enum { read_all_success = 0, read_all_fail = -1, read_all_wouldblock = -2 };$/;"	e	enum:__anon140	file:
read_all_success	mDNSShared/dnssd_clientstub.c	/^enum { read_all_success = 0, read_all_fail = -1, read_all_wouldblock = -2 };$/;"	e	enum:__anon140	file:
read_all_wouldblock	mDNSShared/dnssd_clientstub.c	/^enum { read_all_success = 0, read_all_fail = -1, read_all_wouldblock = -2 };$/;"	e	enum:__anon140	file:
read_msg	mDNSShared/uds_daemon.c	/^mDNSlocal void read_msg(request_state *req)$/;"	f
read_rr_from_ipc_msg	mDNSShared/uds_daemon.c	/^mDNSlocal AuthRecord *read_rr_from_ipc_msg(request_state *request, int GetTTL, int validate_flags)$/;"	f
readpacket	mDNSMacOS9/mDNSMacOS9.c	/^mDNSlocal OSStatus readpacket(mDNS *m)$/;"	f
readyEvent	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    SEM_ID readyEvent;$/;"	m	struct:mDNS_PlatformSupport_struct
rec	mDNSCore/mDNSEmbeddedAPI.h	/^    LargeCacheRecord rec;                   \/\/ Resource Record extracted from received message$/;"	m	struct:mDNS_struct
rec	mDNSShared/dnssd_clientstub.c	/^    DNSRecord        *rec;$/;"	m	struct:_DNSServiceRef_t	file:
recnext	mDNSShared/dnssd_clientstub.c	/^    DNSRecord       *recnext;$/;"	m	struct:_DNSRecordRef_t	file:
reconfirmRecord	mDNSShared/Java/DNSSD.java	/^	public static void		reconfirmRecord( int flags, int ifIndex, String fullName, int rrtype,$/;"	m	class:DNSSD
reconfirm_record_request	mDNSShared/dnssd_ipc.h	/^    reconfirm_record_request,$/;"	e	enum:__anon109
record	Clients/dns-sd.c	/^static DNSRecordRef record = NULL;$/;"	v	file:
recordRegistered	Clients/Java/DNSSDUnitTest.java	/^	public void	recordRegistered( DNSRecord record, int flags)$/;"	m	class:RegistrarTest
recordRegistered	mDNSShared/Java/RegisterRecordListener.java	/^	void	recordRegistered( DNSRecord record, int flags);$/;"	m	interface:RegisterRecordListener
record_data_t	mDNSMacOSX/DNSServiceDiscoveryDefines.h	/^typedef const char * record_data_t;$/;"	t
record_index	mDNSShared/dnssd_clientstub.c	/^    uint32_t record_index;  \/\/ index is unique to the ServiceDiscoveryRef$/;"	m	struct:_DNSRecordRef_t	file:
recordstat	mDNSPosix/NetMonitor.c	/^mDNSlocal void recordstat(HostEntry *entry, const domainname *fqdn, int op, mDNSu16 rrtype)$/;"	f
recref	mDNSShared/dnssd_clientstub.c	/^    DNSRecordRef recref;$/;"	m	struct:_DNSRecordRef_t	file:
recursed	mDNSCore/dnssec.h	/^    mDNSu8 recursed;                \/\/ Number of times recursed during validation$/;"	m	struct:DNSSECVerifier_struct
recvCounter	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    int recvCounter;$/;"	m	struct:MDNSInterfaceItem	file:
recvErrorCounter	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    int recvErrorCounter;$/;"	m	struct:MDNSInterfaceItem	file:
recvLoopCounter	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    int recvLoopCounter;$/;"	m	struct:MDNSInterfaceItem	file:
recvMsgPtr	mDNSWindows/mDNSWin32.h	/^	LPFN_WSARECVMSG				recvMsgPtr;$/;"	m	struct:UDPSocket_struct
recvSetupResponse	mDNSCore/uDNS.c	/^mDNSlocal void recvSetupResponse(mDNS *const m, mDNSu8 rcode, DNSQuestion *const q, const LLQOptData *const llq)$/;"	f
recvfrom_flags	mDNSPosix/mDNSUNP.c	/^recvfrom_flags(int fd, void *ptr, size_t nbytes, int *flagsp,$/;"	f
ref	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    DNSServiceRef ref;$/;"	m	struct:ServiceHandlerEntry
refCount	mDNSMacOSX/BonjourEvents.c	/^    CFIndex refCount;$/;"	m	struct:__anon150	file:
refCount	mDNSMacOSX/mDNSMacOSX.c	/^    unsigned int refCount;$/;"	m	struct:D2DBrowseListElem	file:
refCount	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	int					refCount;$/;"	m	struct:Query	file:
refcount	mDNSShared/dnsextd.h	/^    int refcount;$/;"	m	struct:AnswerListElem
refreshCount	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 refreshCount;        \/\/ Number of refreshes to the server$/;"	m	struct:AuthRecord_struct
refs	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    DWORD refs;$/;"	m	struct:ServiceInfo
refs	Clients/PrinterSetupWizard/UtilTypes.h	/^    unsigned refs;$/;"	m	struct:PrinterSetupWizard::Service
regCallback	mDNSMacOSX/DNSServiceDiscovery.c	/^        DNSServiceRegistrationReply regCallback;$/;"	m	union:a_requests::__anon151	file:
regState_DeregPending	mDNSCore/mDNSEmbeddedAPI.h	/^    regState_DeregPending      = 3,     \/\/ dereg sent, reply not received$/;"	e	enum:__anon73
regState_NATError	mDNSCore/mDNSEmbeddedAPI.h	/^    regState_NATError          = 9     \/\/ unable to complete NAT traversal$/;"	e	enum:__anon73
regState_NATMap	mDNSCore/mDNSEmbeddedAPI.h	/^    regState_NATMap            = 6,     \/\/ establishing NAT port mapping$/;"	e	enum:__anon73
regState_NoTarget	mDNSCore/mDNSEmbeddedAPI.h	/^    regState_NoTarget          = 8,     \/\/ SRV Record registration pending registration of hostname$/;"	e	enum:__anon73
regState_Pending	mDNSCore/mDNSEmbeddedAPI.h	/^    regState_Pending           = 1,     \/\/ update sent, reply not received$/;"	e	enum:__anon73
regState_Refresh	mDNSCore/mDNSEmbeddedAPI.h	/^    regState_Refresh           = 5,     \/\/ outstanding refresh (or target change) message$/;"	e	enum:__anon73
regState_Registered	mDNSCore/mDNSEmbeddedAPI.h	/^    regState_Registered        = 2,     \/\/ update sent, reply received$/;"	e	enum:__anon73
regState_Unregistered	mDNSCore/mDNSEmbeddedAPI.h	/^    regState_Unregistered      = 4,     \/\/ not in any list$/;"	e	enum:__anon73
regState_UpdatePending	mDNSCore/mDNSEmbeddedAPI.h	/^    regState_UpdatePending     = 7,     \/\/ update in flight as result of mDNS_Update call$/;"	e	enum:__anon73
regState_Zero	mDNSCore/mDNSEmbeddedAPI.h	/^    regState_Zero              = 0,$/;"	e	enum:__anon73
regState_t	mDNSCore/mDNSEmbeddedAPI.h	/^} regState_t;$/;"	t	typeref:enum:__anon73
reg_record_reply_op	mDNSShared/dnssd_ipc.h	/^    reg_record_reply_op,    \/\/ Up to here is in Tiger and B4W 1.0.3$/;"	e	enum:__anon110
reg_record_request	mDNSShared/dnssd_ipc.h	/^    reg_record_request,     \/\/ reg\/remove record only valid for connected sockets$/;"	e	enum:__anon109
reg_recs	mDNSShared/uds_daemon.c	/^        registered_record_entry *reg_recs;  \/\/ list of registrations for a connection-oriented request$/;"	m	union:request_state::__anon124	file:
reg_reply	Clients/dns-sd.c	/^static void DNSSD_API reg_reply(DNSServiceRef sdref, const DNSServiceFlags flags, DNSServiceErrorType errorCode,$/;"	f	file:
reg_service_reply_op	mDNSShared/dnssd_ipc.h	/^    reg_service_reply_op,$/;"	e	enum:__anon110
reg_service_request	mDNSShared/dnssd_ipc.h	/^    reg_service_request,$/;"	e	enum:__anon109
reg_start	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { reg_stop = 0, reg_start } reg_state;$/;"	e	enum:__anon42
reg_state	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { reg_stop = 0, reg_start } reg_state;$/;"	t	typeref:enum:__anon42
reg_stop	mDNSCore/mDNSEmbeddedAPI.h	/^typedef enum { reg_stop = 0, reg_start } reg_state;$/;"	e	enum:__anon42
register	mDNSShared/Java/DNSSD.java	/^	public static DNSSDRegistration	register( String serviceName, String regType, int port, RegisterListener listener)$/;"	m	class:DNSSD
register	mDNSShared/Java/DNSSD.java	/^	public static DNSSDRegistration	register( int flags, int ifIndex, String serviceName, String regType,$/;"	m	class:DNSSD
registerRecord	mDNSShared/Java/DNSSD.java	/^	public DNSRecord	registerRecord( int flags, int ifIndex, String fullname, int rrtype,$/;"	m	class:AppleRecordRegistrar
registerRecord	mDNSShared/Java/DNSSDRecordRegistrar.java	/^	public DNSRecord	registerRecord( int flags, int ifIndex, String fullname, int rrtype, $/;"	m	interface:DNSSDRecordRegistrar
register_service	mDNSMacOSX/helper-main.c	/^static mach_port_t register_service(const char *service_name)$/;"	f	file:
register_service_instance	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus register_service_instance(request_state *request, const domainname *domain)$/;"	f
registeredLoopback4	mDNSWindows/mDNSWin32.h	/^	mDNSBool					registeredLoopback4;$/;"	m	struct:mDNS_PlatformSupport_struct
registered_record_entry	mDNSShared/uds_daemon.c	/^typedef struct registered_record_entry$/;"	s	file:
registered_record_entry	mDNSShared/uds_daemon.c	/^} registered_record_entry;$/;"	t	typeref:struct:registered_record_entry	file:
registration	Clients/Java/SimpleChat.java	/^	DNSSDRegistration	registration;		\/\/ object that maintains our connection advertisement$/;"	f	class:SimpleChat
regrec_client_context	mDNSShared/uds_daemon.c	/^    client_context_t regrec_client_context;$/;"	m	struct:registered_record_entry	file:
regrecord_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void regrecord_callback(mDNS *const m, AuthRecord *rr, mStatus result)$/;"	f
regs	mDNSMacOSX/daemon.c	/^    ServiceInstance *regs;$/;"	m	struct:DNSServiceRegistration	file:
regservice_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void regservice_callback(mDNS *const m, ServiceRecordSet *const srs, mStatus result)$/;"	f
regservice_termination_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void regservice_termination_callback(request_state *request)$/;"	f
regtype	mDNSMacOSX/daemon.c	/^    char regtype[MAX_ESCAPED_DOMAIN_NAME]; \/\/ for use in AllocateSubtypes$/;"	m	struct:DNSServiceRegistration	file:
regtype	mDNSShared/uds_daemon.c	/^            domainname regtype;$/;"	m	struct:request_state::__anon124::__anon125	file:
release_request	mDNSShared/dnssd_ipc.h	/^    release_request,$/;"	e	enum:__anon109
remove	mDNSShared/Java/DNSRecord.java	/^	void			remove()$/;"	m	interface:DNSRecord
remove	mDNSShared/Java/DNSSD.java	/^	public void			remove()$/;"	m	class:AppleDNSRecord
remove	mDNSShared/Java/TXTRecord.java	/^	public int	remove( String key)$/;"	m	class:TXTRecord
removeCache	Clients/Java/BrowserApp.java	/^	protected Vector	removeCache;	\/\/ list of serviceNames to remove$/;"	f	class:BrowserListModel
removeCachedPeerRecords	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void removeCachedPeerRecords(mDNS *const m, mDNSu32 ifindex, mDNSAddr *ap)$/;"	f
removeSA	mDNSMacOSX/helper.c	/^removeSA(int s, struct sockaddr *src, struct sockaddr *dst)$/;"	f	file:
remove_extra	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus remove_extra(const request_state *const request, service_instance *const serv, mDNSu16 *const rrtype)$/;"	f
remove_record	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus remove_record(request_state *request)$/;"	f
remove_record_request	mDNSShared/dnssd_ipc.h	/^    remove_record_request,$/;"	e	enum:__anon109
renameonmemfree	mDNSMacOSX/daemon.c	/^    mDNSBool renameonmemfree;   \/\/ Set if we just got a name conflict and now need to automatically pick a new name$/;"	m	struct:ServiceInstance	file:
renameonmemfree	mDNSShared/uds_daemon.c	/^    mDNSBool renameonmemfree;       \/\/ Set on config change when we deregister original name$/;"	m	struct:service_instance	file:
rep	mDNSMacOSX/helper-main.c	/^    union __ReplyUnion__proxy_helper_subsystem rep;$/;"	m	union:max_msg_size	typeref:union:max_msg_size::__ReplyUnion__proxy_helper_subsystem	file:
replies	mDNSShared/uds_daemon.c	/^    struct reply_state *replies;    \/\/ corresponding (active) reply list$/;"	m	struct:request_state	typeref:struct:request_state::reply_state	file:
reply	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSMessage       *reply;$/;"	m	struct:tcpInfo_t
reply	mDNSMacOSX/DNSProxySupport.c	/^    DNSMessage  *reply;$/;"	m	struct:__anon143	file:
replyLen	mDNSCore/mDNSEmbeddedAPI.h	/^    int replyLen;$/;"	m	struct:tcpLNTInfo_struct
replyLen	mDNSMacOSX/DNSProxySupport.c	/^    mDNSu16     replyLen;$/;"	m	struct:__anon143	file:
reply_hdr	mDNSShared/uds_daemon.c	/^} reply_hdr;$/;"	t	typeref:struct:__anon132	file:
reply_op_t	mDNSShared/dnssd_ipc.h	/^} reply_op_t;$/;"	t	typeref:enum:__anon110
reply_state	mDNSShared/uds_daemon.c	/^typedef struct reply_state$/;"	s	file:
reply_state	mDNSShared/uds_daemon.c	/^} reply_state;$/;"	t	typeref:struct:reply_state	file:
replylen	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 replylen;$/;"	m	struct:tcpInfo_t
reportStatusFunc	mDNSWindows/mDNSWin32.h	/^	ReportStatusFunc			reportStatusFunc;$/;"	m	struct:mDNS_PlatformSupport_struct
req	mDNSMacOSX/helper-main.c	/^    union __RequestUnion__proxy_helper_subsystem req;$/;"	m	union:max_msg_size	typeref:union:max_msg_size::__RequestUnion__proxy_helper_subsystem	file:
req_A	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool req_A;             \/\/ If set, send v4 query (DNSConfig allows A queries)$/;"	m	struct:DNSServer
req_AAAA	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool req_AAAA;          \/\/ If set, send v6 query (DNSConfig allows AAAA queries)$/;"	m	struct:DNSServer
req_DO	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool req_DO;            \/\/ If set, okay to send DNSSEC queries (EDNS DO bit is supported)$/;"	m	struct:DNSServer
req_termination_fn	mDNSShared/uds_daemon.c	/^typedef void (*req_termination_fn)(request_state *request);$/;"	t	file:
request	mDNSCore/mDNSEmbeddedAPI.h	/^    DNSMessage request;$/;"	m	struct:tcpInfo_t
request	mDNSShared/uds_daemon.c	/^    request_state *request;$/;"	m	struct:registered_record_entry	file:
request	mDNSShared/uds_daemon.c	/^    request_state *request;$/;"	m	struct:service_instance	file:
requestFlags	mDNSCore/dnsproxy.c	/^    mDNSOpaque16 requestFlags;      \/\/ second 16 bit word in the DNSMessageHeader of the request$/;"	m	struct:DNSProxyClient_struct	file:
requestLen	mDNSCore/mDNSEmbeddedAPI.h	/^    int requestLen;$/;"	m	struct:tcpInfo_t
requestLen	mDNSCore/mDNSEmbeddedAPI.h	/^    int requestLen;$/;"	m	struct:tcpLNTInfo_struct
request_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void request_callback(int fd, short filter, void *info)$/;"	f
request_op_none	mDNSShared/dnssd_ipc.h	/^    request_op_none = 0,    \/\/ No request yet received on this connection$/;"	e	enum:__anon109
request_op_t	mDNSShared/dnssd_ipc.h	/^} request_op_t;$/;"	t	typeref:enum:__anon109
request_state	mDNSShared/uds_daemon.c	/^struct request_state$/;"	s	file:
request_state	mDNSShared/uds_daemon.c	/^typedef struct request_state request_state;$/;"	t	typeref:struct:request_state	file:
require	mDNSShared/DebugServices.h	731;"	d
require	mDNSShared/DebugServices.h	734;"	d
require	mDNSVxWorks/mDNSVxWorksIPv4Only.c	164;"	d	file:
require_action	mDNSShared/DebugServices.h	985;"	d
require_action	mDNSShared/DebugServices.h	988;"	d
require_action	mDNSVxWorks/mDNSVxWorksIPv4Only.c	171;"	d	file:
require_action_expect	mDNSShared/DebugServices.h	1120;"	d
require_action_expect	mDNSShared/DebugServices.h	1133;"	d
require_action_quiet	mDNSShared/DebugServices.h	1012;"	d
require_action_quiet	mDNSShared/DebugServices.h	1015;"	d
require_action_quiet	mDNSVxWorks/mDNSVxWorksIPv4Only.c	172;"	d	file:
require_action_quiet_expect	mDNSShared/DebugServices.h	1121;"	d
require_action_quiet_expect	mDNSShared/DebugServices.h	1134;"	d
require_action_string	mDNSShared/DebugServices.h	1040;"	d
require_action_string	mDNSShared/DebugServices.h	1043;"	d
require_action_string	mDNSVxWorks/mDNSVxWorksIPv4Only.c	173;"	d	file:
require_action_string_expect	mDNSShared/DebugServices.h	1122;"	d
require_action_string_expect	mDNSShared/DebugServices.h	1135;"	d
require_action_with_log	Clients/PrinterSetupWizard/Logger.h	51;"	d
require_errno	mDNSVxWorks/mDNSVxWorksIPv4Only.c	174;"	d	file:
require_errno_action	mDNSVxWorks/mDNSVxWorksIPv4Only.c	175;"	d	file:
require_expect	mDNSShared/DebugServices.h	1111;"	d
require_expect	mDNSShared/DebugServices.h	1124;"	d
require_noerr	mDNSShared/DebugServices.h	810;"	d
require_noerr	mDNSShared/DebugServices.h	813;"	d
require_noerr	mDNSVxWorks/mDNSVxWorksIPv4Only.c	167;"	d	file:
require_noerr_action	mDNSShared/DebugServices.h	928;"	d
require_noerr_action	mDNSShared/DebugServices.h	931;"	d
require_noerr_action	mDNSVxWorks/mDNSVxWorksIPv4Only.c	169;"	d	file:
require_noerr_action_expect	mDNSShared/DebugServices.h	1118;"	d
require_noerr_action_expect	mDNSShared/DebugServices.h	1131;"	d
require_noerr_action_quiet	mDNSShared/DebugServices.h	958;"	d
require_noerr_action_quiet	mDNSShared/DebugServices.h	961;"	d
require_noerr_action_quiet	mDNSVxWorks/mDNSVxWorksIPv4Only.c	170;"	d	file:
require_noerr_action_quiet_expect	mDNSShared/DebugServices.h	1119;"	d
require_noerr_action_quiet_expect	mDNSShared/DebugServices.h	1132;"	d
require_noerr_action_string	mDNSShared/DebugServices.h	872;"	d
require_noerr_action_string	mDNSShared/DebugServices.h	875;"	d
require_noerr_action_string_expect	mDNSShared/DebugServices.h	1116;"	d
require_noerr_action_string_expect	mDNSShared/DebugServices.h	1129;"	d
require_noerr_expect	mDNSShared/DebugServices.h	1114;"	d
require_noerr_expect	mDNSShared/DebugServices.h	1127;"	d
require_noerr_quiet	mDNSShared/DebugServices.h	902;"	d
require_noerr_quiet	mDNSShared/DebugServices.h	905;"	d
require_noerr_quiet	mDNSVxWorks/mDNSVxWorksIPv4Only.c	168;"	d	file:
require_noerr_quiet_expect	mDNSShared/DebugServices.h	1117;"	d
require_noerr_quiet_expect	mDNSShared/DebugServices.h	1130;"	d
require_noerr_string	mDNSShared/DebugServices.h	841;"	d
require_noerr_string	mDNSShared/DebugServices.h	844;"	d
require_noerr_string_expect	mDNSShared/DebugServices.h	1115;"	d
require_noerr_string_expect	mDNSShared/DebugServices.h	1128;"	d
require_noerr_with_log	Clients/PrinterSetupWizard/Logger.h	37;"	d
require_quiet	mDNSShared/DebugServices.h	784;"	d
require_quiet	mDNSShared/DebugServices.h	787;"	d
require_quiet	mDNSVxWorks/mDNSVxWorksIPv4Only.c	166;"	d	file:
require_quiet_expect	mDNSShared/DebugServices.h	1113;"	d
require_quiet_expect	mDNSShared/DebugServices.h	1126;"	d
require_string	mDNSShared/DebugServices.h	758;"	d
require_string	mDNSShared/DebugServices.h	761;"	d
require_string	mDNSVxWorks/mDNSVxWorksIPv4Only.c	165;"	d	file:
require_string_expect	mDNSShared/DebugServices.h	1112;"	d
require_string_expect	mDNSShared/DebugServices.h	1125;"	d
require_throw	mDNSShared/DebugServices.h	1069;"	d
resGroupID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 resGroupID;         \/\/ ID of the resolver group that contains this DNSServer$/;"	m	struct:DNSServer
rescheduled	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    int rescheduled;$/;"	m	struct:mDNS_PlatformSupport_struct
reserved	mDNSMacOSX/helper.c	/^    u_int32_t reserved;$/;"	m	struct:vpnctl_hdr_struct	file:
resolve	mDNSShared/Java/DNSSD.java	/^	public static DNSSDService	resolve( int flags, int ifIndex, String serviceName, String regType,$/;"	m	class:DNSSD
resolve	mDNSShared/uds_daemon.c	/^        } resolve;$/;"	m	union:request_state::__anon124	typeref:struct:request_state::__anon124::__anon131	file:
resolveCallback	mDNSMacOSX/DNSServiceDiscovery.c	/^        DNSServiceResolverReply resolveCallback;$/;"	m	union:a_requests::__anon151	file:
resolve_reply	Clients/dns-sd.c	/^static void DNSSD_API resolve_reply(DNSServiceRef sdref, const DNSServiceFlags flags, uint32_t ifIndex, DNSServiceErrorType errorCode,$/;"	f	file:
resolve_reply_op	mDNSShared/dnssd_ipc.h	/^    resolve_reply_op,$/;"	e	enum:__anon110
resolve_request	mDNSShared/dnssd_ipc.h	/^    resolve_request,$/;"	e	enum:__anon109
resolve_result_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void resolve_result_callback(mDNS *const m, DNSQuestion *question, const ResourceRecord *const answer, QC_result AddRecord)$/;"	f
resolve_termination_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void resolve_termination_callback(request_state *request)$/;"	f
resolver	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private Bonjour.DNSSDService        resolver = null;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
resolver	Clients/Java/SimpleChat.java	/^	DNSSDService		resolver;			\/\/ object that resolves other chat clients$/;"	f	class:SimpleChat
resolver4	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	DNSServiceRef		resolver4;$/;"	m	struct:Query	file:
resolver6	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	DNSServiceRef		resolver6;$/;"	m	struct:Query	file:
resolving	Clients/PrinterSetupWizard/UtilTypes.h	/^    unsigned resolving;$/;"	m	struct:PrinterSetupWizard::Printer
responseFlags	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSOpaque16 responseFlags;             \/\/ Temporary place holder for the error we get back from the DNS server$/;"	m	struct:DNSQuestion_struct
responseFlags	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSOpaque16 responseFlags;         \/\/ Second 16 bit in the DNS response$/;"	m	struct:CacheRecord_struct
resrec	mDNSCore/mDNSEmbeddedAPI.h	/^    ResourceRecord resrec;              \/\/ 36 bytes when compiling for 32-bit; 48 when compiling for 64-bit$/;"	m	struct:AuthRecord_struct
resrec	mDNSCore/mDNSEmbeddedAPI.h	/^    ResourceRecord resrec;              \/\/ 36 bytes when compiling for 32-bit; 48 when compiling for 64-bit$/;"	m	struct:CacheRecord_struct
result	mDNSMacOSX/daemon.c	/^    domainname result;$/;"	m	struct:DNSServiceBrowserResult_struct	file:
result	mDNSMacOSX/helper.c	/^    u_int16_t result;$/;"	m	struct:vpnctl_hdr_struct	file:
result	mDNSWindows/Poll.c	/^	DWORD					result;$/;"	m	struct:Worker_struct	file:
resultType	mDNSMacOSX/daemon.c	/^    int resultType;$/;"	m	struct:DNSServiceBrowserResult_struct	file:
result_map	mDNSPosix/nss_mdns.c	/^typedef struct result_map$/;"	s	file:
result_map_t	mDNSPosix/nss_mdns.c	/^} result_map_t;$/;"	t	typeref:struct:result_map	file:
results	mDNSMacOSX/daemon.c	/^    DNSServiceBrowserResult *results;$/;"	m	struct:DNSServiceBrowser_struct	file:
retransDO	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool retransDO;         \/\/ Total Retransmissions for queries sent with DO option$/;"	m	struct:DNSServer
retries	mDNSCore/mDNSEmbeddedAPI.h	/^    int retries;                        \/\/ number of times we've tried to do this port mapping$/;"	m	struct:tcpLNTInfo_struct
retryGetAddr	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 retryGetAddr;                       \/\/ absolute time when we retry for NAT-PMP & UPnP\/IGD external address request$/;"	m	struct:mDNS_struct
retryInterval	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 retryInterval;                          \/\/ Current interval, between last packet we sent and the next one$/;"	m	struct:NATTraversalInfo_struct
retryIntervalGetAddr	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 retryIntervalGetAddr;               \/\/ delta between time sent and retry for NAT-PMP & UPnP\/IGD external address request$/;"	m	struct:mDNS_struct
retryPortMap	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 retryPortMap;                           \/\/ If Protocol is nonzero, time to send our next mapping packet$/;"	m	struct:NATTraversalInfo_struct
revertAnonymousRacoonConfiguration	mDNSMacOSX/helper.c	/^revertAnonymousRacoonConfiguration(const char* dir)$/;"	f	file:
revname	mDNSPosix/NetMonitor.c	/^    domainname revname;$/;"	m	struct:__anon19	file:
rfc3110_import	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal SecKeyRef rfc3110_import(const mDNSu8 *data, const mDNSu32 len)$/;"	f
rhdr	mDNSShared/uds_daemon.c	/^    reply_hdr rhdr[1];$/;"	m	struct:reply_state	file:
richTextBox1	Clients/SimpleChat.NET/SimpleChat.cs	/^		private System.Windows.Forms.RichTextBox richTextBox1;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
rmt_inner	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv6Addr rmt_inner;$/;"	m	struct:ClientTunnel
rmt_outer	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv4Addr rmt_outer;$/;"	m	struct:ClientTunnel
rmt_outer6	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv6Addr rmt_outer6;$/;"	m	struct:ClientTunnel
rmt_outer_port	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort rmt_outer_port;$/;"	m	struct:ClientTunnel
routeSeq	mDNSMacOSX/helper.c	/^static unsigned int routeSeq = 1;$/;"	v	file:
rp	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataRP rp;             \/\/ This is large; not included in the normal RDataBody definition$/;"	m	union:__anon58
rr	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord       *rr;         \/\/ For record updates$/;"	m	struct:tcpInfo_t
rr	mDNSShared/dnsextd.h	/^    CacheRecord rr;           \/\/ last field in struct allows for allocation of oversized RRs$/;"	m	struct:RRTableElem
rr	mDNSShared/uds_daemon.c	/^    AuthRecord *rr;             \/\/ Pointer to variable-sized AuthRecord (Why a pointer? Why not just embed it here?)$/;"	m	struct:registered_record_entry	file:
rrBufferSize	mDNSMacOSX/mDNSMacOSX.c	/^    uint32_t rrBufferSize;            \/\/ number of bytes of RR records$/;"	m	struct:__anon154	file:
rrRecords	mDNSMacOSX/mDNSMacOSX.c	/^    FatPtr rrRecords;                 \/\/ address of array of pointers to the rr records$/;"	m	struct:__anon154	file:
rr_to_af	mDNSPosix/nss_mdns.c	/^rr_to_af (ns_type_t rrtype)$/;"	f
rrauth	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthHash rrauth;$/;"	m	struct:mDNS_struct
rrauth_free	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthEntity *rrauth_free;$/;"	m	struct:__anon76
rrauth_hash	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthGroup *rrauth_hash[AUTH_HASH_SLOTS];$/;"	m	struct:__anon76
rrauth_lock	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 rrauth_lock;                 \/\/ For debugging: Set at times when these lists may not be modified$/;"	m	struct:__anon76
rrauth_report	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 rrauth_report;$/;"	m	struct:__anon76
rrauth_size	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 rrauth_size;                \/\/ Total number of available auth entries$/;"	m	struct:__anon76
rrauth_tail	mDNSCore/mDNSEmbeddedAPI.h	/^    AuthRecord    **rrauth_tail;        \/\/ Tail end of that list$/;"	m	struct:AuthGroup_struct
rrauth_totalused	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 rrauth_totalused;           \/\/ Number of auth entries currently occupied$/;"	m	struct:__anon76
rrcache_active	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 rrcache_active;             \/\/ Number of cache entries currently occupied by records that answer active questions$/;"	m	struct:mDNS_struct
rrcache_free	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheEntity *rrcache_free;$/;"	m	struct:mDNS_struct
rrcache_hash	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheGroup *rrcache_hash[CACHE_HASH_SLOTS];$/;"	m	struct:mDNS_struct
rrcache_nextcheck	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 rrcache_nextcheck[CACHE_HASH_SLOTS];$/;"	m	struct:mDNS_struct
rrcache_report	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 rrcache_report;$/;"	m	struct:mDNS_struct
rrcache_size	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 rrcache_size;               \/\/ Total number of available cache entries$/;"	m	struct:mDNS_struct
rrcache_tail	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheRecord   **rrcache_tail;       \/\/ Tail end of that list$/;"	m	struct:CacheGroup_struct
rrcache_tail	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheRecord   **rrcache_tail;$/;"	m	struct:CacheGroup_base
rrcache_totalused	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 rrcache_totalused;          \/\/ Number of cache entries currently occupied$/;"	m	struct:mDNS_struct
rrcache_totalused_unicast	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 rrcache_totalused_unicast;  \/\/ Number of cache entries currently occupied by unicast$/;"	m	struct:mDNS_struct
rrcachestorage	mDNSMacOS9/Mac OS Test Searcher.c	/^static CacheEntity rrcachestorage[RR_CACHE_SIZE];$/;"	v	file:
rrcachestorage	mDNSMacOS9/mDNSLibrary.c	/^static CacheEntity rrcachestorage[RR_CACHE_SIZE];$/;"	v	file:
rrcachestorage	mDNSMacOSX/daemon.c	/^static CacheEntity rrcachestorage[RR_CACHE_SIZE];$/;"	v	file:
rrclass	mDNSCore/dnssec.h	/^    mDNSu16 rrclass;$/;"	m	struct:RRVerifier_struct
rrclass	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 rrclass;$/;"	m	struct:ResourceRecord_struct
rroriginalttl	mDNSCore/dnssec.h	/^    mDNSu32 rroriginalttl;$/;"	m	struct:RRVerifier_struct
rroriginalttl	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 rroriginalttl;              \/\/ In seconds$/;"	m	struct:ResourceRecord_struct
rrset	mDNSCore/dnssec.h	/^	RRVerifier *rrset;		\/\/ RRSET that is authenticated$/;"	m	struct:AuthChain_struct
rrset	mDNSCore/dnssec.h	/^    RRVerifier *rrset;              \/\/ rrset for which we have to verify$/;"	m	struct:DNSSECVerifier_struct
rrsig	mDNSCore/dnssec.h	/^	RRVerifier *rrsig;		\/\/ Signature for that RRSET$/;"	m	struct:AuthChain_struct
rrsig	mDNSCore/dnssec.h	/^    RRVerifier *rrsig;              \/\/ RRSIG for rrset$/;"	m	struct:DNSSECVerifier_struct
rrsig	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataRRSig rrsig;$/;"	m	union:__anon58
rrsigKey	mDNSCore/dnssec.h	/^    RRVerifier *rrsigKey;           \/\/ RRSIG for DNSKEY$/;"	m	struct:DNSSECVerifier_struct
rrtype	mDNSCore/dnssec.c	/^    mDNSu16 rrtype;$/;"	m	struct:__anon104	file:
rrtype	mDNSCore/dnssec.h	/^    mDNSu16 rrtype;$/;"	m	struct:RRVerifier_struct
rrtype	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 rrtype;$/;"	m	struct:ResourceRecord_struct
rsa_sha_add	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus rsa_sha_add(AlgContext *ctx, const void *data, mDNSu32 len)$/;"	f
rsa_sha_create	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus rsa_sha_create(AlgContext *ctx)$/;"	f
rsa_sha_destroy	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus rsa_sha_destroy(AlgContext *ctx)$/;"	f
rsa_sha_funcs	mDNSMacOSX/CryptoSupport.c	/^AlgFuncs rsa_sha_funcs = {rsa_sha_create, rsa_sha_destroy, rsa_sha_len, rsa_sha_add, rsa_sha_verify, mDNSNULL, mDNSNULL};$/;"	v
rsa_sha_len	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mDNSu32 rsa_sha_len(AlgContext *ctx)$/;"	f
rsa_sha_verify	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus rsa_sha_verify(AlgContext *ctx, mDNSu8 *key, mDNSu32 keylen, mDNSu8 *signature, mDNSu32 siglen)$/;"	f
run	Clients/Java/BrowserApp.java	/^	public void	run()$/;"	m	class:BrowserListModel
run	Clients/Java/BrowserApp.java	/^	public void run()$/;"	m	class:BrowserApp
run	Clients/Java/DNSSDUnitTest.java	/^	public void	run() throws DNSSDException$/;"	m	class:DNSSDUnitTest
run	Clients/Java/SimpleChat.java	/^	public void		run()		\/\/ invoked on event thread when inbound packet arrives$/;"	m	class:SimpleChat
run	Clients/Java/SimpleChat.java	/^	public void		run()$/;"	m	class:ListenerThread
run	Clients/Java/SwingBrowseListener.java	/^	public void		run()$/;"	m	class:SwingBrowseListener
run	Clients/Java/SwingDomainListener.java	/^	public void		run()$/;"	m	class:SwingDomainListener
run	Clients/Java/SwingQueryListener.java	/^	public void		run()$/;"	m	class:SwingQueryListener
run	mDNSShared/Java/DNSSD.java	/^	public void		run()$/;"	m	class:AppleService
s	mDNSShared/dnssd_clientshim.c	/^    ServiceRecordSet s;$/;"	m	struct:__anon118	file:
sCollator	Clients/Java/BrowserApp.java	/^	protected static Collator	sCollator;$/;"	f	class:BrowserListModel
sLaunchdDictKey	mDNSMacOSX/BonjourEvents.c	/^static const CFStringRef sLaunchdDictKey         = CFSTR("LaunchdDict");$/;"	v	file:
sLaunchdTokenKey	mDNSMacOSX/BonjourEvents.c	/^static const CFStringRef sLaunchdTokenKey        = CFSTR("LaunchdToken");$/;"	v	file:
sOnServiceAddKey	mDNSMacOSX/BonjourEvents.c	/^static const CFStringRef sOnServiceAddKey        = CFSTR("OnServiceAdd");$/;"	v	file:
sOnServiceRemoveKey	mDNSMacOSX/BonjourEvents.c	/^static const CFStringRef sOnServiceRemoveKey     = CFSTR("OnServiceRemove");$/;"	v	file:
sPluginIdentifier	mDNSMacOSX/BonjourEvents.c	/^static const char*          sPluginIdentifier       = "com.apple.bonjour.events";$/;"	v	file:
sServiceDomainKey	mDNSMacOSX/BonjourEvents.c	/^static const CFStringRef sServiceDomainKey       = CFSTR("ServiceDomain");$/;"	v	file:
sServiceNameKey	mDNSMacOSX/BonjourEvents.c	/^static const CFStringRef sServiceNameKey         = CFSTR("ServiceName");$/;"	v	file:
sServiceTypeKey	mDNSMacOSX/BonjourEvents.c	/^static const CFStringRef sServiceTypeKey         = CFSTR("ServiceType");$/;"	v	file:
sa_family	mDNSMacOSX/mDNSMacOSX.h	/^    u_short sa_family;$/;"	m	struct:NetworkInterfaceInfoOSX_struct
salt	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 salt;$/;"	m	struct:__anon72
saveac	mDNSCore/dnssec.h	/^    AuthChain *saveac;$/;"	m	struct:DNSSECVerifier_struct
sc1	Clients/dns-sd.c	/^static DNSServiceRef sc1, sc2, sc3;     \/\/ DNSServiceRefs for kDNSServiceFlagsShareConnection testing$/;"	v	file:
sc2	Clients/dns-sd.c	/^static DNSServiceRef sc1, sc2, sc3;     \/\/ DNSServiceRefs for kDNSServiceFlagsShareConnection testing$/;"	v	file:
sc3	Clients/dns-sd.c	/^static DNSServiceRef sc1, sc2, sc3;     \/\/ DNSServiceRefs for kDNSServiceFlagsShareConnection testing$/;"	v	file:
schedule	Clients/Java/SwingBrowseListener.java	/^	protected void	schedule()$/;"	m	class:SwingBrowseListener
schedule	Clients/Java/SwingDomainListener.java	/^	protected void	schedule()$/;"	m	class:SwingDomainListener
schedule	Clients/Java/SwingQueryListener.java	/^	protected void	schedule()$/;"	m	class:SwingQueryListener
scheduleOnEventThread	Clients/Java/BrowserApp.java	/^	protected void	scheduleOnEventThread()$/;"	m	class:BrowserListModel
scopeID	mDNSVxWorks/mDNSVxWorks.h	/^    mDNSu32 scopeID;                                \/\/ Interface index \/ IPv6 scope ID.$/;"	m	struct:NetworkInterfaceInfoVxWorks
scopeID	mDNSWindows/mDNSWin32.h	/^	uint32_t					scopeID;$/;"	m	struct:mDNSInterfaceData
scope_id	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSu32 scope_id;                           \/\/ interface index \/ IPv6 scope ID$/;"	m	struct:NetworkInterfaceInfoOSX_struct
scoped	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 scoped;             \/\/ See the scoped enum above$/;"	m	struct:DNSServer
sd	mDNSShared/dnsextd.c	/^    int sd;$/;"	m	struct:__anon111	file:
sd	mDNSShared/uds_daemon.c	/^    dnssd_sock_t sd;$/;"	m	struct:request_state	file:
sdRef	mDNSMacOS9/Responder.c	/^    DNSServiceRef sdRef;$/;"	m	struct:RegisteredService_struct	file:
sdRef	mDNSMacOS9/Searcher.c	/^    DNSServiceRef sdRef;$/;"	m	struct:__anon187	file:
sdr	mDNSShared/dnssd_clientstub.c	/^    DNSServiceOp *sdr;$/;"	m	struct:_DNSRecordRef_t	file:
sendButton	Clients/Java/SimpleChat.java	/^	JButton				sendButton;			\/\/ Will send text in inputField to target$/;"	f	class:SimpleChat
sendChallengeResponse	mDNSCore/uDNS.c	/^mDNSlocal void sendChallengeResponse(mDNS *const m, DNSQuestion *const q, const LLQOptData *llq)$/;"	f
sendErrorCounter	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    int sendErrorCounter;$/;"	m	struct:MDNSInterfaceItem	file:
sendLLQRefresh	mDNSCore/uDNS.c	/^mDNSexport void sendLLQRefresh(mDNS *m, DNSQuestion *q)$/;"	f
sendMulticastCounter	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    int sendMulticastCounter;$/;"	m	struct:MDNSInterfaceItem	file:
sendPolicy	mDNSMacOSX/helper.c	/^sendPolicy(int s, int setup,$/;"	f	file:
sendUnicastCounter	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    int sendUnicastCounter;$/;"	m	struct:MDNSInterfaceItem	file:
send_all	mDNSShared/uds_daemon.c	/^mDNSlocal void send_all(dnssd_sock_t s, const char *ptr, int len)$/;"	f
send_bpf	mDNSShared/dnssd_ipc.h	/^    send_bpf,               \/\/ New in SL$/;"	e	enum:__anon109
send_msg	mDNSShared/uds_daemon.c	/^mDNSlocal int send_msg(request_state *const req)$/;"	f
sendingSocketRef	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^    MDNSSocketRef sendingSocketRef;$/;"	m	struct:MDNSInterfaceItem	file:
sentNATPMP	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool sentNATPMP;                            \/\/ Whether we just sent a NAT-PMP packet, so we won't send another if$/;"	m	struct:NATTraversalInfo_struct
seq	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs8 seq;             \/\/ Sleep\/wake epoch$/;"	m	struct:__anon54
seq	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 seq;$/;"	m	struct:__anon47
servAddr	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr servAddr;                      \/\/ Address and port learned from _dns-llq, _dns-llq-tls or _dns-query-tls SRV query$/;"	m	struct:DNSQuestion_struct
servPort	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort servPort;$/;"	m	struct:DNSQuestion_struct
service	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^        private Bonjour.DNSSDService        service = null;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
service	mDNSMacOSX/PreferencePane/DNSServiceDiscoveryPref.h	/^    DNSServiceRef service;$/;"	m	struct:MyDNSServiceState
serviceBrowser	Clients/Java/BrowserApp.java	/^	DNSSDService		servicesBrowser, serviceBrowser, domainBrowser;$/;"	f	class:BrowserApp
serviceFound	Clients/Java/BrowserApp.java	/^	public void	serviceFound( DNSSDService browser, int flags, int ifIndex, $/;"	m	class:BrowserListModel
serviceFound	Clients/Java/BrowserApp.java	/^	public void	serviceFound( DNSSDService browser, int flags, int ifIndex, $/;"	m	class:ServicesBrowserListModel
serviceFound	Clients/Java/DNSSDUnitTest.java	/^	public void	serviceFound( DNSSDService browser, int flags, int ifIndex, $/;"	m	class:BrowseTest
serviceFound	Clients/Java/SimpleChat.java	/^	public void	serviceFound( DNSSDService browser, int flags, int ifIndex, $/;"	m	class:TargetListModel
serviceFound	Clients/Java/SwingBrowseListener.java	/^	public void	serviceFound( DNSSDService browser, int flags, int ifIndex, $/;"	m	class:SwingBrowseListener
serviceFound	mDNSShared/Java/BrowseListener.java	/^	void	serviceFound( DNSSDService browser, int flags, int ifIndex, $/;"	m	interface:BrowseListener
serviceID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 serviceID;$/;"	m	struct:DNSServer
serviceID	mDNSPosix/Responder.c	/^    int serviceID;$/;"	m	struct:PosixService	file:
serviceList	Clients/Java/BrowserApp.java	/^	BrowserListModel	servicesList, serviceList;$/;"	f	class:BrowserApp
serviceLost	Clients/Java/BrowserApp.java	/^	public void	serviceLost( DNSSDService browser, int flags, int ifIndex, $/;"	m	class:ServicesBrowserListModel
serviceLost	Clients/Java/BrowserApp.java	/^	public void	serviceLost( DNSSDService browser, int flags, int ifIndex,$/;"	m	class:BrowserListModel
serviceLost	Clients/Java/DNSSDUnitTest.java	/^	public void	serviceLost( DNSSDService browser, int flags, int ifIndex,$/;"	m	class:BrowseTest
serviceLost	Clients/Java/SimpleChat.java	/^	public void	serviceLost( DNSSDService browser, int flags, int ifIndex, $/;"	m	class:TargetListModel
serviceLost	Clients/Java/SwingBrowseListener.java	/^	public void	serviceLost( DNSSDService browser, int flags, int ifIndex,$/;"	m	class:SwingBrowseListener
serviceLost	mDNSShared/Java/BrowseListener.java	/^	void	serviceLost( DNSSDService browser, int flags, int ifIndex,$/;"	m	interface:BrowseListener
servicePane	Clients/Java/BrowserApp.java	/^	JList				domainPane, servicesPane, servicePane;$/;"	f	class:BrowserApp
serviceRef	Clients/PrinterSetupWizard/UtilTypes.h	/^    DNSServiceRef serviceRef;$/;"	m	struct:PrinterSetupWizard::Service
serviceRegistered	Clients/Java/DNSSDUnitTest.java	/^	public void	serviceRegistered( DNSSDRegistration registration, int flags, String serviceName, $/;"	m	class:DupRegTest
serviceRegistered	Clients/Java/DNSSDUnitTest.java	/^	public void	serviceRegistered( DNSSDRegistration registration, int flags, String serviceName, $/;"	m	class:RegTest
serviceRegistered	Clients/Java/SimpleChat.java	/^	public void	serviceRegistered( DNSSDRegistration registration, int flags, $/;"	m	class:SimpleChat
serviceRegistered	mDNSShared/Java/RegisterListener.java	/^	void	serviceRegistered( DNSSDRegistration registration, int flags, String serviceName, $/;"	m	interface:RegisterListener
serviceResolved	Clients/Java/BrowserApp.java	/^	public void	serviceResolved( DNSSDService resolver, int flags, int ifIndex, String fullName, $/;"	m	class:BrowserApp
serviceResolved	Clients/Java/DNSSDUnitTest.java	/^	public void	serviceResolved( DNSSDService resolver, int flags, int ifIndex, String fullName, $/;"	m	class:ResolveTest
serviceResolved	Clients/Java/SimpleChat.java	/^	public void	serviceResolved( DNSSDService resolver, int flags, int ifIndex, String fullName, $/;"	m	class:SimpleChat
serviceResolved	mDNSShared/Java/ResolveListener.java	/^	void	serviceResolved( DNSSDService resolver, int flags, int ifIndex, String fullName, $/;"	m	interface:ResolveListener
serviceTextField	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.ListBox serviceTextField;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
serviceType	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	const char *		serviceType;$/;"	m	struct:KnownServiceEntry	file:
serviceType	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^	std::string		serviceType;$/;"	m	struct:ServiceTypeInfo
service_instance	mDNSShared/uds_daemon.c	/^typedef struct service_instance$/;"	s	file:
service_instance	mDNSShared/uds_daemon.c	/^} service_instance;$/;"	t	typeref:struct:service_instance	file:
serviceinfolist	mDNSMacOS9/Mac OS Test Searcher.c	/^	OTLIFO serviceinfolist;$/;"	m	struct:__anon181	file:
serviceinfolist	mDNSMacOS9/Searcher.c	/^    OTLIFO serviceinfolist;$/;"	m	struct:__anon186	file:
servicereg	mDNSShared/uds_daemon.c	/^        } servicereg;$/;"	m	union:request_state::__anon124	typeref:struct:request_state::__anon124::__anon126	file:
services	Clients/PrinterSetupWizard/UtilTypes.h	/^    Services services;$/;"	m	struct:PrinterSetupWizard::Printer
services	mDNSMacOS9/Mac OS Test Searcher.c	/^static SearcherServices services;$/;"	v	file:
services	mDNSMacOS9/Responder.c	/^static RegisteredService *services = NULL, **nextservice = &services;$/;"	v	file:
services	mDNSMacOS9/Searcher.c	/^    SearcherServices *services;$/;"	m	struct:__anon187	file:
services	mDNSMacOS9/Searcher.c	/^static SearcherServices services;$/;"	v	file:
servicesBrowser	Clients/Java/BrowserApp.java	/^	DNSSDService		servicesBrowser, serviceBrowser, domainBrowser;$/;"	f	class:BrowserApp
servicesList	Clients/Java/BrowserApp.java	/^	BrowserListModel	servicesList, serviceList;$/;"	f	class:BrowserApp
servicesPane	Clients/Java/BrowserApp.java	/^	JList				domainPane, servicesPane, servicePane;$/;"	f	class:BrowserApp
set	mDNSShared/Java/TXTRecord.java	/^	public void	set( String key, String value)$/;"	m	class:TXTRecord
set	mDNSShared/Java/TXTRecord.java	/^	public void	set( String key, byte[] value)$/;"	m	class:TXTRecord
setAuthRecType	mDNSCore/mDNS.c	/^mDNSlocal AuthRecType setAuthRecType(mDNSInterfaceID InterfaceID, mDNSu32 flags)$/;"	f
setTrafficClass	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void setTrafficClass(int socketfd, mDNSBool useBackgroundTrafficClass)$/;"	f
set_err	mDNSPosix/nss_mdns.c	/^set_err (result_map_t * result, nss_status status, int err, int herr)$/;"	f	file:
set_err_bad_hostname	mDNSPosix/nss_mdns.c	/^set_err_bad_hostname (result_map_t * result)$/;"	f	file:
set_err_buf_too_small	mDNSPosix/nss_mdns.c	/^set_err_buf_too_small (result_map_t * result)$/;"	f	file:
set_err_internal_resource_full	mDNSPosix/nss_mdns.c	/^set_err_internal_resource_full (result_map_t * result)$/;"	f	file:
set_err_mdns_failed	mDNSPosix/nss_mdns.c	/^set_err_mdns_failed (result_map_t * result)$/;"	f	file:
set_err_notfound	mDNSPosix/nss_mdns.c	/^set_err_notfound (result_map_t * result)$/;"	f	file:
set_err_success	mDNSPosix/nss_mdns.c	/^set_err_success (result_map_t * result)$/;"	f	file:
set_err_system	mDNSPosix/nss_mdns.c	/^set_err_system (result_map_t * result)$/;"	f	file:
set_errno_compat	mDNSShared/CommonServices.h	436;"	d
set_errno_compat	mDNSShared/CommonServices.h	448;"	d
set_peer_pid	mDNSShared/uds_daemon.c	/^mDNSlocal void set_peer_pid(request_state *request)$/;"	f
set_waitlimit	mDNSShared/dnssd_clientstub.c	/^static int set_waitlimit(dnssd_sock_t sock, int timeout)$/;"	f	file:
setdomain_request	mDNSShared/dnssd_ipc.h	/^    setdomain_request,      \/\/ Up to here is in Tiger and B4W 1.0.3$/;"	e	enum:__anon109
setlinebuf	mDNSPosix/NetMonitor.c	/^void setlinebuf( FILE * fp ) {}$/;"	f
setsupportedmap	mDNSMacOSX/pfkey.c	/^setsupportedmap(sup)$/;"	f	file:
setup	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSBool setup;$/;"	m	struct:TCPSocket_struct
setup	mDNSWindows/Poll.c	/^	mDNSBool		setup;$/;"	m	struct:Poll_struct	file:
setupSubPanes	Clients/Java/BrowserApp.java	/^	protected void	setupSubPanes( Container parent)$/;"	m	class:BrowserApp
setupSubPanes	Clients/Java/SimpleChat.java	/^	protected void	setupSubPanes( Container parent, JRootPane rootPane)$/;"	m	class:SimpleChat
setupTunnelRoute	mDNSMacOSX/helper.c	/^setupTunnelRoute(v6addr_t local, v6addr_t remote)$/;"	f	file:
sha_add	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus sha_add(AlgContext *ctx, const void *data, mDNSu32 len)$/;"	f
sha_create	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus sha_create(AlgContext *ctx)$/;"	f
sha_destroy	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus sha_destroy(AlgContext *ctx)$/;"	f
sha_final	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus sha_final(AlgContext *ctx, void *digestOut, mDNSu32 dlen)$/;"	f
sha_funcs	mDNSMacOSX/CryptoSupport.c	/^AlgFuncs sha_funcs = {sha_create, sha_destroy, sha_len, sha_add, sha_verify, mDNSNULL, sha_final};$/;"	v
sha_len	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mDNSu32 sha_len(AlgContext *ctx)$/;"	f
sha_verify	mDNSMacOSX/CryptoSupport.c	/^mDNSlocal mStatus sha_verify(AlgContext *ctx, mDNSu8 *key, mDNSu32 keylen, mDNSu8 *digestIn, mDNSu32 dlen)$/;"	f
sigExpireTime	Clients/dns-sd.c	/^    unsigned int sigExpireTime;$/;"	m	struct:__anon170	file:
sigInceptTime	Clients/dns-sd.c	/^    unsigned int sigInceptTime;$/;"	m	struct:__anon170	file:
sign	mDNSCore/DNSCommon.c	/^    char sign;              \/\/ +, - or space$/;"	m	struct:mDNSprintf_format	file:
signal_port	mDNSMacOSX/daemon.c	/^static mach_port_t signal_port       = MACH_PORT_NULL;$/;"	v	file:
signerName	Clients/dns-sd.c	/^    char signerName[256];$/;"	m	struct:__anon170	file:
simple_table_index	mDNSPosix/nss_mdns.c	/^simple_table_index (const char * table [], int size, const char * str)$/;"	f	file:
sixtyfourbits	mDNSMacOSX/mDNSMacOSX.c	/^typedef union { void *ptr; mDNSOpaque64 sixtyfourbits; } FatPtr;$/;"	m	union:__anon153	file:
size	mDNSShared/Java/TXTRecord.java	/^	public int	size()$/;"	m	class:TXTRecord
sizecheck_AuthRecord	mDNSCore/mDNSEmbeddedAPI.h	/^    char sizecheck_AuthRecord          [(sizeof(AuthRecord)           <=  1208) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
sizecheck_CacheGroup	mDNSCore/mDNSEmbeddedAPI.h	/^    char sizecheck_CacheGroup          [(sizeof(CacheGroup)           <=   232) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
sizecheck_CacheRecord	mDNSCore/mDNSEmbeddedAPI.h	/^    char sizecheck_CacheRecord         [(sizeof(CacheRecord)          <=   232) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
sizecheck_DNSQuestion	mDNSCore/mDNSEmbeddedAPI.h	/^    char sizecheck_DNSQuestion         [(sizeof(DNSQuestion)          <=   832) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
sizecheck_DNSServer	mDNSCore/mDNSEmbeddedAPI.h	/^    char sizecheck_DNSServer           [(sizeof(DNSServer)            <=   340) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
sizecheck_DomainAuthInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    char sizecheck_DomainAuthInfo      [(sizeof(DomainAuthInfo)       <=  7888) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
sizecheck_HostnameInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    char sizecheck_HostnameInfo        [(sizeof(HostnameInfo)         <=  3050) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
sizecheck_NATTraversalInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    char sizecheck_NATTraversalInfo    [(sizeof(NATTraversalInfo)     <=   200) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
sizecheck_RDataBody	mDNSCore/mDNSEmbeddedAPI.h	/^    char sizecheck_RDataBody           [(sizeof(RDataBody)            ==   264) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
sizecheck_ResourceRecord	mDNSCore/mDNSEmbeddedAPI.h	/^    char sizecheck_ResourceRecord      [(sizeof(ResourceRecord)       <=    72) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
sizecheck_SearchListElem	mDNSCore/uDNS.c	/^    char sizecheck_SearchListElem[(sizeof(SearchListElem) <=  5000) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_uDNS	file:
sizecheck_ServiceRecordSet	mDNSCore/mDNSEmbeddedAPI.h	/^    char sizecheck_ServiceRecordSet    [(sizeof(ServiceRecordSet)     <=  5540) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNS
sizecheck_browser_t	mDNSShared/uds_daemon.c	/^    char sizecheck_browser_t              [(sizeof(browser_t)               <= 1096) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_uds_daemon	file:
sizecheck_mDNS_PlatformSupport	mDNSMacOSX/mDNSMacOSX.h	/^    char sizecheck_mDNS_PlatformSupport   [(sizeof(mDNS_PlatformSupport)    <=  1378) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_mDNSMacOSX
sizecheck_registered_record_entry	mDNSShared/uds_daemon.c	/^    char sizecheck_registered_record_entry[(sizeof(registered_record_entry) <=   60) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_uds_daemon	file:
sizecheck_reply_hdr	mDNSShared/uds_daemon.c	/^    char sizecheck_reply_hdr              [(sizeof(reply_hdr)               <=   12) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_uds_daemon	file:
sizecheck_reply_state	mDNSShared/uds_daemon.c	/^    char sizecheck_reply_state            [(sizeof(reply_state)             <=   64) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_uds_daemon	file:
sizecheck_request_state	mDNSShared/uds_daemon.c	/^    char sizecheck_request_state          [(sizeof(request_state)           <= 2000) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_uds_daemon	file:
sizecheck_service_instance	mDNSShared/uds_daemon.c	/^    char sizecheck_service_instance       [(sizeof(service_instance)        <= 6552) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_uds_daemon	file:
sizecheck_tcpInfo_t	mDNSCore/uDNS.c	/^    char sizecheck_tcpInfo_t     [(sizeof(tcpInfo_t)      <=  9056) ? 1 : -1];$/;"	m	struct:CompileTimeAssertionChecks_uDNS	file:
sizeofRDataHeader	mDNSCore/mDNSEmbeddedAPI.h	1060;"	d
sizeof_array	mDNSShared/CommonServices.h	582;"	d
sizeof_element	mDNSShared/CommonServices.h	590;"	d
sizeof_field	mDNSShared/CommonServices.h	606;"	d
sizeof_string	mDNSShared/CommonServices.h	598;"	d
skip	mDNSCore/dnssec.h	/^    mDNSu8 skip;                    \/\/ labels to skip for forming the name from origName$/;"	m	struct:InsecureContext_struct
skipDomainName	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *skipDomainName(const DNSMessage *const msg, const mDNSu8 *ptr, const mDNSu8 *const end)$/;"	f
skipQuestion	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *skipQuestion(const DNSMessage *msg, const mDNSu8 *ptr, const mDNSu8 *end)$/;"	f
skipResourceRecord	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSu8 *skipResourceRecord(const DNSMessage *msg, const mDNSu8 *ptr, const mDNSu8 *end)$/;"	f
skipSameSubnetRegistration	mDNSCore/mDNS.c	/^mDNSlocal mDNSBool skipSameSubnetRegistration(mDNS *const m, mDNSInterfaceID *regID, mDNSu32 count, mDNSInterfaceID intfid)$/;"	f
sktv4	mDNSMacOSX/mDNSMacOSX.h	/^    int sktv4;$/;"	m	struct:__anon145
sktv6	mDNSMacOSX/mDNSMacOSX.h	/^    int sktv6;$/;"	m	struct:__anon145
sleep	mDNSMacOS9/mDNSMacOS9.c	/^long sleep, wake, mode;$/;"	v
sleep	mDNSShared/dnssd_clientstub.c	64;"	d	file:
smallrdatastorage	mDNSCore/mDNSEmbeddedAPI.h	/^    RData_small smallrdatastorage;      \/\/ Storage for small records is right here (4 bytes header + 68 bytes data = 72 bytes)$/;"	m	struct:CacheRecord_struct
smbFileSharing	mDNSWindows/mDNSWin32.h	/^	mDNSBool					smbFileSharing;$/;"	m	struct:mDNS_PlatformSupport_struct
smbPrintSharing	mDNSWindows/mDNSWin32.h	/^	mDNSBool					smbPrintSharing;$/;"	m	struct:mDNS_PlatformSupport_struct
smbSRS	mDNSWindows/mDNSWin32.h	/^	ServiceRecordSet			smbSRS;$/;"	m	struct:mDNS_PlatformSupport_struct
smbSubTypes	mDNSWindows/mDNSWin32.h	/^	AuthRecord					smbSubTypes[ 2 ];$/;"	m	struct:mDNS_PlatformSupport_struct
snprint	mDNSWindows/PosixCompat.h	68;"	d
snprintd	Clients/dns-sd.c	/^static int snprintd(char *p, int max, const unsigned char **rd)$/;"	f	file:
snprintf	Clients/dns-sd.c	84;"	d	file:
snprintf	mDNSWindows/loclibrary.c	42;"	d	file:
snprintf	mDNSWindows/mdnsNSP/mdnsNSP.c	40;"	d	file:
soa	mDNSCore/mDNSEmbeddedAPI.h	/^    CacheRecord    *soa;                \/\/ SOA record to return for proxy questions$/;"	m	struct:CacheRecord_struct
soa	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataSOA soa;           \/\/ This is large; not included in the normal RDataBody definition$/;"	m	union:__anon58
soa_compare	mDNSCore/dnssec.c	/^mDNSlocal int soa_compare(rdataComp *r1, rdataComp *r2)$/;"	f
sock	mDNSCore/mDNSEmbeddedAPI.h	/^    TCPSocket        *sock;$/;"	m	struct:tcpInfo_t
sock	mDNSCore/mDNSEmbeddedAPI.h	/^    TCPSocket        *sock;$/;"	m	struct:tcpLNTInfo_struct
sock	mDNSMacOSX/DNSProxySupport.c	/^    TCPSocket   sock;$/;"	m	struct:__anon143	file:
sock	mDNSShared/dnsextd.c	/^    TCPSocket *sock;           \/\/ socket connected to client$/;"	m	struct:__anon112	file:
sock	mDNSShared/dnsextd.h	/^    TCPSocket *         sock;$/;"	m	struct:EventSource
sock	mDNSWindows/mDNSWin32.h	/^	struct UDPSocket_struct		sock;$/;"	m	struct:mDNSInterfaceData	typeref:struct:mDNSInterfaceData::UDPSocket_struct
sockV4	mDNSVxWorks/mDNSVxWorks.h	/^    SocketRef sockV4;$/;"	m	struct:SocketSet
sockV6	mDNSVxWorks/mDNSVxWorks.h	/^    SocketRef sockV6;$/;"	m	struct:SocketSet
sock_ntop	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^char *  sock_ntop( const void *inAddr, size_t inAddrSize, char *inBuffer, size_t inBufferSize )$/;"	f
sock_pton	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^int sock_pton( const char *inString, int inFamily, void *outAddr, size_t inAddrSize, size_t *outAddrSize )$/;"	f
sockaddr_mdns	mDNSShared/dnssd_clientstub.c	53;"	d	file:
sockaddr_mdns	mDNSShared/dnssd_clientstub.c	89;"	d	file:
sockaddr_storage	mDNSPosix/mDNSUNP.h	49;"	d
sockaddr_storage	mDNSPosix/mDNSUNP.h	51;"	d
sockaddr_storage	mDNSShared/CommonServices.h	486;"	d
sockaddr_t	mDNSMacOSX/DNSServiceDiscoveryDefines.h	/^typedef char sockaddr_t[128];$/;"	t
socket	mDNSCore/dnsproxy.c	/^    void *socket;                   \/\/ Return socket$/;"	m	struct:DNSProxyClient_struct	file:
socket	mDNSMacOSX/PreferencePane/DNSServiceDiscoveryPref.h	/^    CFSocketRef socket;$/;"	m	struct:MyDNSServiceState
socket	mDNSWindows/Poll.c	/^		mDNSPollSocketCallback socket;$/;"	m	union:PollSource_struct::__anon11	file:
socket	mDNSWindows/Poll.c	/^	SOCKET socket;$/;"	m	struct:PollSource_struct	file:
sockfd	mDNSShared/dnssd_clientstub.c	/^    dnssd_sock_t sockfd;                \/\/ Connected socket between client and daemon$/;"	m	struct:_DNSServiceRef_t	file:
socklen_t	mDNSPosix/mDNSUNP.h	/^typedef unsigned int socklen_t;$/;"	t
socklen_t	mDNSShared/CommonServices.h	/^typedef int socklen_t;$/;"	t
socklen_t	mDNSShared/PlatformCommon.c	/^typedef unsigned int socklen_t;$/;"	t	file:
socklen_t	mDNSShared/uds_daemon.c	/^    typedef unsigned int socklen_t;$/;"	t	file:
soft_lifetime_addtime_rate	mDNSMacOSX/pfkey.c	/^static u_int soft_lifetime_addtime_rate = PFKEY_SOFT_LIFETIME_RATE;$/;"	v	file:
soft_lifetime_allocations_rate	mDNSMacOSX/pfkey.c	/^static u_int soft_lifetime_allocations_rate = PFKEY_SOFT_LIFETIME_RATE;$/;"	v	file:
soft_lifetime_bytes_rate	mDNSMacOSX/pfkey.c	/^static u_int soft_lifetime_bytes_rate = PFKEY_SOFT_LIFETIME_RATE;$/;"	v	file:
soft_lifetime_usetime_rate	mDNSMacOSX/pfkey.c	/^static u_int soft_lifetime_usetime_rate = PFKEY_SOFT_LIFETIME_RATE;$/;"	v	file:
software	mDNSPosix/Identify.c	/^static char hostname[MAX_ESCAPED_DOMAIN_NAME], hardware[256], software[256];$/;"	v	file:
source	mDNSMacOSX/PreferencePane/DNSServiceDiscoveryPref.h	/^    CFRunLoopSourceRef source;$/;"	m	struct:MyDNSServiceState
sourceAddress	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSAddr sourceAddress;             \/\/ node from which we received this record$/;"	m	struct:CacheRecord_struct
sources	mDNSWindows/Poll.c	/^	GenLinkedList	sources;$/;"	m	struct:Poll_struct	file:
sources	mDNSWindows/Poll.c	/^	PollSource				*sources[ MAXIMUM_WAIT_OBJECTS ];$/;"	m	struct:Worker_struct	file:
spawnSSLHandshake	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void spawnSSLHandshake(TCPSocket* sock)$/;"	f
spsStatusDict	mDNSMacOSX/mDNSMacOSX.c	/^static CFMutableDictionaryRef spsStatusDict = NULL;$/;"	v	file:
src	mDNSShared/dnsextd.h	/^    struct sockaddr_in src;$/;"	m	struct:__anon114	typeref:struct:__anon114::sockaddr_in
srs	mDNSMacOSX/daemon.c	/^    ServiceRecordSet srs;$/;"	m	struct:ServiceInstance	file:
srs	mDNSShared/uds_daemon.c	/^    ServiceRecordSet srs;           \/\/ note -- variable-sized object -- must be last field in struct$/;"	m	struct:service_instance	file:
srv	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataSRV srv;$/;"	m	union:__anon57
srv	mDNSCore/mDNSEmbeddedAPI.h	/^    rdataSRV srv;$/;"	m	union:__anon58
srv	mDNSShared/uds_daemon.c	/^            const ResourceRecord *srv;$/;"	m	struct:request_state::__anon124::__anon131	file:
srv_compare	mDNSCore/dnssec.c	/^mDNSlocal int srv_compare(rdataComp *const r1, rdataComp *const r2)$/;"	f
srvtype	mDNSPosix/NetMonitor.c	/^    domainname srvtype;$/;"	m	struct:ActivityStat_struct	file:
ss	mDNSMacOSX/mDNSMacOSX.h	/^    KQSocketSet ss;     \/\/ First field of KQSocketSet has to be mDNSIPPort -- mDNSCore requires every UDPSocket_struct to begin with mDNSIPPort port$/;"	m	struct:UDPSocket_struct
ss	mDNSMacOSX/mDNSMacOSX.h	/^    KQSocketSet ss;$/;"	m	struct:TCPSocket_struct
ss	mDNSVxWorks/mDNSVxWorks.h	/^    SocketSet ss;$/;"	m	struct:NetworkInterfaceInfoVxWorks
ss_family	mDNSShared/CommonServices.h	487;"	d
ssize_t	mDNSShared/CommonServices.h	/^typedef int ssize_t;$/;"	t
ssize_t	mDNSShared/dnssd_ipc.h	49;"	d
start	mDNSWindows/Poll.c	/^	HANDLE					start;		\/\/ NULL for main worker$/;"	m	struct:Worker_struct	file:
startLLQHandshake	mDNSCore/uDNS.c	/^mDNSexport void startLLQHandshake(mDNS *m, DNSQuestion *q)$/;"	f
startRacoon	mDNSMacOSX/helper.c	/^startRacoon(void)$/;"	f	file:
startRacoonOld	mDNSMacOSX/helper.c	/^startRacoonOld(void)$/;"	f	file:
stat	mDNSPosix/NetMonitor.c	/^    int stat[OP_NumTypes];$/;"	m	struct:ActivityStat_struct	file:
stat	mDNSPosix/NetMonitor.c	/^    unsigned long stat[OP_NumTypes];$/;"	m	struct:__anon19	file:
state	mDNSCore/mDNSEmbeddedAPI.h	/^    LLQ_State state;$/;"	m	struct:DNSQuestion_struct
state	mDNSCore/mDNSEmbeddedAPI.h	/^    regState_t state;           \/\/ Maybe combine this with resrec.RecordType state? Right now it's ambiguous and confusing.$/;"	m	struct:AuthRecord_struct
state	mDNSShared/dnsextd.h	/^    LLQState state;$/;"	m	struct:LLQEntry
statement	mDNSShared/dnsextd_parser.y	/^statement:$/;"	l
statements	mDNSShared/dnsextd_parser.y	/^statements:$/;"	l
stats	mDNSPosix/NetMonitor.c	/^static ActivityStat *stats;$/;"	v	file:
status	mDNSCore/dnssec.h	/^    DNSSECStatus status;            \/\/ status to deliver when done$/;"	m	struct:InsecureContext_struct
status	mDNSPosix/nss_mdns.c	/^    nss_status status;$/;"	m	struct:result_map	file:
stop	mDNSShared/Java/DNSSD.java	/^	public void				stop() { this.HaltOperation(); }$/;"	m	class:AppleService
stop	mDNSShared/Java/DNSSDService.java	/^	void		stop();$/;"	m	interface:DNSSDService
stop	mDNSWindows/Poll.c	/^	HANDLE					stop;		\/\/ NULL for main worker$/;"	m	struct:Worker_struct	file:
stopNow	Clients/dns-sd.c	/^static volatile int stopNow = 0;$/;"	v	file:
str_to_af	mDNSPosix/nss_mdns.c	/^str_to_af (const char * str)$/;"	f
str_to_ns_class	mDNSPosix/nss_mdns.c	/^str_to_ns_class (const char * str)$/;"	f
str_to_ns_type	mDNSPosix/nss_mdns.c	/^str_to_ns_type (const char * str)$/;"	f
strcasecmp	Clients/dns-sd.c	83;"	d	file:
strcasecmp	mDNSMacOSX/LegacyNATTraversal.c	27;"	d	file:
strcasecmp	mDNSShared/dnssd_clientlib.c	42;"	d	file:
strcasecmp	mDNSWindows/PosixCompat.h	64;"	d
string_t	mDNSMacOSX/helpermsg-types.h	/^typedef const char *string_t;$/;"	t
strncasecmp	mDNSMacOSX/LegacyNATTraversal.c	28;"	d	file:
strncasecmp	mDNSShared/dnssd_clientlib.c	41;"	d	file:
strnistr	mDNSWindows/SystemService/Service.c	/^strnistr( const char * string, const char * subString, size_t max )$/;"	f	file:
subtypes	mDNSShared/uds_daemon.c	/^    AuthRecord *subtypes;$/;"	m	struct:service_instance	file:
supported_map	mDNSMacOSX/pfkey.c	/^static int supported_map[] = {$/;"	v	file:
swap16	Clients/dns-sd.c	/^static unsigned short swap16(unsigned short x)$/;"	f	file:
swap16	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu16 swap16(mDNSu16 x)$/;"	f
swap32	Clients/dns-sd.c	/^static unsigned int swap32(unsigned int x) $/;"	f	file:
swap32	mDNSCore/DNSCommon.c	/^mDNSexport mDNSu32 swap32(mDNSu32 x)$/;"	f
swprintf	mDNSWindows/loclibrary.c	41;"	d	file:
swprintf	mDNSWindows/mdnsNSP/mdnsNSP.c	39;"	d	file:
syslog	mDNSShared/dnssd_clientstub.c	/^static void syslog( int priority, const char * message, ...)$/;"	f	file:
sztHostAddress	Clients/PrinterSetupWizard/tcpxcv.h	/^    WCHAR sztHostAddress [MAX_NETWORKNAME2_LEN];$/;"	m	struct:_PORT_DATA_2
sztHostAddress	Clients/PrinterSetupWizard/tcpxcv.h	/^    WCHAR sztHostAddress[MAX_NETWORKNAME_LEN];$/;"	m	struct:_PORT_DATA_1
sztIPAddress	Clients/PrinterSetupWizard/tcpxcv.h	/^    WCHAR sztIPAddress[MAX_IPADDR_STR_LEN];$/;"	m	struct:_PORT_DATA_1
sztPortName	Clients/PrinterSetupWizard/tcpxcv.h	/^    WCHAR sztPortName[MAX_PORTNAME_LEN];$/;"	m	struct:_PORT_DATA_1
sztPortName	Clients/PrinterSetupWizard/tcpxcv.h	/^    WCHAR sztPortName[MAX_PORTNAME_LEN];$/;"	m	struct:_PORT_DATA_2
sztQueue	Clients/PrinterSetupWizard/tcpxcv.h	/^    WCHAR sztQueue[MAX_QUEUENAME_LEN];$/;"	m	struct:_PORT_DATA_1
sztQueue	Clients/PrinterSetupWizard/tcpxcv.h	/^    WCHAR sztQueue[MAX_QUEUENAME_LEN];$/;"	m	struct:_PORT_DATA_2
sztSNMPCommunity	Clients/PrinterSetupWizard/tcpxcv.h	/^    WCHAR sztSNMPCommunity[MAX_SNMP_COMMUNITY_STR_LEN];$/;"	m	struct:_PORT_DATA_1
sztSNMPCommunity	Clients/PrinterSetupWizard/tcpxcv.h	/^    WCHAR sztSNMPCommunity[MAX_SNMP_COMMUNITY_STR_LEN];$/;"	m	struct:_PORT_DATA_2
t_complete	mDNSShared/uds_daemon.c	/^    t_complete,$/;"	e	enum:__anon123	file:
t_error	mDNSShared/uds_daemon.c	/^    t_error,$/;"	e	enum:__anon123	file:
t_morecoming	mDNSShared/uds_daemon.c	/^    t_morecoming,$/;"	e	enum:__anon123	file:
t_terminated	mDNSShared/uds_daemon.c	/^    t_terminated$/;"	e	enum:__anon123	file:
t_uninitialized	mDNSShared/uds_daemon.c	/^    t_uninitialized,$/;"	e	enum:__anon123	file:
table	mDNSShared/dnsextd.h	/^    RRTableElem **table;       \/\/ hashtable for records with leases$/;"	m	struct:__anon116
table_entry_t	mDNSPosix/nss_mdns.c	/^} table_entry_t;$/;"	t	typeref:struct:__anon27	file:
table_index_name	mDNSPosix/nss_mdns.c	/^table_index_name (const table_entry_t table [], int size, const char * str)$/;"	f	file:
table_index_value	mDNSPosix/nss_mdns.c	/^table_index_value (const table_entry_t table [], int size, int n)$/;"	f	file:
tablelock	mDNSShared/dnsextd.h	/^    pthread_mutex_t tablelock; \/\/ mutex for lease table$/;"	m	struct:__anon116
target	mDNSPosix/Identify.c	/^static mDNSAddr lastsrc, hostaddr, target;$/;"	v	file:
targetList	Clients/Java/SimpleChat.java	/^	TargetListModel		targetList;			\/\/ and its list model$/;"	f	class:SimpleChat
targetPicker	Clients/Java/SimpleChat.java	/^	JComboBox			targetPicker;		\/\/ Indicates who we're talking to$/;"	f	class:SimpleChat
task	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    int task;$/;"	m	struct:mDNS_PlatformSupport_struct
taskID	mDNSVxWorks/mDNSVxWorks.h	/^    int taskID;$/;"	m	struct:mDNS_PlatformSupport_struct
taskInitErr	mDNSVxWorks/mDNSVxWorksIPv4Only.h	/^    mStatus taskInitErr;$/;"	m	struct:mDNS_PlatformSupport_struct
tc_state	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 tc_state;$/;"	m	struct:ClientTunnel
tcp	mDNSCore/dnsproxy.c	/^    mDNSBool tcp;                   \/\/ TCP or UDP ?$/;"	m	struct:DNSProxyClient_struct	file:
tcp	mDNSCore/mDNSEmbeddedAPI.h	/^    TCPHeader tcp;$/;"	m	union:__anon49
tcp	mDNSCore/mDNSEmbeddedAPI.h	/^    struct tcpInfo_t *tcp;$/;"	m	struct:AuthRecord_struct	typeref:struct:AuthRecord_struct::tcpInfo_t
tcp	mDNSCore/mDNSEmbeddedAPI.h	/^    struct tcpInfo_t *tcp;$/;"	m	struct:DNSQuestion_struct	typeref:struct:DNSQuestion_struct::tcpInfo_t
tcpAddrInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    tcpLNTInfo tcpAddrInfo;                     \/\/ legacy NAT traversal TCP connection info for external address$/;"	m	struct:mDNS_struct
tcpCallback	mDNSCore/uDNS.c	/^mDNSlocal void tcpCallback(TCPSocket *sock, void *context, mDNSBool ConnectionEstablished, mStatus err)$/;"	f
tcpConnectionCallback	mDNSMacOSX/LegacyNATTraversal.c	/^mDNSlocal void tcpConnectionCallback(TCPSocket *sock, void *context, mDNSBool ConnectionEstablished, mStatus err)$/;"	f
tcpDeviceInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    tcpLNTInfo tcpDeviceInfo;                   \/\/ legacy NAT traversal TCP connection info for device info$/;"	m	struct:mDNS_struct
tcpInfo	mDNSCore/mDNSEmbeddedAPI.h	/^    tcpLNTInfo tcpInfo;                             \/\/ Legacy NAT traversal (UPnP) TCP connection$/;"	m	struct:NATTraversalInfo_struct
tcpInfoUnmapList	mDNSCore/mDNSEmbeddedAPI.h	/^    tcpLNTInfo       *tcpInfoUnmapList;         \/\/ list of pending unmap requests$/;"	m	struct:mDNS_struct
tcpInfo_t	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct tcpInfo_t$/;"	s
tcpInfo_t	mDNSCore/mDNSEmbeddedAPI.h	/^} tcpInfo_t;$/;"	t	typeref:struct:tcpInfo_t
tcpKQSocketCallback	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void tcpKQSocketCallback(__unused int fd, short filter, void *context)$/;"	f
tcpLNTInfo	mDNSCore/mDNSEmbeddedAPI.h	/^typedef struct tcpLNTInfo_struct tcpLNTInfo;$/;"	t	typeref:struct:tcpLNTInfo_struct
tcpLNTInfo_struct	mDNSCore/mDNSEmbeddedAPI.h	/^struct tcpLNTInfo_struct$/;"	s
tcpPorts	mDNSMacOSX/mDNSMacOSX.c	/^    FatPtr tcpPorts;                  \/\/ address of tcp port list (SRV)$/;"	m	struct:__anon154	file:
tcpSrcPort	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSIPPort tcpSrcPort;                  \/\/ Local Port TCP packet received on;need this as tcp struct is disposed$/;"	m	struct:DNSQuestion_struct
tcpsd	mDNSShared/dnsextd.h	/^    int tcpsd;                          \/\/ listening TCP socket for dns requests$/;"	m	struct:__anon116
teardownTunnelRoute	mDNSMacOSX/helper.c	/^teardownTunnelRoute(v6addr_t remote)$/;"	f	file:
terminate	mDNSShared/dnsextd.c	/^static mDNSBool terminate = 0;$/;"	v	file:
terminate	mDNSShared/uds_daemon.c	/^    req_termination_fn terminate;$/;"	m	struct:request_state	file:
terminateWithException	Clients/Java/BrowserApp.java	/^	protected static void	terminateWithException( Exception e)$/;"	m	class:BrowserApp
terminateWithException	Clients/Java/DNSSDUnitTest.java	/^	protected static void	terminateWithException( Exception e)$/;"	m	class:DNSSDUnitTest
terminateWithException	Clients/Java/SimpleChat.java	/^	protected static void	terminateWithException( Exception e)$/;"	m	class:SimpleChat
testTxtRecord	Clients/Java/DNSSDUnitTest.java	/^	public void	testTxtRecord()$/;"	m	class:DNSSDUnitTest
testid	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSOpaque16 testid;$/;"	m	struct:DNSServer
teststate	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 teststate;          \/\/ Have we sent bug-detection query to this server?$/;"	m	struct:DNSServer
text	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^    CString text;$/;"	m	struct:CPrinterSetupWizardSheet::WizardException
text	mDNSMacOS9/Searcher.c	/^    char text[kDNSServiceMaxDomainName];$/;"	m	struct:__anon187	file:
text	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^	std::string		text;$/;"	m	struct:ServiceInstanceInfo
text	mDNSWindows/DNSServiceBrowser/WindowsCE/Sources/BrowserDialog.h	/^			CString		text;$/;"	m	struct:BrowserDialog::BrowserEntry
textAttribs	Clients/Java/SimpleChat.java	/^	SimpleAttributeSet	textAttribs;$/;"	f	class:SimpleChat
textBox2	Clients/SimpleChat.NET/SimpleChat.cs	/^		private System.Windows.Forms.TextBox    textBox2;$/;"	f	class:SimpleChat.NET.SimpleChat	file:
textBox2_TextChanged	Clients/SimpleChat.NET/SimpleChat.cs	/^		private void textBox2_TextChanged(object sender, System.EventArgs e)$/;"	m	class:SimpleChat.NET.SimpleChat	file:
textDoc	Clients/Java/SimpleChat.java	/^	Document			textDoc;			\/\/ Holds all the chat text$/;"	f	class:SimpleChat
theApp	Clients/PrinterSetupWizard/PrinterSetupWizardApp.cpp	/^CPrinterSetupWizardApp theApp;$/;"	v
theApp	mDNSWindows/ControlPanel/ControlPanel.cpp	/^static CCPApp theApp;$/;"	v	file:
theApp	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^static CCPApp theApp;$/;"	v	file:
thread	mDNSWindows/Poll.c	/^	HANDLE					thread;		\/\/ NULL for main worker$/;"	m	struct:Worker_struct	file:
thread_mdns	mDNSPosix/testBonjour.c	/^void * thread_mdns(void *arg)$/;"	f
tid	mDNSShared/dnsextd.h	/^    pthread_t tid;              \/\/ Allow parallel list updates$/;"	m	struct:AnswerListElem
timeOut	Clients/dns-sd.c	/^static volatile int timeOut = LONG_TIME;$/;"	v	file:
time_blocked	mDNSShared/uds_daemon.c	/^    mDNSs32 time_blocked;           \/\/ record time of a blocked client$/;"	m	struct:request_state	file:
timenow	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 timenow;                    \/\/ The time that this particular activation of the mDNS code started$/;"	m	struct:mDNS_struct
timenow_adjust	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 timenow_adjust;             \/\/ Correction applied if we ever discover time went backwards$/;"	m	struct:mDNS_struct
timenow_last	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 timenow_last;               \/\/ The time the last time we ran$/;"	m	struct:mDNS_struct
timeout	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 timeout;            \/\/ timeout value for questions$/;"	m	struct:DNSServer
timeout	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 timeout;            \/\/ timeout value for questions$/;"	m	struct:McastResolver
timer	mDNSMacOSX/mDNSMacOSX.h	/^    dispatch_source_t timer;$/;"	m	struct:mDNS_PlatformSupport_struct
timer_source	Clients/dns-sd.c	/^dispatch_source_t timer_source;$/;"	v
tlsContext	mDNSMacOSX/mDNSMacOSX.h	/^    SSLContextRef tlsContext;$/;"	m	struct:TCPSocket_struct
tlsReadSock	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal OSStatus tlsReadSock(SSLConnectionRef connection, void *data, size_t *dataLength)$/;"	f
tlsSetupSock	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal OSStatus tlsSetupSock(TCPSocket *sock, SSLProtocolSide pside, SSLConnectionType ctype)$/;"	f
tlsWriteSock	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal OSStatus tlsWriteSock(SSLConnectionRef connection, const void *data, size_t *dataLength)$/;"	f
tlssd	mDNSShared/dnsextd.h	/^    int tlssd;                          \/\/ listening TCP socket for private browsing$/;"	m	struct:__anon116
toString	Clients/Java/BrowserApp.java	/^		public String	toString() { return fServiceName; }$/;"	m	class:BrowserListModel.BrowserListElem
toString	Clients/Java/SimpleChat.java	/^	public String	toString() { return fServiceName; }$/;"	m	class:TargetListElem
toString	mDNSShared/Java/TXTRecord.java	/^	public String	toString()$/;"	m	class:TXTRecord
totallen	mDNSShared/uds_daemon.c	/^    mDNSu32 totallen;$/;"	m	struct:reply_state	file:
totalops	mDNSPosix/NetMonitor.c	/^    int totalops;$/;"	m	struct:ActivityStat_struct	file:
totalops	mDNSPosix/NetMonitor.c	/^    unsigned long totalops;$/;"	m	struct:__anon19	file:
transfer_state	mDNSShared/uds_daemon.c	/^} transfer_state;$/;"	t	typeref:enum:__anon123	file:
translate_errno	mDNSShared/DebugServices.h	471;"	d
transportType	mDNSMacOSX/mDNSMacOSX.c	/^    D2DTransportType         transportType;$/;"	m	struct:D2DRecordListElem	file:
triedAllServersOnce	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 triedAllServersOnce;            \/\/ Tried all DNS servers once$/;"	m	struct:DNSQuestion_struct
triggerLabelCount	mDNSCore/dnssec.h	/^    mDNSu8 triggerLabelCount;       \/\/ Label count of the name that triggered the insecure proof$/;"	m	struct:InsecureContext_struct
true	mDNSShared/CommonServices.h	872;"	d
true	mDNSShared/CommonServices.h	886;"	d
ts	mDNSShared/uds_daemon.c	/^    transfer_state ts;$/;"	m	struct:request_state	file:
tsig_compare	mDNSCore/dnssec.c	/^mDNSlocal int tsig_compare(rdataComp *const r1, rdataComp *const r2)$/;"	f
tv_end	mDNSPosix/NetMonitor.c	/^struct timeval tv_start, tv_end, tv_interval;$/;"	v	typeref:struct:
tv_interval	mDNSPosix/NetMonitor.c	/^struct timeval tv_start, tv_end, tv_interval;$/;"	v	typeref:struct:
tv_start	mDNSPosix/NetMonitor.c	/^struct timeval tv_start, tv_end, tv_interval;$/;"	v	typeref:struct:timeval
txt	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    TextRecord txt;$/;"	m	struct:ResolveInfo
txt	mDNSCore/mDNSEmbeddedAPI.h	/^    UTF8str255 txt;$/;"	m	union:__anon57
txt	mDNSCore/mDNSEmbeddedAPI.h	/^    UTF8str255 txt;$/;"	m	union:__anon58
txt	mDNSShared/uds_daemon.c	/^            const ResourceRecord *txt;$/;"	m	struct:request_state::__anon124::__anon131	file:
txtRec	mDNSShared/dnssd_clientlib.c	174;"	d	file:
txt_len	mDNSMacOSX/daemon.c	/^    size_t txt_len;$/;"	m	struct:DNSServiceRegistration	file:
txtdata	mDNSShared/uds_daemon.c	/^            void *txtdata;$/;"	m	struct:request_state::__anon124::__anon126	file:
txtinfo	mDNSMacOSX/daemon.c	/^    unsigned char txtinfo[1024];$/;"	m	struct:DNSServiceRegistration	file:
txtlen	mDNSShared/uds_daemon.c	/^            mDNSu16 txtlen;$/;"	m	struct:request_state::__anon124::__anon126	file:
type	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    char *                      type;$/;"	m	struct:ServiceInfo
type	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    const char *            type;$/;"	m	struct:ServiceHandlerEntry
type	Clients/PrinterSetupWizard/UtilTypes.h	/^    std::string type;$/;"	m	struct:PrinterSetupWizard::Service
type	mDNSCore/CryptoAlg.h	/^    AlgType type;$/;"	m	struct:__anon102
type	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSs32 type;$/;"	m	struct:__anon37
type	mDNSMacOS9/Searcher.c	/^    char type[kDNSServiceMaxDomainName];$/;"	m	struct:__anon187	file:
type	mDNSMacOSX/LegacyNATTraversal.c	/^    char *type;$/;"	m	struct:Property_struct	file:
type	mDNSMacOSX/daemon.c	/^    domainname type;                       \/\/ registration type$/;"	m	struct:DNSServiceBrowser_struct	file:
type	mDNSMacOSX/daemon.c	/^    domainname type;$/;"	m	struct:DNSServiceRegistration	file:
type	mDNSMacOSX/mDNSMacOSX.c	/^    mDNSu16 type;$/;"	m	struct:D2DBrowseListElem	file:
type	mDNSShared/dnsextd.h	/^    DNSZoneSpecType type;$/;"	m	struct:DNSZone
type	mDNSShared/dnsextd.h	/^    mDNSu16 type;$/;"	m	struct:AnswerListElem
type	mDNSShared/uds_daemon.c	/^            domainname type;$/;"	m	struct:request_state::__anon124::__anon126	file:
type	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	std::string				type;$/;"	m	struct:ServiceEventInfo	file:
type	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^	std::string		type;$/;"	m	struct:ServiceInstanceInfo
typeBox	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.ComboBox typeBox;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
typeBox_SelectedIndexChanged	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private void typeBox_SelectedIndexChanged(object sender, System.EventArgs e)$/;"	m	class:DNSServiceBrowser_NET.Form1	file:
typeCovered	Clients/dns-sd.c	/^    unsigned short typeCovered;$/;"	m	struct:__anon170	file:
typeField	Clients/DNSServiceBrowser.NET/DNSServiceBrowser.cs	/^		private System.Windows.Forms.TextBox typeField;$/;"	f	class:DNSServiceBrowser_NET.Form1	file:
type_as_string	mDNSShared/uds_daemon.c	/^            char type_as_string[MAX_ESCAPED_DOMAIN_NAME];$/;"	m	struct:request_state::__anon124::__anon126	file:
typestr	mDNSMacOS9/Responder.c	/^    char typestr[kDNSServiceMaxDomainName];$/;"	m	struct:RegisteredService_struct	file:
u	mDNSCore/mDNSEmbeddedAPI.h	/^    RDataBody u;$/;"	m	struct:__anon59
u	mDNSShared/uds_daemon.c	/^    } u;$/;"	m	struct:request_state	typeref:union:request_state::__anon124	file:
uDNSInterfaceMark	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSInterfaceID uDNSInterfaceMark       = (mDNSInterfaceID)-5;$/;"	v
uDNS_CheckCurrentQuestion	mDNSCore/uDNS.c	/^mDNSexport void uDNS_CheckCurrentQuestion(mDNS *const m)$/;"	f
uDNS_DeleteWABQueries	mDNSCore/uDNS.c	/^mDNSlocal void uDNS_DeleteWABQueries(mDNS *const m, SearchListElem *ptr, int delete)$/;"	f
uDNS_DeregisterRecord	mDNSCore/uDNS.c	/^mDNSexport mStatus uDNS_DeregisterRecord(mDNS *const m, AuthRecord *const rr)$/;"	f
uDNS_GetNextSearchDomain	mDNSCore/uDNS.c	/^mDNSexport domainname  *uDNS_GetNextSearchDomain(mDNS *const m, mDNSInterfaceID InterfaceID, mDNSs8 *searchIndex, mDNSBool ignoreDotLocal)$/;"	f
uDNS_IsActiveQuery	mDNSCore/mDNS.c	126;"	d	file:
uDNS_LLQType	mDNSCore/uDNS.h	/^} uDNS_LLQType;$/;"	t	typeref:enum:__anon28
uDNS_LLQ_Entire	mDNSCore/uDNS.h	/^    uDNS_LLQ_Entire,    \/\/ LLQ initial set of answers: Flush any stale records from cache, but assume TTL is 2 x LLQ refresh interval$/;"	e	enum:__anon28
uDNS_LLQ_Events	mDNSCore/uDNS.h	/^    uDNS_LLQ_Events     \/\/ LLQ event packet: don't flush cache; assume TTL is 2 x LLQ refresh interval$/;"	e	enum:__anon28
uDNS_LLQ_Ignore	mDNSCore/uDNS.h	/^    uDNS_LLQ_Ignore,    \/\/ LLQ initial challenge packet: ignore -- has no useful records for us$/;"	e	enum:__anon28
uDNS_LLQ_Not	mDNSCore/uDNS.h	/^    uDNS_LLQ_Not = 0,   \/\/ Normal uDNS answer: Flush any stale records from cache, and respect record TTL$/;"	e	enum:__anon28
uDNS_ReceiveMsg	mDNSCore/uDNS.c	/^mDNSexport void uDNS_ReceiveMsg(mDNS *const m, DNSMessage *const msg, const mDNSu8 *const end, const mDNSAddr *const srcaddr, const mDNSIPPort srcport)$/;"	f
uDNS_ReceiveNATPMPPacket	mDNSCore/uDNS.c	/^mDNSlocal void uDNS_ReceiveNATPMPPacket(mDNS *m, const mDNSInterfaceID InterfaceID, mDNSu8 *pkt, mDNSu16 len)$/;"	f
uDNS_ReceiveNATPacket	mDNSCore/uDNS.c	/^mDNSexport void uDNS_ReceiveNATPacket(mDNS *m, const mDNSInterfaceID InterfaceID, mDNSu8 *pkt, mDNSu16 len)$/;"	f
uDNS_ReceivePCPPacket	mDNSCore/uDNS.c	/^mDNSlocal void uDNS_ReceivePCPPacket(mDNS *m, const mDNSInterfaceID InterfaceID, mDNSu8 *pkt, mDNSu16 len)$/;"	f
uDNS_ReceiveTestQuestionResponse	mDNSCore/uDNS.c	/^mDNSlocal mDNSBool uDNS_ReceiveTestQuestionResponse(mDNS *const m, DNSMessage *const msg, const mDNSu8 *const end,$/;"	f
uDNS_RequestAddress	mDNSCore/uDNS.c	/^mDNSlocal mStatus uDNS_RequestAddress(mDNS *m)$/;"	f
uDNS_SERVERS_FILE	mDNSPosix/mDNSPosix.h	62;"	d
uDNS_SendNATMsg	mDNSCore/uDNS.c	/^mDNSlocal mStatus uDNS_SendNATMsg(mDNS *m, NATTraversalInfo *info, mDNSBool usePCP)$/;"	f
uDNS_SetupDNSConfig	mDNSCore/mDNS.c	/^mDNSexport mStatus uDNS_SetupDNSConfig(mDNS *const m)$/;"	f
uDNS_SetupDNSConfig	mDNSShared/dnsextd.c	/^mStatus uDNS_SetupDNSConfig( mDNS *const m ) { ( void ) m; return 0; }$/;"	f
uDNS_SetupWABQueries	mDNSCore/uDNS.c	/^mDNSexport void uDNS_SetupWABQueries(mDNS *const m)$/;"	f
uDNS_StartWABQueries	mDNSCore/uDNS.c	/^mDNSexport void uDNS_StartWABQueries(mDNS *const m, int queryType)$/;"	f
uDNS_StopWABQueries	mDNSCore/uDNS.c	/^mDNSexport void uDNS_StopWABQueries(mDNS *const m, int queryType)$/;"	f
uDNS_Tasks	mDNSCore/uDNS.c	/^mDNSexport void uDNS_Tasks(mDNS *const m)$/;"	f
uDNS_UpdateRecord	mDNSCore/uDNS.c	/^mDNSexport mStatus uDNS_UpdateRecord(mDNS *m, AuthRecord *rr)$/;"	f
uDNS_recvLLQResponse	mDNSCore/uDNS.c	/^mDNSexport uDNS_LLQType uDNS_recvLLQResponse(mDNS *const m, const DNSMessage *const msg, const mDNSu8 *const end,$/;"	f
uQueryFlags	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSOpaque16 uQueryFlags     = { { kDNSFlag0_QR_Query    | kDNSFlag0_OP_StdQuery | kDNSFlag0_RD, 0 } };$/;"	v
udns_validatelists	mDNSCore/uDNS.c	/^mDNSexport void udns_validatelists(void *const v)$/;"	f
udp	mDNSCore/mDNSEmbeddedAPI.h	/^    UDPHeader udp;$/;"	m	union:__anon49
udpPorts	mDNSMacOSX/mDNSMacOSX.c	/^    FatPtr udpPorts;                  \/\/ address of udp port list (SRV)$/;"	m	struct:__anon154	file:
udpsd	mDNSShared/dnsextd.h	/^    int udpsd;                          \/\/ listening UDP socket for dns requests$/;"	m	struct:__anon116
udsEventCallback	mDNSShared/uds_daemon.h	/^typedef void (*udsEventCallback)(int fd, short filter, void *context);$/;"	t
udsSupportAddFDToEventLoop	mDNSMacOSX/daemon.c	/^mDNSexport mStatus udsSupportAddFDToEventLoop(int fd, udsEventCallback callback, void *context, void **platform_data)$/;"	f
udsSupportAddFDToEventLoop	mDNSPosix/Bonjour.c	/^mStatus udsSupportAddFDToEventLoop(int fd, udsEventCallback callback, void *context, void **platform_data)$/;"	f
udsSupportAddFDToEventLoop	mDNSPosix/PosixDaemon.c	/^mStatus udsSupportAddFDToEventLoop(int fd, udsEventCallback callback, void *context, void **platform_data)$/;"	f
udsSupportAddFDToEventLoop	mDNSWindows/SystemService/Service.c	/^udsSupportAddFDToEventLoop( SocketRef fd, udsEventCallback callback, void *context, void **platform_data)$/;"	f
udsSupportReadFD	mDNSMacOSX/daemon.c	/^int udsSupportReadFD(dnssd_sock_t fd, char *buf, int len, int flags, void *platform_data)$/;"	f
udsSupportReadFD	mDNSPosix/Bonjour.c	/^int udsSupportReadFD(dnssd_sock_t fd, char *buf, int len, int flags, void *platform_data)$/;"	f
udsSupportReadFD	mDNSPosix/PosixDaemon.c	/^int udsSupportReadFD(dnssd_sock_t fd, char *buf, int len, int flags, void *platform_data)$/;"	f
udsSupportReadFD	mDNSWindows/SystemService/Service.c	/^udsSupportReadFD( SocketRef fd, char *buf, int len, int flags, void *platform_data )$/;"	f
udsSupportRemoveFDFromEventLoop	mDNSMacOSX/daemon.c	/^mDNSexport mStatus udsSupportRemoveFDFromEventLoop(int fd, void *platform_data)     \/\/ Note: This also CLOSES the file descriptor$/;"	f
udsSupportRemoveFDFromEventLoop	mDNSPosix/Bonjour.c	/^mStatus udsSupportRemoveFDFromEventLoop(int fd, void *platform_data)		\/\/ Note: This also CLOSES the file descriptor$/;"	f
udsSupportRemoveFDFromEventLoop	mDNSPosix/PosixDaemon.c	/^mStatus udsSupportRemoveFDFromEventLoop(int fd, void *platform_data)        \/\/ Note: This also CLOSES the file descriptor$/;"	f
udsSupportRemoveFDFromEventLoop	mDNSWindows/SystemService/Service.c	/^udsSupportRemoveFDFromEventLoop( SocketRef fd, void *platform_data)		\/\/ Note: This also CLOSES the socket$/;"	f
uds_listener_skt	mDNSCore/mDNSEmbeddedAPI.h	/^    int             uds_listener_skt;           \/\/ Listening socket for incoming UDS clients$/;"	m	struct:mDNS_struct
uds_socket_setup	mDNSShared/uds_daemon.c	/^mDNSlocal mDNSBool uds_socket_setup(dnssd_sock_t skt)$/;"	f
uds_validatelists	mDNSShared/uds_daemon.c	/^mDNSexport void uds_validatelists(void)$/;"	f
udsserver_automatic_browse_domain_changed	mDNSShared/uds_daemon.c	/^mDNSlocal void udsserver_automatic_browse_domain_changed(const DNameListElem *const d, const mDNSBool add)$/;"	f
udsserver_default_reg_domain_changed	mDNSShared/uds_daemon.c	/^mDNSlocal void udsserver_default_reg_domain_changed(const DNameListElem *const d, const mDNSBool add)$/;"	f
udsserver_exit	mDNSShared/uds_daemon.c	/^mDNSexport int udsserver_exit(void)$/;"	f
udsserver_handle_configchange	mDNSShared/uds_daemon.c	/^mDNSexport void udsserver_handle_configchange(mDNS *const m)$/;"	f
udsserver_idle	mDNSShared/uds_daemon.c	/^mDNSexport mDNSs32 udsserver_idle(mDNSs32 nextevent)$/;"	f
udsserver_info	mDNSShared/uds_daemon.c	/^mDNSexport void udsserver_info(mDNS *const m)$/;"	f
udsserver_init	mDNSShared/uds_daemon.c	/^mDNSexport int udsserver_init(dnssd_sock_t skts[], mDNSu32 count)$/;"	f
uid	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 uid;$/;"	m	struct:DNameListElem
uid	mDNSShared/dnssd_clientstub.c	/^    client_context_t uid;               \/\/ For shared connection requests, each subordinate DNSServiceRef has its own ID,$/;"	m	struct:_DNSServiceRef_t	file:
uid	mDNSShared/dnssd_clientstub.c	/^    client_context_t uid;  \/\/ For demultiplexing multiple DNSServiceRegisterRecord calls$/;"	m	struct:_DNSRecordRef_t	file:
uid	mDNSShared/uds_daemon.c	/^    mDNSu32 uid;$/;"	m	struct:request_state	file:
uint16_t	mDNSShared/CommonServices.h	/^typedef UINT16 uint16_t;$/;"	t
uint16_t	mDNSShared/dns_sd.h	/^typedef UINT16 uint16_t;$/;"	t
uint32_t	mDNSShared/CommonServices.h	/^typedef UINT32 uint32_t;$/;"	t
uint32_t	mDNSShared/dns_sd.h	/^typedef UINT32 uint32_t;$/;"	t
uint64_t	mDNSShared/CommonServices.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	mDNSShared/CommonServices.h	/^typedef unsigned long long uint64_t;$/;"	t
uint8_t	mDNSShared/CommonServices.h	/^typedef UINT8 uint8_t;$/;"	t
uint8_t	mDNSShared/dns_sd.h	/^typedef UINT8 uint8_t;$/;"	t
uint_fast16_t	mDNSShared/CommonServices.h	/^typedef uint16_t uint_fast16_t;$/;"	t
uint_fast32_t	mDNSShared/CommonServices.h	/^typedef uint32_t uint_fast32_t;$/;"	t
uint_fast64_t	mDNSShared/CommonServices.h	/^typedef uint64_t uint_fast64_t;$/;"	t
uint_fast8_t	mDNSShared/CommonServices.h	/^typedef uint8_t uint_fast8_t;$/;"	t
uint_least16_t	mDNSShared/CommonServices.h	/^typedef uint16_t uint_least16_t;$/;"	t
uint_least32_t	mDNSShared/CommonServices.h	/^typedef uint32_t uint_least32_t;$/;"	t
uint_least64_t	mDNSShared/CommonServices.h	/^typedef uint64_t uint_least64_t;$/;"	t
uint_least8_t	mDNSShared/CommonServices.h	/^typedef uint8_t uint_least8_t;$/;"	t
uintptr_t	mDNSShared/CommonServices.h	/^typedef unsigned long int uintptr_t;$/;"	t
unansweredQueries	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 unansweredQueries;               \/\/ The number of unanswered queries to this server$/;"	m	struct:DNSQuestion_struct
unicastSS	mDNSVxWorks/mDNSVxWorks.h	/^    SocketSet unicastSS;$/;"	m	struct:mDNS_PlatformSupport_struct
unicastSock4	mDNSWindows/mDNSWin32.h	/^	struct UDPSocket_struct		unicastSock4;$/;"	m	struct:mDNS_PlatformSupport_struct	typeref:struct:mDNS_PlatformSupport_struct::UDPSocket_struct
unicastSock6	mDNSWindows/mDNSWin32.h	/^	struct UDPSocket_struct		unicastSock6;$/;"	m	struct:mDNS_PlatformSupport_struct	typeref:struct:mDNS_PlatformSupport_struct::UDPSocket_struct
unicastSocket4	mDNSPosix/mDNSPosix.h	/^    int unicastSocket4;$/;"	m	struct:mDNS_PlatformSupport_struct
unicastSocket6	mDNSPosix/mDNSPosix.h	/^    int unicastSocket6;$/;"	m	struct:mDNS_PlatformSupport_struct
unlink	mDNSShared/dnssd_ipc.h	51;"	d
unlink_and_free_service_instance	mDNSShared/uds_daemon.c	/^mDNSlocal void unlink_and_free_service_instance(service_instance *srv)$/;"	f
unpause_idle_timer	mDNSMacOSX/helper-main.c	/^void unpause_idle_timer(void)$/;"	f
unresponsiveness_reports	mDNSShared/uds_daemon.c	/^    int unresponsiveness_reports;$/;"	m	struct:request_state	file:
unsigned_long_long_compat	mDNSShared/CommonServices.h	/^typedef unsigned __int64 unsigned_long_long_compat;$/;"	t
unsigned_long_long_compat	mDNSShared/CommonServices.h	/^typedef unsigned long long unsigned_long_long_compat;$/;"	t
update	mDNSShared/Java/DNSRecord.java	/^	void			update( int flags, byte[] rData, int ttl)$/;"	m	interface:DNSRecord
update	mDNSShared/Java/DNSSD.java	/^	public void			update( int flags, byte[] rData, int ttl)$/;"	m	class:AppleDNSRecord
updateError	mDNSCore/mDNSEmbeddedAPI.h	/^    mStatus updateError;        \/\/ Record update resulted in Error ?$/;"	m	struct:AuthRecord_struct
updateIntID	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSOpaque64 updateIntID;   \/\/ Interface IDs (one bit per interface index)to which updates have been sent$/;"	m	struct:AuthRecord_struct
updateKeys	mDNSShared/dnsextd.h	/^    DomainAuthInfo      *   updateKeys; \/\/ linked list of keys for signing deletion updates$/;"	m	struct:DNSZone
update_callback	mDNSShared/uds_daemon.c	/^mDNSlocal void update_callback(mDNS *const m, AuthRecord *const rr, RData *oldrd, mDNSu16 oldrdlen)$/;"	f
update_idle_timer	mDNSMacOSX/helper-main.c	/^void update_idle_timer(void)$/;"	f
update_notification	mDNSMacOSX/helper.c	/^static void update_notification(void)$/;"	f	file:
update_record	mDNSShared/uds_daemon.c	/^mDNSlocal mStatus update_record(AuthRecord *rr, mDNSu16 rdlen, const char *rdata, mDNSu32 ttl, const mDNSBool *const external_advertise)$/;"	f
update_record_request	mDNSShared/dnssd_ipc.h	/^    update_record_request,$/;"	e	enum:__anon109
updateid	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSOpaque16 updateid;      \/\/ Identifier to match update request and response -- also used when transferring records to Sleep Proxy$/;"	m	struct:AuthRecord_struct
updatetest	Clients/dns-sd.c	/^static char updatetest[3] = "\\002AA";$/;"	v	file:
urlScheme	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    const char *            urlScheme;$/;"	m	struct:ServiceHandlerEntry
urlScheme	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	const char *		urlScheme;$/;"	m	struct:KnownServiceEntry	file:
urlScheme	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.h	/^	std::string		urlScheme;$/;"	m	struct:ServiceTypeInfo
usb_MDL	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString usb_MDL;$/;"	m	struct:PrinterSetupWizard::Queue
usb_MFG	Clients/PrinterSetupWizard/UtilTypes.h	/^    CString usb_MFG;$/;"	m	struct:PrinterSetupWizard::Queue
useText	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^	bool				useText;$/;"	m	struct:KnownServiceEntry	file:
uselease	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSBool uselease;          \/\/ dynamic update contains (should contain) lease option$/;"	m	struct:AuthRecord_struct
userCallback	mDNSWindows/mDNSWin32.h	/^	TCPUserCallback				userCallback;$/;"	m	struct:TCPSocket_struct
userContext	mDNSWindows/mDNSWin32.h	/^	void					*	userContext;$/;"	m	struct:TCPSocket_struct
userHostLabel	mDNSVxWorks/mDNSVxWorks.h	/^    domainlabel userHostLabel;$/;"	m	struct:mDNS_PlatformSupport_struct
userNiceLabel	mDNSVxWorks/mDNSVxWorks.h	/^    domainlabel userNiceLabel;$/;"	m	struct:mDNS_PlatformSupport_struct
usercompname	mDNSMacOSX/helper.c	/^char usercompname[MAX_DOMAIN_LABEL+1] = {0}; \/\/ the last computer name the user saw$/;"	v
userhostlabel	mDNSMacOSX/mDNSMacOSX.h	/^    domainlabel userhostlabel;                  \/\/ The hostlabel as it was set in System Preferences the last time we looked$/;"	m	struct:mDNS_PlatformSupport_struct
userhostname	mDNSMacOSX/helper.c	/^char userhostname[MAX_DOMAIN_LABEL+1] = {0}; \/\/ the last local host name the user saw$/;"	v
usernicelabel	mDNSMacOSX/mDNSMacOSX.h	/^    domainlabel usernicelabel;                  \/\/ The nicelabel as it was set in System Preferences the last time we looked$/;"	m	struct:mDNS_PlatformSupport_struct
usleep	mDNSShared/uds_daemon.c	20;"	d	file:
uuid	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8  uuid[UUID_SIZE];                \/\/ Unique ID of the client that is requesting the question (valid only if pid is zero)$/;"	m	struct:DNSQuestion_struct
uuid	mDNSShared/uds_daemon.c	/^    char uuid[UUID_SIZE];$/;"	m	struct:request_state	file:
v4	mDNSCore/mDNSEmbeddedAPI.h	/^    IPv4Header v4;$/;"	m	union:__anon46
v4	mDNSCore/mDNSEmbeddedAPI.h	/^    union { mDNSv6Addr v6; mDNSv4Addr v4; } ip;$/;"	m	union:__anon37::__anon38
v4Requester	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv4Addr v4Requester;             \/\/ Recent v4 query for this record, or all-ones if more than one recent query$/;"	m	struct:AuthRecord_struct
v4addr_t	mDNSMacOSX/helpermsg-types.h	/^typedef uint8_t v4addr_t [ 4];$/;"	t
v4addr_to_string	mDNSMacOSX/helper.c	/^v4addr_to_string(v4addr_t addr, char *buf, size_t buflen)$/;"	f	file:
v4ans	mDNSShared/uds_daemon.c	/^            mDNSu8 v4ans;$/;"	m	struct:request_state::__anon124::__anon127	file:
v4answers	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSu8 v4answers;                  \/\/ non-zero if we are receiving answers$/;"	m	struct:mDNS_PlatformSupport_struct
v6	mDNSCore/mDNSEmbeddedAPI.h	/^    IPv6Header v6;$/;"	m	union:__anon46
v6	mDNSCore/mDNSEmbeddedAPI.h	/^    union { mDNSv6Addr v6; mDNSv4Addr v4; } ip;$/;"	m	union:__anon37::__anon38
v6Requester	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSv6Addr v6Requester;             \/\/ Recent v6 query for this record, or all-ones if more than one recent query$/;"	m	struct:AuthRecord_struct
v6addr_t	mDNSMacOSX/helpermsg-types.h	/^typedef uint8_t v6addr_t [16];$/;"	t
v6addr_to_string	mDNSMacOSX/helper.c	/^v6addr_to_string(v6addr_t addr, char *buf, size_t buflen)$/;"	f	file:
v6ans	mDNSShared/uds_daemon.c	/^            mDNSu8 v6ans;$/;"	m	struct:request_state::__anon124::__anon127	file:
v6answers	mDNSMacOSX/mDNSMacOSX.h	/^    mDNSu8 v6answers;                  \/\/ for A\/AAAA from external DNS servers$/;"	m	struct:mDNS_PlatformSupport_struct
va_arg	mDNSCore/mDNSEmbeddedAPI.h	64;"	d
va_end	mDNSCore/mDNSEmbeddedAPI.h	63;"	d
va_list	mDNSCore/mDNSEmbeddedAPI.h	61;"	d
va_start	mDNSCore/mDNSEmbeddedAPI.h	62;"	d
val	mDNSMacOS9/mDNSMacOS9.h	/^typedef struct { TOptionHeader h; UInt8 val; } TSetByteOption;$/;"	m	struct:__anon178
validDNSServers	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSOpaque64 validDNSServers;           \/\/ Valid DNSServers for this question$/;"	m	struct:DNSQuestion_struct
validFrom	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 validFrom;$/;"	m	struct:TrustAnchor
validUUID	mDNSShared/uds_daemon.c	/^    mDNSBool validUUID;$/;"	m	struct:request_state	file:
validUntil	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu32 validUntil; $/;"	m	struct:TrustAnchor
validatelists	mDNSMacOSX/daemon.c	/^mDNSlocal void validatelists(mDNS *const m)$/;"	f
validator	mDNSShared/dnssd_clientstub.c	/^    dnssd_sock_t validator;             \/\/ Used to detect memory corruption, double disposals, etc.$/;"	m	struct:_DNSServiceRef_t	file:
value	mDNSMacOSX/LegacyNATTraversal.c	/^    char *value;$/;"	m	struct:Property_struct	file:
value	mDNSPosix/nss_mdns.c	/^    int value;$/;"	m	struct:__anon27	file:
valueChanged	Clients/Java/BrowserApp.java	/^	public void valueChanged( ListSelectionEvent e)$/;"	m	class:BrowserApp
verbose	mDNSShared/dnsextd.c	/^static mDNSBool verbose = 0;$/;"	v	file:
verbosedebugf	mDNSCore/mDNSDebug.h	133;"	d
verbosedebugf	mDNSCore/mDNSDebug.h	136;"	d
verbosedebugf_	mDNSShared/mDNSDebug.c	/^mDNSexport void verbosedebugf_(const char *format, ...)$/;"	f
verbosedebugf_	mDNSVxWorks/mDNSVxWorks.c	/^mDNSexport void verbosedebugf_( const char *inFormat, ... )$/;"	f
verbosedebugf_	mDNSVxWorks/mDNSVxWorksIPv4Only.c	/^mDNSexport void verbosedebugf_( const char *format, ... )$/;"	f
verbosedebugf_	mDNSWindows/mDNSWin32.c	/^mDNSexport void	verbosedebugf_( const char *inFormat, ... )$/;"	f
vers	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 vers;$/;"	m	struct:__anon53
vers	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu8 vers;            \/\/ Version number of this Owner OPT record$/;"	m	struct:__anon54
vpnctl_hdr	mDNSMacOSX/helper.c	/^} vpnctl_hdr;$/;"	t	typeref:struct:vpnctl_hdr_struct	file:
vpnctl_hdr_struct	mDNSMacOSX/helper.c	/^typedef struct vpnctl_hdr_struct$/;"	s	file:
w	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[ 8]; mDNSu16 w[4]; mDNSu32 l[2]; } mDNSOpaque64;$/;"	m	union:__anon33
w	mDNSCore/mDNSEmbeddedAPI.h	/^typedef       union { mDNSu8 b[16]; mDNSu16 w[8]; mDNSu32 l[4]; } mDNSOpaque128;$/;"	m	union:__anon34
wLangID	mDNSWindows/loclibrary.c	/^static LANGID wLangID = (LANGID) -1;$/;"	v	file:
waitCount	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	DWORD				waitCount;$/;"	m	struct:Query	file:
waitForEnd	Clients/Java/DNSSDUnitTest.java	/^	protected synchronized void waitForEnd()$/;"	m	class:DNSSDUnitTest
waitHandles	mDNSWindows/mdnsNSP/mdnsNSP.c	/^	HANDLE				waitHandles[ 3 ];$/;"	m	struct:Query	file:
wake	mDNSMacOS9/mDNSMacOS9.c	/^long sleep, wake, mode;$/;"	v
wakeup	mDNSWindows/Poll.c	/^	HANDLE			wakeup;$/;"	m	struct:Poll_struct	file:
wildcardName	mDNSCore/dnssec.h	/^    domainname *wildcardName;       \/\/ set if the answer is wildcard expanded$/;"	m	struct:DNSSECVerifier_struct
win32_if_indextoname	mDNSShared/Java/JNISupport.c	/^win32_if_indextoname( DWORD ifIndex, char * nameBuff)$/;"	f	file:
win32_if_nametoindex	mDNSShared/Java/JNISupport.c	/^win32_if_nametoindex( const char * nameStr )$/;"	f	file:
win32_strerror	mDNSShared/dnssd_ipc.c	/^char *win32_strerror(int inErrorCode)$/;"	f
window	Clients/PrinterSetupWizard/UtilTypes.h	/^    CPrinterSetupWizardSheet    *   window;$/;"	m	struct:PrinterSetupWizard::Printer
window	mDNSCore/mDNSEmbeddedAPI.h	/^    mDNSu16 window;$/;"	m	struct:__anon47
wmain	mDNSWindows/SystemService/main.c	/^int __cdecl wmain( int argc, wchar_t * argv[] )$/;"	f
worker	mDNSWindows/Poll.c	/^	struct Worker_struct		*worker;$/;"	m	struct:PollSource_struct	typeref:struct:PollSource_struct::Worker_struct	file:
workerHandles	mDNSWindows/Poll.c	/^	HANDLE			workerHandles[ MAXIMUM_WAIT_OBJECTS ];$/;"	m	struct:Poll_struct	file:
workers	mDNSWindows/Poll.c	/^	GenLinkedList	workers;$/;"	m	struct:Poll_struct	file:
writeSource	mDNSMacOSX/mDNSMacOSX.h	/^    dispatch_source_t writeSource;$/;"	m	struct:__anon144
write_all	mDNSShared/dnssd_clientstub.c	/^static int write_all(dnssd_sock_t sd, char *buf, size_t len)$/;"	f	file:
xD2DAddToCache	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void xD2DAddToCache(mDNS *const m, D2DStatus result, D2DServiceInstance instanceHandle, D2DTransportType transportType, const Byte *key, size_t keySize, const Byte *value, size_t valueSize)$/;"	f
xD2DClearCache	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void xD2DClearCache(const domainname *regType, DNS_TypeValues qtype)$/;"	f
xD2DFindInList	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal D2DRecordListElem * xD2DFindInList(mDNS *const m, const Byte *const key, const size_t keySize, const Byte *const value, const size_t valueSize)$/;"	f
xD2DInterfaceToTransportType	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal D2DTransportType xD2DInterfaceToTransportType(mDNSInterfaceID InterfaceID, DNSServiceFlags flags, D2DTransportType * excludedTransportType)$/;"	f
xD2DParse	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal mStatus xD2DParse(mDNS *const m, const mDNSu8 * const lhs, const mDNSu16 lhs_len, const mDNSu8 * const rhs, const mDNSu16 rhs_len, AuthRecord *rr)$/;"	f
xD2DReleaseHappened	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void xD2DReleaseHappened(mDNS *const m, D2DStatus result, D2DServiceInstance instanceHandle, D2DTransportType transportType, const Byte *key, size_t keySize, const Byte *value, size_t valueSize)$/;"	f
xD2DRemoveFromCache	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void xD2DRemoveFromCache(mDNS *const m, D2DStatus result, D2DServiceInstance instanceHandle, D2DTransportType transportType, const Byte *key, size_t keySize, const Byte *value, size_t valueSize)$/;"	f
xD2DRetainHappened	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void xD2DRetainHappened(mDNS *const m, D2DStatus result, D2DServiceInstance instanceHandle, D2DTransportType transportType, const Byte *key, size_t keySize, const Byte *value, size_t valueSize)$/;"	f
xD2DServiceCallback	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void xD2DServiceCallback(D2DServiceEvent event, D2DStatus result, D2DServiceInstance instanceHandle, D2DTransportType transportType, const Byte *key, size_t keySize, const Byte *value, size_t valueSize, void *userData)$/;"	f
xD2DServiceResolved	mDNSMacOSX/mDNSMacOSX.c	/^mDNSlocal void xD2DServiceResolved(mDNS *const m, D2DStatus result, D2DServiceInstance instanceHandle, D2DTransportType transportType, const Byte *key, size_t keySize, const Byte *value, size_t valueSize)$/;"	f
xOTStackIsLoading	mDNSMacOS9/mDNSMacOS9.c	/^    xOTStackIsLoading   = 0x27000001,   \/* Sent before Open Transport attempts to load the TCP\/IP protocol stack.*\/$/;"	e	enum:__anon175	file:
xOTStackIsUnloading	mDNSMacOS9/mDNSMacOS9.c	/^    xOTStackIsUnloading = 0x27000003    \/* Sent before Open Transport unloads the TCP\/IP stack.*\/$/;"	e	enum:__anon175	file:
xOTStackWasLoaded	mDNSMacOS9/mDNSMacOS9.c	/^    xOTStackWasLoaded   = 0x27000002,   \/* Sent after the TCP\/IP stack has been successfully loaded.*\/$/;"	e	enum:__anon175	file:
xpc_server_init	mDNSMacOSX/Private/xpc_services.c	/^mDNSexport void xpc_server_init()$/;"	f
xpcserver_info	mDNSMacOSX/Private/xpc_services.c	/^mDNSexport void xpcserver_info(mDNS *const m)$/;"	f
zeroAddr	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSAddr zeroAddr          = { mDNSAddrType_None, {{{ 0 }}} };$/;"	v
zeroEthAddr	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSEthAddr zeroEthAddr       = { { 0 } };$/;"	v
zeroID	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSOpaque16 zeroID          = { { 0, 0 } };$/;"	v
zeroIPPort	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSIPPort zeroIPPort        = { { 0 } };$/;"	v
zeroOpaque64	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSOpaque64 zeroOpaque64    = { { 0 } };$/;"	v
zeroOwner	mDNSCore/DNSCommon.c	/^mDNSexport const OwnerOptData zeroOwner         = { 0, 0, { { 0 } }, { { 0 } }, { { 0 } } };$/;"	v
zeroPad	mDNSCore/DNSCommon.c	/^    unsigned zeroPad : 1;$/;"	m	struct:mDNSprintf_format	file:
zeroTNetbuf	mDNSMacOS9/mDNSMacOS9.c	/^static const TNetbuf zeroTNetbuf = { 0 };$/;"	v	file:
zerov4Addr	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSv4Addr zerov4Addr        = { { 0 } };$/;"	v
zerov6Addr	mDNSCore/DNSCommon.c	/^mDNSexport const mDNSv6Addr zerov6Addr        = { { 0 } };$/;"	v
zone	mDNSCore/mDNSEmbeddedAPI.h	/^    const domainname *zone;     \/\/ the zone that is updated$/;"	m	struct:AuthRecord_struct
zone	mDNSCore/mDNSEmbeddedAPI.h	/^    domainname zone;$/;"	m	struct:TrustAnchor
zone	mDNSShared/dnsextd.h	/^    DNSZone * zone;$/;"	m	struct:__anon114
zone	mDNSShared/dnsextd.h	/^    domainname zone;          \/\/ from zone field of update message$/;"	m	struct:RRTableElem
zone_set	mDNSShared/dnsextd_parser.y	/^zone_set:$/;"	l
zonecontent	mDNSShared/dnsextd_parser.y	/^zonecontent:$/;"	l
zonedata_browse	Clients/dns-sd.c	/^static void DNSSD_API zonedata_browse(DNSServiceRef sdref, const DNSServiceFlags flags, uint32_t ifIndex, DNSServiceErrorType errorCode,$/;"	f	file:
zonedata_resolve	Clients/dns-sd.c	/^static void DNSSD_API zonedata_resolve(DNSServiceRef sdref, const DNSServiceFlags flags, uint32_t ifIndex, DNSServiceErrorType errorCode,$/;"	f	file:
zones	mDNSShared/dnsextd.h	/^    DNSZone         *   zones;$/;"	m	struct:__anon116
zonestatement	mDNSShared/dnsextd_parser.y	/^zonestatement:$/;"	l
zonestatements	mDNSShared/dnsextd_parser.y	/^zonestatements:$/;"	l
~CAbout	Clients/ExplorerPlugin/About.cpp	/^CAbout::~CAbout()$/;"	f	class:CAbout
~CAbout	Clients/PrinterSetupWizard/About.cpp	/^CAbout::~CAbout()$/;"	f	class:CAbout
~CAddBrowseDomain	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CAddBrowseDomain::~CAddBrowseDomain()$/;"	f	class:CAddBrowseDomain
~CBrowsingPage	mDNSWindows/ControlPanel/BrowsingPage.cpp	/^CBrowsingPage::~CBrowsingPage()$/;"	f	class:CBrowsingPage
~CCPApp	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApp::~CCPApp()$/;"	f	class:CCPApp
~CCPApp	mDNSWindows/ControlPanel/ControlPanelExe.cpp	/^CCPApp::~CCPApp()$/;"	f	class:CCPApp
~CCPApplet	mDNSWindows/ControlPanel/ControlPanel.cpp	/^CCPApplet::~CCPApplet()$/;"	f	class:CCPApplet
~CConfigPropertySheet	mDNSWindows/ControlPanel/ConfigPropertySheet.cpp	/^CConfigPropertySheet::~CConfigPropertySheet()$/;"	f	class:CConfigPropertySheet
~CDNSSDService	Clients/FirefoxExtension/CDNSSDService.cpp	/^CDNSSDService::~CDNSSDService()$/;"	f	class:CDNSSDService
~CExplorerPluginApp	Clients/ExplorerPlugin/ExplorerPlugin.cpp	/^CExplorerPluginApp::~CExplorerPluginApp()$/;"	f	class:CExplorerPluginApp
~CFirstPage	Clients/PrinterSetupWizard/FirstPage.cpp	/^CFirstPage::~CFirstPage()$/;"	f	class:CFirstPage
~CFourthPage	Clients/PrinterSetupWizard/FourthPage.cpp	/^CFourthPage::~CFourthPage()$/;"	f	class:CFourthPage
~CFourthPage	mDNSWindows/ControlPanel/FourthPage.cpp	/^CFourthPage::~CFourthPage()$/;"	f	class:CFourthPage
~CPowerManagementWarning	mDNSWindows/ControlPanel/ServicesPage.cpp	/^CPowerManagementWarning::~CPowerManagementWarning()$/;"	f	class:CPowerManagementWarning
~CPrinterSetupWizardSheet	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.cpp	/^CPrinterSetupWizardSheet::~CPrinterSetupWizardSheet()$/;"	f	class:CPrinterSetupWizardSheet
~CRegistrationPage	mDNSWindows/ControlPanel/RegistrationPage.cpp	/^CRegistrationPage::~CRegistrationPage()$/;"	f	class:CRegistrationPage
~CSecondPage	Clients/PrinterSetupWizard/SecondPage.cpp	/^CSecondPage::~CSecondPage()$/;"	f	class:CSecondPage
~CSecondPage	mDNSWindows/ControlPanel/SecondPage.cpp	/^CSecondPage::~CSecondPage()$/;"	f	class:CSecondPage
~CServicesPage	mDNSWindows/ControlPanel/ServicesPage.cpp	/^CServicesPage::~CServicesPage()$/;"	f	class:CServicesPage
~CSharedSecret	mDNSWindows/ControlPanel/SharedSecret.cpp	/^CSharedSecret::~CSharedSecret()$/;"	f	class:CSharedSecret
~CThirdPage	Clients/PrinterSetupWizard/ThirdPage.cpp	/^CThirdPage::~CThirdPage()$/;"	f	class:CThirdPage
~CUPSLibrary	Clients/PrinterSetupWizard/PrinterSetupWizardSheet.h	/^~CUPSLibrary()$/;"	f	class:CPrinterSetupWizardSheet::CUPSLibrary
~ChooserDialog	mDNSWindows/DNSServiceBrowser/Windows/Sources/ChooserDialog.cpp	/^ChooserDialog::~ChooserDialog( void )$/;"	f	class:ChooserDialog
~ClassFactory	Clients/ExplorerPlugin/ClassFactory.cpp	/^ClassFactory::~ClassFactory( void )$/;"	f	class:ClassFactory
~DLLStub	mDNSWindows/DLLStub/DLLStub.cpp	/^DLLStub::~DLLStub()$/;"	f	class:DLLStub
~ExplorerBar	Clients/ExplorerPlugin/ExplorerBar.cpp	/^ExplorerBar::~ExplorerBar( void )$/;"	f	class:ExplorerBar
~ExplorerBarWindow	Clients/ExplorerPlugin/ExplorerBarWindow.cpp	/^ExplorerBarWindow::~ExplorerBarWindow( void )$/;"	f	class:ExplorerBarWindow
~Logger	Clients/PrinterSetupWizard/Logger.cpp	/^Logger::~Logger()$/;"	f	class:Logger
~PString	mDNSWindows/DLL.NET/PString.h	/^		~PString()$/;"	f	class:Apple::PString
~Printer	Clients/PrinterSetupWizard/UtilTypes.h	/^Printer::~Printer()$/;"	f	class:PrinterSetupWizard::Printer
~Queue	Clients/PrinterSetupWizard/UtilTypes.h	/^Queue::~Queue()$/;"	f	class:PrinterSetupWizard::Queue
~RecordRef	mDNSWindows/DLL.NET/dnssd_NET.h	/^			~RecordRef()$/;"	f	class:Apple::DNSSD::RecordRef
~Service	Clients/PrinterSetupWizard/UtilTypes.h	/^Service::~Service()$/;"	f	class:PrinterSetupWizard::Service
~ServiceHandlerEntry	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    ~ServiceHandlerEntry( void )$/;"	f	struct:ServiceHandlerEntry
~ServiceInfo	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    ~ServiceInfo( void )$/;"	f	struct:ServiceInfo
~ServiceRef	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::~ServiceRef()$/;"	f	class:ServiceRef
~ServiceRefImpl	mDNSWindows/DLL.NET/dnssd_NET.cpp	/^ServiceRef::ServiceRefImpl::~ServiceRefImpl()$/;"	f	class:ServiceRef::ServiceRefImpl
~TextRecord	Clients/ExplorerPlugin/ExplorerBarWindow.h	/^    ~TextRecord( void )$/;"	f	struct:TextRecord
~TextRecord	mDNSWindows/DLL.NET/dnssd_NET.h	/^			~TextRecord()$/;"	f	class:Apple::DNSSD::TextRecord
